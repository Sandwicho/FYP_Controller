
Hexapod_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000af24  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040af24  0040af24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000894  20400000  0040af2c  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bc28  20400894  0040b7c0  00018894  2**2
                  ALLOC
  4 .stack        00002004  2040c4bc  004173e8  00018894  2**0
                  ALLOC
  5 .heap         00000200  2040e4c0  004193ec  00018894  2**0
                  ALLOC
  6 .ARM.attributes 00000033  00000000  00000000  00018894  2**0
                  CONTENTS, READONLY
  7 .comment      0000005b  00000000  00000000  000188c7  2**0
                  CONTENTS, READONLY
  8 .debug_info   000156db  00000000  00000000  00018922  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000372e  00000000  00000000  0002dffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f90  00000000  00000000  0003172b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c71c  00000000  00000000  000326bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000137f4  00000000  00000000  0003edd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00081d72  00000000  00000000  000525cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ad80  00000000  00000000  000d433d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001038  00000000  00000000  000df0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000032d0  00000000  00000000  000e00f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040e4c0 	.word	0x2040e4c0
  400004:	00402ad9 	.word	0x00402ad9
  400008:	00402ad5 	.word	0x00402ad5
  40000c:	00402ad5 	.word	0x00402ad5
  400010:	00402ad5 	.word	0x00402ad5
  400014:	00402ad5 	.word	0x00402ad5
  400018:	00402ad5 	.word	0x00402ad5
	...
  40002c:	004005e5 	.word	0x004005e5
  400030:	00402ad5 	.word	0x00402ad5
  400034:	00000000 	.word	0x00000000
  400038:	00400685 	.word	0x00400685
  40003c:	004006ed 	.word	0x004006ed
  400040:	00402ad5 	.word	0x00402ad5
  400044:	00402ad5 	.word	0x00402ad5
  400048:	00402ad5 	.word	0x00402ad5
  40004c:	00402ad5 	.word	0x00402ad5
  400050:	00402ad5 	.word	0x00402ad5
  400054:	00402ad5 	.word	0x00402ad5
  400058:	00402ad5 	.word	0x00402ad5
  40005c:	00402ad5 	.word	0x00402ad5
  400060:	00402ad5 	.word	0x00402ad5
  400064:	00000000 	.word	0x00000000
  400068:	004033f5 	.word	0x004033f5
  40006c:	00400395 	.word	0x00400395
  400070:	00000000 	.word	0x00000000
  400074:	00402ad5 	.word	0x00402ad5
  400078:	00402ad5 	.word	0x00402ad5
  40007c:	00402ad5 	.word	0x00402ad5
  400080:	004003a9 	.word	0x004003a9
  400084:	00000000 	.word	0x00000000
  400088:	00402ad5 	.word	0x00402ad5
  40008c:	00402ad5 	.word	0x00402ad5
  400090:	00402ad5 	.word	0x00402ad5
  400094:	00402ad5 	.word	0x00402ad5
  400098:	00402ad5 	.word	0x00402ad5
  40009c:	00402ad5 	.word	0x00402ad5
  4000a0:	00402ad5 	.word	0x00402ad5
  4000a4:	00402ad5 	.word	0x00402ad5
	...
  4000b4:	00402445 	.word	0x00402445
  4000b8:	00000000 	.word	0x00000000
  4000bc:	00402ad5 	.word	0x00402ad5
  4000c0:	00402ad5 	.word	0x00402ad5
  4000c4:	00402ad5 	.word	0x00402ad5
  4000c8:	00402ad5 	.word	0x00402ad5
	...
  4000e0:	00402459 	.word	0x00402459
  4000e4:	00402ad5 	.word	0x00402ad5
  4000e8:	00402ad5 	.word	0x00402ad5
  4000ec:	00402ad5 	.word	0x00402ad5
  4000f0:	00402ad5 	.word	0x00402ad5
  4000f4:	00402ad5 	.word	0x00402ad5
  4000f8:	00402ad5 	.word	0x00402ad5
	...
  400108:	00402ad5 	.word	0x00402ad5
  40010c:	00402ad5 	.word	0x00402ad5
  400110:	00402ad5 	.word	0x00402ad5
	...
  400120:	00402ad5 	.word	0x00402ad5
  400124:	00402ad5 	.word	0x00402ad5
  400128:	00402ad5 	.word	0x00402ad5
  40012c:	00402ad5 	.word	0x00402ad5
  400130:	00402ad5 	.word	0x00402ad5
	...
  40013c:	00402ad5 	.word	0x00402ad5

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400894 	.word	0x20400894
  40015c:	00000000 	.word	0x00000000
  400160:	0040af2c 	.word	0x0040af2c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040af2c 	.word	0x0040af2c
  400190:	20400898 	.word	0x20400898
  400194:	0040af2c 	.word	0x0040af2c
  400198:	00000000 	.word	0x00000000

0040019c <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  40019c:	b510      	push	{r4, lr}
  40019e:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <spi_master_init+0x48>)
  4001a2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4001a4:	2380      	movs	r3, #128	; 0x80
  4001a6:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4001a8:	6863      	ldr	r3, [r4, #4]
  4001aa:	f043 0301 	orr.w	r3, r3, #1
  4001ae:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4001b0:	6863      	ldr	r3, [r4, #4]
  4001b2:	f043 0310 	orr.w	r3, r3, #16
  4001b6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4001b8:	6863      	ldr	r3, [r4, #4]
  4001ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4001be:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4001c0:	4620      	mov	r0, r4
  4001c2:	2100      	movs	r1, #0
  4001c4:	4b08      	ldr	r3, [pc, #32]	; (4001e8 <spi_master_init+0x4c>)
  4001c6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4001c8:	6863      	ldr	r3, [r4, #4]
  4001ca:	f023 0302 	bic.w	r3, r3, #2
  4001ce:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4001d0:	6863      	ldr	r3, [r4, #4]
  4001d2:	f023 0304 	bic.w	r3, r3, #4
  4001d6:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4001d8:	4620      	mov	r0, r4
  4001da:	2100      	movs	r1, #0
  4001dc:	4b03      	ldr	r3, [pc, #12]	; (4001ec <spi_master_init+0x50>)
  4001de:	4798      	blx	r3
  4001e0:	bd10      	pop	{r4, pc}
  4001e2:	bf00      	nop
  4001e4:	004003bd 	.word	0x004003bd
  4001e8:	004003e9 	.word	0x004003e9
  4001ec:	00400401 	.word	0x00400401

004001f0 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4001f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4001f2:	4605      	mov	r5, r0
  4001f4:	460c      	mov	r4, r1
  4001f6:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  4001f8:	4618      	mov	r0, r3
  4001fa:	4914      	ldr	r1, [pc, #80]	; (40024c <spi_master_setup_device+0x5c>)
  4001fc:	4b14      	ldr	r3, [pc, #80]	; (400250 <spi_master_setup_device+0x60>)
  4001fe:	4798      	blx	r3
  400200:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400202:	4628      	mov	r0, r5
  400204:	6821      	ldr	r1, [r4, #0]
  400206:	2200      	movs	r2, #0
  400208:	4613      	mov	r3, r2
  40020a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 400268 <spi_master_setup_device+0x78>
  40020e:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400210:	4628      	mov	r0, r5
  400212:	6821      	ldr	r1, [r4, #0]
  400214:	2208      	movs	r2, #8
  400216:	4b0f      	ldr	r3, [pc, #60]	; (400254 <spi_master_setup_device+0x64>)
  400218:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  40021a:	4628      	mov	r0, r5
  40021c:	6821      	ldr	r1, [r4, #0]
  40021e:	b2fa      	uxtb	r2, r7
  400220:	4b0d      	ldr	r3, [pc, #52]	; (400258 <spi_master_setup_device+0x68>)
  400222:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400224:	4628      	mov	r0, r5
  400226:	6821      	ldr	r1, [r4, #0]
  400228:	2208      	movs	r2, #8
  40022a:	4b0c      	ldr	r3, [pc, #48]	; (40025c <spi_master_setup_device+0x6c>)
  40022c:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40022e:	4628      	mov	r0, r5
  400230:	6821      	ldr	r1, [r4, #0]
  400232:	0872      	lsrs	r2, r6, #1
  400234:	4b0a      	ldr	r3, [pc, #40]	; (400260 <spi_master_setup_device+0x70>)
  400236:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400238:	f086 0201 	eor.w	r2, r6, #1
  40023c:	4628      	mov	r0, r5
  40023e:	6821      	ldr	r1, [r4, #0]
  400240:	f002 0201 	and.w	r2, r2, #1
  400244:	4b07      	ldr	r3, [pc, #28]	; (400264 <spi_master_setup_device+0x74>)
  400246:	4798      	blx	r3
  400248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40024a:	bf00      	nop
  40024c:	11e1a300 	.word	0x11e1a300
  400250:	004004ad 	.word	0x004004ad
  400254:	00400499 	.word	0x00400499
  400258:	004004c9 	.word	0x004004c9
  40025c:	00400455 	.word	0x00400455
  400260:	00400415 	.word	0x00400415
  400264:	00400435 	.word	0x00400435
  400268:	004004f9 	.word	0x004004f9

0040026c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40026c:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40026e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400270:	f013 0f04 	tst.w	r3, #4
  400274:	d005      	beq.n	400282 <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400276:	6809      	ldr	r1, [r1, #0]
  400278:	290f      	cmp	r1, #15
  40027a:	d80a      	bhi.n	400292 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40027c:	4b05      	ldr	r3, [pc, #20]	; (400294 <spi_select_device+0x28>)
  40027e:	4798      	blx	r3
  400280:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400282:	680b      	ldr	r3, [r1, #0]
  400284:	2b03      	cmp	r3, #3
  400286:	d804      	bhi.n	400292 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400288:	2101      	movs	r1, #1
  40028a:	4099      	lsls	r1, r3
  40028c:	43c9      	mvns	r1, r1
  40028e:	4b01      	ldr	r3, [pc, #4]	; (400294 <spi_select_device+0x28>)
  400290:	4798      	blx	r3
  400292:	bd08      	pop	{r3, pc}
  400294:	004003e9 	.word	0x004003e9

00400298 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  400298:	b510      	push	{r4, lr}
  40029a:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40029c:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  40029e:	f413 7f00 	tst.w	r3, #512	; 0x200
  4002a2:	d0fb      	beq.n	40029c <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  4002a4:	4620      	mov	r0, r4
  4002a6:	210f      	movs	r1, #15
  4002a8:	4b02      	ldr	r3, [pc, #8]	; (4002b4 <spi_deselect_device+0x1c>)
  4002aa:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4002ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4002b0:	6023      	str	r3, [r4, #0]
  4002b2:	bd10      	pop	{r4, pc}
  4002b4:	004003e9 	.word	0x004003e9

004002b8 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4002b8:	b92a      	cbnz	r2, 4002c6 <spi_write_packet+0xe>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4002ba:	2000      	movs	r0, #0
}
  4002bc:	b240      	sxtb	r0, r0
  4002be:	4770      	bx	lr
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  4002c0:	3b01      	subs	r3, #1
  4002c2:	d106      	bne.n	4002d2 <spi_write_packet+0x1a>
  4002c4:	e010      	b.n	4002e8 <spi_write_packet+0x30>
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  4002c6:	b430      	push	{r4, r5}
  4002c8:	4614      	mov	r4, r2
  4002ca:	3901      	subs	r1, #1
  4002cc:	f643 2599 	movw	r5, #15001	; 0x3a99
  4002d0:	462b      	mov	r3, r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4002d2:	6902      	ldr	r2, [r0, #16]
	uint32_t i = 0;
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  4002d4:	f012 0f02 	tst.w	r2, #2
  4002d8:	d0f2      	beq.n	4002c0 <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4002da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4002de:	60c3      	str	r3, [r0, #12]
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4002e0:	3c01      	subs	r4, #1
  4002e2:	d1f5      	bne.n	4002d0 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4002e4:	2000      	movs	r0, #0
  4002e6:	e000      	b.n	4002ea <spi_write_packet+0x32>

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  4002e8:	20fd      	movs	r0, #253	; 0xfd
		i++;
		len--;
	}

	return STATUS_OK;
}
  4002ea:	b240      	sxtb	r0, r0
  4002ec:	bc30      	pop	{r4, r5}
  4002ee:	4770      	bx	lr

004002f0 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4002f0:	b92a      	cbnz	r2, 4002fe <spi_read_packet+0xe>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  4002f2:	2000      	movs	r0, #0
}
  4002f4:	b240      	sxtb	r0, r0
  4002f6:	4770      	bx	lr

	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  4002f8:	3b01      	subs	r3, #1
  4002fa:	d109      	bne.n	400310 <spi_read_packet+0x20>
  4002fc:	e01c      	b.n	400338 <spi_read_packet+0x48>
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  4002fe:	b4f0      	push	{r4, r5, r6, r7}
  400300:	4615      	mov	r5, r2
  400302:	3901      	subs	r1, #1
  400304:	f643 2699 	movw	r6, #15001	; 0x3a99
  400308:	27ff      	movs	r7, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  40030a:	f240 2401 	movw	r4, #513	; 0x201
  40030e:	4633      	mov	r3, r6
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400310:	6902      	ldr	r2, [r0, #16]
	uint32_t i = 0;

	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  400312:	f012 0f02 	tst.w	r2, #2
  400316:	d0ef      	beq.n	4002f8 <spi_read_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400318:	60c7      	str	r7, [r0, #12]
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  40031a:	4632      	mov	r2, r6
  40031c:	e001      	b.n	400322 <spi_read_packet+0x32>
			if (!timeout--) {
  40031e:	3a01      	subs	r2, #1
  400320:	d00c      	beq.n	40033c <spi_read_packet+0x4c>
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400322:	6903      	ldr	r3, [r0, #16]
  400324:	4023      	ands	r3, r4
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  400326:	42a3      	cmp	r3, r4
  400328:	d1f9      	bne.n	40031e <spi_read_packet+0x2e>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  40032a:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  40032c:	f801 3f01 	strb.w	r3, [r1, #1]!
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400330:	3d01      	subs	r5, #1
  400332:	d1ec      	bne.n	40030e <spi_read_packet+0x1e>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400334:	2000      	movs	r0, #0
  400336:	e002      	b.n	40033e <spi_read_packet+0x4e>
	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  400338:	20fd      	movs	r0, #253	; 0xfd
  40033a:	e000      	b.n	40033e <spi_read_packet+0x4e>
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  40033c:	20fd      	movs	r0, #253	; 0xfd
		i++;
		len--;
	}

	return STATUS_OK;
}
  40033e:	b240      	sxtb	r0, r0
  400340:	bcf0      	pop	{r4, r5, r6, r7}
  400342:	4770      	bx	lr

00400344 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400348:	4604      	mov	r4, r0
  40034a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40034c:	4b0e      	ldr	r3, [pc, #56]	; (400388 <pio_handler_process+0x44>)
  40034e:	4798      	blx	r3
  400350:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400352:	4620      	mov	r0, r4
  400354:	4b0d      	ldr	r3, [pc, #52]	; (40038c <pio_handler_process+0x48>)
  400356:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400358:	4005      	ands	r5, r0
  40035a:	d013      	beq.n	400384 <pio_handler_process+0x40>
  40035c:	4c0c      	ldr	r4, [pc, #48]	; (400390 <pio_handler_process+0x4c>)
  40035e:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400362:	6823      	ldr	r3, [r4, #0]
  400364:	4543      	cmp	r3, r8
  400366:	d108      	bne.n	40037a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400368:	6861      	ldr	r1, [r4, #4]
  40036a:	4229      	tst	r1, r5
  40036c:	d005      	beq.n	40037a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40036e:	68e3      	ldr	r3, [r4, #12]
  400370:	4640      	mov	r0, r8
  400372:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400374:	6863      	ldr	r3, [r4, #4]
  400376:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40037a:	42bc      	cmp	r4, r7
  40037c:	d002      	beq.n	400384 <pio_handler_process+0x40>
  40037e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400380:	2d00      	cmp	r5, #0
  400382:	d1ee      	bne.n	400362 <pio_handler_process+0x1e>
  400384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400388:	00402625 	.word	0x00402625
  40038c:	00402629 	.word	0x00402629
  400390:	204008b0 	.word	0x204008b0

00400394 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400394:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400396:	4802      	ldr	r0, [pc, #8]	; (4003a0 <PIOB_Handler+0xc>)
  400398:	210b      	movs	r1, #11
  40039a:	4b02      	ldr	r3, [pc, #8]	; (4003a4 <PIOB_Handler+0x10>)
  40039c:	4798      	blx	r3
  40039e:	bd08      	pop	{r3, pc}
  4003a0:	400e1000 	.word	0x400e1000
  4003a4:	00400345 	.word	0x00400345

004003a8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4003a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4003aa:	4802      	ldr	r0, [pc, #8]	; (4003b4 <PIOD_Handler+0xc>)
  4003ac:	2110      	movs	r1, #16
  4003ae:	4b02      	ldr	r3, [pc, #8]	; (4003b8 <PIOD_Handler+0x10>)
  4003b0:	4798      	blx	r3
  4003b2:	bd08      	pop	{r3, pc}
  4003b4:	400e1400 	.word	0x400e1400
  4003b8:	00400345 	.word	0x00400345

004003bc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4003bc:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4003be:	4b07      	ldr	r3, [pc, #28]	; (4003dc <spi_enable_clock+0x20>)
  4003c0:	4298      	cmp	r0, r3
  4003c2:	d103      	bne.n	4003cc <spi_enable_clock+0x10>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003c4:	2015      	movs	r0, #21
  4003c6:	4b06      	ldr	r3, [pc, #24]	; (4003e0 <spi_enable_clock+0x24>)
  4003c8:	4798      	blx	r3
  4003ca:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4003cc:	4b05      	ldr	r3, [pc, #20]	; (4003e4 <spi_enable_clock+0x28>)
  4003ce:	4298      	cmp	r0, r3
  4003d0:	d102      	bne.n	4003d8 <spi_enable_clock+0x1c>
  4003d2:	202a      	movs	r0, #42	; 0x2a
  4003d4:	4b02      	ldr	r3, [pc, #8]	; (4003e0 <spi_enable_clock+0x24>)
  4003d6:	4798      	blx	r3
  4003d8:	bd08      	pop	{r3, pc}
  4003da:	bf00      	nop
  4003dc:	40008000 	.word	0x40008000
  4003e0:	00402751 	.word	0x00402751
  4003e4:	40058000 	.word	0x40058000

004003e8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003e8:	6843      	ldr	r3, [r0, #4]
  4003ea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4003ee:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003f0:	6843      	ldr	r3, [r0, #4]
  4003f2:	0409      	lsls	r1, r1, #16
  4003f4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4003f8:	430b      	orrs	r3, r1
  4003fa:	6043      	str	r3, [r0, #4]
  4003fc:	4770      	bx	lr
  4003fe:	bf00      	nop

00400400 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400400:	6843      	ldr	r3, [r0, #4]
  400402:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400406:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400408:	6843      	ldr	r3, [r0, #4]
  40040a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  40040e:	6041      	str	r1, [r0, #4]
  400410:	4770      	bx	lr
  400412:	bf00      	nop

00400414 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400414:	b132      	cbz	r2, 400424 <spi_set_clock_polarity+0x10>
  400416:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40041a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40041c:	f043 0301 	orr.w	r3, r3, #1
  400420:	6303      	str	r3, [r0, #48]	; 0x30
  400422:	4770      	bx	lr
  400424:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400428:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40042a:	f023 0301 	bic.w	r3, r3, #1
  40042e:	6303      	str	r3, [r0, #48]	; 0x30
  400430:	4770      	bx	lr
  400432:	bf00      	nop

00400434 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400434:	b132      	cbz	r2, 400444 <spi_set_clock_phase+0x10>
  400436:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40043a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40043c:	f043 0302 	orr.w	r3, r3, #2
  400440:	6303      	str	r3, [r0, #48]	; 0x30
  400442:	4770      	bx	lr
  400444:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400448:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044a:	f023 0302 	bic.w	r3, r3, #2
  40044e:	6303      	str	r3, [r0, #48]	; 0x30
  400450:	4770      	bx	lr
  400452:	bf00      	nop

00400454 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400454:	2a04      	cmp	r2, #4
  400456:	d10a      	bne.n	40046e <spi_configure_cs_behavior+0x1a>
  400458:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40045c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40045e:	f023 0308 	bic.w	r3, r3, #8
  400462:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400464:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400466:	f043 0304 	orr.w	r3, r3, #4
  40046a:	6303      	str	r3, [r0, #48]	; 0x30
  40046c:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40046e:	b952      	cbnz	r2, 400486 <spi_configure_cs_behavior+0x32>
  400470:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400474:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400476:	f023 0308 	bic.w	r3, r3, #8
  40047a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40047c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40047e:	f023 0304 	bic.w	r3, r3, #4
  400482:	6303      	str	r3, [r0, #48]	; 0x30
  400484:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400486:	2a08      	cmp	r2, #8
  400488:	d105      	bne.n	400496 <spi_configure_cs_behavior+0x42>
  40048a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40048e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400490:	f043 0308 	orr.w	r3, r3, #8
  400494:	6303      	str	r3, [r0, #48]	; 0x30
  400496:	4770      	bx	lr

00400498 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400498:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40049c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40049e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4004a2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4004a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004a6:	431a      	orrs	r2, r3
  4004a8:	630a      	str	r2, [r1, #48]	; 0x30
  4004aa:	4770      	bx	lr

004004ac <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  4004ac:	1e43      	subs	r3, r0, #1
	int baud_div = div_ceil(mck, baudrate);
  4004ae:	4419      	add	r1, r3
  4004b0:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4004b4:	1e43      	subs	r3, r0, #1
  4004b6:	2bfe      	cmp	r3, #254	; 0xfe
  4004b8:	d801      	bhi.n	4004be <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
  4004ba:	b280      	uxth	r0, r0
  4004bc:	e001      	b.n	4004c2 <spi_calc_baudrate_div+0x16>
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  4004be:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}

	return baud_div;
}
  4004c2:	b200      	sxth	r0, r0
  4004c4:	4770      	bx	lr
  4004c6:	bf00      	nop

004004c8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4004c8:	b16a      	cbz	r2, 4004e6 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4004ca:	b410      	push	{r4}
  4004cc:	4614      	mov	r4, r2
  4004ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4004d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4004d8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4004da:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4004dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4004e0:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4004e2:	2000      	movs	r0, #0
  4004e4:	e003      	b.n	4004ee <spi_set_baudrate_div+0x26>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  4004e6:	f64f 70ff 	movw	r0, #65535	; 0xffff

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  4004ea:	b200      	sxth	r0, r0
  4004ec:	4770      	bx	lr
  4004ee:	b200      	sxth	r0, r0
  4004f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004f4:	4770      	bx	lr
  4004f6:	bf00      	nop

004004f8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4004f8:	b410      	push	{r4}
  4004fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4004fe:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400500:	b280      	uxth	r0, r0
  400502:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400504:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  400506:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40050a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40050e:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  400510:	f85d 4b04 	ldr.w	r4, [sp], #4
  400514:	4770      	bx	lr
  400516:	bf00      	nop

00400518 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400518:	2901      	cmp	r1, #1
  40051a:	d104      	bne.n	400526 <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  40051c:	6882      	ldr	r2, [r0, #8]
  40051e:	4b06      	ldr	r3, [pc, #24]	; (400538 <supc_switch_sclk_to_32kxtal+0x20>)
  400520:	4313      	orrs	r3, r2
  400522:	6083      	str	r3, [r0, #8]
  400524:	e003      	b.n	40052e <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  400526:	6882      	ldr	r2, [r0, #8]
  400528:	4b04      	ldr	r3, [pc, #16]	; (40053c <supc_switch_sclk_to_32kxtal+0x24>)
  40052a:	4013      	ands	r3, r2
  40052c:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40052e:	6802      	ldr	r2, [r0, #0]
  400530:	4b03      	ldr	r3, [pc, #12]	; (400540 <supc_switch_sclk_to_32kxtal+0x28>)
  400532:	4313      	orrs	r3, r2
  400534:	6003      	str	r3, [r0, #0]
  400536:	4770      	bx	lr
  400538:	a5100000 	.word	0xa5100000
  40053c:	5aefffff 	.word	0x5aefffff
  400540:	a5000008 	.word	0xa5000008

00400544 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400548:	6043      	str	r3, [r0, #4]
  40054a:	4770      	bx	lr

0040054c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40054c:	4b0d      	ldr	r3, [pc, #52]	; (400584 <prvTaskExitError+0x38>)
  40054e:	681b      	ldr	r3, [r3, #0]
  400550:	f1b3 3fff 	cmp.w	r3, #4294967295
  400554:	d00a      	beq.n	40056c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400556:	f04f 0380 	mov.w	r3, #128	; 0x80
  40055a:	b672      	cpsid	i
  40055c:	f383 8811 	msr	BASEPRI, r3
  400560:	f3bf 8f6f 	isb	sy
  400564:	f3bf 8f4f 	dsb	sy
  400568:	b662      	cpsie	i
  40056a:	e7fe      	b.n	40056a <prvTaskExitError+0x1e>
  40056c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400570:	b672      	cpsid	i
  400572:	f383 8811 	msr	BASEPRI, r3
  400576:	f3bf 8f6f 	isb	sy
  40057a:	f3bf 8f4f 	dsb	sy
  40057e:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
  400580:	e7fe      	b.n	400580 <prvTaskExitError+0x34>
  400582:	bf00      	nop
  400584:	2040000c 	.word	0x2040000c

00400588 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400588:	4806      	ldr	r0, [pc, #24]	; (4005a4 <prvPortStartFirstTask+0x1c>)
  40058a:	6800      	ldr	r0, [r0, #0]
  40058c:	6800      	ldr	r0, [r0, #0]
  40058e:	f380 8808 	msr	MSP, r0
  400592:	b662      	cpsie	i
  400594:	b661      	cpsie	f
  400596:	f3bf 8f4f 	dsb	sy
  40059a:	f3bf 8f6f 	isb	sy
  40059e:	df00      	svc	0
  4005a0:	bf00      	nop
  4005a2:	0000      	.short	0x0000
  4005a4:	e000ed08 	.word	0xe000ed08

004005a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4005a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4005b8 <vPortEnableVFP+0x10>
  4005ac:	6801      	ldr	r1, [r0, #0]
  4005ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4005b2:	6001      	str	r1, [r0, #0]
  4005b4:	4770      	bx	lr
  4005b6:	0000      	.short	0x0000
  4005b8:	e000ed88 	.word	0xe000ed88

004005bc <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4005bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4005c0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4005c4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4005c8:	4b05      	ldr	r3, [pc, #20]	; (4005e0 <pxPortInitialiseStack+0x24>)
  4005ca:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4005ce:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4005d2:	f06f 0302 	mvn.w	r3, #2
  4005d6:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4005da:	3844      	subs	r0, #68	; 0x44
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	0040054d 	.word	0x0040054d

004005e4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  4005e4:	4b06      	ldr	r3, [pc, #24]	; (400600 <pxCurrentTCBConst2>)
  4005e6:	6819      	ldr	r1, [r3, #0]
  4005e8:	6808      	ldr	r0, [r1, #0]
  4005ea:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ee:	f380 8809 	msr	PSP, r0
  4005f2:	f3bf 8f6f 	isb	sy
  4005f6:	f04f 0000 	mov.w	r0, #0
  4005fa:	f380 8811 	msr	BASEPRI, r0
  4005fe:	4770      	bx	lr

00400600 <pxCurrentTCBConst2>:
  400600:	2040c2b8 	.word	0x2040c2b8
  400604:	4770      	bx	lr
  400606:	bf00      	nop

00400608 <vPortEnterCritical>:
  400608:	f04f 0380 	mov.w	r3, #128	; 0x80
  40060c:	b672      	cpsid	i
  40060e:	f383 8811 	msr	BASEPRI, r3
  400612:	f3bf 8f6f 	isb	sy
  400616:	f3bf 8f4f 	dsb	sy
  40061a:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  40061c:	4a0b      	ldr	r2, [pc, #44]	; (40064c <vPortEnterCritical+0x44>)
  40061e:	6813      	ldr	r3, [r2, #0]
  400620:	3301      	adds	r3, #1
  400622:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400624:	2b01      	cmp	r3, #1
  400626:	d10f      	bne.n	400648 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400628:	4b09      	ldr	r3, [pc, #36]	; (400650 <vPortEnterCritical+0x48>)
  40062a:	681b      	ldr	r3, [r3, #0]
  40062c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400630:	d00a      	beq.n	400648 <vPortEnterCritical+0x40>
  400632:	f04f 0380 	mov.w	r3, #128	; 0x80
  400636:	b672      	cpsid	i
  400638:	f383 8811 	msr	BASEPRI, r3
  40063c:	f3bf 8f6f 	isb	sy
  400640:	f3bf 8f4f 	dsb	sy
  400644:	b662      	cpsie	i
  400646:	e7fe      	b.n	400646 <vPortEnterCritical+0x3e>
  400648:	4770      	bx	lr
  40064a:	bf00      	nop
  40064c:	2040000c 	.word	0x2040000c
  400650:	e000ed04 	.word	0xe000ed04

00400654 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400654:	4b0a      	ldr	r3, [pc, #40]	; (400680 <vPortExitCritical+0x2c>)
  400656:	681b      	ldr	r3, [r3, #0]
  400658:	b953      	cbnz	r3, 400670 <vPortExitCritical+0x1c>
  40065a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40065e:	b672      	cpsid	i
  400660:	f383 8811 	msr	BASEPRI, r3
  400664:	f3bf 8f6f 	isb	sy
  400668:	f3bf 8f4f 	dsb	sy
  40066c:	b662      	cpsie	i
  40066e:	e7fe      	b.n	40066e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400670:	3b01      	subs	r3, #1
  400672:	4a03      	ldr	r2, [pc, #12]	; (400680 <vPortExitCritical+0x2c>)
  400674:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400676:	b90b      	cbnz	r3, 40067c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400678:	f383 8811 	msr	BASEPRI, r3
  40067c:	4770      	bx	lr
  40067e:	bf00      	nop
  400680:	2040000c 	.word	0x2040000c

00400684 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400684:	f3ef 8009 	mrs	r0, PSP
  400688:	f3bf 8f6f 	isb	sy
  40068c:	4b15      	ldr	r3, [pc, #84]	; (4006e4 <pxCurrentTCBConst>)
  40068e:	681a      	ldr	r2, [r3, #0]
  400690:	f01e 0f10 	tst.w	lr, #16
  400694:	bf08      	it	eq
  400696:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40069a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40069e:	6010      	str	r0, [r2, #0]
  4006a0:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4006a4:	f04f 0080 	mov.w	r0, #128	; 0x80
  4006a8:	b672      	cpsid	i
  4006aa:	f380 8811 	msr	BASEPRI, r0
  4006ae:	f3bf 8f4f 	dsb	sy
  4006b2:	f3bf 8f6f 	isb	sy
  4006b6:	b662      	cpsie	i
  4006b8:	f001 f95a 	bl	401970 <vTaskSwitchContext>
  4006bc:	f04f 0000 	mov.w	r0, #0
  4006c0:	f380 8811 	msr	BASEPRI, r0
  4006c4:	bc08      	pop	{r3}
  4006c6:	6819      	ldr	r1, [r3, #0]
  4006c8:	6808      	ldr	r0, [r1, #0]
  4006ca:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006ce:	f01e 0f10 	tst.w	lr, #16
  4006d2:	bf08      	it	eq
  4006d4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4006d8:	f380 8809 	msr	PSP, r0
  4006dc:	f3bf 8f6f 	isb	sy
  4006e0:	4770      	bx	lr
  4006e2:	bf00      	nop

004006e4 <pxCurrentTCBConst>:
  4006e4:	2040c2b8 	.word	0x2040c2b8
  4006e8:	4770      	bx	lr
  4006ea:	bf00      	nop

004006ec <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  4006ec:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4006ee:	f3ef 8311 	mrs	r3, BASEPRI
  4006f2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4006f6:	b672      	cpsid	i
  4006f8:	f382 8811 	msr	BASEPRI, r2
  4006fc:	f3bf 8f6f 	isb	sy
  400700:	f3bf 8f4f 	dsb	sy
  400704:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400706:	4b05      	ldr	r3, [pc, #20]	; (40071c <SysTick_Handler+0x30>)
  400708:	4798      	blx	r3
  40070a:	b118      	cbz	r0, 400714 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40070c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400710:	4b03      	ldr	r3, [pc, #12]	; (400720 <SysTick_Handler+0x34>)
  400712:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400714:	2300      	movs	r3, #0
  400716:	f383 8811 	msr	BASEPRI, r3
  40071a:	bd08      	pop	{r3, pc}
  40071c:	00401605 	.word	0x00401605
  400720:	e000ed04 	.word	0xe000ed04

00400724 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400724:	4a03      	ldr	r2, [pc, #12]	; (400734 <vPortSetupTimerInterrupt+0x10>)
  400726:	4b04      	ldr	r3, [pc, #16]	; (400738 <vPortSetupTimerInterrupt+0x14>)
  400728:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40072a:	2207      	movs	r2, #7
  40072c:	3b04      	subs	r3, #4
  40072e:	601a      	str	r2, [r3, #0]
  400730:	4770      	bx	lr
  400732:	bf00      	nop
  400734:	000493df 	.word	0x000493df
  400738:	e000e014 	.word	0xe000e014

0040073c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  40073c:	b500      	push	{lr}
  40073e:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400740:	4b25      	ldr	r3, [pc, #148]	; (4007d8 <xPortStartScheduler+0x9c>)
  400742:	781a      	ldrb	r2, [r3, #0]
  400744:	b2d2      	uxtb	r2, r2
  400746:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400748:	22ff      	movs	r2, #255	; 0xff
  40074a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40074c:	781b      	ldrb	r3, [r3, #0]
  40074e:	b2db      	uxtb	r3, r3
  400750:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400754:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400758:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40075c:	4a1f      	ldr	r2, [pc, #124]	; (4007dc <xPortStartScheduler+0xa0>)
  40075e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400760:	2207      	movs	r2, #7
  400762:	4b1f      	ldr	r3, [pc, #124]	; (4007e0 <xPortStartScheduler+0xa4>)
  400764:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400766:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40076a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40076e:	d010      	beq.n	400792 <xPortStartScheduler+0x56>
  400770:	2206      	movs	r2, #6
  400772:	e000      	b.n	400776 <xPortStartScheduler+0x3a>
  400774:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400776:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40077a:	005b      	lsls	r3, r3, #1
  40077c:	b2db      	uxtb	r3, r3
  40077e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400782:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400786:	1e51      	subs	r1, r2, #1
  400788:	f013 0f80 	tst.w	r3, #128	; 0x80
  40078c:	d1f2      	bne.n	400774 <xPortStartScheduler+0x38>
  40078e:	4b14      	ldr	r3, [pc, #80]	; (4007e0 <xPortStartScheduler+0xa4>)
  400790:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400792:	4a13      	ldr	r2, [pc, #76]	; (4007e0 <xPortStartScheduler+0xa4>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400794:	6813      	ldr	r3, [r2, #0]
  400796:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40079c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40079e:	9b01      	ldr	r3, [sp, #4]
  4007a0:	b2db      	uxtb	r3, r3
  4007a2:	4a0d      	ldr	r2, [pc, #52]	; (4007d8 <xPortStartScheduler+0x9c>)
  4007a4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4007a6:	4b0f      	ldr	r3, [pc, #60]	; (4007e4 <xPortStartScheduler+0xa8>)
  4007a8:	681a      	ldr	r2, [r3, #0]
  4007aa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4007ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4007b0:	681a      	ldr	r2, [r3, #0]
  4007b2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4007b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4007b8:	4b0b      	ldr	r3, [pc, #44]	; (4007e8 <xPortStartScheduler+0xac>)
  4007ba:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4007bc:	2200      	movs	r2, #0
  4007be:	4b0b      	ldr	r3, [pc, #44]	; (4007ec <xPortStartScheduler+0xb0>)
  4007c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  4007c2:	4b0b      	ldr	r3, [pc, #44]	; (4007f0 <xPortStartScheduler+0xb4>)
  4007c4:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4007c6:	4a0b      	ldr	r2, [pc, #44]	; (4007f4 <xPortStartScheduler+0xb8>)
  4007c8:	6813      	ldr	r3, [r2, #0]
  4007ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4007ce:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4007d0:	4b09      	ldr	r3, [pc, #36]	; (4007f8 <xPortStartScheduler+0xbc>)
  4007d2:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  4007d4:	4b09      	ldr	r3, [pc, #36]	; (4007fc <xPortStartScheduler+0xc0>)
  4007d6:	4798      	blx	r3
  4007d8:	e000e400 	.word	0xe000e400
  4007dc:	204009a0 	.word	0x204009a0
  4007e0:	204009a4 	.word	0x204009a4
  4007e4:	e000ed20 	.word	0xe000ed20
  4007e8:	00400725 	.word	0x00400725
  4007ec:	2040000c 	.word	0x2040000c
  4007f0:	004005a9 	.word	0x004005a9
  4007f4:	e000ef34 	.word	0xe000ef34
  4007f8:	00400589 	.word	0x00400589
  4007fc:	0040054d 	.word	0x0040054d

00400800 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400800:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400804:	2b0f      	cmp	r3, #15
  400806:	d911      	bls.n	40082c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400808:	4a12      	ldr	r2, [pc, #72]	; (400854 <vPortValidateInterruptPriority+0x54>)
  40080a:	5c9b      	ldrb	r3, [r3, r2]
  40080c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40080e:	4a12      	ldr	r2, [pc, #72]	; (400858 <vPortValidateInterruptPriority+0x58>)
  400810:	7812      	ldrb	r2, [r2, #0]
  400812:	429a      	cmp	r2, r3
  400814:	d90a      	bls.n	40082c <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400816:	f04f 0380 	mov.w	r3, #128	; 0x80
  40081a:	b672      	cpsid	i
  40081c:	f383 8811 	msr	BASEPRI, r3
  400820:	f3bf 8f6f 	isb	sy
  400824:	f3bf 8f4f 	dsb	sy
  400828:	b662      	cpsie	i
  40082a:	e7fe      	b.n	40082a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40082c:	4b0b      	ldr	r3, [pc, #44]	; (40085c <vPortValidateInterruptPriority+0x5c>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400834:	4a0a      	ldr	r2, [pc, #40]	; (400860 <vPortValidateInterruptPriority+0x60>)
  400836:	6812      	ldr	r2, [r2, #0]
  400838:	4293      	cmp	r3, r2
  40083a:	d90a      	bls.n	400852 <vPortValidateInterruptPriority+0x52>
  40083c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400840:	b672      	cpsid	i
  400842:	f383 8811 	msr	BASEPRI, r3
  400846:	f3bf 8f6f 	isb	sy
  40084a:	f3bf 8f4f 	dsb	sy
  40084e:	b662      	cpsie	i
  400850:	e7fe      	b.n	400850 <vPortValidateInterruptPriority+0x50>
  400852:	4770      	bx	lr
  400854:	e000e3f0 	.word	0xe000e3f0
  400858:	204009a0 	.word	0x204009a0
  40085c:	e000ed0c 	.word	0xe000ed0c
  400860:	204009a4 	.word	0x204009a4

00400864 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400864:	b538      	push	{r3, r4, r5, lr}
  400866:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400868:	f010 0f07 	tst.w	r0, #7
  40086c:	d002      	beq.n	400874 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40086e:	f020 0407 	bic.w	r4, r0, #7
  400872:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400874:	4b0e      	ldr	r3, [pc, #56]	; (4008b0 <pvPortMalloc+0x4c>)
  400876:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400878:	4b0e      	ldr	r3, [pc, #56]	; (4008b4 <pvPortMalloc+0x50>)
  40087a:	681b      	ldr	r3, [r3, #0]
  40087c:	b923      	cbnz	r3, 400888 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  40087e:	4b0e      	ldr	r3, [pc, #56]	; (4008b8 <pvPortMalloc+0x54>)
  400880:	f023 0307 	bic.w	r3, r3, #7
  400884:	4a0b      	ldr	r2, [pc, #44]	; (4008b4 <pvPortMalloc+0x50>)
  400886:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400888:	4b0c      	ldr	r3, [pc, #48]	; (4008bc <pvPortMalloc+0x58>)
  40088a:	681b      	ldr	r3, [r3, #0]
  40088c:	441c      	add	r4, r3
  40088e:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400892:	4294      	cmp	r4, r2
  400894:	d807      	bhi.n	4008a6 <pvPortMalloc+0x42>
  400896:	42a3      	cmp	r3, r4
  400898:	d205      	bcs.n	4008a6 <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40089a:	4a06      	ldr	r2, [pc, #24]	; (4008b4 <pvPortMalloc+0x50>)
  40089c:	6815      	ldr	r5, [r2, #0]
  40089e:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4008a0:	4b06      	ldr	r3, [pc, #24]	; (4008bc <pvPortMalloc+0x58>)
  4008a2:	601c      	str	r4, [r3, #0]
  4008a4:	e000      	b.n	4008a8 <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  4008a6:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4008a8:	4b05      	ldr	r3, [pc, #20]	; (4008c0 <pvPortMalloc+0x5c>)
  4008aa:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  4008ac:	4628      	mov	r0, r5
  4008ae:	bd38      	pop	{r3, r4, r5, pc}
  4008b0:	004015e9 	.word	0x004015e9
  4008b4:	2040c1ac 	.word	0x2040c1ac
  4008b8:	204009b4 	.word	0x204009b4
  4008bc:	204009a8 	.word	0x204009a8
  4008c0:	00401739 	.word	0x00401739

004008c4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4008c4:	b150      	cbz	r0, 4008dc <vPortFree+0x18>
  4008c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008ca:	b672      	cpsid	i
  4008cc:	f383 8811 	msr	BASEPRI, r3
  4008d0:	f3bf 8f6f 	isb	sy
  4008d4:	f3bf 8f4f 	dsb	sy
  4008d8:	b662      	cpsie	i
  4008da:	e7fe      	b.n	4008da <vPortFree+0x16>
  4008dc:	4770      	bx	lr
  4008de:	bf00      	nop

004008e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008e0:	f100 0308 	add.w	r3, r0, #8
  4008e4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4008e6:	f04f 32ff 	mov.w	r2, #4294967295
  4008ea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008ec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008ee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4008f0:	2300      	movs	r3, #0
  4008f2:	6003      	str	r3, [r0, #0]
  4008f4:	4770      	bx	lr
  4008f6:	bf00      	nop

004008f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4008f8:	2300      	movs	r3, #0
  4008fa:	6103      	str	r3, [r0, #16]
  4008fc:	4770      	bx	lr
  4008fe:	bf00      	nop

00400900 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400900:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400902:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400904:	689a      	ldr	r2, [r3, #8]
  400906:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400908:	689a      	ldr	r2, [r3, #8]
  40090a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40090c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40090e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400910:	6803      	ldr	r3, [r0, #0]
  400912:	3301      	adds	r3, #1
  400914:	6003      	str	r3, [r0, #0]
  400916:	4770      	bx	lr

00400918 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400918:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40091a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40091c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400920:	d101      	bne.n	400926 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400922:	6902      	ldr	r2, [r0, #16]
  400924:	e007      	b.n	400936 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400926:	f100 0208 	add.w	r2, r0, #8
  40092a:	e000      	b.n	40092e <vListInsert+0x16>
  40092c:	461a      	mov	r2, r3
  40092e:	6853      	ldr	r3, [r2, #4]
  400930:	681c      	ldr	r4, [r3, #0]
  400932:	42a5      	cmp	r5, r4
  400934:	d2fa      	bcs.n	40092c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400936:	6853      	ldr	r3, [r2, #4]
  400938:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40093a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40093c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40093e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400940:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400942:	6803      	ldr	r3, [r0, #0]
  400944:	3301      	adds	r3, #1
  400946:	6003      	str	r3, [r0, #0]
}
  400948:	bc30      	pop	{r4, r5}
  40094a:	4770      	bx	lr

0040094c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40094c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40094e:	6842      	ldr	r2, [r0, #4]
  400950:	6881      	ldr	r1, [r0, #8]
  400952:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400954:	6882      	ldr	r2, [r0, #8]
  400956:	6841      	ldr	r1, [r0, #4]
  400958:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40095a:	685a      	ldr	r2, [r3, #4]
  40095c:	4282      	cmp	r2, r0
  40095e:	d101      	bne.n	400964 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400960:	6892      	ldr	r2, [r2, #8]
  400962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400964:	2200      	movs	r2, #0
  400966:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400968:	6818      	ldr	r0, [r3, #0]
  40096a:	3801      	subs	r0, #1
  40096c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40096e:	4770      	bx	lr

00400970 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400970:	b538      	push	{r3, r4, r5, lr}
  400972:	4604      	mov	r4, r0
  400974:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400976:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400978:	b942      	cbnz	r2, 40098c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40097a:	6803      	ldr	r3, [r0, #0]
  40097c:	2b00      	cmp	r3, #0
  40097e:	d12b      	bne.n	4009d8 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400980:	6840      	ldr	r0, [r0, #4]
  400982:	4b1b      	ldr	r3, [pc, #108]	; (4009f0 <prvCopyDataToQueue+0x80>)
  400984:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400986:	2300      	movs	r3, #0
  400988:	6063      	str	r3, [r4, #4]
  40098a:	e02c      	b.n	4009e6 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  40098c:	b96d      	cbnz	r5, 4009aa <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40098e:	6880      	ldr	r0, [r0, #8]
  400990:	4b18      	ldr	r3, [pc, #96]	; (4009f4 <prvCopyDataToQueue+0x84>)
  400992:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400994:	68a2      	ldr	r2, [r4, #8]
  400996:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400998:	4413      	add	r3, r2
  40099a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40099c:	6862      	ldr	r2, [r4, #4]
  40099e:	4293      	cmp	r3, r2
  4009a0:	d31c      	bcc.n	4009dc <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4009a2:	6823      	ldr	r3, [r4, #0]
  4009a4:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4009a6:	2000      	movs	r0, #0
  4009a8:	e01d      	b.n	4009e6 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4009aa:	68c0      	ldr	r0, [r0, #12]
  4009ac:	4b11      	ldr	r3, [pc, #68]	; (4009f4 <prvCopyDataToQueue+0x84>)
  4009ae:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4009b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4009b2:	425b      	negs	r3, r3
  4009b4:	68e2      	ldr	r2, [r4, #12]
  4009b6:	441a      	add	r2, r3
  4009b8:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4009ba:	6821      	ldr	r1, [r4, #0]
  4009bc:	428a      	cmp	r2, r1
  4009be:	d202      	bcs.n	4009c6 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4009c0:	6862      	ldr	r2, [r4, #4]
  4009c2:	4413      	add	r3, r2
  4009c4:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  4009c6:	2d02      	cmp	r5, #2
  4009c8:	d10a      	bne.n	4009e0 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4009ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009cc:	b153      	cbz	r3, 4009e4 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  4009ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009d0:	3b01      	subs	r3, #1
  4009d2:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4009d4:	2000      	movs	r0, #0
  4009d6:	e006      	b.n	4009e6 <prvCopyDataToQueue+0x76>
  4009d8:	2000      	movs	r0, #0
  4009da:	e004      	b.n	4009e6 <prvCopyDataToQueue+0x76>
  4009dc:	2000      	movs	r0, #0
  4009de:	e002      	b.n	4009e6 <prvCopyDataToQueue+0x76>
  4009e0:	2000      	movs	r0, #0
  4009e2:	e000      	b.n	4009e6 <prvCopyDataToQueue+0x76>
  4009e4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4009e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009e8:	3301      	adds	r3, #1
  4009ea:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4009ec:	bd38      	pop	{r3, r4, r5, pc}
  4009ee:	bf00      	nop
  4009f0:	00401d3d 	.word	0x00401d3d
  4009f4:	0040652d 	.word	0x0040652d

004009f8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4009f8:	b530      	push	{r4, r5, lr}
  4009fa:	b083      	sub	sp, #12
  4009fc:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4009fe:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400a00:	b954      	cbnz	r4, 400a18 <prvNotifyQueueSetContainer+0x20>
  400a02:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a06:	b672      	cpsid	i
  400a08:	f383 8811 	msr	BASEPRI, r3
  400a0c:	f3bf 8f6f 	isb	sy
  400a10:	f3bf 8f4f 	dsb	sy
  400a14:	b662      	cpsie	i
  400a16:	e7fe      	b.n	400a16 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400a18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400a1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a1c:	429a      	cmp	r2, r3
  400a1e:	d30a      	bcc.n	400a36 <prvNotifyQueueSetContainer+0x3e>
  400a20:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a24:	b672      	cpsid	i
  400a26:	f383 8811 	msr	BASEPRI, r3
  400a2a:	f3bf 8f6f 	isb	sy
  400a2e:	f3bf 8f4f 	dsb	sy
  400a32:	b662      	cpsie	i
  400a34:	e7fe      	b.n	400a34 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400a36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400a38:	4293      	cmp	r3, r2
  400a3a:	d917      	bls.n	400a6c <prvNotifyQueueSetContainer+0x74>
  400a3c:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400a3e:	4620      	mov	r0, r4
  400a40:	a901      	add	r1, sp, #4
  400a42:	4b0c      	ldr	r3, [pc, #48]	; (400a74 <prvNotifyQueueSetContainer+0x7c>)
  400a44:	4798      	blx	r3
  400a46:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400a48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a4e:	d109      	bne.n	400a64 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400a52:	b163      	cbz	r3, 400a6e <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400a54:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a58:	4b07      	ldr	r3, [pc, #28]	; (400a78 <prvNotifyQueueSetContainer+0x80>)
  400a5a:	4798      	blx	r3
  400a5c:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400a5e:	bf18      	it	ne
  400a60:	2501      	movne	r5, #1
  400a62:	e004      	b.n	400a6e <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400a64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a66:	3301      	adds	r3, #1
  400a68:	64a3      	str	r3, [r4, #72]	; 0x48
  400a6a:	e000      	b.n	400a6e <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400a6c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400a6e:	4628      	mov	r0, r5
  400a70:	b003      	add	sp, #12
  400a72:	bd30      	pop	{r4, r5, pc}
  400a74:	00400971 	.word	0x00400971
  400a78:	00401b0d 	.word	0x00401b0d

00400a7c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400a7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a7e:	b172      	cbz	r2, 400a9e <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400a80:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400a82:	68c3      	ldr	r3, [r0, #12]
  400a84:	4413      	add	r3, r2
  400a86:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400a88:	6844      	ldr	r4, [r0, #4]
  400a8a:	42a3      	cmp	r3, r4
  400a8c:	d301      	bcc.n	400a92 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400a8e:	6803      	ldr	r3, [r0, #0]
  400a90:	60c3      	str	r3, [r0, #12]
  400a92:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400a94:	4608      	mov	r0, r1
  400a96:	68d9      	ldr	r1, [r3, #12]
  400a98:	4b01      	ldr	r3, [pc, #4]	; (400aa0 <prvCopyDataFromQueue+0x24>)
  400a9a:	4798      	blx	r3
  400a9c:	bd10      	pop	{r4, pc}
  400a9e:	4770      	bx	lr
  400aa0:	0040652d 	.word	0x0040652d

00400aa4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400aa6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400aa8:	4b20      	ldr	r3, [pc, #128]	; (400b2c <prvUnlockQueue+0x88>)
  400aaa:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400aac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400aae:	2b00      	cmp	r3, #0
  400ab0:	dd18      	ble.n	400ae4 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400ab2:	4d1f      	ldr	r5, [pc, #124]	; (400b30 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400ab4:	4f1f      	ldr	r7, [pc, #124]	; (400b34 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ab6:	4e20      	ldr	r6, [pc, #128]	; (400b38 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  400ab8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400aba:	b133      	cbz	r3, 400aca <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400abc:	4620      	mov	r0, r4
  400abe:	2100      	movs	r1, #0
  400ac0:	47a8      	blx	r5
  400ac2:	2801      	cmp	r0, #1
  400ac4:	d108      	bne.n	400ad8 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400ac6:	47b8      	blx	r7
  400ac8:	e006      	b.n	400ad8 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400acc:	b153      	cbz	r3, 400ae4 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ace:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ad2:	47b0      	blx	r6
  400ad4:	b100      	cbz	r0, 400ad8 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  400ad6:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  400ad8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ada:	3b01      	subs	r3, #1
  400adc:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ade:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ae0:	2b00      	cmp	r3, #0
  400ae2:	dce9      	bgt.n	400ab8 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400ae4:	f04f 33ff 	mov.w	r3, #4294967295
  400ae8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400aea:	4b14      	ldr	r3, [pc, #80]	; (400b3c <prvUnlockQueue+0x98>)
  400aec:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400aee:	4b0f      	ldr	r3, [pc, #60]	; (400b2c <prvUnlockQueue+0x88>)
  400af0:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400af2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400af4:	2b00      	cmp	r3, #0
  400af6:	dd13      	ble.n	400b20 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400af8:	6923      	ldr	r3, [r4, #16]
  400afa:	b91b      	cbnz	r3, 400b04 <prvUnlockQueue+0x60>
  400afc:	e010      	b.n	400b20 <prvUnlockQueue+0x7c>
  400afe:	6923      	ldr	r3, [r4, #16]
  400b00:	b923      	cbnz	r3, 400b0c <prvUnlockQueue+0x68>
  400b02:	e00d      	b.n	400b20 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b04:	f104 0610 	add.w	r6, r4, #16
  400b08:	4d0b      	ldr	r5, [pc, #44]	; (400b38 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  400b0a:	4f0a      	ldr	r7, [pc, #40]	; (400b34 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b0c:	4630      	mov	r0, r6
  400b0e:	47a8      	blx	r5
  400b10:	b100      	cbz	r0, 400b14 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  400b12:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  400b14:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b16:	3b01      	subs	r3, #1
  400b18:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400b1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b1c:	2b00      	cmp	r3, #0
  400b1e:	dcee      	bgt.n	400afe <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400b20:	f04f 33ff 	mov.w	r3, #4294967295
  400b24:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400b26:	4b05      	ldr	r3, [pc, #20]	; (400b3c <prvUnlockQueue+0x98>)
  400b28:	4798      	blx	r3
  400b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b2c:	00400609 	.word	0x00400609
  400b30:	004009f9 	.word	0x004009f9
  400b34:	00401c69 	.word	0x00401c69
  400b38:	00401b0d 	.word	0x00401b0d
  400b3c:	00400655 	.word	0x00400655

00400b40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  400b40:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400b42:	b950      	cbnz	r0, 400b5a <xQueueGenericReset+0x1a>
  400b44:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b48:	b672      	cpsid	i
  400b4a:	f383 8811 	msr	BASEPRI, r3
  400b4e:	f3bf 8f6f 	isb	sy
  400b52:	f3bf 8f4f 	dsb	sy
  400b56:	b662      	cpsie	i
  400b58:	e7fe      	b.n	400b58 <xQueueGenericReset+0x18>
  400b5a:	4604      	mov	r4, r0
  400b5c:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  400b5e:	4b18      	ldr	r3, [pc, #96]	; (400bc0 <xQueueGenericReset+0x80>)
  400b60:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400b62:	6822      	ldr	r2, [r4, #0]
  400b64:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400b66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b68:	fb03 f301 	mul.w	r3, r3, r1
  400b6c:	18d0      	adds	r0, r2, r3
  400b6e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400b70:	2000      	movs	r0, #0
  400b72:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400b74:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400b76:	1a5b      	subs	r3, r3, r1
  400b78:	4413      	add	r3, r2
  400b7a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400b7c:	f04f 33ff 	mov.w	r3, #4294967295
  400b80:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400b82:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400b84:	b985      	cbnz	r5, 400ba8 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b86:	6923      	ldr	r3, [r4, #16]
  400b88:	b1ab      	cbz	r3, 400bb6 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400b8a:	f104 0010 	add.w	r0, r4, #16
  400b8e:	4b0d      	ldr	r3, [pc, #52]	; (400bc4 <xQueueGenericReset+0x84>)
  400b90:	4798      	blx	r3
  400b92:	2801      	cmp	r0, #1
  400b94:	d10f      	bne.n	400bb6 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  400b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400b9a:	4b0b      	ldr	r3, [pc, #44]	; (400bc8 <xQueueGenericReset+0x88>)
  400b9c:	601a      	str	r2, [r3, #0]
  400b9e:	f3bf 8f4f 	dsb	sy
  400ba2:	f3bf 8f6f 	isb	sy
  400ba6:	e006      	b.n	400bb6 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400ba8:	f104 0010 	add.w	r0, r4, #16
  400bac:	4d07      	ldr	r5, [pc, #28]	; (400bcc <xQueueGenericReset+0x8c>)
  400bae:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400bb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400bb4:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  400bb6:	4b06      	ldr	r3, [pc, #24]	; (400bd0 <xQueueGenericReset+0x90>)
  400bb8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  400bba:	2001      	movs	r0, #1
  400bbc:	bd38      	pop	{r3, r4, r5, pc}
  400bbe:	bf00      	nop
  400bc0:	00400609 	.word	0x00400609
  400bc4:	00401b0d 	.word	0x00401b0d
  400bc8:	e000ed04 	.word	0xe000ed04
  400bcc:	004008e1 	.word	0x004008e1
  400bd0:	00400655 	.word	0x00400655

00400bd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  400bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400bd6:	b950      	cbnz	r0, 400bee <xQueueGenericCreate+0x1a>
  400bd8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bdc:	b672      	cpsid	i
  400bde:	f383 8811 	msr	BASEPRI, r3
  400be2:	f3bf 8f6f 	isb	sy
  400be6:	f3bf 8f4f 	dsb	sy
  400bea:	b662      	cpsie	i
  400bec:	e7fe      	b.n	400bec <xQueueGenericCreate+0x18>
  400bee:	460d      	mov	r5, r1
  400bf0:	4617      	mov	r7, r2
  400bf2:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  400bf4:	b1c1      	cbz	r1, 400c28 <xQueueGenericCreate+0x54>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400bf6:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400bfa:	3059      	adds	r0, #89	; 0x59
  400bfc:	4b14      	ldr	r3, [pc, #80]	; (400c50 <xQueueGenericCreate+0x7c>)
  400bfe:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400c00:	4604      	mov	r4, r0
  400c02:	b910      	cbnz	r0, 400c0a <xQueueGenericCreate+0x36>
  400c04:	e005      	b.n	400c12 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400c06:	6024      	str	r4, [r4, #0]
  400c08:	e015      	b.n	400c36 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400c0a:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400c0e:	6003      	str	r3, [r0, #0]
  400c10:	e011      	b.n	400c36 <xQueueGenericCreate+0x62>
  400c12:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c16:	b672      	cpsid	i
  400c18:	f383 8811 	msr	BASEPRI, r3
  400c1c:	f3bf 8f6f 	isb	sy
  400c20:	f3bf 8f4f 	dsb	sy
  400c24:	b662      	cpsie	i
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  400c26:	e7fe      	b.n	400c26 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c28:	2058      	movs	r0, #88	; 0x58
  400c2a:	4b09      	ldr	r3, [pc, #36]	; (400c50 <xQueueGenericCreate+0x7c>)
  400c2c:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400c2e:	4604      	mov	r4, r0
  400c30:	2800      	cmp	r0, #0
  400c32:	d1e8      	bne.n	400c06 <xQueueGenericCreate+0x32>
  400c34:	e7ed      	b.n	400c12 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  400c36:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400c38:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400c3a:	4620      	mov	r0, r4
  400c3c:	2101      	movs	r1, #1
  400c3e:	4b05      	ldr	r3, [pc, #20]	; (400c54 <xQueueGenericCreate+0x80>)
  400c40:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  400c42:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  400c46:	2300      	movs	r3, #0
  400c48:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  400c4a:	4620      	mov	r0, r4
  400c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c4e:	bf00      	nop
  400c50:	00400865 	.word	0x00400865
  400c54:	00400b41 	.word	0x00400b41

00400c58 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  400c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c5c:	b085      	sub	sp, #20
  400c5e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400c60:	b950      	cbnz	r0, 400c78 <xQueueGenericSend+0x20>
  400c62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c66:	b672      	cpsid	i
  400c68:	f383 8811 	msr	BASEPRI, r3
  400c6c:	f3bf 8f6f 	isb	sy
  400c70:	f3bf 8f4f 	dsb	sy
  400c74:	b662      	cpsie	i
  400c76:	e7fe      	b.n	400c76 <xQueueGenericSend+0x1e>
  400c78:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c7a:	b961      	cbnz	r1, 400c96 <xQueueGenericSend+0x3e>
  400c7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c7e:	b152      	cbz	r2, 400c96 <xQueueGenericSend+0x3e>
  400c80:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c84:	b672      	cpsid	i
  400c86:	f383 8811 	msr	BASEPRI, r3
  400c8a:	f3bf 8f6f 	isb	sy
  400c8e:	f3bf 8f4f 	dsb	sy
  400c92:	b662      	cpsie	i
  400c94:	e7fe      	b.n	400c94 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c96:	2b02      	cmp	r3, #2
  400c98:	d10d      	bne.n	400cb6 <xQueueGenericSend+0x5e>
  400c9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400c9c:	2a01      	cmp	r2, #1
  400c9e:	d00a      	beq.n	400cb6 <xQueueGenericSend+0x5e>
  400ca0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ca4:	b672      	cpsid	i
  400ca6:	f383 8811 	msr	BASEPRI, r3
  400caa:	f3bf 8f6f 	isb	sy
  400cae:	f3bf 8f4f 	dsb	sy
  400cb2:	b662      	cpsie	i
  400cb4:	e7fe      	b.n	400cb4 <xQueueGenericSend+0x5c>
  400cb6:	461d      	mov	r5, r3
  400cb8:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400cba:	4b51      	ldr	r3, [pc, #324]	; (400e00 <xQueueGenericSend+0x1a8>)
  400cbc:	4798      	blx	r3
  400cbe:	b960      	cbnz	r0, 400cda <xQueueGenericSend+0x82>
  400cc0:	9b01      	ldr	r3, [sp, #4]
  400cc2:	b163      	cbz	r3, 400cde <xQueueGenericSend+0x86>
  400cc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cc8:	b672      	cpsid	i
  400cca:	f383 8811 	msr	BASEPRI, r3
  400cce:	f3bf 8f6f 	isb	sy
  400cd2:	f3bf 8f4f 	dsb	sy
  400cd6:	b662      	cpsie	i
  400cd8:	e7fe      	b.n	400cd8 <xQueueGenericSend+0x80>
  400cda:	2700      	movs	r7, #0
  400cdc:	e000      	b.n	400ce0 <xQueueGenericSend+0x88>
  400cde:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400ce0:	4e48      	ldr	r6, [pc, #288]	; (400e04 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400ce2:	f8df 914c 	ldr.w	r9, [pc, #332]	; 400e30 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  400ce6:	f8df 8128 	ldr.w	r8, [pc, #296]	; 400e10 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400cea:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400cec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400cee:	2d02      	cmp	r5, #2
  400cf0:	d002      	beq.n	400cf8 <xQueueGenericSend+0xa0>
  400cf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400cf4:	429a      	cmp	r2, r3
  400cf6:	d233      	bcs.n	400d60 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400cf8:	4620      	mov	r0, r4
  400cfa:	9900      	ldr	r1, [sp, #0]
  400cfc:	462a      	mov	r2, r5
  400cfe:	4b42      	ldr	r3, [pc, #264]	; (400e08 <xQueueGenericSend+0x1b0>)
  400d00:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400d02:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400d04:	b173      	cbz	r3, 400d24 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400d06:	4620      	mov	r0, r4
  400d08:	4629      	mov	r1, r5
  400d0a:	4b40      	ldr	r3, [pc, #256]	; (400e0c <xQueueGenericSend+0x1b4>)
  400d0c:	4798      	blx	r3
  400d0e:	2801      	cmp	r0, #1
  400d10:	d122      	bne.n	400d58 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  400d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d16:	4b3e      	ldr	r3, [pc, #248]	; (400e10 <xQueueGenericSend+0x1b8>)
  400d18:	601a      	str	r2, [r3, #0]
  400d1a:	f3bf 8f4f 	dsb	sy
  400d1e:	f3bf 8f6f 	isb	sy
  400d22:	e019      	b.n	400d58 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d26:	b173      	cbz	r3, 400d46 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400d28:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d2c:	4b39      	ldr	r3, [pc, #228]	; (400e14 <xQueueGenericSend+0x1bc>)
  400d2e:	4798      	blx	r3
  400d30:	2801      	cmp	r0, #1
  400d32:	d111      	bne.n	400d58 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  400d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d38:	4b35      	ldr	r3, [pc, #212]	; (400e10 <xQueueGenericSend+0x1b8>)
  400d3a:	601a      	str	r2, [r3, #0]
  400d3c:	f3bf 8f4f 	dsb	sy
  400d40:	f3bf 8f6f 	isb	sy
  400d44:	e008      	b.n	400d58 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  400d46:	b138      	cbz	r0, 400d58 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  400d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d4c:	4b30      	ldr	r3, [pc, #192]	; (400e10 <xQueueGenericSend+0x1b8>)
  400d4e:	601a      	str	r2, [r3, #0]
  400d50:	f3bf 8f4f 	dsb	sy
  400d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  400d58:	4b2f      	ldr	r3, [pc, #188]	; (400e18 <xQueueGenericSend+0x1c0>)
  400d5a:	4798      	blx	r3
				return pdPASS;
  400d5c:	2001      	movs	r0, #1
  400d5e:	e04b      	b.n	400df8 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  400d60:	9b01      	ldr	r3, [sp, #4]
  400d62:	b91b      	cbnz	r3, 400d6c <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400d64:	4b2c      	ldr	r3, [pc, #176]	; (400e18 <xQueueGenericSend+0x1c0>)
  400d66:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400d68:	2000      	movs	r0, #0
  400d6a:	e045      	b.n	400df8 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  400d6c:	b917      	cbnz	r7, 400d74 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400d6e:	a802      	add	r0, sp, #8
  400d70:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  400d72:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  400d74:	4b28      	ldr	r3, [pc, #160]	; (400e18 <xQueueGenericSend+0x1c0>)
  400d76:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400d78:	4b28      	ldr	r3, [pc, #160]	; (400e1c <xQueueGenericSend+0x1c4>)
  400d7a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d7c:	47b0      	blx	r6
  400d7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d80:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d84:	d101      	bne.n	400d8a <xQueueGenericSend+0x132>
  400d86:	2300      	movs	r3, #0
  400d88:	6463      	str	r3, [r4, #68]	; 0x44
  400d8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d90:	d101      	bne.n	400d96 <xQueueGenericSend+0x13e>
  400d92:	2300      	movs	r3, #0
  400d94:	64a3      	str	r3, [r4, #72]	; 0x48
  400d96:	4b20      	ldr	r3, [pc, #128]	; (400e18 <xQueueGenericSend+0x1c0>)
  400d98:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d9a:	a802      	add	r0, sp, #8
  400d9c:	a901      	add	r1, sp, #4
  400d9e:	4b20      	ldr	r3, [pc, #128]	; (400e20 <xQueueGenericSend+0x1c8>)
  400da0:	4798      	blx	r3
  400da2:	bb18      	cbnz	r0, 400dec <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400da4:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400da6:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400daa:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400dae:	4b1a      	ldr	r3, [pc, #104]	; (400e18 <xQueueGenericSend+0x1c0>)
  400db0:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400db2:	45d3      	cmp	fp, sl
  400db4:	d114      	bne.n	400de0 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400db6:	f104 0010 	add.w	r0, r4, #16
  400dba:	9901      	ldr	r1, [sp, #4]
  400dbc:	4b19      	ldr	r3, [pc, #100]	; (400e24 <xQueueGenericSend+0x1cc>)
  400dbe:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400dc0:	4620      	mov	r0, r4
  400dc2:	4b19      	ldr	r3, [pc, #100]	; (400e28 <xQueueGenericSend+0x1d0>)
  400dc4:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400dc6:	4b19      	ldr	r3, [pc, #100]	; (400e2c <xQueueGenericSend+0x1d4>)
  400dc8:	4798      	blx	r3
  400dca:	2800      	cmp	r0, #0
  400dcc:	d18d      	bne.n	400cea <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  400dce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400dd2:	f8c8 3000 	str.w	r3, [r8]
  400dd6:	f3bf 8f4f 	dsb	sy
  400dda:	f3bf 8f6f 	isb	sy
  400dde:	e784      	b.n	400cea <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400de0:	4620      	mov	r0, r4
  400de2:	4b11      	ldr	r3, [pc, #68]	; (400e28 <xQueueGenericSend+0x1d0>)
  400de4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400de6:	4b11      	ldr	r3, [pc, #68]	; (400e2c <xQueueGenericSend+0x1d4>)
  400de8:	4798      	blx	r3
  400dea:	e77e      	b.n	400cea <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400dec:	4620      	mov	r0, r4
  400dee:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <xQueueGenericSend+0x1d0>)
  400df0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400df2:	4b0e      	ldr	r3, [pc, #56]	; (400e2c <xQueueGenericSend+0x1d4>)
  400df4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400df6:	2000      	movs	r0, #0
		}
	}
}
  400df8:	b005      	add	sp, #20
  400dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400dfe:	bf00      	nop
  400e00:	00401c75 	.word	0x00401c75
  400e04:	00400609 	.word	0x00400609
  400e08:	00400971 	.word	0x00400971
  400e0c:	004009f9 	.word	0x004009f9
  400e10:	e000ed04 	.word	0xe000ed04
  400e14:	00401b0d 	.word	0x00401b0d
  400e18:	00400655 	.word	0x00400655
  400e1c:	004015e9 	.word	0x004015e9
  400e20:	00401bd5 	.word	0x00401bd5
  400e24:	00401a09 	.word	0x00401a09
  400e28:	00400aa5 	.word	0x00400aa5
  400e2c:	00401739 	.word	0x00401739
  400e30:	00401ba5 	.word	0x00401ba5

00400e34 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
  400e34:	b570      	push	{r4, r5, r6, lr}
  400e36:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
  400e38:	2058      	movs	r0, #88	; 0x58
  400e3a:	4b11      	ldr	r3, [pc, #68]	; (400e80 <xQueueCreateMutex+0x4c>)
  400e3c:	4798      	blx	r3
		if( pxNewQueue != NULL )
  400e3e:	4604      	mov	r4, r0
  400e40:	b1d8      	cbz	r0, 400e7a <xQueueCreateMutex+0x46>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
  400e42:	2500      	movs	r5, #0
  400e44:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
  400e46:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
  400e48:	6085      	str	r5, [r0, #8]
			pxNewQueue->u.pcReadFrom = NULL;
  400e4a:	60c5      	str	r5, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400e4c:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
  400e4e:	2301      	movs	r3, #1
  400e50:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
  400e52:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
  400e54:	f04f 33ff 	mov.w	r3, #4294967295
  400e58:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
  400e5a:	6483      	str	r3, [r0, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
  400e5c:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
			}
			#endif

			#if ( configUSE_QUEUE_SETS == 1 )
			{
				pxNewQueue->pxQueueSetContainer = NULL;
  400e60:	6545      	str	r5, [r0, #84]	; 0x54
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
  400e62:	3010      	adds	r0, #16
  400e64:	4e07      	ldr	r6, [pc, #28]	; (400e84 <xQueueCreateMutex+0x50>)
  400e66:	47b0      	blx	r6
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
  400e68:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e6c:	47b0      	blx	r6

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
  400e6e:	4620      	mov	r0, r4
  400e70:	4629      	mov	r1, r5
  400e72:	462a      	mov	r2, r5
  400e74:	462b      	mov	r3, r5
  400e76:	4d04      	ldr	r5, [pc, #16]	; (400e88 <xQueueCreateMutex+0x54>)
  400e78:	47a8      	blx	r5
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
  400e7a:	4620      	mov	r0, r4
  400e7c:	bd70      	pop	{r4, r5, r6, pc}
  400e7e:	bf00      	nop
  400e80:	00400865 	.word	0x00400865
  400e84:	004008e1 	.word	0x004008e1
  400e88:	00400c59 	.word	0x00400c59

00400e8c <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400e8c:	b950      	cbnz	r0, 400ea4 <xQueueGenericSendFromISR+0x18>
  400e8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e92:	b672      	cpsid	i
  400e94:	f383 8811 	msr	BASEPRI, r3
  400e98:	f3bf 8f6f 	isb	sy
  400e9c:	f3bf 8f4f 	dsb	sy
  400ea0:	b662      	cpsie	i
  400ea2:	e7fe      	b.n	400ea2 <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  400ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ea8:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400eaa:	b961      	cbnz	r1, 400ec6 <xQueueGenericSendFromISR+0x3a>
  400eac:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400eae:	b150      	cbz	r0, 400ec6 <xQueueGenericSendFromISR+0x3a>
  400eb0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400eb4:	b672      	cpsid	i
  400eb6:	f383 8811 	msr	BASEPRI, r3
  400eba:	f3bf 8f6f 	isb	sy
  400ebe:	f3bf 8f4f 	dsb	sy
  400ec2:	b662      	cpsie	i
  400ec4:	e7fe      	b.n	400ec4 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400ec6:	2b02      	cmp	r3, #2
  400ec8:	d10d      	bne.n	400ee6 <xQueueGenericSendFromISR+0x5a>
  400eca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400ecc:	2801      	cmp	r0, #1
  400ece:	d00a      	beq.n	400ee6 <xQueueGenericSendFromISR+0x5a>
  400ed0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ed4:	b672      	cpsid	i
  400ed6:	f383 8811 	msr	BASEPRI, r3
  400eda:	f3bf 8f6f 	isb	sy
  400ede:	f3bf 8f4f 	dsb	sy
  400ee2:	b662      	cpsie	i
  400ee4:	e7fe      	b.n	400ee4 <xQueueGenericSendFromISR+0x58>
  400ee6:	461e      	mov	r6, r3
  400ee8:	4615      	mov	r5, r2
  400eea:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400eec:	4b21      	ldr	r3, [pc, #132]	; (400f74 <xQueueGenericSendFromISR+0xe8>)
  400eee:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400ef0:	f3ef 8711 	mrs	r7, BASEPRI
  400ef4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ef8:	b672      	cpsid	i
  400efa:	f383 8811 	msr	BASEPRI, r3
  400efe:	f3bf 8f6f 	isb	sy
  400f02:	f3bf 8f4f 	dsb	sy
  400f06:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400f08:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f0a:	2e02      	cmp	r6, #2
  400f0c:	d002      	beq.n	400f14 <xQueueGenericSendFromISR+0x88>
  400f0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f10:	429a      	cmp	r2, r3
  400f12:	d223      	bcs.n	400f5c <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400f14:	4620      	mov	r0, r4
  400f16:	4641      	mov	r1, r8
  400f18:	4632      	mov	r2, r6
  400f1a:	4b17      	ldr	r3, [pc, #92]	; (400f78 <xQueueGenericSendFromISR+0xec>)
  400f1c:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400f1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f20:	f1b3 3fff 	cmp.w	r3, #4294967295
  400f24:	d115      	bne.n	400f52 <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400f26:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400f28:	b143      	cbz	r3, 400f3c <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400f2a:	4620      	mov	r0, r4
  400f2c:	4631      	mov	r1, r6
  400f2e:	4b13      	ldr	r3, [pc, #76]	; (400f7c <xQueueGenericSendFromISR+0xf0>)
  400f30:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  400f32:	2801      	cmp	r0, #1
  400f34:	d114      	bne.n	400f60 <xQueueGenericSendFromISR+0xd4>
  400f36:	b19d      	cbz	r5, 400f60 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  400f38:	6028      	str	r0, [r5, #0]
  400f3a:	e016      	b.n	400f6a <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400f3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400f3e:	b18b      	cbz	r3, 400f64 <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400f40:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400f44:	4b0e      	ldr	r3, [pc, #56]	; (400f80 <xQueueGenericSendFromISR+0xf4>)
  400f46:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  400f48:	b170      	cbz	r0, 400f68 <xQueueGenericSendFromISR+0xdc>
  400f4a:	b16d      	cbz	r5, 400f68 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  400f4c:	2001      	movs	r0, #1
  400f4e:	6028      	str	r0, [r5, #0]
  400f50:	e00b      	b.n	400f6a <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400f52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f54:	3301      	adds	r3, #1
  400f56:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400f58:	2001      	movs	r0, #1
  400f5a:	e006      	b.n	400f6a <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400f5c:	2000      	movs	r0, #0
  400f5e:	e004      	b.n	400f6a <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400f60:	2001      	movs	r0, #1
  400f62:	e002      	b.n	400f6a <xQueueGenericSendFromISR+0xde>
  400f64:	2001      	movs	r0, #1
  400f66:	e000      	b.n	400f6a <xQueueGenericSendFromISR+0xde>
  400f68:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400f6a:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  400f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f72:	bf00      	nop
  400f74:	00400801 	.word	0x00400801
  400f78:	00400971 	.word	0x00400971
  400f7c:	004009f9 	.word	0x004009f9
  400f80:	00401b0d 	.word	0x00401b0d

00400f84 <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  400f84:	b950      	cbnz	r0, 400f9c <xQueueGiveFromISR+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400f86:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f8a:	b672      	cpsid	i
  400f8c:	f383 8811 	msr	BASEPRI, r3
  400f90:	f3bf 8f6f 	isb	sy
  400f94:	f3bf 8f4f 	dsb	sy
  400f98:	b662      	cpsie	i
  400f9a:	e7fe      	b.n	400f9a <xQueueGiveFromISR+0x16>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  400f9c:	b570      	push	{r4, r5, r6, lr}
  400f9e:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  400fa0:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400fa2:	b153      	cbz	r3, 400fba <xQueueGiveFromISR+0x36>
  400fa4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fa8:	b672      	cpsid	i
  400faa:	f383 8811 	msr	BASEPRI, r3
  400fae:	f3bf 8f6f 	isb	sy
  400fb2:	f3bf 8f4f 	dsb	sy
  400fb6:	b662      	cpsie	i
  400fb8:	e7fe      	b.n	400fb8 <xQueueGiveFromISR+0x34>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  400fba:	6803      	ldr	r3, [r0, #0]
  400fbc:	b963      	cbnz	r3, 400fd8 <xQueueGiveFromISR+0x54>
  400fbe:	6843      	ldr	r3, [r0, #4]
  400fc0:	b153      	cbz	r3, 400fd8 <xQueueGiveFromISR+0x54>
  400fc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fc6:	b672      	cpsid	i
  400fc8:	f383 8811 	msr	BASEPRI, r3
  400fcc:	f3bf 8f6f 	isb	sy
  400fd0:	f3bf 8f4f 	dsb	sy
  400fd4:	b662      	cpsie	i
  400fd6:	e7fe      	b.n	400fd6 <xQueueGiveFromISR+0x52>
  400fd8:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400fda:	4b1f      	ldr	r3, [pc, #124]	; (401058 <xQueueGiveFromISR+0xd4>)
  400fdc:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400fde:	f3ef 8611 	mrs	r6, BASEPRI
  400fe2:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fe6:	b672      	cpsid	i
  400fe8:	f383 8811 	msr	BASEPRI, r3
  400fec:	f3bf 8f6f 	isb	sy
  400ff0:	f3bf 8f4f 	dsb	sy
  400ff4:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400ff6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ffa:	429a      	cmp	r2, r3
  400ffc:	d221      	bcs.n	401042 <xQueueGiveFromISR+0xbe>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  400ffe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401000:	3301      	adds	r3, #1
  401002:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  401004:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401006:	f1b3 3fff 	cmp.w	r3, #4294967295
  40100a:	d115      	bne.n	401038 <xQueueGiveFromISR+0xb4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  40100c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40100e:	b143      	cbz	r3, 401022 <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401010:	4620      	mov	r0, r4
  401012:	2100      	movs	r1, #0
  401014:	4b11      	ldr	r3, [pc, #68]	; (40105c <xQueueGiveFromISR+0xd8>)
  401016:	4798      	blx	r3
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  401018:	2801      	cmp	r0, #1
  40101a:	d114      	bne.n	401046 <xQueueGiveFromISR+0xc2>
  40101c:	b19d      	cbz	r5, 401046 <xQueueGiveFromISR+0xc2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  40101e:	6028      	str	r0, [r5, #0]
  401020:	e016      	b.n	401050 <xQueueGiveFromISR+0xcc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401022:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401024:	b18b      	cbz	r3, 40104a <xQueueGiveFromISR+0xc6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401026:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40102a:	4b0d      	ldr	r3, [pc, #52]	; (401060 <xQueueGiveFromISR+0xdc>)
  40102c:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  40102e:	b170      	cbz	r0, 40104e <xQueueGiveFromISR+0xca>
  401030:	b16d      	cbz	r5, 40104e <xQueueGiveFromISR+0xca>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  401032:	2001      	movs	r0, #1
  401034:	6028      	str	r0, [r5, #0]
  401036:	e00b      	b.n	401050 <xQueueGiveFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  401038:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40103a:	3301      	adds	r3, #1
  40103c:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  40103e:	2001      	movs	r0, #1
  401040:	e006      	b.n	401050 <xQueueGiveFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  401042:	2000      	movs	r0, #0
  401044:	e004      	b.n	401050 <xQueueGiveFromISR+0xcc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  401046:	2001      	movs	r0, #1
  401048:	e002      	b.n	401050 <xQueueGiveFromISR+0xcc>
  40104a:	2001      	movs	r0, #1
  40104c:	e000      	b.n	401050 <xQueueGiveFromISR+0xcc>
  40104e:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401050:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  401054:	bd70      	pop	{r4, r5, r6, pc}
  401056:	bf00      	nop
  401058:	00400801 	.word	0x00400801
  40105c:	004009f9 	.word	0x004009f9
  401060:	00401b0d 	.word	0x00401b0d

00401064 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  401064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401068:	b085      	sub	sp, #20
  40106a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  40106c:	b950      	cbnz	r0, 401084 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40106e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401072:	b672      	cpsid	i
  401074:	f383 8811 	msr	BASEPRI, r3
  401078:	f3bf 8f6f 	isb	sy
  40107c:	f3bf 8f4f 	dsb	sy
  401080:	b662      	cpsie	i
  401082:	e7fe      	b.n	401082 <xQueueGenericReceive+0x1e>
  401084:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401086:	b961      	cbnz	r1, 4010a2 <xQueueGenericReceive+0x3e>
  401088:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40108a:	b152      	cbz	r2, 4010a2 <xQueueGenericReceive+0x3e>
  40108c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401090:	b672      	cpsid	i
  401092:	f383 8811 	msr	BASEPRI, r3
  401096:	f3bf 8f6f 	isb	sy
  40109a:	f3bf 8f4f 	dsb	sy
  40109e:	b662      	cpsie	i
  4010a0:	e7fe      	b.n	4010a0 <xQueueGenericReceive+0x3c>
  4010a2:	4698      	mov	r8, r3
  4010a4:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4010a6:	4b52      	ldr	r3, [pc, #328]	; (4011f0 <xQueueGenericReceive+0x18c>)
  4010a8:	4798      	blx	r3
  4010aa:	b960      	cbnz	r0, 4010c6 <xQueueGenericReceive+0x62>
  4010ac:	9b01      	ldr	r3, [sp, #4]
  4010ae:	b163      	cbz	r3, 4010ca <xQueueGenericReceive+0x66>
  4010b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010b4:	b672      	cpsid	i
  4010b6:	f383 8811 	msr	BASEPRI, r3
  4010ba:	f3bf 8f6f 	isb	sy
  4010be:	f3bf 8f4f 	dsb	sy
  4010c2:	b662      	cpsie	i
  4010c4:	e7fe      	b.n	4010c4 <xQueueGenericReceive+0x60>
  4010c6:	2600      	movs	r6, #0
  4010c8:	e000      	b.n	4010cc <xQueueGenericReceive+0x68>
  4010ca:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4010cc:	4d49      	ldr	r5, [pc, #292]	; (4011f4 <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4010ce:	f8df a154 	ldr.w	sl, [pc, #340]	; 401224 <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  4010d2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 401204 <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  4010d6:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4010d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010da:	2b00      	cmp	r3, #0
  4010dc:	d034      	beq.n	401148 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  4010de:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4010e0:	4620      	mov	r0, r4
  4010e2:	4659      	mov	r1, fp
  4010e4:	4b44      	ldr	r3, [pc, #272]	; (4011f8 <xQueueGenericReceive+0x194>)
  4010e6:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  4010e8:	f1b8 0f00 	cmp.w	r8, #0
  4010ec:	d118      	bne.n	401120 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  4010ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4010f0:	3b01      	subs	r3, #1
  4010f2:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4010f4:	6823      	ldr	r3, [r4, #0]
  4010f6:	b913      	cbnz	r3, 4010fe <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4010f8:	4b40      	ldr	r3, [pc, #256]	; (4011fc <xQueueGenericReceive+0x198>)
  4010fa:	4798      	blx	r3
  4010fc:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010fe:	6923      	ldr	r3, [r4, #16]
  401100:	b1f3      	cbz	r3, 401140 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401102:	f104 0010 	add.w	r0, r4, #16
  401106:	4b3e      	ldr	r3, [pc, #248]	; (401200 <xQueueGenericReceive+0x19c>)
  401108:	4798      	blx	r3
  40110a:	2801      	cmp	r0, #1
  40110c:	d118      	bne.n	401140 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  40110e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401112:	4b3c      	ldr	r3, [pc, #240]	; (401204 <xQueueGenericReceive+0x1a0>)
  401114:	601a      	str	r2, [r3, #0]
  401116:	f3bf 8f4f 	dsb	sy
  40111a:	f3bf 8f6f 	isb	sy
  40111e:	e00f      	b.n	401140 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401120:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401122:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401124:	b163      	cbz	r3, 401140 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401126:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40112a:	4b35      	ldr	r3, [pc, #212]	; (401200 <xQueueGenericReceive+0x19c>)
  40112c:	4798      	blx	r3
  40112e:	b138      	cbz	r0, 401140 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  401130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401134:	4b33      	ldr	r3, [pc, #204]	; (401204 <xQueueGenericReceive+0x1a0>)
  401136:	601a      	str	r2, [r3, #0]
  401138:	f3bf 8f4f 	dsb	sy
  40113c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  401140:	4b31      	ldr	r3, [pc, #196]	; (401208 <xQueueGenericReceive+0x1a4>)
  401142:	4798      	blx	r3
				return pdPASS;
  401144:	2001      	movs	r0, #1
  401146:	e04f      	b.n	4011e8 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401148:	9b01      	ldr	r3, [sp, #4]
  40114a:	b91b      	cbnz	r3, 401154 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  40114c:	4b2e      	ldr	r3, [pc, #184]	; (401208 <xQueueGenericReceive+0x1a4>)
  40114e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  401150:	2000      	movs	r0, #0
  401152:	e049      	b.n	4011e8 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  401154:	b916      	cbnz	r6, 40115c <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401156:	a802      	add	r0, sp, #8
  401158:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  40115a:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  40115c:	4b2a      	ldr	r3, [pc, #168]	; (401208 <xQueueGenericReceive+0x1a4>)
  40115e:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401160:	4b2a      	ldr	r3, [pc, #168]	; (40120c <xQueueGenericReceive+0x1a8>)
  401162:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401164:	47a8      	blx	r5
  401166:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401168:	f1b3 3fff 	cmp.w	r3, #4294967295
  40116c:	d101      	bne.n	401172 <xQueueGenericReceive+0x10e>
  40116e:	2300      	movs	r3, #0
  401170:	6463      	str	r3, [r4, #68]	; 0x44
  401172:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401174:	f1b3 3fff 	cmp.w	r3, #4294967295
  401178:	d101      	bne.n	40117e <xQueueGenericReceive+0x11a>
  40117a:	2300      	movs	r3, #0
  40117c:	64a3      	str	r3, [r4, #72]	; 0x48
  40117e:	4b22      	ldr	r3, [pc, #136]	; (401208 <xQueueGenericReceive+0x1a4>)
  401180:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401182:	a802      	add	r0, sp, #8
  401184:	a901      	add	r1, sp, #4
  401186:	4b22      	ldr	r3, [pc, #136]	; (401210 <xQueueGenericReceive+0x1ac>)
  401188:	4798      	blx	r3
  40118a:	bb38      	cbnz	r0, 4011dc <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  40118c:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40118e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401190:	4b1d      	ldr	r3, [pc, #116]	; (401208 <xQueueGenericReceive+0x1a4>)
  401192:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401194:	b9e7      	cbnz	r7, 4011d0 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401196:	6823      	ldr	r3, [r4, #0]
  401198:	b92b      	cbnz	r3, 4011a6 <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  40119a:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  40119c:	6860      	ldr	r0, [r4, #4]
  40119e:	4b1d      	ldr	r3, [pc, #116]	; (401214 <xQueueGenericReceive+0x1b0>)
  4011a0:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  4011a2:	4b19      	ldr	r3, [pc, #100]	; (401208 <xQueueGenericReceive+0x1a4>)
  4011a4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4011a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4011aa:	9901      	ldr	r1, [sp, #4]
  4011ac:	4b1a      	ldr	r3, [pc, #104]	; (401218 <xQueueGenericReceive+0x1b4>)
  4011ae:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4011b0:	4620      	mov	r0, r4
  4011b2:	4b1a      	ldr	r3, [pc, #104]	; (40121c <xQueueGenericReceive+0x1b8>)
  4011b4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4011b6:	4b1a      	ldr	r3, [pc, #104]	; (401220 <xQueueGenericReceive+0x1bc>)
  4011b8:	4798      	blx	r3
  4011ba:	2800      	cmp	r0, #0
  4011bc:	d18b      	bne.n	4010d6 <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  4011be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4011c2:	f8c9 3000 	str.w	r3, [r9]
  4011c6:	f3bf 8f4f 	dsb	sy
  4011ca:	f3bf 8f6f 	isb	sy
  4011ce:	e782      	b.n	4010d6 <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  4011d0:	4620      	mov	r0, r4
  4011d2:	4b12      	ldr	r3, [pc, #72]	; (40121c <xQueueGenericReceive+0x1b8>)
  4011d4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4011d6:	4b12      	ldr	r3, [pc, #72]	; (401220 <xQueueGenericReceive+0x1bc>)
  4011d8:	4798      	blx	r3
  4011da:	e77c      	b.n	4010d6 <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4011dc:	4620      	mov	r0, r4
  4011de:	4b0f      	ldr	r3, [pc, #60]	; (40121c <xQueueGenericReceive+0x1b8>)
  4011e0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4011e2:	4b0f      	ldr	r3, [pc, #60]	; (401220 <xQueueGenericReceive+0x1bc>)
  4011e4:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4011e6:	2000      	movs	r0, #0
		}
	}
}
  4011e8:	b005      	add	sp, #20
  4011ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4011ee:	bf00      	nop
  4011f0:	00401c75 	.word	0x00401c75
  4011f4:	00400609 	.word	0x00400609
  4011f8:	00400a7d 	.word	0x00400a7d
  4011fc:	00401dfd 	.word	0x00401dfd
  401200:	00401b0d 	.word	0x00401b0d
  401204:	e000ed04 	.word	0xe000ed04
  401208:	00400655 	.word	0x00400655
  40120c:	004015e9 	.word	0x004015e9
  401210:	00401bd5 	.word	0x00401bd5
  401214:	00401c95 	.word	0x00401c95
  401218:	00401a09 	.word	0x00401a09
  40121c:	00400aa5 	.word	0x00400aa5
  401220:	00401739 	.word	0x00401739
  401224:	00401ba5 	.word	0x00401ba5

00401228 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  401228:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40122a:	4b0b      	ldr	r3, [pc, #44]	; (401258 <vQueueAddToRegistry+0x30>)
  40122c:	681b      	ldr	r3, [r3, #0]
  40122e:	b12b      	cbz	r3, 40123c <vQueueAddToRegistry+0x14>
  401230:	2301      	movs	r3, #1
  401232:	4c09      	ldr	r4, [pc, #36]	; (401258 <vQueueAddToRegistry+0x30>)
  401234:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401238:	b942      	cbnz	r2, 40124c <vQueueAddToRegistry+0x24>
  40123a:	e000      	b.n	40123e <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40123c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40123e:	4a06      	ldr	r2, [pc, #24]	; (401258 <vQueueAddToRegistry+0x30>)
  401240:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401244:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401248:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  40124a:	e002      	b.n	401252 <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40124c:	3301      	adds	r3, #1
  40124e:	2b08      	cmp	r3, #8
  401250:	d1f0      	bne.n	401234 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  401252:	f85d 4b04 	ldr.w	r4, [sp], #4
  401256:	4770      	bx	lr
  401258:	2040c3b4 	.word	0x2040c3b4

0040125c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  40125c:	b570      	push	{r4, r5, r6, lr}
  40125e:	4604      	mov	r4, r0
  401260:	460e      	mov	r6, r1
  401262:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401264:	4b0d      	ldr	r3, [pc, #52]	; (40129c <vQueueWaitForMessageRestricted+0x40>)
  401266:	4798      	blx	r3
  401268:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40126a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40126e:	d101      	bne.n	401274 <vQueueWaitForMessageRestricted+0x18>
  401270:	2300      	movs	r3, #0
  401272:	6463      	str	r3, [r4, #68]	; 0x44
  401274:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401276:	f1b3 3fff 	cmp.w	r3, #4294967295
  40127a:	d101      	bne.n	401280 <vQueueWaitForMessageRestricted+0x24>
  40127c:	2300      	movs	r3, #0
  40127e:	64a3      	str	r3, [r4, #72]	; 0x48
  401280:	4b07      	ldr	r3, [pc, #28]	; (4012a0 <vQueueWaitForMessageRestricted+0x44>)
  401282:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401284:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401286:	b92b      	cbnz	r3, 401294 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401288:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40128c:	4631      	mov	r1, r6
  40128e:	462a      	mov	r2, r5
  401290:	4b04      	ldr	r3, [pc, #16]	; (4012a4 <vQueueWaitForMessageRestricted+0x48>)
  401292:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  401294:	4620      	mov	r0, r4
  401296:	4b04      	ldr	r3, [pc, #16]	; (4012a8 <vQueueWaitForMessageRestricted+0x4c>)
  401298:	4798      	blx	r3
  40129a:	bd70      	pop	{r4, r5, r6, pc}
  40129c:	00400609 	.word	0x00400609
  4012a0:	00400655 	.word	0x00400655
  4012a4:	00401a8d 	.word	0x00401a8d
  4012a8:	00400aa5 	.word	0x00400aa5

004012ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4012ac:	4b08      	ldr	r3, [pc, #32]	; (4012d0 <prvResetNextTaskUnblockTime+0x24>)
  4012ae:	681b      	ldr	r3, [r3, #0]
  4012b0:	681b      	ldr	r3, [r3, #0]
  4012b2:	b923      	cbnz	r3, 4012be <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  4012b4:	f04f 32ff 	mov.w	r2, #4294967295
  4012b8:	4b06      	ldr	r3, [pc, #24]	; (4012d4 <prvResetNextTaskUnblockTime+0x28>)
  4012ba:	601a      	str	r2, [r3, #0]
  4012bc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4012be:	4b04      	ldr	r3, [pc, #16]	; (4012d0 <prvResetNextTaskUnblockTime+0x24>)
  4012c0:	681b      	ldr	r3, [r3, #0]
  4012c2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4012c4:	68db      	ldr	r3, [r3, #12]
  4012c6:	685a      	ldr	r2, [r3, #4]
  4012c8:	4b02      	ldr	r3, [pc, #8]	; (4012d4 <prvResetNextTaskUnblockTime+0x28>)
  4012ca:	601a      	str	r2, [r3, #0]
  4012cc:	4770      	bx	lr
  4012ce:	bf00      	nop
  4012d0:	2040c1b4 	.word	0x2040c1b4
  4012d4:	2040c2d8 	.word	0x2040c2d8

004012d8 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  4012d8:	b510      	push	{r4, lr}
  4012da:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4012dc:	4b0e      	ldr	r3, [pc, #56]	; (401318 <prvAddCurrentTaskToDelayedList+0x40>)
  4012de:	681b      	ldr	r3, [r3, #0]
  4012e0:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4012e2:	4b0e      	ldr	r3, [pc, #56]	; (40131c <prvAddCurrentTaskToDelayedList+0x44>)
  4012e4:	681b      	ldr	r3, [r3, #0]
  4012e6:	4298      	cmp	r0, r3
  4012e8:	d207      	bcs.n	4012fa <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4012ea:	4b0d      	ldr	r3, [pc, #52]	; (401320 <prvAddCurrentTaskToDelayedList+0x48>)
  4012ec:	6818      	ldr	r0, [r3, #0]
  4012ee:	4b0a      	ldr	r3, [pc, #40]	; (401318 <prvAddCurrentTaskToDelayedList+0x40>)
  4012f0:	6819      	ldr	r1, [r3, #0]
  4012f2:	3104      	adds	r1, #4
  4012f4:	4b0b      	ldr	r3, [pc, #44]	; (401324 <prvAddCurrentTaskToDelayedList+0x4c>)
  4012f6:	4798      	blx	r3
  4012f8:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4012fa:	4b0b      	ldr	r3, [pc, #44]	; (401328 <prvAddCurrentTaskToDelayedList+0x50>)
  4012fc:	6818      	ldr	r0, [r3, #0]
  4012fe:	4b06      	ldr	r3, [pc, #24]	; (401318 <prvAddCurrentTaskToDelayedList+0x40>)
  401300:	6819      	ldr	r1, [r3, #0]
  401302:	3104      	adds	r1, #4
  401304:	4b07      	ldr	r3, [pc, #28]	; (401324 <prvAddCurrentTaskToDelayedList+0x4c>)
  401306:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  401308:	4b08      	ldr	r3, [pc, #32]	; (40132c <prvAddCurrentTaskToDelayedList+0x54>)
  40130a:	681b      	ldr	r3, [r3, #0]
  40130c:	429c      	cmp	r4, r3
  40130e:	d201      	bcs.n	401314 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  401310:	4b06      	ldr	r3, [pc, #24]	; (40132c <prvAddCurrentTaskToDelayedList+0x54>)
  401312:	601c      	str	r4, [r3, #0]
  401314:	bd10      	pop	{r4, pc}
  401316:	bf00      	nop
  401318:	2040c2b8 	.word	0x2040c2b8
  40131c:	2040c2d4 	.word	0x2040c2d4
  401320:	2040c1d4 	.word	0x2040c1d4
  401324:	00400919 	.word	0x00400919
  401328:	2040c1b4 	.word	0x2040c1b4
  40132c:	2040c2d8 	.word	0x2040c2d8

00401330 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  401330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401334:	b083      	sub	sp, #12
  401336:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401338:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  40133c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  40133e:	b950      	cbnz	r0, 401356 <xTaskGenericCreate+0x26>
  401340:	f04f 0380 	mov.w	r3, #128	; 0x80
  401344:	b672      	cpsid	i
  401346:	f383 8811 	msr	BASEPRI, r3
  40134a:	f3bf 8f6f 	isb	sy
  40134e:	f3bf 8f4f 	dsb	sy
  401352:	b662      	cpsie	i
  401354:	e7fe      	b.n	401354 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401356:	2f09      	cmp	r7, #9
  401358:	d90a      	bls.n	401370 <xTaskGenericCreate+0x40>
  40135a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40135e:	b672      	cpsid	i
  401360:	f383 8811 	msr	BASEPRI, r3
  401364:	f3bf 8f6f 	isb	sy
  401368:	f3bf 8f4f 	dsb	sy
  40136c:	b662      	cpsie	i
  40136e:	e7fe      	b.n	40136e <xTaskGenericCreate+0x3e>
  401370:	9001      	str	r0, [sp, #4]
  401372:	9300      	str	r3, [sp, #0]
  401374:	4690      	mov	r8, r2
  401376:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401378:	b935      	cbnz	r5, 401388 <xTaskGenericCreate+0x58>
  40137a:	0090      	lsls	r0, r2, #2
  40137c:	4b5f      	ldr	r3, [pc, #380]	; (4014fc <xTaskGenericCreate+0x1cc>)
  40137e:	4798      	blx	r3

		if( pxStack != NULL )
  401380:	4605      	mov	r5, r0
  401382:	2800      	cmp	r0, #0
  401384:	f000 80b4 	beq.w	4014f0 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401388:	2058      	movs	r0, #88	; 0x58
  40138a:	4b5c      	ldr	r3, [pc, #368]	; (4014fc <xTaskGenericCreate+0x1cc>)
  40138c:	4798      	blx	r3

			if( pxNewTCB != NULL )
  40138e:	4604      	mov	r4, r0
  401390:	b1a0      	cbz	r0, 4013bc <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  401392:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401394:	4628      	mov	r0, r5
  401396:	21a5      	movs	r1, #165	; 0xa5
  401398:	ea4f 0288 	mov.w	r2, r8, lsl #2
  40139c:	4b58      	ldr	r3, [pc, #352]	; (401500 <xTaskGenericCreate+0x1d0>)
  40139e:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4013a0:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  4013a4:	4445      	add	r5, r8
  4013a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4013a8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4013ac:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4013b0:	7833      	ldrb	r3, [r6, #0]
  4013b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4013b6:	7833      	ldrb	r3, [r6, #0]
  4013b8:	b923      	cbnz	r3, 4013c4 <xTaskGenericCreate+0x94>
  4013ba:	e00f      	b.n	4013dc <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  4013bc:	4628      	mov	r0, r5
  4013be:	4b51      	ldr	r3, [pc, #324]	; (401504 <xTaskGenericCreate+0x1d4>)
  4013c0:	4798      	blx	r3
  4013c2:	e095      	b.n	4014f0 <xTaskGenericCreate+0x1c0>
  4013c4:	4633      	mov	r3, r6
  4013c6:	f104 0234 	add.w	r2, r4, #52	; 0x34
  4013ca:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  4013cc:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  4013d0:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4013d4:	7819      	ldrb	r1, [r3, #0]
  4013d6:	b109      	cbz	r1, 4013dc <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4013d8:	42b3      	cmp	r3, r6
  4013da:	d1f7      	bne.n	4013cc <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4013dc:	f04f 0800 	mov.w	r8, #0
  4013e0:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  4013e4:	463e      	mov	r6, r7
  4013e6:	2f09      	cmp	r7, #9
  4013e8:	bf28      	it	cs
  4013ea:	2609      	movcs	r6, #9
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  4013ec:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4013ee:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4013f0:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4013f4:	f104 0904 	add.w	r9, r4, #4
  4013f8:	4648      	mov	r0, r9
  4013fa:	f8df b154 	ldr.w	fp, [pc, #340]	; 401550 <xTaskGenericCreate+0x220>
  4013fe:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401400:	f104 0018 	add.w	r0, r4, #24
  401404:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401406:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401408:	f1c6 060a 	rsb	r6, r6, #10
  40140c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  40140e:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  401410:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401414:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401418:	4628      	mov	r0, r5
  40141a:	9901      	ldr	r1, [sp, #4]
  40141c:	9a00      	ldr	r2, [sp, #0]
  40141e:	4b3a      	ldr	r3, [pc, #232]	; (401508 <xTaskGenericCreate+0x1d8>)
  401420:	4798      	blx	r3
  401422:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  401424:	f1ba 0f00 	cmp.w	sl, #0
  401428:	d001      	beq.n	40142e <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40142a:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  40142e:	4b37      	ldr	r3, [pc, #220]	; (40150c <xTaskGenericCreate+0x1dc>)
  401430:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  401432:	4a37      	ldr	r2, [pc, #220]	; (401510 <xTaskGenericCreate+0x1e0>)
  401434:	6813      	ldr	r3, [r2, #0]
  401436:	3301      	adds	r3, #1
  401438:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  40143a:	4b36      	ldr	r3, [pc, #216]	; (401514 <xTaskGenericCreate+0x1e4>)
  40143c:	681b      	ldr	r3, [r3, #0]
  40143e:	bb0b      	cbnz	r3, 401484 <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  401440:	4b34      	ldr	r3, [pc, #208]	; (401514 <xTaskGenericCreate+0x1e4>)
  401442:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401444:	6813      	ldr	r3, [r2, #0]
  401446:	2b01      	cmp	r3, #1
  401448:	d126      	bne.n	401498 <xTaskGenericCreate+0x168>
  40144a:	4d33      	ldr	r5, [pc, #204]	; (401518 <xTaskGenericCreate+0x1e8>)
  40144c:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401450:	4e32      	ldr	r6, [pc, #200]	; (40151c <xTaskGenericCreate+0x1ec>)
  401452:	4628      	mov	r0, r5
  401454:	47b0      	blx	r6
  401456:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401458:	4545      	cmp	r5, r8
  40145a:	d1fa      	bne.n	401452 <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  40145c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401554 <xTaskGenericCreate+0x224>
  401460:	4640      	mov	r0, r8
  401462:	4d2e      	ldr	r5, [pc, #184]	; (40151c <xTaskGenericCreate+0x1ec>)
  401464:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401466:	4e2e      	ldr	r6, [pc, #184]	; (401520 <xTaskGenericCreate+0x1f0>)
  401468:	4630      	mov	r0, r6
  40146a:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  40146c:	482d      	ldr	r0, [pc, #180]	; (401524 <xTaskGenericCreate+0x1f4>)
  40146e:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  401470:	482d      	ldr	r0, [pc, #180]	; (401528 <xTaskGenericCreate+0x1f8>)
  401472:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  401474:	482d      	ldr	r0, [pc, #180]	; (40152c <xTaskGenericCreate+0x1fc>)
  401476:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401478:	4b2d      	ldr	r3, [pc, #180]	; (401530 <xTaskGenericCreate+0x200>)
  40147a:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40147e:	4b2d      	ldr	r3, [pc, #180]	; (401534 <xTaskGenericCreate+0x204>)
  401480:	601e      	str	r6, [r3, #0]
  401482:	e009      	b.n	401498 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  401484:	4b2c      	ldr	r3, [pc, #176]	; (401538 <xTaskGenericCreate+0x208>)
  401486:	681b      	ldr	r3, [r3, #0]
  401488:	b933      	cbnz	r3, 401498 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40148a:	4b22      	ldr	r3, [pc, #136]	; (401514 <xTaskGenericCreate+0x1e4>)
  40148c:	681b      	ldr	r3, [r3, #0]
  40148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401490:	429f      	cmp	r7, r3
  401492:	d301      	bcc.n	401498 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  401494:	4b1f      	ldr	r3, [pc, #124]	; (401514 <xTaskGenericCreate+0x1e4>)
  401496:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401498:	4a28      	ldr	r2, [pc, #160]	; (40153c <xTaskGenericCreate+0x20c>)
  40149a:	6813      	ldr	r3, [r2, #0]
  40149c:	3301      	adds	r3, #1
  40149e:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  4014a0:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  4014a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4014a4:	4926      	ldr	r1, [pc, #152]	; (401540 <xTaskGenericCreate+0x210>)
  4014a6:	680b      	ldr	r3, [r1, #0]
  4014a8:	2201      	movs	r2, #1
  4014aa:	4082      	lsls	r2, r0
  4014ac:	4313      	orrs	r3, r2
  4014ae:	600b      	str	r3, [r1, #0]
  4014b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4014b4:	4b18      	ldr	r3, [pc, #96]	; (401518 <xTaskGenericCreate+0x1e8>)
  4014b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4014ba:	4649      	mov	r1, r9
  4014bc:	4b21      	ldr	r3, [pc, #132]	; (401544 <xTaskGenericCreate+0x214>)
  4014be:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  4014c0:	4b21      	ldr	r3, [pc, #132]	; (401548 <xTaskGenericCreate+0x218>)
  4014c2:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  4014c4:	4b1c      	ldr	r3, [pc, #112]	; (401538 <xTaskGenericCreate+0x208>)
  4014c6:	681b      	ldr	r3, [r3, #0]
  4014c8:	b173      	cbz	r3, 4014e8 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  4014ca:	4b12      	ldr	r3, [pc, #72]	; (401514 <xTaskGenericCreate+0x1e4>)
  4014cc:	681b      	ldr	r3, [r3, #0]
  4014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4014d0:	429f      	cmp	r7, r3
  4014d2:	d90b      	bls.n	4014ec <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  4014d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4014d8:	4b1c      	ldr	r3, [pc, #112]	; (40154c <xTaskGenericCreate+0x21c>)
  4014da:	601a      	str	r2, [r3, #0]
  4014dc:	f3bf 8f4f 	dsb	sy
  4014e0:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4014e4:	2001      	movs	r0, #1
  4014e6:	e005      	b.n	4014f4 <xTaskGenericCreate+0x1c4>
  4014e8:	2001      	movs	r0, #1
  4014ea:	e003      	b.n	4014f4 <xTaskGenericCreate+0x1c4>
  4014ec:	2001      	movs	r0, #1
  4014ee:	e001      	b.n	4014f4 <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4014f0:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4014f4:	b003      	add	sp, #12
  4014f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014fa:	bf00      	nop
  4014fc:	00400865 	.word	0x00400865
  401500:	00406661 	.word	0x00406661
  401504:	004008c5 	.word	0x004008c5
  401508:	004005bd 	.word	0x004005bd
  40150c:	00400609 	.word	0x00400609
  401510:	2040c2e0 	.word	0x2040c2e0
  401514:	2040c2b8 	.word	0x2040c2b8
  401518:	2040c1dc 	.word	0x2040c1dc
  40151c:	004008e1 	.word	0x004008e1
  401520:	2040c2e4 	.word	0x2040c2e4
  401524:	2040c2bc 	.word	0x2040c2bc
  401528:	2040c2a4 	.word	0x2040c2a4
  40152c:	2040c2f8 	.word	0x2040c2f8
  401530:	2040c1b4 	.word	0x2040c1b4
  401534:	2040c1d4 	.word	0x2040c1d4
  401538:	2040c1b8 	.word	0x2040c1b8
  40153c:	2040c2dc 	.word	0x2040c2dc
  401540:	2040c30c 	.word	0x2040c30c
  401544:	00400901 	.word	0x00400901
  401548:	00400655 	.word	0x00400655
  40154c:	e000ed04 	.word	0xe000ed04
  401550:	004008f9 	.word	0x004008f9
  401554:	2040c1c0 	.word	0x2040c1c0

00401558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401558:	b510      	push	{r4, lr}
  40155a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  40155c:	2300      	movs	r3, #0
  40155e:	9300      	str	r3, [sp, #0]
  401560:	9301      	str	r3, [sp, #4]
  401562:	9302      	str	r3, [sp, #8]
  401564:	9303      	str	r3, [sp, #12]
  401566:	4818      	ldr	r0, [pc, #96]	; (4015c8 <vTaskStartScheduler+0x70>)
  401568:	4918      	ldr	r1, [pc, #96]	; (4015cc <vTaskStartScheduler+0x74>)
  40156a:	2282      	movs	r2, #130	; 0x82
  40156c:	4c18      	ldr	r4, [pc, #96]	; (4015d0 <vTaskStartScheduler+0x78>)
  40156e:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401570:	2801      	cmp	r0, #1
  401572:	d11a      	bne.n	4015aa <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401574:	4b17      	ldr	r3, [pc, #92]	; (4015d4 <vTaskStartScheduler+0x7c>)
  401576:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401578:	2801      	cmp	r0, #1
  40157a:	d116      	bne.n	4015aa <vTaskStartScheduler+0x52>
  40157c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401580:	b672      	cpsid	i
  401582:	f383 8811 	msr	BASEPRI, r3
  401586:	f3bf 8f6f 	isb	sy
  40158a:	f3bf 8f4f 	dsb	sy
  40158e:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401590:	f04f 32ff 	mov.w	r2, #4294967295
  401594:	4b10      	ldr	r3, [pc, #64]	; (4015d8 <vTaskStartScheduler+0x80>)
  401596:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401598:	2201      	movs	r2, #1
  40159a:	4b10      	ldr	r3, [pc, #64]	; (4015dc <vTaskStartScheduler+0x84>)
  40159c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40159e:	2200      	movs	r2, #0
  4015a0:	4b0f      	ldr	r3, [pc, #60]	; (4015e0 <vTaskStartScheduler+0x88>)
  4015a2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4015a4:	4b0f      	ldr	r3, [pc, #60]	; (4015e4 <vTaskStartScheduler+0x8c>)
  4015a6:	4798      	blx	r3
  4015a8:	e00b      	b.n	4015c2 <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  4015aa:	b950      	cbnz	r0, 4015c2 <vTaskStartScheduler+0x6a>
  4015ac:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015b0:	b672      	cpsid	i
  4015b2:	f383 8811 	msr	BASEPRI, r3
  4015b6:	f3bf 8f6f 	isb	sy
  4015ba:	f3bf 8f4f 	dsb	sy
  4015be:	b662      	cpsie	i
  4015c0:	e7fe      	b.n	4015c0 <vTaskStartScheduler+0x68>
	}
}
  4015c2:	b004      	add	sp, #16
  4015c4:	bd10      	pop	{r4, pc}
  4015c6:	bf00      	nop
  4015c8:	004018e1 	.word	0x004018e1
  4015cc:	0040a7d8 	.word	0x0040a7d8
  4015d0:	00401331 	.word	0x00401331
  4015d4:	00401ee5 	.word	0x00401ee5
  4015d8:	2040c2d8 	.word	0x2040c2d8
  4015dc:	2040c1b8 	.word	0x2040c1b8
  4015e0:	2040c2d4 	.word	0x2040c2d4
  4015e4:	0040073d 	.word	0x0040073d

004015e8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  4015e8:	4a02      	ldr	r2, [pc, #8]	; (4015f4 <vTaskSuspendAll+0xc>)
  4015ea:	6813      	ldr	r3, [r2, #0]
  4015ec:	3301      	adds	r3, #1
  4015ee:	6013      	str	r3, [r2, #0]
  4015f0:	4770      	bx	lr
  4015f2:	bf00      	nop
  4015f4:	2040c2d0 	.word	0x2040c2d0

004015f8 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  4015f8:	4b01      	ldr	r3, [pc, #4]	; (401600 <xTaskGetTickCount+0x8>)
  4015fa:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  4015fc:	4770      	bx	lr
  4015fe:	bf00      	nop
  401600:	2040c2d4 	.word	0x2040c2d4

00401604 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401608:	4b3d      	ldr	r3, [pc, #244]	; (401700 <xTaskIncrementTick+0xfc>)
  40160a:	681b      	ldr	r3, [r3, #0]
  40160c:	2b00      	cmp	r3, #0
  40160e:	d16a      	bne.n	4016e6 <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  401610:	4b3c      	ldr	r3, [pc, #240]	; (401704 <xTaskIncrementTick+0x100>)
  401612:	681a      	ldr	r2, [r3, #0]
  401614:	3201      	adds	r2, #1
  401616:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401618:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  40161a:	b9d6      	cbnz	r6, 401652 <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  40161c:	4b3a      	ldr	r3, [pc, #232]	; (401708 <xTaskIncrementTick+0x104>)
  40161e:	681b      	ldr	r3, [r3, #0]
  401620:	681b      	ldr	r3, [r3, #0]
  401622:	b153      	cbz	r3, 40163a <xTaskIncrementTick+0x36>
  401624:	f04f 0380 	mov.w	r3, #128	; 0x80
  401628:	b672      	cpsid	i
  40162a:	f383 8811 	msr	BASEPRI, r3
  40162e:	f3bf 8f6f 	isb	sy
  401632:	f3bf 8f4f 	dsb	sy
  401636:	b662      	cpsie	i
  401638:	e7fe      	b.n	401638 <xTaskIncrementTick+0x34>
  40163a:	4a33      	ldr	r2, [pc, #204]	; (401708 <xTaskIncrementTick+0x104>)
  40163c:	6811      	ldr	r1, [r2, #0]
  40163e:	4b33      	ldr	r3, [pc, #204]	; (40170c <xTaskIncrementTick+0x108>)
  401640:	6818      	ldr	r0, [r3, #0]
  401642:	6010      	str	r0, [r2, #0]
  401644:	6019      	str	r1, [r3, #0]
  401646:	4a32      	ldr	r2, [pc, #200]	; (401710 <xTaskIncrementTick+0x10c>)
  401648:	6813      	ldr	r3, [r2, #0]
  40164a:	3301      	adds	r3, #1
  40164c:	6013      	str	r3, [r2, #0]
  40164e:	4b31      	ldr	r3, [pc, #196]	; (401714 <xTaskIncrementTick+0x110>)
  401650:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  401652:	4b31      	ldr	r3, [pc, #196]	; (401718 <xTaskIncrementTick+0x114>)
  401654:	681b      	ldr	r3, [r3, #0]
  401656:	429e      	cmp	r6, r3
  401658:	d201      	bcs.n	40165e <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  40165a:	2400      	movs	r4, #0
  40165c:	e037      	b.n	4016ce <xTaskIncrementTick+0xca>
  40165e:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401660:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401708 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401664:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 401734 <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401668:	4f2c      	ldr	r7, [pc, #176]	; (40171c <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40166a:	f8d9 3000 	ldr.w	r3, [r9]
  40166e:	681b      	ldr	r3, [r3, #0]
  401670:	b923      	cbnz	r3, 40167c <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401672:	f04f 32ff 	mov.w	r2, #4294967295
  401676:	4b28      	ldr	r3, [pc, #160]	; (401718 <xTaskIncrementTick+0x114>)
  401678:	601a      	str	r2, [r3, #0]
						break;
  40167a:	e028      	b.n	4016ce <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40167c:	f8d9 3000 	ldr.w	r3, [r9]
  401680:	68db      	ldr	r3, [r3, #12]
  401682:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401684:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401686:	429e      	cmp	r6, r3
  401688:	d202      	bcs.n	401690 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  40168a:	4a23      	ldr	r2, [pc, #140]	; (401718 <xTaskIncrementTick+0x114>)
  40168c:	6013      	str	r3, [r2, #0]
							break;
  40168e:	e01e      	b.n	4016ce <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401690:	f105 0a04 	add.w	sl, r5, #4
  401694:	4650      	mov	r0, sl
  401696:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401698:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40169a:	b113      	cbz	r3, 4016a2 <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40169c:	f105 0018 	add.w	r0, r5, #24
  4016a0:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  4016a2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4016a4:	683b      	ldr	r3, [r7, #0]
  4016a6:	2201      	movs	r2, #1
  4016a8:	4082      	lsls	r2, r0
  4016aa:	4313      	orrs	r3, r2
  4016ac:	603b      	str	r3, [r7, #0]
  4016ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4016b2:	4b1b      	ldr	r3, [pc, #108]	; (401720 <xTaskIncrementTick+0x11c>)
  4016b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4016b8:	4651      	mov	r1, sl
  4016ba:	4b1a      	ldr	r3, [pc, #104]	; (401724 <xTaskIncrementTick+0x120>)
  4016bc:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4016be:	4b1a      	ldr	r3, [pc, #104]	; (401728 <xTaskIncrementTick+0x124>)
  4016c0:	681b      	ldr	r3, [r3, #0]
  4016c2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  4016c6:	429a      	cmp	r2, r3
  4016c8:	bf28      	it	cs
  4016ca:	2401      	movcs	r4, #1
  4016cc:	e7cd      	b.n	40166a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4016ce:	4b16      	ldr	r3, [pc, #88]	; (401728 <xTaskIncrementTick+0x124>)
  4016d0:	681b      	ldr	r3, [r3, #0]
  4016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4016d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4016d8:	4a11      	ldr	r2, [pc, #68]	; (401720 <xTaskIncrementTick+0x11c>)
  4016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  4016de:	2b02      	cmp	r3, #2
  4016e0:	bf28      	it	cs
  4016e2:	2401      	movcs	r4, #1
  4016e4:	e004      	b.n	4016f0 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  4016e6:	4a11      	ldr	r2, [pc, #68]	; (40172c <xTaskIncrementTick+0x128>)
  4016e8:	6813      	ldr	r3, [r2, #0]
  4016ea:	3301      	adds	r3, #1
  4016ec:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4016ee:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  4016f0:	4b0f      	ldr	r3, [pc, #60]	; (401730 <xTaskIncrementTick+0x12c>)
  4016f2:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  4016f4:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  4016f6:	bf0c      	ite	eq
  4016f8:	4620      	moveq	r0, r4
  4016fa:	2001      	movne	r0, #1
  4016fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401700:	2040c2d0 	.word	0x2040c2d0
  401704:	2040c2d4 	.word	0x2040c2d4
  401708:	2040c1b4 	.word	0x2040c1b4
  40170c:	2040c1d4 	.word	0x2040c1d4
  401710:	2040c1b0 	.word	0x2040c1b0
  401714:	004012ad 	.word	0x004012ad
  401718:	2040c2d8 	.word	0x2040c2d8
  40171c:	2040c30c 	.word	0x2040c30c
  401720:	2040c1dc 	.word	0x2040c1dc
  401724:	00400901 	.word	0x00400901
  401728:	2040c2b8 	.word	0x2040c2b8
  40172c:	2040c1d8 	.word	0x2040c1d8
  401730:	2040c310 	.word	0x2040c310
  401734:	0040094d 	.word	0x0040094d

00401738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  40173c:	4b36      	ldr	r3, [pc, #216]	; (401818 <xTaskResumeAll+0xe0>)
  40173e:	681b      	ldr	r3, [r3, #0]
  401740:	b953      	cbnz	r3, 401758 <xTaskResumeAll+0x20>
  401742:	f04f 0380 	mov.w	r3, #128	; 0x80
  401746:	b672      	cpsid	i
  401748:	f383 8811 	msr	BASEPRI, r3
  40174c:	f3bf 8f6f 	isb	sy
  401750:	f3bf 8f4f 	dsb	sy
  401754:	b662      	cpsie	i
  401756:	e7fe      	b.n	401756 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401758:	4b30      	ldr	r3, [pc, #192]	; (40181c <xTaskResumeAll+0xe4>)
  40175a:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  40175c:	4b2e      	ldr	r3, [pc, #184]	; (401818 <xTaskResumeAll+0xe0>)
  40175e:	681a      	ldr	r2, [r3, #0]
  401760:	3a01      	subs	r2, #1
  401762:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401764:	681b      	ldr	r3, [r3, #0]
  401766:	2b00      	cmp	r3, #0
  401768:	d14d      	bne.n	401806 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40176a:	4b2d      	ldr	r3, [pc, #180]	; (401820 <xTaskResumeAll+0xe8>)
  40176c:	681b      	ldr	r3, [r3, #0]
  40176e:	bb0b      	cbnz	r3, 4017b4 <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401770:	2400      	movs	r4, #0
  401772:	e04b      	b.n	40180c <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401774:	68fb      	ldr	r3, [r7, #12]
  401776:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401778:	f104 0018 	add.w	r0, r4, #24
  40177c:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40177e:	f104 0804 	add.w	r8, r4, #4
  401782:	4640      	mov	r0, r8
  401784:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401786:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401788:	682b      	ldr	r3, [r5, #0]
  40178a:	2201      	movs	r2, #1
  40178c:	4082      	lsls	r2, r0
  40178e:	4313      	orrs	r3, r2
  401790:	602b      	str	r3, [r5, #0]
  401792:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401796:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  40179a:	4641      	mov	r1, r8
  40179c:	4b21      	ldr	r3, [pc, #132]	; (401824 <xTaskResumeAll+0xec>)
  40179e:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4017a0:	4b21      	ldr	r3, [pc, #132]	; (401828 <xTaskResumeAll+0xf0>)
  4017a2:	681b      	ldr	r3, [r3, #0]
  4017a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4017a8:	429a      	cmp	r2, r3
  4017aa:	d308      	bcc.n	4017be <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  4017ac:	2201      	movs	r2, #1
  4017ae:	4b1f      	ldr	r3, [pc, #124]	; (40182c <xTaskResumeAll+0xf4>)
  4017b0:	601a      	str	r2, [r3, #0]
  4017b2:	e004      	b.n	4017be <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4017b4:	4f1e      	ldr	r7, [pc, #120]	; (401830 <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4017b6:	4e1f      	ldr	r6, [pc, #124]	; (401834 <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  4017b8:	4d1f      	ldr	r5, [pc, #124]	; (401838 <xTaskResumeAll+0x100>)
  4017ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 40184c <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4017be:	683b      	ldr	r3, [r7, #0]
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	d1d7      	bne.n	401774 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4017c4:	4b1d      	ldr	r3, [pc, #116]	; (40183c <xTaskResumeAll+0x104>)
  4017c6:	681b      	ldr	r3, [r3, #0]
  4017c8:	b17b      	cbz	r3, 4017ea <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4017ca:	4b1c      	ldr	r3, [pc, #112]	; (40183c <xTaskResumeAll+0x104>)
  4017cc:	681b      	ldr	r3, [r3, #0]
  4017ce:	b163      	cbz	r3, 4017ea <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  4017d0:	4e1b      	ldr	r6, [pc, #108]	; (401840 <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  4017d2:	4d16      	ldr	r5, [pc, #88]	; (40182c <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4017d4:	4c19      	ldr	r4, [pc, #100]	; (40183c <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  4017d6:	47b0      	blx	r6
  4017d8:	b108      	cbz	r0, 4017de <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  4017da:	2301      	movs	r3, #1
  4017dc:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4017de:	6823      	ldr	r3, [r4, #0]
  4017e0:	3b01      	subs	r3, #1
  4017e2:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4017e4:	6823      	ldr	r3, [r4, #0]
  4017e6:	2b00      	cmp	r3, #0
  4017e8:	d1f5      	bne.n	4017d6 <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  4017ea:	4b10      	ldr	r3, [pc, #64]	; (40182c <xTaskResumeAll+0xf4>)
  4017ec:	681b      	ldr	r3, [r3, #0]
  4017ee:	2b01      	cmp	r3, #1
  4017f0:	d10b      	bne.n	40180a <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  4017f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4017f6:	4b13      	ldr	r3, [pc, #76]	; (401844 <xTaskResumeAll+0x10c>)
  4017f8:	601a      	str	r2, [r3, #0]
  4017fa:	f3bf 8f4f 	dsb	sy
  4017fe:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  401802:	2401      	movs	r4, #1
  401804:	e002      	b.n	40180c <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401806:	2400      	movs	r4, #0
  401808:	e000      	b.n	40180c <xTaskResumeAll+0xd4>
  40180a:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40180c:	4b0e      	ldr	r3, [pc, #56]	; (401848 <xTaskResumeAll+0x110>)
  40180e:	4798      	blx	r3

	return xAlreadyYielded;
}
  401810:	4620      	mov	r0, r4
  401812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401816:	bf00      	nop
  401818:	2040c2d0 	.word	0x2040c2d0
  40181c:	00400609 	.word	0x00400609
  401820:	2040c2e0 	.word	0x2040c2e0
  401824:	00400901 	.word	0x00400901
  401828:	2040c2b8 	.word	0x2040c2b8
  40182c:	2040c310 	.word	0x2040c310
  401830:	2040c2bc 	.word	0x2040c2bc
  401834:	0040094d 	.word	0x0040094d
  401838:	2040c30c 	.word	0x2040c30c
  40183c:	2040c1d8 	.word	0x2040c1d8
  401840:	00401605 	.word	0x00401605
  401844:	e000ed04 	.word	0xe000ed04
  401848:	00400655 	.word	0x00400655
  40184c:	2040c1dc 	.word	0x2040c1dc

00401850 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  401850:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  401852:	2800      	cmp	r0, #0
  401854:	d029      	beq.n	4018aa <vTaskDelay+0x5a>
  401856:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401858:	4b18      	ldr	r3, [pc, #96]	; (4018bc <vTaskDelay+0x6c>)
  40185a:	681b      	ldr	r3, [r3, #0]
  40185c:	b153      	cbz	r3, 401874 <vTaskDelay+0x24>
  40185e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401862:	b672      	cpsid	i
  401864:	f383 8811 	msr	BASEPRI, r3
  401868:	f3bf 8f6f 	isb	sy
  40186c:	f3bf 8f4f 	dsb	sy
  401870:	b662      	cpsie	i
  401872:	e7fe      	b.n	401872 <vTaskDelay+0x22>
			vTaskSuspendAll();
  401874:	4b12      	ldr	r3, [pc, #72]	; (4018c0 <vTaskDelay+0x70>)
  401876:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401878:	4b12      	ldr	r3, [pc, #72]	; (4018c4 <vTaskDelay+0x74>)
  40187a:	681b      	ldr	r3, [r3, #0]
  40187c:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40187e:	4b12      	ldr	r3, [pc, #72]	; (4018c8 <vTaskDelay+0x78>)
  401880:	6818      	ldr	r0, [r3, #0]
  401882:	3004      	adds	r0, #4
  401884:	4b11      	ldr	r3, [pc, #68]	; (4018cc <vTaskDelay+0x7c>)
  401886:	4798      	blx	r3
  401888:	b948      	cbnz	r0, 40189e <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40188a:	4b0f      	ldr	r3, [pc, #60]	; (4018c8 <vTaskDelay+0x78>)
  40188c:	681a      	ldr	r2, [r3, #0]
  40188e:	4910      	ldr	r1, [pc, #64]	; (4018d0 <vTaskDelay+0x80>)
  401890:	680b      	ldr	r3, [r1, #0]
  401892:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401894:	2201      	movs	r2, #1
  401896:	4082      	lsls	r2, r0
  401898:	ea23 0302 	bic.w	r3, r3, r2
  40189c:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40189e:	4620      	mov	r0, r4
  4018a0:	4b0c      	ldr	r3, [pc, #48]	; (4018d4 <vTaskDelay+0x84>)
  4018a2:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  4018a4:	4b0c      	ldr	r3, [pc, #48]	; (4018d8 <vTaskDelay+0x88>)
  4018a6:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  4018a8:	b938      	cbnz	r0, 4018ba <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  4018aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018ae:	4b0b      	ldr	r3, [pc, #44]	; (4018dc <vTaskDelay+0x8c>)
  4018b0:	601a      	str	r2, [r3, #0]
  4018b2:	f3bf 8f4f 	dsb	sy
  4018b6:	f3bf 8f6f 	isb	sy
  4018ba:	bd10      	pop	{r4, pc}
  4018bc:	2040c2d0 	.word	0x2040c2d0
  4018c0:	004015e9 	.word	0x004015e9
  4018c4:	2040c2d4 	.word	0x2040c2d4
  4018c8:	2040c2b8 	.word	0x2040c2b8
  4018cc:	0040094d 	.word	0x0040094d
  4018d0:	2040c30c 	.word	0x2040c30c
  4018d4:	004012d9 	.word	0x004012d9
  4018d8:	00401739 	.word	0x00401739
  4018dc:	e000ed04 	.word	0xe000ed04

004018e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4018e0:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4018e2:	4d18      	ldr	r5, [pc, #96]	; (401944 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4018e4:	4e18      	ldr	r6, [pc, #96]	; (401948 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  4018e6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401968 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  4018ea:	4f18      	ldr	r7, [pc, #96]	; (40194c <prvIdleTask+0x6c>)
  4018ec:	e019      	b.n	401922 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  4018ee:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4018f0:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  4018f2:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  4018f4:	b1ac      	cbz	r4, 401922 <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  4018f6:	4b16      	ldr	r3, [pc, #88]	; (401950 <prvIdleTask+0x70>)
  4018f8:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4018fa:	68f3      	ldr	r3, [r6, #12]
  4018fc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4018fe:	1d20      	adds	r0, r4, #4
  401900:	4b14      	ldr	r3, [pc, #80]	; (401954 <prvIdleTask+0x74>)
  401902:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401904:	4a14      	ldr	r2, [pc, #80]	; (401958 <prvIdleTask+0x78>)
  401906:	6813      	ldr	r3, [r2, #0]
  401908:	3b01      	subs	r3, #1
  40190a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40190c:	682b      	ldr	r3, [r5, #0]
  40190e:	3b01      	subs	r3, #1
  401910:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  401912:	4b12      	ldr	r3, [pc, #72]	; (40195c <prvIdleTask+0x7c>)
  401914:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401916:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401918:	f8df 9050 	ldr.w	r9, [pc, #80]	; 40196c <prvIdleTask+0x8c>
  40191c:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  40191e:	4620      	mov	r0, r4
  401920:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401922:	682b      	ldr	r3, [r5, #0]
  401924:	2b00      	cmp	r3, #0
  401926:	d1e2      	bne.n	4018ee <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401928:	4b0d      	ldr	r3, [pc, #52]	; (401960 <prvIdleTask+0x80>)
  40192a:	681b      	ldr	r3, [r3, #0]
  40192c:	2b01      	cmp	r3, #1
  40192e:	d9f8      	bls.n	401922 <prvIdleTask+0x42>
			{
				taskYIELD();
  401930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401934:	4b0b      	ldr	r3, [pc, #44]	; (401964 <prvIdleTask+0x84>)
  401936:	601a      	str	r2, [r3, #0]
  401938:	f3bf 8f4f 	dsb	sy
  40193c:	f3bf 8f6f 	isb	sy
  401940:	e7d1      	b.n	4018e6 <prvIdleTask+0x6>
  401942:	bf00      	nop
  401944:	2040c1bc 	.word	0x2040c1bc
  401948:	2040c2a4 	.word	0x2040c2a4
  40194c:	00401739 	.word	0x00401739
  401950:	00400609 	.word	0x00400609
  401954:	0040094d 	.word	0x0040094d
  401958:	2040c2e0 	.word	0x2040c2e0
  40195c:	00400655 	.word	0x00400655
  401960:	2040c1dc 	.word	0x2040c1dc
  401964:	e000ed04 	.word	0xe000ed04
  401968:	004015e9 	.word	0x004015e9
  40196c:	004008c5 	.word	0x004008c5

00401970 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401970:	4b20      	ldr	r3, [pc, #128]	; (4019f4 <vTaskSwitchContext+0x84>)
  401972:	681b      	ldr	r3, [r3, #0]
  401974:	b11b      	cbz	r3, 40197e <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401976:	2201      	movs	r2, #1
  401978:	4b1f      	ldr	r3, [pc, #124]	; (4019f8 <vTaskSwitchContext+0x88>)
  40197a:	601a      	str	r2, [r3, #0]
  40197c:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  40197e:	2200      	movs	r2, #0
  401980:	4b1d      	ldr	r3, [pc, #116]	; (4019f8 <vTaskSwitchContext+0x88>)
  401982:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401984:	4b1d      	ldr	r3, [pc, #116]	; (4019fc <vTaskSwitchContext+0x8c>)
  401986:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401988:	fab3 f383 	clz	r3, r3
  40198c:	b2db      	uxtb	r3, r3
  40198e:	f1c3 031f 	rsb	r3, r3, #31
  401992:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401996:	4a1a      	ldr	r2, [pc, #104]	; (401a00 <vTaskSwitchContext+0x90>)
  401998:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40199c:	b952      	cbnz	r2, 4019b4 <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40199e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019a2:	b672      	cpsid	i
  4019a4:	f383 8811 	msr	BASEPRI, r3
  4019a8:	f3bf 8f6f 	isb	sy
  4019ac:	f3bf 8f4f 	dsb	sy
  4019b0:	b662      	cpsie	i
  4019b2:	e7fe      	b.n	4019b2 <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  4019b4:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4019b6:	4a12      	ldr	r2, [pc, #72]	; (401a00 <vTaskSwitchContext+0x90>)
  4019b8:	0099      	lsls	r1, r3, #2
  4019ba:	18c8      	adds	r0, r1, r3
  4019bc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4019c0:	6844      	ldr	r4, [r0, #4]
  4019c2:	6864      	ldr	r4, [r4, #4]
  4019c4:	6044      	str	r4, [r0, #4]
  4019c6:	4602      	mov	r2, r0
  4019c8:	3208      	adds	r2, #8
  4019ca:	4294      	cmp	r4, r2
  4019cc:	d106      	bne.n	4019dc <vTaskSwitchContext+0x6c>
  4019ce:	6860      	ldr	r0, [r4, #4]
  4019d0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4019d4:	4a0a      	ldr	r2, [pc, #40]	; (401a00 <vTaskSwitchContext+0x90>)
  4019d6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4019da:	6050      	str	r0, [r2, #4]
  4019dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4019e0:	4a07      	ldr	r2, [pc, #28]	; (401a00 <vTaskSwitchContext+0x90>)
  4019e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4019e6:	685b      	ldr	r3, [r3, #4]
  4019e8:	68da      	ldr	r2, [r3, #12]
  4019ea:	4b06      	ldr	r3, [pc, #24]	; (401a04 <vTaskSwitchContext+0x94>)
  4019ec:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  4019ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  4019f2:	4770      	bx	lr
  4019f4:	2040c2d0 	.word	0x2040c2d0
  4019f8:	2040c310 	.word	0x2040c310
  4019fc:	2040c30c 	.word	0x2040c30c
  401a00:	2040c1dc 	.word	0x2040c1dc
  401a04:	2040c2b8 	.word	0x2040c2b8

00401a08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  401a08:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  401a0a:	b950      	cbnz	r0, 401a22 <vTaskPlaceOnEventList+0x1a>
  401a0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a10:	b672      	cpsid	i
  401a12:	f383 8811 	msr	BASEPRI, r3
  401a16:	f3bf 8f6f 	isb	sy
  401a1a:	f3bf 8f4f 	dsb	sy
  401a1e:	b662      	cpsie	i
  401a20:	e7fe      	b.n	401a20 <vTaskPlaceOnEventList+0x18>
  401a22:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a24:	4d11      	ldr	r5, [pc, #68]	; (401a6c <vTaskPlaceOnEventList+0x64>)
  401a26:	6829      	ldr	r1, [r5, #0]
  401a28:	3118      	adds	r1, #24
  401a2a:	4b11      	ldr	r3, [pc, #68]	; (401a70 <vTaskPlaceOnEventList+0x68>)
  401a2c:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401a2e:	6828      	ldr	r0, [r5, #0]
  401a30:	3004      	adds	r0, #4
  401a32:	4b10      	ldr	r3, [pc, #64]	; (401a74 <vTaskPlaceOnEventList+0x6c>)
  401a34:	4798      	blx	r3
  401a36:	b940      	cbnz	r0, 401a4a <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401a38:	682a      	ldr	r2, [r5, #0]
  401a3a:	490f      	ldr	r1, [pc, #60]	; (401a78 <vTaskPlaceOnEventList+0x70>)
  401a3c:	680b      	ldr	r3, [r1, #0]
  401a3e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401a40:	2201      	movs	r2, #1
  401a42:	4082      	lsls	r2, r0
  401a44:	ea23 0302 	bic.w	r3, r3, r2
  401a48:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401a4a:	f1b4 3fff 	cmp.w	r4, #4294967295
  401a4e:	d106      	bne.n	401a5e <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a50:	4b06      	ldr	r3, [pc, #24]	; (401a6c <vTaskPlaceOnEventList+0x64>)
  401a52:	6819      	ldr	r1, [r3, #0]
  401a54:	4809      	ldr	r0, [pc, #36]	; (401a7c <vTaskPlaceOnEventList+0x74>)
  401a56:	3104      	adds	r1, #4
  401a58:	4b09      	ldr	r3, [pc, #36]	; (401a80 <vTaskPlaceOnEventList+0x78>)
  401a5a:	4798      	blx	r3
  401a5c:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401a5e:	4b09      	ldr	r3, [pc, #36]	; (401a84 <vTaskPlaceOnEventList+0x7c>)
  401a60:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a62:	4420      	add	r0, r4
  401a64:	4b08      	ldr	r3, [pc, #32]	; (401a88 <vTaskPlaceOnEventList+0x80>)
  401a66:	4798      	blx	r3
  401a68:	bd38      	pop	{r3, r4, r5, pc}
  401a6a:	bf00      	nop
  401a6c:	2040c2b8 	.word	0x2040c2b8
  401a70:	00400919 	.word	0x00400919
  401a74:	0040094d 	.word	0x0040094d
  401a78:	2040c30c 	.word	0x2040c30c
  401a7c:	2040c2f8 	.word	0x2040c2f8
  401a80:	00400901 	.word	0x00400901
  401a84:	2040c2d4 	.word	0x2040c2d4
  401a88:	004012d9 	.word	0x004012d9

00401a8c <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401a8c:	b950      	cbnz	r0, 401aa4 <vTaskPlaceOnEventListRestricted+0x18>
  401a8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a92:	b672      	cpsid	i
  401a94:	f383 8811 	msr	BASEPRI, r3
  401a98:	f3bf 8f6f 	isb	sy
  401a9c:	f3bf 8f4f 	dsb	sy
  401aa0:	b662      	cpsie	i
  401aa2:	e7fe      	b.n	401aa2 <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401aa4:	b570      	push	{r4, r5, r6, lr}
  401aa6:	4615      	mov	r5, r2
  401aa8:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401aaa:	4e11      	ldr	r6, [pc, #68]	; (401af0 <vTaskPlaceOnEventListRestricted+0x64>)
  401aac:	6831      	ldr	r1, [r6, #0]
  401aae:	3118      	adds	r1, #24
  401ab0:	4b10      	ldr	r3, [pc, #64]	; (401af4 <vTaskPlaceOnEventListRestricted+0x68>)
  401ab2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401ab4:	6830      	ldr	r0, [r6, #0]
  401ab6:	3004      	adds	r0, #4
  401ab8:	4b0f      	ldr	r3, [pc, #60]	; (401af8 <vTaskPlaceOnEventListRestricted+0x6c>)
  401aba:	4798      	blx	r3
  401abc:	b940      	cbnz	r0, 401ad0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401abe:	6832      	ldr	r2, [r6, #0]
  401ac0:	490e      	ldr	r1, [pc, #56]	; (401afc <vTaskPlaceOnEventListRestricted+0x70>)
  401ac2:	680b      	ldr	r3, [r1, #0]
  401ac4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401ac6:	2201      	movs	r2, #1
  401ac8:	4082      	lsls	r2, r0
  401aca:	ea23 0302 	bic.w	r3, r3, r2
  401ace:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401ad0:	2d01      	cmp	r5, #1
  401ad2:	d106      	bne.n	401ae2 <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401ad4:	4b06      	ldr	r3, [pc, #24]	; (401af0 <vTaskPlaceOnEventListRestricted+0x64>)
  401ad6:	6819      	ldr	r1, [r3, #0]
  401ad8:	4809      	ldr	r0, [pc, #36]	; (401b00 <vTaskPlaceOnEventListRestricted+0x74>)
  401ada:	3104      	adds	r1, #4
  401adc:	4b05      	ldr	r3, [pc, #20]	; (401af4 <vTaskPlaceOnEventListRestricted+0x68>)
  401ade:	4798      	blx	r3
  401ae0:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401ae2:	4b08      	ldr	r3, [pc, #32]	; (401b04 <vTaskPlaceOnEventListRestricted+0x78>)
  401ae4:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401ae6:	4420      	add	r0, r4
  401ae8:	4b07      	ldr	r3, [pc, #28]	; (401b08 <vTaskPlaceOnEventListRestricted+0x7c>)
  401aea:	4798      	blx	r3
  401aec:	bd70      	pop	{r4, r5, r6, pc}
  401aee:	bf00      	nop
  401af0:	2040c2b8 	.word	0x2040c2b8
  401af4:	00400901 	.word	0x00400901
  401af8:	0040094d 	.word	0x0040094d
  401afc:	2040c30c 	.word	0x2040c30c
  401b00:	2040c2f8 	.word	0x2040c2f8
  401b04:	2040c2d4 	.word	0x2040c2d4
  401b08:	004012d9 	.word	0x004012d9

00401b0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  401b0c:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401b0e:	68c3      	ldr	r3, [r0, #12]
  401b10:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401b12:	b954      	cbnz	r4, 401b2a <xTaskRemoveFromEventList+0x1e>
  401b14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b18:	b672      	cpsid	i
  401b1a:	f383 8811 	msr	BASEPRI, r3
  401b1e:	f3bf 8f6f 	isb	sy
  401b22:	f3bf 8f4f 	dsb	sy
  401b26:	b662      	cpsie	i
  401b28:	e7fe      	b.n	401b28 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401b2a:	f104 0518 	add.w	r5, r4, #24
  401b2e:	4628      	mov	r0, r5
  401b30:	4b14      	ldr	r3, [pc, #80]	; (401b84 <xTaskRemoveFromEventList+0x78>)
  401b32:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b34:	4b14      	ldr	r3, [pc, #80]	; (401b88 <xTaskRemoveFromEventList+0x7c>)
  401b36:	681b      	ldr	r3, [r3, #0]
  401b38:	b99b      	cbnz	r3, 401b62 <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401b3a:	1d25      	adds	r5, r4, #4
  401b3c:	4628      	mov	r0, r5
  401b3e:	4b11      	ldr	r3, [pc, #68]	; (401b84 <xTaskRemoveFromEventList+0x78>)
  401b40:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401b42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401b44:	4911      	ldr	r1, [pc, #68]	; (401b8c <xTaskRemoveFromEventList+0x80>)
  401b46:	680b      	ldr	r3, [r1, #0]
  401b48:	2201      	movs	r2, #1
  401b4a:	4082      	lsls	r2, r0
  401b4c:	4313      	orrs	r3, r2
  401b4e:	600b      	str	r3, [r1, #0]
  401b50:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401b54:	4b0e      	ldr	r3, [pc, #56]	; (401b90 <xTaskRemoveFromEventList+0x84>)
  401b56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b5a:	4629      	mov	r1, r5
  401b5c:	4b0d      	ldr	r3, [pc, #52]	; (401b94 <xTaskRemoveFromEventList+0x88>)
  401b5e:	4798      	blx	r3
  401b60:	e003      	b.n	401b6a <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b62:	480d      	ldr	r0, [pc, #52]	; (401b98 <xTaskRemoveFromEventList+0x8c>)
  401b64:	4629      	mov	r1, r5
  401b66:	4b0b      	ldr	r3, [pc, #44]	; (401b94 <xTaskRemoveFromEventList+0x88>)
  401b68:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b6a:	4b0c      	ldr	r3, [pc, #48]	; (401b9c <xTaskRemoveFromEventList+0x90>)
  401b6c:	681b      	ldr	r3, [r3, #0]
  401b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b72:	429a      	cmp	r2, r3
  401b74:	d903      	bls.n	401b7e <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  401b76:	2001      	movs	r0, #1
  401b78:	4b09      	ldr	r3, [pc, #36]	; (401ba0 <xTaskRemoveFromEventList+0x94>)
  401b7a:	6018      	str	r0, [r3, #0]
  401b7c:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  401b7e:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  401b80:	bd38      	pop	{r3, r4, r5, pc}
  401b82:	bf00      	nop
  401b84:	0040094d 	.word	0x0040094d
  401b88:	2040c2d0 	.word	0x2040c2d0
  401b8c:	2040c30c 	.word	0x2040c30c
  401b90:	2040c1dc 	.word	0x2040c1dc
  401b94:	00400901 	.word	0x00400901
  401b98:	2040c2bc 	.word	0x2040c2bc
  401b9c:	2040c2b8 	.word	0x2040c2b8
  401ba0:	2040c310 	.word	0x2040c310

00401ba4 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  401ba4:	b950      	cbnz	r0, 401bbc <vTaskSetTimeOutState+0x18>
  401ba6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401baa:	b672      	cpsid	i
  401bac:	f383 8811 	msr	BASEPRI, r3
  401bb0:	f3bf 8f6f 	isb	sy
  401bb4:	f3bf 8f4f 	dsb	sy
  401bb8:	b662      	cpsie	i
  401bba:	e7fe      	b.n	401bba <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401bbc:	4a03      	ldr	r2, [pc, #12]	; (401bcc <vTaskSetTimeOutState+0x28>)
  401bbe:	6812      	ldr	r2, [r2, #0]
  401bc0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401bc2:	4a03      	ldr	r2, [pc, #12]	; (401bd0 <vTaskSetTimeOutState+0x2c>)
  401bc4:	6812      	ldr	r2, [r2, #0]
  401bc6:	6042      	str	r2, [r0, #4]
  401bc8:	4770      	bx	lr
  401bca:	bf00      	nop
  401bcc:	2040c1b0 	.word	0x2040c1b0
  401bd0:	2040c2d4 	.word	0x2040c2d4

00401bd4 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  401bd4:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  401bd6:	b950      	cbnz	r0, 401bee <xTaskCheckForTimeOut+0x1a>
  401bd8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bdc:	b672      	cpsid	i
  401bde:	f383 8811 	msr	BASEPRI, r3
  401be2:	f3bf 8f6f 	isb	sy
  401be6:	f3bf 8f4f 	dsb	sy
  401bea:	b662      	cpsie	i
  401bec:	e7fe      	b.n	401bec <xTaskCheckForTimeOut+0x18>
  401bee:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401bf0:	b951      	cbnz	r1, 401c08 <xTaskCheckForTimeOut+0x34>
  401bf2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bf6:	b672      	cpsid	i
  401bf8:	f383 8811 	msr	BASEPRI, r3
  401bfc:	f3bf 8f6f 	isb	sy
  401c00:	f3bf 8f4f 	dsb	sy
  401c04:	b662      	cpsie	i
  401c06:	e7fe      	b.n	401c06 <xTaskCheckForTimeOut+0x32>
  401c08:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  401c0a:	4b12      	ldr	r3, [pc, #72]	; (401c54 <xTaskCheckForTimeOut+0x80>)
  401c0c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  401c0e:	4b12      	ldr	r3, [pc, #72]	; (401c58 <xTaskCheckForTimeOut+0x84>)
  401c10:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401c12:	682b      	ldr	r3, [r5, #0]
  401c14:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c18:	d013      	beq.n	401c42 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401c1a:	4a10      	ldr	r2, [pc, #64]	; (401c5c <xTaskCheckForTimeOut+0x88>)
  401c1c:	6812      	ldr	r2, [r2, #0]
  401c1e:	6820      	ldr	r0, [r4, #0]
  401c20:	4290      	cmp	r0, r2
  401c22:	d002      	beq.n	401c2a <xTaskCheckForTimeOut+0x56>
  401c24:	6862      	ldr	r2, [r4, #4]
  401c26:	4291      	cmp	r1, r2
  401c28:	d20d      	bcs.n	401c46 <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401c2a:	6862      	ldr	r2, [r4, #4]
  401c2c:	1a88      	subs	r0, r1, r2
  401c2e:	4283      	cmp	r3, r0
  401c30:	d90b      	bls.n	401c4a <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401c32:	1a52      	subs	r2, r2, r1
  401c34:	4413      	add	r3, r2
  401c36:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401c38:	4620      	mov	r0, r4
  401c3a:	4b09      	ldr	r3, [pc, #36]	; (401c60 <xTaskCheckForTimeOut+0x8c>)
  401c3c:	4798      	blx	r3
			xReturn = pdFALSE;
  401c3e:	2400      	movs	r4, #0
  401c40:	e004      	b.n	401c4c <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401c42:	2400      	movs	r4, #0
  401c44:	e002      	b.n	401c4c <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401c46:	2401      	movs	r4, #1
  401c48:	e000      	b.n	401c4c <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401c4a:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401c4c:	4b05      	ldr	r3, [pc, #20]	; (401c64 <xTaskCheckForTimeOut+0x90>)
  401c4e:	4798      	blx	r3

	return xReturn;
}
  401c50:	4620      	mov	r0, r4
  401c52:	bd38      	pop	{r3, r4, r5, pc}
  401c54:	00400609 	.word	0x00400609
  401c58:	2040c2d4 	.word	0x2040c2d4
  401c5c:	2040c1b0 	.word	0x2040c1b0
  401c60:	00401ba5 	.word	0x00401ba5
  401c64:	00400655 	.word	0x00400655

00401c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  401c68:	2201      	movs	r2, #1
  401c6a:	4b01      	ldr	r3, [pc, #4]	; (401c70 <vTaskMissedYield+0x8>)
  401c6c:	601a      	str	r2, [r3, #0]
  401c6e:	4770      	bx	lr
  401c70:	2040c310 	.word	0x2040c310

00401c74 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c74:	4b05      	ldr	r3, [pc, #20]	; (401c8c <xTaskGetSchedulerState+0x18>)
  401c76:	681b      	ldr	r3, [r3, #0]
  401c78:	b133      	cbz	r3, 401c88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c7a:	4b05      	ldr	r3, [pc, #20]	; (401c90 <xTaskGetSchedulerState+0x1c>)
  401c7c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c7e:	2b00      	cmp	r3, #0
  401c80:	bf0c      	ite	eq
  401c82:	2002      	moveq	r0, #2
  401c84:	2000      	movne	r0, #0
  401c86:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c88:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  401c8a:	4770      	bx	lr
  401c8c:	2040c1b8 	.word	0x2040c1b8
  401c90:	2040c2d0 	.word	0x2040c2d0

00401c94 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401c94:	2800      	cmp	r0, #0
  401c96:	d045      	beq.n	401d24 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  401c98:	b538      	push	{r3, r4, r5, lr}
  401c9a:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c9c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401c9e:	4922      	ldr	r1, [pc, #136]	; (401d28 <vTaskPriorityInherit+0x94>)
  401ca0:	6809      	ldr	r1, [r1, #0]
  401ca2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401ca4:	428a      	cmp	r2, r1
  401ca6:	d23c      	bcs.n	401d22 <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401ca8:	6981      	ldr	r1, [r0, #24]
  401caa:	2900      	cmp	r1, #0
  401cac:	db05      	blt.n	401cba <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401cae:	491e      	ldr	r1, [pc, #120]	; (401d28 <vTaskPriorityInherit+0x94>)
  401cb0:	6809      	ldr	r1, [r1, #0]
  401cb2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401cb4:	f1c1 010a 	rsb	r1, r1, #10
  401cb8:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401cba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401cbe:	491b      	ldr	r1, [pc, #108]	; (401d2c <vTaskPriorityInherit+0x98>)
  401cc0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401cc4:	6959      	ldr	r1, [r3, #20]
  401cc6:	4291      	cmp	r1, r2
  401cc8:	d127      	bne.n	401d1a <vTaskPriorityInherit+0x86>
  401cca:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401ccc:	1d1d      	adds	r5, r3, #4
  401cce:	4628      	mov	r0, r5
  401cd0:	4b17      	ldr	r3, [pc, #92]	; (401d30 <vTaskPriorityInherit+0x9c>)
  401cd2:	4798      	blx	r3
  401cd4:	b970      	cbnz	r0, 401cf4 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401cd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401cd8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401cdc:	4a13      	ldr	r2, [pc, #76]	; (401d2c <vTaskPriorityInherit+0x98>)
  401cde:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401ce2:	b93a      	cbnz	r2, 401cf4 <vTaskPriorityInherit+0x60>
  401ce4:	4813      	ldr	r0, [pc, #76]	; (401d34 <vTaskPriorityInherit+0xa0>)
  401ce6:	6802      	ldr	r2, [r0, #0]
  401ce8:	2101      	movs	r1, #1
  401cea:	fa01 f303 	lsl.w	r3, r1, r3
  401cee:	ea22 0303 	bic.w	r3, r2, r3
  401cf2:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cf4:	4b0c      	ldr	r3, [pc, #48]	; (401d28 <vTaskPriorityInherit+0x94>)
  401cf6:	681b      	ldr	r3, [r3, #0]
  401cf8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401cfa:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401cfc:	490d      	ldr	r1, [pc, #52]	; (401d34 <vTaskPriorityInherit+0xa0>)
  401cfe:	680a      	ldr	r2, [r1, #0]
  401d00:	2301      	movs	r3, #1
  401d02:	4083      	lsls	r3, r0
  401d04:	4313      	orrs	r3, r2
  401d06:	600b      	str	r3, [r1, #0]
  401d08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d0c:	4b07      	ldr	r3, [pc, #28]	; (401d2c <vTaskPriorityInherit+0x98>)
  401d0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d12:	4629      	mov	r1, r5
  401d14:	4b08      	ldr	r3, [pc, #32]	; (401d38 <vTaskPriorityInherit+0xa4>)
  401d16:	4798      	blx	r3
  401d18:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401d1a:	4a03      	ldr	r2, [pc, #12]	; (401d28 <vTaskPriorityInherit+0x94>)
  401d1c:	6812      	ldr	r2, [r2, #0]
  401d1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401d20:	62da      	str	r2, [r3, #44]	; 0x2c
  401d22:	bd38      	pop	{r3, r4, r5, pc}
  401d24:	4770      	bx	lr
  401d26:	bf00      	nop
  401d28:	2040c2b8 	.word	0x2040c2b8
  401d2c:	2040c1dc 	.word	0x2040c1dc
  401d30:	0040094d 	.word	0x0040094d
  401d34:	2040c30c 	.word	0x2040c30c
  401d38:	00400901 	.word	0x00400901

00401d3c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401d3c:	2800      	cmp	r0, #0
  401d3e:	d04e      	beq.n	401dde <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  401d40:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401d42:	4a29      	ldr	r2, [pc, #164]	; (401de8 <xTaskPriorityDisinherit+0xac>)
  401d44:	6812      	ldr	r2, [r2, #0]
  401d46:	4290      	cmp	r0, r2
  401d48:	d00a      	beq.n	401d60 <xTaskPriorityDisinherit+0x24>
  401d4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d4e:	b672      	cpsid	i
  401d50:	f383 8811 	msr	BASEPRI, r3
  401d54:	f3bf 8f6f 	isb	sy
  401d58:	f3bf 8f4f 	dsb	sy
  401d5c:	b662      	cpsie	i
  401d5e:	e7fe      	b.n	401d5e <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  401d60:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401d62:	b952      	cbnz	r2, 401d7a <xTaskPriorityDisinherit+0x3e>
  401d64:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d68:	b672      	cpsid	i
  401d6a:	f383 8811 	msr	BASEPRI, r3
  401d6e:	f3bf 8f6f 	isb	sy
  401d72:	f3bf 8f4f 	dsb	sy
  401d76:	b662      	cpsie	i
  401d78:	e7fe      	b.n	401d78 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;
  401d7a:	3a01      	subs	r2, #1
  401d7c:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d7e:	2a00      	cmp	r2, #0
  401d80:	d12f      	bne.n	401de2 <xTaskPriorityDisinherit+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d82:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  401d84:	6c82      	ldr	r2, [r0, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d86:	4291      	cmp	r1, r2
  401d88:	d02b      	beq.n	401de2 <xTaskPriorityDisinherit+0xa6>
  401d8a:	4604      	mov	r4, r0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d8c:	1d05      	adds	r5, r0, #4
  401d8e:	4628      	mov	r0, r5
  401d90:	4b16      	ldr	r3, [pc, #88]	; (401dec <xTaskPriorityDisinherit+0xb0>)
  401d92:	4798      	blx	r3
  401d94:	b968      	cbnz	r0, 401db2 <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401d96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401d98:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401d9c:	4b14      	ldr	r3, [pc, #80]	; (401df0 <xTaskPriorityDisinherit+0xb4>)
  401d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401da2:	b933      	cbnz	r3, 401db2 <xTaskPriorityDisinherit+0x76>
  401da4:	4813      	ldr	r0, [pc, #76]	; (401df4 <xTaskPriorityDisinherit+0xb8>)
  401da6:	6803      	ldr	r3, [r0, #0]
  401da8:	2201      	movs	r2, #1
  401daa:	408a      	lsls	r2, r1
  401dac:	ea23 0302 	bic.w	r3, r3, r2
  401db0:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401db2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401db4:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401db6:	f1c0 030a 	rsb	r3, r0, #10
  401dba:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401dbc:	4a0d      	ldr	r2, [pc, #52]	; (401df4 <xTaskPriorityDisinherit+0xb8>)
  401dbe:	6813      	ldr	r3, [r2, #0]
  401dc0:	2401      	movs	r4, #1
  401dc2:	fa04 f100 	lsl.w	r1, r4, r0
  401dc6:	430b      	orrs	r3, r1
  401dc8:	6013      	str	r3, [r2, #0]
  401dca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401dce:	4b08      	ldr	r3, [pc, #32]	; (401df0 <xTaskPriorityDisinherit+0xb4>)
  401dd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401dd4:	4629      	mov	r1, r5
  401dd6:	4b08      	ldr	r3, [pc, #32]	; (401df8 <xTaskPriorityDisinherit+0xbc>)
  401dd8:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401dda:	4620      	mov	r0, r4
  401ddc:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401dde:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401de0:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401de2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401de4:	bd38      	pop	{r3, r4, r5, pc}
  401de6:	bf00      	nop
  401de8:	2040c2b8 	.word	0x2040c2b8
  401dec:	0040094d 	.word	0x0040094d
  401df0:	2040c1dc 	.word	0x2040c1dc
  401df4:	2040c30c 	.word	0x2040c30c
  401df8:	00400901 	.word	0x00400901

00401dfc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401dfc:	4b05      	ldr	r3, [pc, #20]	; (401e14 <pvTaskIncrementMutexHeldCount+0x18>)
  401dfe:	681b      	ldr	r3, [r3, #0]
  401e00:	b123      	cbz	r3, 401e0c <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401e02:	4b04      	ldr	r3, [pc, #16]	; (401e14 <pvTaskIncrementMutexHeldCount+0x18>)
  401e04:	681a      	ldr	r2, [r3, #0]
  401e06:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401e08:	3301      	adds	r3, #1
  401e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401e0c:	4b01      	ldr	r3, [pc, #4]	; (401e14 <pvTaskIncrementMutexHeldCount+0x18>)
  401e0e:	6818      	ldr	r0, [r3, #0]
	}
  401e10:	4770      	bx	lr
  401e12:	bf00      	nop
  401e14:	2040c2b8 	.word	0x2040c2b8

00401e18 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401e18:	b510      	push	{r4, lr}
  401e1a:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401e1c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401e1e:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  401e20:	4291      	cmp	r1, r2
  401e22:	d80a      	bhi.n	401e3a <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401e24:	1ad2      	subs	r2, r2, r3
  401e26:	6983      	ldr	r3, [r0, #24]
  401e28:	429a      	cmp	r2, r3
  401e2a:	d211      	bcs.n	401e50 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401e2c:	4b0a      	ldr	r3, [pc, #40]	; (401e58 <prvInsertTimerInActiveList+0x40>)
  401e2e:	6818      	ldr	r0, [r3, #0]
  401e30:	1d21      	adds	r1, r4, #4
  401e32:	4b0a      	ldr	r3, [pc, #40]	; (401e5c <prvInsertTimerInActiveList+0x44>)
  401e34:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401e36:	2000      	movs	r0, #0
  401e38:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401e3a:	4299      	cmp	r1, r3
  401e3c:	d301      	bcc.n	401e42 <prvInsertTimerInActiveList+0x2a>
  401e3e:	429a      	cmp	r2, r3
  401e40:	d308      	bcc.n	401e54 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401e42:	4b07      	ldr	r3, [pc, #28]	; (401e60 <prvInsertTimerInActiveList+0x48>)
  401e44:	6818      	ldr	r0, [r3, #0]
  401e46:	1d21      	adds	r1, r4, #4
  401e48:	4b04      	ldr	r3, [pc, #16]	; (401e5c <prvInsertTimerInActiveList+0x44>)
  401e4a:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401e4c:	2000      	movs	r0, #0
  401e4e:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401e50:	2001      	movs	r0, #1
  401e52:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401e54:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401e56:	bd10      	pop	{r4, pc}
  401e58:	2040c348 	.word	0x2040c348
  401e5c:	00400919 	.word	0x00400919
  401e60:	2040c314 	.word	0x2040c314

00401e64 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401e64:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401e66:	4b14      	ldr	r3, [pc, #80]	; (401eb8 <prvCheckForValidListAndQueue+0x54>)
  401e68:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401e6a:	4b14      	ldr	r3, [pc, #80]	; (401ebc <prvCheckForValidListAndQueue+0x58>)
  401e6c:	681b      	ldr	r3, [r3, #0]
  401e6e:	bb03      	cbnz	r3, 401eb2 <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  401e70:	4d13      	ldr	r5, [pc, #76]	; (401ec0 <prvCheckForValidListAndQueue+0x5c>)
  401e72:	4628      	mov	r0, r5
  401e74:	4e13      	ldr	r6, [pc, #76]	; (401ec4 <prvCheckForValidListAndQueue+0x60>)
  401e76:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401e78:	4c13      	ldr	r4, [pc, #76]	; (401ec8 <prvCheckForValidListAndQueue+0x64>)
  401e7a:	4620      	mov	r0, r4
  401e7c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401e7e:	4b13      	ldr	r3, [pc, #76]	; (401ecc <prvCheckForValidListAndQueue+0x68>)
  401e80:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401e82:	4b13      	ldr	r3, [pc, #76]	; (401ed0 <prvCheckForValidListAndQueue+0x6c>)
  401e84:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401e86:	2005      	movs	r0, #5
  401e88:	2110      	movs	r1, #16
  401e8a:	2200      	movs	r2, #0
  401e8c:	4b11      	ldr	r3, [pc, #68]	; (401ed4 <prvCheckForValidListAndQueue+0x70>)
  401e8e:	4798      	blx	r3
  401e90:	4b0a      	ldr	r3, [pc, #40]	; (401ebc <prvCheckForValidListAndQueue+0x58>)
  401e92:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401e94:	b950      	cbnz	r0, 401eac <prvCheckForValidListAndQueue+0x48>
  401e96:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e9a:	b672      	cpsid	i
  401e9c:	f383 8811 	msr	BASEPRI, r3
  401ea0:	f3bf 8f6f 	isb	sy
  401ea4:	f3bf 8f4f 	dsb	sy
  401ea8:	b662      	cpsie	i
  401eaa:	e7fe      	b.n	401eaa <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401eac:	490a      	ldr	r1, [pc, #40]	; (401ed8 <prvCheckForValidListAndQueue+0x74>)
  401eae:	4b0b      	ldr	r3, [pc, #44]	; (401edc <prvCheckForValidListAndQueue+0x78>)
  401eb0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401eb2:	4b0b      	ldr	r3, [pc, #44]	; (401ee0 <prvCheckForValidListAndQueue+0x7c>)
  401eb4:	4798      	blx	r3
  401eb6:	bd70      	pop	{r4, r5, r6, pc}
  401eb8:	00400609 	.word	0x00400609
  401ebc:	2040c344 	.word	0x2040c344
  401ec0:	2040c318 	.word	0x2040c318
  401ec4:	004008e1 	.word	0x004008e1
  401ec8:	2040c32c 	.word	0x2040c32c
  401ecc:	2040c314 	.word	0x2040c314
  401ed0:	2040c348 	.word	0x2040c348
  401ed4:	00400bd5 	.word	0x00400bd5
  401ed8:	0040a7f0 	.word	0x0040a7f0
  401edc:	00401229 	.word	0x00401229
  401ee0:	00400655 	.word	0x00400655

00401ee4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  401ee4:	b510      	push	{r4, lr}
  401ee6:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401ee8:	4b0f      	ldr	r3, [pc, #60]	; (401f28 <xTimerCreateTimerTask+0x44>)
  401eea:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401eec:	4b0f      	ldr	r3, [pc, #60]	; (401f2c <xTimerCreateTimerTask+0x48>)
  401eee:	681b      	ldr	r3, [r3, #0]
  401ef0:	b163      	cbz	r3, 401f0c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401ef2:	2309      	movs	r3, #9
  401ef4:	9300      	str	r3, [sp, #0]
  401ef6:	2300      	movs	r3, #0
  401ef8:	9301      	str	r3, [sp, #4]
  401efa:	9302      	str	r3, [sp, #8]
  401efc:	9303      	str	r3, [sp, #12]
  401efe:	480c      	ldr	r0, [pc, #48]	; (401f30 <xTimerCreateTimerTask+0x4c>)
  401f00:	490c      	ldr	r1, [pc, #48]	; (401f34 <xTimerCreateTimerTask+0x50>)
  401f02:	f44f 7282 	mov.w	r2, #260	; 0x104
  401f06:	4c0c      	ldr	r4, [pc, #48]	; (401f38 <xTimerCreateTimerTask+0x54>)
  401f08:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  401f0a:	b950      	cbnz	r0, 401f22 <xTimerCreateTimerTask+0x3e>
  401f0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f10:	b672      	cpsid	i
  401f12:	f383 8811 	msr	BASEPRI, r3
  401f16:	f3bf 8f6f 	isb	sy
  401f1a:	f3bf 8f4f 	dsb	sy
  401f1e:	b662      	cpsie	i
  401f20:	e7fe      	b.n	401f20 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  401f22:	b004      	add	sp, #16
  401f24:	bd10      	pop	{r4, pc}
  401f26:	bf00      	nop
  401f28:	00401e65 	.word	0x00401e65
  401f2c:	2040c344 	.word	0x2040c344
  401f30:	00402075 	.word	0x00402075
  401f34:	0040a7f8 	.word	0x0040a7f8
  401f38:	00401331 	.word	0x00401331

00401f3c <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  401f3c:	b950      	cbnz	r0, 401f54 <xTimerGenericCommand+0x18>
  401f3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f42:	b672      	cpsid	i
  401f44:	f383 8811 	msr	BASEPRI, r3
  401f48:	f3bf 8f6f 	isb	sy
  401f4c:	f3bf 8f4f 	dsb	sy
  401f50:	b662      	cpsie	i
  401f52:	e7fe      	b.n	401f52 <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  401f54:	b530      	push	{r4, r5, lr}
  401f56:	b085      	sub	sp, #20
  401f58:	4615      	mov	r5, r2
  401f5a:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401f5c:	4a12      	ldr	r2, [pc, #72]	; (401fa8 <xTimerGenericCommand+0x6c>)
  401f5e:	6810      	ldr	r0, [r2, #0]
  401f60:	b1f0      	cbz	r0, 401fa0 <xTimerGenericCommand+0x64>
  401f62:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401f64:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401f66:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401f68:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401f6a:	2905      	cmp	r1, #5
  401f6c:	dc13      	bgt.n	401f96 <xTimerGenericCommand+0x5a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401f6e:	4b0f      	ldr	r3, [pc, #60]	; (401fac <xTimerGenericCommand+0x70>)
  401f70:	4798      	blx	r3
  401f72:	2802      	cmp	r0, #2
  401f74:	d107      	bne.n	401f86 <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401f76:	4b0c      	ldr	r3, [pc, #48]	; (401fa8 <xTimerGenericCommand+0x6c>)
  401f78:	6818      	ldr	r0, [r3, #0]
  401f7a:	4669      	mov	r1, sp
  401f7c:	9a08      	ldr	r2, [sp, #32]
  401f7e:	2300      	movs	r3, #0
  401f80:	4c0b      	ldr	r4, [pc, #44]	; (401fb0 <xTimerGenericCommand+0x74>)
  401f82:	47a0      	blx	r4
  401f84:	e00d      	b.n	401fa2 <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401f86:	4b08      	ldr	r3, [pc, #32]	; (401fa8 <xTimerGenericCommand+0x6c>)
  401f88:	6818      	ldr	r0, [r3, #0]
  401f8a:	4669      	mov	r1, sp
  401f8c:	2200      	movs	r2, #0
  401f8e:	4613      	mov	r3, r2
  401f90:	4c07      	ldr	r4, [pc, #28]	; (401fb0 <xTimerGenericCommand+0x74>)
  401f92:	47a0      	blx	r4
  401f94:	e005      	b.n	401fa2 <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401f96:	4669      	mov	r1, sp
  401f98:	2300      	movs	r3, #0
  401f9a:	4c06      	ldr	r4, [pc, #24]	; (401fb4 <xTimerGenericCommand+0x78>)
  401f9c:	47a0      	blx	r4
  401f9e:	e000      	b.n	401fa2 <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  401fa0:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  401fa2:	b005      	add	sp, #20
  401fa4:	bd30      	pop	{r4, r5, pc}
  401fa6:	bf00      	nop
  401fa8:	2040c344 	.word	0x2040c344
  401fac:	00401c75 	.word	0x00401c75
  401fb0:	00400c59 	.word	0x00400c59
  401fb4:	00400e8d 	.word	0x00400e8d

00401fb8 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  401fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401fbc:	b082      	sub	sp, #8
  401fbe:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  401fc0:	4b25      	ldr	r3, [pc, #148]	; (402058 <prvSampleTimeNow+0xa0>)
  401fc2:	4798      	blx	r3
  401fc4:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  401fc6:	4b25      	ldr	r3, [pc, #148]	; (40205c <prvSampleTimeNow+0xa4>)
  401fc8:	681b      	ldr	r3, [r3, #0]
  401fca:	4298      	cmp	r0, r3
  401fcc:	d23b      	bcs.n	402046 <prvSampleTimeNow+0x8e>
  401fce:	e02b      	b.n	402028 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401fd0:	68db      	ldr	r3, [r3, #12]
  401fd2:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401fd6:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fd8:	f104 0904 	add.w	r9, r4, #4
  401fdc:	4648      	mov	r0, r9
  401fde:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401fe2:	4620      	mov	r0, r4
  401fe4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401fe6:	69e3      	ldr	r3, [r4, #28]
  401fe8:	2b01      	cmp	r3, #1
  401fea:	d11f      	bne.n	40202c <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401fec:	69a3      	ldr	r3, [r4, #24]
  401fee:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401ff0:	4553      	cmp	r3, sl
  401ff2:	d906      	bls.n	402002 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401ff4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401ff6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401ff8:	6828      	ldr	r0, [r5, #0]
  401ffa:	4649      	mov	r1, r9
  401ffc:	4b18      	ldr	r3, [pc, #96]	; (402060 <prvSampleTimeNow+0xa8>)
  401ffe:	4798      	blx	r3
  402000:	e014      	b.n	40202c <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402002:	2300      	movs	r3, #0
  402004:	9300      	str	r3, [sp, #0]
  402006:	4620      	mov	r0, r4
  402008:	4619      	mov	r1, r3
  40200a:	4652      	mov	r2, sl
  40200c:	4c15      	ldr	r4, [pc, #84]	; (402064 <prvSampleTimeNow+0xac>)
  40200e:	47a0      	blx	r4
				configASSERT( xResult );
  402010:	b960      	cbnz	r0, 40202c <prvSampleTimeNow+0x74>
  402012:	f04f 0380 	mov.w	r3, #128	; 0x80
  402016:	b672      	cpsid	i
  402018:	f383 8811 	msr	BASEPRI, r3
  40201c:	f3bf 8f6f 	isb	sy
  402020:	f3bf 8f4f 	dsb	sy
  402024:	b662      	cpsie	i
  402026:	e7fe      	b.n	402026 <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402028:	4d0f      	ldr	r5, [pc, #60]	; (402068 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40202a:	4e10      	ldr	r6, [pc, #64]	; (40206c <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40202c:	682b      	ldr	r3, [r5, #0]
  40202e:	681a      	ldr	r2, [r3, #0]
  402030:	2a00      	cmp	r2, #0
  402032:	d1cd      	bne.n	401fd0 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  402034:	4a0e      	ldr	r2, [pc, #56]	; (402070 <prvSampleTimeNow+0xb8>)
  402036:	6810      	ldr	r0, [r2, #0]
  402038:	490b      	ldr	r1, [pc, #44]	; (402068 <prvSampleTimeNow+0xb0>)
  40203a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40203c:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  40203e:	2301      	movs	r3, #1
  402040:	f8c8 3000 	str.w	r3, [r8]
  402044:	e002      	b.n	40204c <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  402046:	2300      	movs	r3, #0
  402048:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  40204c:	4b03      	ldr	r3, [pc, #12]	; (40205c <prvSampleTimeNow+0xa4>)
  40204e:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  402050:	4638      	mov	r0, r7
  402052:	b002      	add	sp, #8
  402054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402058:	004015f9 	.word	0x004015f9
  40205c:	2040c340 	.word	0x2040c340
  402060:	00400919 	.word	0x00400919
  402064:	00401f3d 	.word	0x00401f3d
  402068:	2040c314 	.word	0x2040c314
  40206c:	0040094d 	.word	0x0040094d
  402070:	2040c348 	.word	0x2040c348

00402074 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  402074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402078:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40207a:	4c69      	ldr	r4, [pc, #420]	; (402220 <prvTimerTask+0x1ac>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  40207c:	4f69      	ldr	r7, [pc, #420]	; (402224 <prvTimerTask+0x1b0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40207e:	4d6a      	ldr	r5, [pc, #424]	; (402228 <prvTimerTask+0x1b4>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402080:	4b6a      	ldr	r3, [pc, #424]	; (40222c <prvTimerTask+0x1b8>)
  402082:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  402084:	681a      	ldr	r2, [r3, #0]
  402086:	2a00      	cmp	r2, #0
  402088:	f000 80bf 	beq.w	40220a <prvTimerTask+0x196>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  40208c:	68db      	ldr	r3, [r3, #12]
  40208e:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402090:	4b67      	ldr	r3, [pc, #412]	; (402230 <prvTimerTask+0x1bc>)
  402092:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402094:	a804      	add	r0, sp, #16
  402096:	4b67      	ldr	r3, [pc, #412]	; (402234 <prvTimerTask+0x1c0>)
  402098:	4798      	blx	r3
  40209a:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40209c:	9b04      	ldr	r3, [sp, #16]
  40209e:	2b00      	cmp	r3, #0
  4020a0:	d14d      	bne.n	40213e <prvTimerTask+0xca>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4020a2:	42b0      	cmp	r0, r6
  4020a4:	d339      	bcc.n	40211a <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  4020a6:	4b64      	ldr	r3, [pc, #400]	; (402238 <prvTimerTask+0x1c4>)
  4020a8:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4020aa:	4b60      	ldr	r3, [pc, #384]	; (40222c <prvTimerTask+0x1b8>)
  4020ac:	681b      	ldr	r3, [r3, #0]
  4020ae:	68db      	ldr	r3, [r3, #12]
  4020b0:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4020b4:	f109 0004 	add.w	r0, r9, #4
  4020b8:	4b60      	ldr	r3, [pc, #384]	; (40223c <prvTimerTask+0x1c8>)
  4020ba:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4020bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
  4020c0:	2b01      	cmp	r3, #1
  4020c2:	d11d      	bne.n	402100 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4020c4:	f8d9 1018 	ldr.w	r1, [r9, #24]
  4020c8:	4648      	mov	r0, r9
  4020ca:	4431      	add	r1, r6
  4020cc:	4642      	mov	r2, r8
  4020ce:	4633      	mov	r3, r6
  4020d0:	f8df c178 	ldr.w	ip, [pc, #376]	; 40224c <prvTimerTask+0x1d8>
  4020d4:	47e0      	blx	ip
  4020d6:	2801      	cmp	r0, #1
  4020d8:	d112      	bne.n	402100 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4020da:	2300      	movs	r3, #0
  4020dc:	9300      	str	r3, [sp, #0]
  4020de:	4648      	mov	r0, r9
  4020e0:	4619      	mov	r1, r3
  4020e2:	4632      	mov	r2, r6
  4020e4:	4e56      	ldr	r6, [pc, #344]	; (402240 <prvTimerTask+0x1cc>)
  4020e6:	47b0      	blx	r6
			configASSERT( xResult );
  4020e8:	b950      	cbnz	r0, 402100 <prvTimerTask+0x8c>
  4020ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020ee:	b672      	cpsid	i
  4020f0:	f383 8811 	msr	BASEPRI, r3
  4020f4:	f3bf 8f6f 	isb	sy
  4020f8:	f3bf 8f4f 	dsb	sy
  4020fc:	b662      	cpsie	i
  4020fe:	e7fe      	b.n	4020fe <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402100:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  402104:	4648      	mov	r0, r9
  402106:	4798      	blx	r3
  402108:	e077      	b.n	4021fa <prvTimerTask+0x186>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40210a:	4b4e      	ldr	r3, [pc, #312]	; (402244 <prvTimerTask+0x1d0>)
  40210c:	681b      	ldr	r3, [r3, #0]
  40210e:	681a      	ldr	r2, [r3, #0]
  402110:	fab2 f282 	clz	r2, r2
  402114:	0952      	lsrs	r2, r2, #5
  402116:	2600      	movs	r6, #0
  402118:	e000      	b.n	40211c <prvTimerTask+0xa8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40211a:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40211c:	6820      	ldr	r0, [r4, #0]
  40211e:	ebc8 0106 	rsb	r1, r8, r6
  402122:	4b49      	ldr	r3, [pc, #292]	; (402248 <prvTimerTask+0x1d4>)
  402124:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  402126:	4b44      	ldr	r3, [pc, #272]	; (402238 <prvTimerTask+0x1c4>)
  402128:	4798      	blx	r3
  40212a:	2800      	cmp	r0, #0
  40212c:	d165      	bne.n	4021fa <prvTimerTask+0x186>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  40212e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402132:	603b      	str	r3, [r7, #0]
  402134:	f3bf 8f4f 	dsb	sy
  402138:	f3bf 8f6f 	isb	sy
  40213c:	e05d      	b.n	4021fa <prvTimerTask+0x186>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  40213e:	4b3e      	ldr	r3, [pc, #248]	; (402238 <prvTimerTask+0x1c4>)
  402140:	4798      	blx	r3
  402142:	e05a      	b.n	4021fa <prvTimerTask+0x186>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402144:	9b04      	ldr	r3, [sp, #16]
  402146:	2b00      	cmp	r3, #0
  402148:	da06      	bge.n	402158 <prvTimerTask+0xe4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  40214a:	9806      	ldr	r0, [sp, #24]
  40214c:	9907      	ldr	r1, [sp, #28]
  40214e:	9b05      	ldr	r3, [sp, #20]
  402150:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402152:	9b04      	ldr	r3, [sp, #16]
  402154:	2b00      	cmp	r3, #0
  402156:	db50      	blt.n	4021fa <prvTimerTask+0x186>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402158:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40215a:	6973      	ldr	r3, [r6, #20]
  40215c:	b113      	cbz	r3, 402164 <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40215e:	1d30      	adds	r0, r6, #4
  402160:	4b36      	ldr	r3, [pc, #216]	; (40223c <prvTimerTask+0x1c8>)
  402162:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402164:	a803      	add	r0, sp, #12
  402166:	4b33      	ldr	r3, [pc, #204]	; (402234 <prvTimerTask+0x1c0>)
  402168:	4798      	blx	r3
  40216a:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  40216c:	9a04      	ldr	r2, [sp, #16]
  40216e:	2a09      	cmp	r2, #9
  402170:	d843      	bhi.n	4021fa <prvTimerTask+0x186>
  402172:	e8df f002 	tbb	[pc, r2]
  402176:	0505      	.short	0x0505
  402178:	3f2a4205 	.word	0x3f2a4205
  40217c:	2a420505 	.word	0x2a420505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402180:	9b05      	ldr	r3, [sp, #20]
  402182:	69b1      	ldr	r1, [r6, #24]
  402184:	4630      	mov	r0, r6
  402186:	4419      	add	r1, r3
  402188:	4672      	mov	r2, lr
  40218a:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 40224c <prvTimerTask+0x1d8>
  40218e:	47e0      	blx	ip
  402190:	2801      	cmp	r0, #1
  402192:	d132      	bne.n	4021fa <prvTimerTask+0x186>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402194:	6a73      	ldr	r3, [r6, #36]	; 0x24
  402196:	4630      	mov	r0, r6
  402198:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40219a:	69f3      	ldr	r3, [r6, #28]
  40219c:	2b01      	cmp	r3, #1
  40219e:	d12c      	bne.n	4021fa <prvTimerTask+0x186>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  4021a0:	69b2      	ldr	r2, [r6, #24]
  4021a2:	2300      	movs	r3, #0
  4021a4:	9300      	str	r3, [sp, #0]
  4021a6:	4630      	mov	r0, r6
  4021a8:	4619      	mov	r1, r3
  4021aa:	9e05      	ldr	r6, [sp, #20]
  4021ac:	4432      	add	r2, r6
  4021ae:	4e24      	ldr	r6, [pc, #144]	; (402240 <prvTimerTask+0x1cc>)
  4021b0:	47b0      	blx	r6
							configASSERT( xResult );
  4021b2:	bb10      	cbnz	r0, 4021fa <prvTimerTask+0x186>
  4021b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021b8:	b672      	cpsid	i
  4021ba:	f383 8811 	msr	BASEPRI, r3
  4021be:	f3bf 8f6f 	isb	sy
  4021c2:	f3bf 8f4f 	dsb	sy
  4021c6:	b662      	cpsie	i
  4021c8:	e7fe      	b.n	4021c8 <prvTimerTask+0x154>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4021ca:	9905      	ldr	r1, [sp, #20]
  4021cc:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4021ce:	b951      	cbnz	r1, 4021e6 <prvTimerTask+0x172>
  4021d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021d4:	b672      	cpsid	i
  4021d6:	f383 8811 	msr	BASEPRI, r3
  4021da:	f3bf 8f6f 	isb	sy
  4021de:	f3bf 8f4f 	dsb	sy
  4021e2:	b662      	cpsie	i
  4021e4:	e7fe      	b.n	4021e4 <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4021e6:	4630      	mov	r0, r6
  4021e8:	4471      	add	r1, lr
  4021ea:	4672      	mov	r2, lr
  4021ec:	4673      	mov	r3, lr
  4021ee:	4e17      	ldr	r6, [pc, #92]	; (40224c <prvTimerTask+0x1d8>)
  4021f0:	47b0      	blx	r6
  4021f2:	e002      	b.n	4021fa <prvTimerTask+0x186>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  4021f4:	4630      	mov	r0, r6
  4021f6:	4b16      	ldr	r3, [pc, #88]	; (402250 <prvTimerTask+0x1dc>)
  4021f8:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4021fa:	6820      	ldr	r0, [r4, #0]
  4021fc:	a904      	add	r1, sp, #16
  4021fe:	2200      	movs	r2, #0
  402200:	4613      	mov	r3, r2
  402202:	47a8      	blx	r5
  402204:	2800      	cmp	r0, #0
  402206:	d19d      	bne.n	402144 <prvTimerTask+0xd0>
  402208:	e73a      	b.n	402080 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  40220a:	4b09      	ldr	r3, [pc, #36]	; (402230 <prvTimerTask+0x1bc>)
  40220c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40220e:	a804      	add	r0, sp, #16
  402210:	4b08      	ldr	r3, [pc, #32]	; (402234 <prvTimerTask+0x1c0>)
  402212:	4798      	blx	r3
  402214:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402216:	9b04      	ldr	r3, [sp, #16]
  402218:	2b00      	cmp	r3, #0
  40221a:	f43f af76 	beq.w	40210a <prvTimerTask+0x96>
  40221e:	e78e      	b.n	40213e <prvTimerTask+0xca>
  402220:	2040c344 	.word	0x2040c344
  402224:	e000ed04 	.word	0xe000ed04
  402228:	00401065 	.word	0x00401065
  40222c:	2040c314 	.word	0x2040c314
  402230:	004015e9 	.word	0x004015e9
  402234:	00401fb9 	.word	0x00401fb9
  402238:	00401739 	.word	0x00401739
  40223c:	0040094d 	.word	0x0040094d
  402240:	00401f3d 	.word	0x00401f3d
  402244:	2040c348 	.word	0x2040c348
  402248:	0040125d 	.word	0x0040125d
  40224c:	00401e19 	.word	0x00401e19
  402250:	004008c5 	.word	0x004008c5

00402254 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402254:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402256:	4810      	ldr	r0, [pc, #64]	; (402298 <sysclk_init+0x44>)
  402258:	4b10      	ldr	r3, [pc, #64]	; (40229c <sysclk_init+0x48>)
  40225a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40225c:	2000      	movs	r0, #0
  40225e:	213e      	movs	r1, #62	; 0x3e
  402260:	4b0f      	ldr	r3, [pc, #60]	; (4022a0 <sysclk_init+0x4c>)
  402262:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402264:	4c0f      	ldr	r4, [pc, #60]	; (4022a4 <sysclk_init+0x50>)
  402266:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402268:	2800      	cmp	r0, #0
  40226a:	d0fc      	beq.n	402266 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40226c:	4b0e      	ldr	r3, [pc, #56]	; (4022a8 <sysclk_init+0x54>)
  40226e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402270:	4a0e      	ldr	r2, [pc, #56]	; (4022ac <sysclk_init+0x58>)
  402272:	4b0f      	ldr	r3, [pc, #60]	; (4022b0 <sysclk_init+0x5c>)
  402274:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402276:	4c0f      	ldr	r4, [pc, #60]	; (4022b4 <sysclk_init+0x60>)
  402278:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40227a:	2800      	cmp	r0, #0
  40227c:	d0fc      	beq.n	402278 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40227e:	2002      	movs	r0, #2
  402280:	4b0d      	ldr	r3, [pc, #52]	; (4022b8 <sysclk_init+0x64>)
  402282:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402284:	2000      	movs	r0, #0
  402286:	4b0d      	ldr	r3, [pc, #52]	; (4022bc <sysclk_init+0x68>)
  402288:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40228a:	4b0d      	ldr	r3, [pc, #52]	; (4022c0 <sysclk_init+0x6c>)
  40228c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40228e:	4802      	ldr	r0, [pc, #8]	; (402298 <sysclk_init+0x44>)
  402290:	4b02      	ldr	r3, [pc, #8]	; (40229c <sysclk_init+0x48>)
  402292:	4798      	blx	r3
  402294:	bd10      	pop	{r4, pc}
  402296:	bf00      	nop
  402298:	11e1a300 	.word	0x11e1a300
  40229c:	00402c85 	.word	0x00402c85
  4022a0:	004026cd 	.word	0x004026cd
  4022a4:	00402721 	.word	0x00402721
  4022a8:	00402731 	.word	0x00402731
  4022ac:	20183f01 	.word	0x20183f01
  4022b0:	400e0600 	.word	0x400e0600
  4022b4:	00402741 	.word	0x00402741
  4022b8:	0040262d 	.word	0x0040262d
  4022bc:	00402665 	.word	0x00402665
  4022c0:	00402b71 	.word	0x00402b71

004022c4 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  4022c4:	b570      	push	{r4, r5, r6, lr}
  4022c6:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4022c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  4022ca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  4022cc:	4013      	ands	r3, r2
  4022ce:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4022d0:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4022d2:	4e1a      	ldr	r6, [pc, #104]	; (40233c <afec_process_callback+0x78>)
  4022d4:	4d1a      	ldr	r5, [pc, #104]	; (402340 <afec_process_callback+0x7c>)
  4022d6:	42a8      	cmp	r0, r5
  4022d8:	bf14      	ite	ne
  4022da:	2000      	movne	r0, #0
  4022dc:	2001      	moveq	r0, #1
  4022de:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  4022e0:	2c0b      	cmp	r4, #11
  4022e2:	d80a      	bhi.n	4022fa <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4022e4:	9a01      	ldr	r2, [sp, #4]
  4022e6:	2301      	movs	r3, #1
  4022e8:	40a3      	lsls	r3, r4
  4022ea:	4213      	tst	r3, r2
  4022ec:	d020      	beq.n	402330 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4022ee:	192b      	adds	r3, r5, r4
  4022f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4022f4:	b1e3      	cbz	r3, 402330 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4022f6:	4798      	blx	r3
  4022f8:	e01a      	b.n	402330 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4022fa:	2c0e      	cmp	r4, #14
  4022fc:	d80c      	bhi.n	402318 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4022fe:	9a01      	ldr	r2, [sp, #4]
  402300:	f104 010c 	add.w	r1, r4, #12
  402304:	2301      	movs	r3, #1
  402306:	408b      	lsls	r3, r1
  402308:	4213      	tst	r3, r2
  40230a:	d011      	beq.n	402330 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40230c:	192b      	adds	r3, r5, r4
  40230e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  402312:	b16b      	cbz	r3, 402330 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  402314:	4798      	blx	r3
  402316:	e00b      	b.n	402330 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  402318:	9a01      	ldr	r2, [sp, #4]
  40231a:	f104 010f 	add.w	r1, r4, #15
  40231e:	2301      	movs	r3, #1
  402320:	408b      	lsls	r3, r1
  402322:	4213      	tst	r3, r2
  402324:	d004      	beq.n	402330 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  402326:	192b      	adds	r3, r5, r4
  402328:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40232c:	b103      	cbz	r3, 402330 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  40232e:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  402330:	3401      	adds	r4, #1
  402332:	2c10      	cmp	r4, #16
  402334:	d1d4      	bne.n	4022e0 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  402336:	b002      	add	sp, #8
  402338:	bd70      	pop	{r4, r5, r6, pc}
  40233a:	bf00      	nop
  40233c:	2040c3f4 	.word	0x2040c3f4
  402340:	40064000 	.word	0x40064000

00402344 <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  402344:	2200      	movs	r2, #0
  402346:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  402348:	4b08      	ldr	r3, [pc, #32]	; (40236c <afec_get_config_defaults+0x28>)
  40234a:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  40234c:	4b08      	ldr	r3, [pc, #32]	; (402370 <afec_get_config_defaults+0x2c>)
  40234e:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  402350:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  402354:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  402356:	2302      	movs	r3, #2
  402358:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40235a:	2301      	movs	r3, #1
  40235c:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  40235e:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  402360:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  402362:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  402364:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  402366:	7583      	strb	r3, [r0, #22]
  402368:	4770      	bx	lr
  40236a:	bf00      	nop
  40236c:	11e1a300 	.word	0x11e1a300
  402370:	005b8d80 	.word	0x005b8d80

00402374 <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  402374:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  402376:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  40237a:	d14d      	bne.n	402418 <afec_init+0xa4>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  40237c:	b430      	push	{r4, r5}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  40237e:	2201      	movs	r2, #1
  402380:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  402382:	7cca      	ldrb	r2, [r1, #19]
  402384:	2a00      	cmp	r2, #0
  402386:	bf18      	it	ne
  402388:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  40238c:	68ca      	ldr	r2, [r1, #12]
  40238e:	f442 0400 	orr.w	r4, r2, #8388608	; 0x800000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  402392:	684a      	ldr	r2, [r1, #4]
  402394:	688d      	ldr	r5, [r1, #8]
  402396:	fbb2 f2f5 	udiv	r2, r2, r5
  40239a:	3a01      	subs	r2, #1
  40239c:	0212      	lsls	r2, r2, #8
  40239e:	b292      	uxth	r2, r2
  4023a0:	4322      	orrs	r2, r4
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4023a2:	7c0c      	ldrb	r4, [r1, #16]
  4023a4:	0624      	lsls	r4, r4, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  4023a6:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  4023aa:	4322      	orrs	r2, r4
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  4023ac:	7c4c      	ldrb	r4, [r1, #17]
  4023ae:	0724      	lsls	r4, r4, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4023b0:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  4023b4:	4322      	orrs	r2, r4
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4023b6:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  4023b8:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4023ba:	7d0b      	ldrb	r3, [r1, #20]
  4023bc:	2b00      	cmp	r3, #0
  4023be:	bf14      	ite	ne
  4023c0:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  4023c4:	2200      	moveq	r2, #0
  4023c6:	680b      	ldr	r3, [r1, #0]
  4023c8:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  4023ca:	7d4b      	ldrb	r3, [r1, #21]
  4023cc:	2b00      	cmp	r3, #0
  4023ce:	bf14      	ite	ne
  4023d0:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  4023d4:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  4023d6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4023d8:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  4023da:	7d8b      	ldrb	r3, [r1, #22]
  4023dc:	021b      	lsls	r3, r3, #8
  4023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4023e2:	f043 030c 	orr.w	r3, r3, #12
  4023e6:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  4023ea:	4b12      	ldr	r3, [pc, #72]	; (402434 <afec_init+0xc0>)
  4023ec:	4298      	cmp	r0, r3
  4023ee:	d106      	bne.n	4023fe <afec_init+0x8a>
  4023f0:	e017      	b.n	402422 <afec_init+0xae>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  4023f2:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4023f6:	428b      	cmp	r3, r1
  4023f8:	d1fb      	bne.n	4023f2 <afec_init+0x7e>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  4023fa:	2000      	movs	r0, #0
  4023fc:	e016      	b.n	40242c <afec_init+0xb8>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  4023fe:	4b0e      	ldr	r3, [pc, #56]	; (402438 <afec_init+0xc4>)
  402400:	4298      	cmp	r0, r3
  402402:	d10c      	bne.n	40241e <afec_init+0xaa>
  402404:	4b0d      	ldr	r3, [pc, #52]	; (40243c <afec_init+0xc8>)
  402406:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  40240a:	2200      	movs	r2, #0
  40240c:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  402410:	428b      	cmp	r3, r1
  402412:	d1fb      	bne.n	40240c <afec_init+0x98>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  402414:	2000      	movs	r0, #0
  402416:	e009      	b.n	40242c <afec_init+0xb8>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  402418:	2019      	movs	r0, #25
  40241a:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40241c:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  40241e:	2000      	movs	r0, #0
  402420:	e004      	b.n	40242c <afec_init+0xb8>
  402422:	4b07      	ldr	r3, [pc, #28]	; (402440 <afec_init+0xcc>)
  402424:	f103 0140 	add.w	r1, r3, #64	; 0x40
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  402428:	2200      	movs	r2, #0
  40242a:	e7e2      	b.n	4023f2 <afec_init+0x7e>
  40242c:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  40242e:	bc30      	pop	{r4, r5}
  402430:	4770      	bx	lr
  402432:	bf00      	nop
  402434:	4003c000 	.word	0x4003c000
  402438:	40064000 	.word	0x40064000
  40243c:	2040c430 	.word	0x2040c430
  402440:	2040c3f0 	.word	0x2040c3f0

00402444 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  402444:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  402446:	4802      	ldr	r0, [pc, #8]	; (402450 <AFEC0_Handler+0xc>)
  402448:	4b02      	ldr	r3, [pc, #8]	; (402454 <AFEC0_Handler+0x10>)
  40244a:	4798      	blx	r3
  40244c:	bd08      	pop	{r3, pc}
  40244e:	bf00      	nop
  402450:	4003c000 	.word	0x4003c000
  402454:	004022c5 	.word	0x004022c5

00402458 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  402458:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  40245a:	4802      	ldr	r0, [pc, #8]	; (402464 <AFEC1_Handler+0xc>)
  40245c:	4b02      	ldr	r3, [pc, #8]	; (402468 <AFEC1_Handler+0x10>)
  40245e:	4798      	blx	r3
  402460:	bd08      	pop	{r3, pc}
  402462:	bf00      	nop
  402464:	40064000 	.word	0x40064000
  402468:	004022c5 	.word	0x004022c5

0040246c <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  40246c:	b500      	push	{lr}
  40246e:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  402470:	4b13      	ldr	r3, [pc, #76]	; (4024c0 <afec_enable+0x54>)
  402472:	4298      	cmp	r0, r3
  402474:	bf0c      	ite	eq
  402476:	2028      	moveq	r0, #40	; 0x28
  402478:	201d      	movne	r0, #29
  40247a:	4b12      	ldr	r3, [pc, #72]	; (4024c4 <afec_enable+0x58>)
  40247c:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  40247e:	4b12      	ldr	r3, [pc, #72]	; (4024c8 <afec_enable+0x5c>)
  402480:	789b      	ldrb	r3, [r3, #2]
  402482:	2bff      	cmp	r3, #255	; 0xff
  402484:	d100      	bne.n	402488 <afec_enable+0x1c>
  402486:	e7fe      	b.n	402486 <afec_enable+0x1a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402488:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40248c:	fab3 f383 	clz	r3, r3
  402490:	095b      	lsrs	r3, r3, #5
  402492:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  402494:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402496:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40249a:	2200      	movs	r2, #0
  40249c:	4b0b      	ldr	r3, [pc, #44]	; (4024cc <afec_enable+0x60>)
  40249e:	701a      	strb	r2, [r3, #0]
	return flags;
  4024a0:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4024a2:	4a09      	ldr	r2, [pc, #36]	; (4024c8 <afec_enable+0x5c>)
  4024a4:	7893      	ldrb	r3, [r2, #2]
  4024a6:	3301      	adds	r3, #1
  4024a8:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4024aa:	b129      	cbz	r1, 4024b8 <afec_enable+0x4c>
		cpu_irq_enable();
  4024ac:	2201      	movs	r2, #1
  4024ae:	4b07      	ldr	r3, [pc, #28]	; (4024cc <afec_enable+0x60>)
  4024b0:	701a      	strb	r2, [r3, #0]
  4024b2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4024b6:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  4024b8:	b003      	add	sp, #12
  4024ba:	f85d fb04 	ldr.w	pc, [sp], #4
  4024be:	bf00      	nop
  4024c0:	40064000 	.word	0x40064000
  4024c4:	00402751 	.word	0x00402751
  4024c8:	2040c3ac 	.word	0x2040c3ac
  4024cc:	20400010 	.word	0x20400010

004024d0 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  4024d0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  4024d4:	0052      	lsls	r2, r2, #1
  4024d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4024da:	fbb3 f2f2 	udiv	r2, r3, r2
  4024de:	3a01      	subs	r2, #1
  4024e0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  4024e4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  4024e8:	4770      	bx	lr
  4024ea:	bf00      	nop

004024ec <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4024ec:	6301      	str	r1, [r0, #48]	; 0x30
  4024ee:	4770      	bx	lr

004024f0 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4024f0:	6341      	str	r1, [r0, #52]	; 0x34
  4024f2:	4770      	bx	lr

004024f4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4024f4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4024f6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4024fa:	d02f      	beq.n	40255c <pio_set_peripheral+0x68>
  4024fc:	d807      	bhi.n	40250e <pio_set_peripheral+0x1a>
  4024fe:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402502:	d014      	beq.n	40252e <pio_set_peripheral+0x3a>
  402504:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402508:	d01e      	beq.n	402548 <pio_set_peripheral+0x54>
  40250a:	b939      	cbnz	r1, 40251c <pio_set_peripheral+0x28>
  40250c:	4770      	bx	lr
  40250e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402512:	d037      	beq.n	402584 <pio_set_peripheral+0x90>
  402514:	d804      	bhi.n	402520 <pio_set_peripheral+0x2c>
  402516:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40251a:	d029      	beq.n	402570 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40251c:	6042      	str	r2, [r0, #4]
  40251e:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402520:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402524:	d02e      	beq.n	402584 <pio_set_peripheral+0x90>
  402526:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40252a:	d02b      	beq.n	402584 <pio_set_peripheral+0x90>
  40252c:	e7f6      	b.n	40251c <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40252e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402530:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402532:	6f04      	ldr	r4, [r0, #112]	; 0x70
  402534:	43d3      	mvns	r3, r2
  402536:	4021      	ands	r1, r4
  402538:	4019      	ands	r1, r3
  40253a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40253c:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40253e:	6f44      	ldr	r4, [r0, #116]	; 0x74
  402540:	4021      	ands	r1, r4
  402542:	400b      	ands	r3, r1
  402544:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402546:	e01a      	b.n	40257e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402548:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40254a:	4313      	orrs	r3, r2
  40254c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40254e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402550:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402552:	400b      	ands	r3, r1
  402554:	ea23 0302 	bic.w	r3, r3, r2
  402558:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40255a:	e7df      	b.n	40251c <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40255c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40255e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402560:	400b      	ands	r3, r1
  402562:	ea23 0302 	bic.w	r3, r3, r2
  402566:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402568:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40256a:	4313      	orrs	r3, r2
  40256c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40256e:	e7d5      	b.n	40251c <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402570:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  402572:	4313      	orrs	r3, r2
  402574:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402576:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402578:	4313      	orrs	r3, r2
  40257a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40257c:	e7ce      	b.n	40251c <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40257e:	6042      	str	r2, [r0, #4]
}
  402580:	f85d 4b04 	ldr.w	r4, [sp], #4
  402584:	4770      	bx	lr
  402586:	bf00      	nop

00402588 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402588:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40258a:	f012 0f01 	tst.w	r2, #1
  40258e:	d001      	beq.n	402594 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  402590:	6641      	str	r1, [r0, #100]	; 0x64
  402592:	e000      	b.n	402596 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402594:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  402596:	f012 0f0a 	tst.w	r2, #10
  40259a:	d001      	beq.n	4025a0 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  40259c:	6201      	str	r1, [r0, #32]
  40259e:	e000      	b.n	4025a2 <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4025a0:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4025a2:	f012 0f02 	tst.w	r2, #2
  4025a6:	d002      	beq.n	4025ae <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  4025a8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4025ac:	e004      	b.n	4025b8 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4025ae:	f012 0f08 	tst.w	r2, #8
  4025b2:	d001      	beq.n	4025b8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4025b4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4025b8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4025ba:	6001      	str	r1, [r0, #0]
  4025bc:	4770      	bx	lr
  4025be:	bf00      	nop

004025c0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4025c0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4025c2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4025c4:	9c01      	ldr	r4, [sp, #4]
  4025c6:	b10c      	cbz	r4, 4025cc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4025c8:	6641      	str	r1, [r0, #100]	; 0x64
  4025ca:	e000      	b.n	4025ce <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4025cc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4025ce:	b10b      	cbz	r3, 4025d4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4025d0:	6501      	str	r1, [r0, #80]	; 0x50
  4025d2:	e000      	b.n	4025d6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4025d4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4025d6:	b10a      	cbz	r2, 4025dc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4025d8:	6301      	str	r1, [r0, #48]	; 0x30
  4025da:	e000      	b.n	4025de <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4025dc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4025de:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4025e0:	6001      	str	r1, [r0, #0]
}
  4025e2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4025e6:	4770      	bx	lr

004025e8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4025e8:	f012 0f10 	tst.w	r2, #16
  4025ec:	d012      	beq.n	402614 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4025ee:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4025f2:	f012 0f20 	tst.w	r2, #32
  4025f6:	d002      	beq.n	4025fe <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4025f8:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  4025fc:	e001      	b.n	402602 <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4025fe:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402602:	f012 0f40 	tst.w	r2, #64	; 0x40
  402606:	d002      	beq.n	40260e <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402608:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40260c:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40260e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  402612:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402614:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402618:	4770      	bx	lr
  40261a:	bf00      	nop

0040261c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  40261c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40261e:	6401      	str	r1, [r0, #64]	; 0x40
  402620:	4770      	bx	lr
  402622:	bf00      	nop

00402624 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402624:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402626:	4770      	bx	lr

00402628 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402628:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40262a:	4770      	bx	lr

0040262c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40262c:	2803      	cmp	r0, #3
  40262e:	d007      	beq.n	402640 <pmc_mck_set_division+0x14>
  402630:	2804      	cmp	r0, #4
  402632:	d008      	beq.n	402646 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402634:	2802      	cmp	r0, #2
  402636:	bf0c      	ite	eq
  402638:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40263c:	2100      	movne	r1, #0
  40263e:	e004      	b.n	40264a <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402640:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  402644:	e001      	b.n	40264a <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402646:	f44f 7100 	mov.w	r1, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40264a:	4a05      	ldr	r2, [pc, #20]	; (402660 <pmc_mck_set_division+0x34>)
  40264c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40264e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402652:	430b      	orrs	r3, r1
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  402654:	6313      	str	r3, [r2, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402656:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402658:	f013 0f08 	tst.w	r3, #8
  40265c:	d0fb      	beq.n	402656 <pmc_mck_set_division+0x2a>
}
  40265e:	4770      	bx	lr
  402660:	400e0600 	.word	0x400e0600

00402664 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402664:	4a18      	ldr	r2, [pc, #96]	; (4026c8 <pmc_switch_mck_to_pllack+0x64>)
  402666:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40266c:	4318      	orrs	r0, r3
  40266e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402670:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402672:	f013 0f08 	tst.w	r3, #8
  402676:	d003      	beq.n	402680 <pmc_switch_mck_to_pllack+0x1c>
  402678:	e009      	b.n	40268e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40267a:	3b01      	subs	r3, #1
  40267c:	d103      	bne.n	402686 <pmc_switch_mck_to_pllack+0x22>
  40267e:	e01e      	b.n	4026be <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402680:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402684:	4910      	ldr	r1, [pc, #64]	; (4026c8 <pmc_switch_mck_to_pllack+0x64>)
  402686:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402688:	f012 0f08 	tst.w	r2, #8
  40268c:	d0f5      	beq.n	40267a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40268e:	4a0e      	ldr	r2, [pc, #56]	; (4026c8 <pmc_switch_mck_to_pllack+0x64>)
  402690:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402692:	f023 0303 	bic.w	r3, r3, #3
  402696:	f043 0302 	orr.w	r3, r3, #2
  40269a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40269c:	6e90      	ldr	r0, [r2, #104]	; 0x68
  40269e:	f010 0008 	ands.w	r0, r0, #8
  4026a2:	d004      	beq.n	4026ae <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4026a4:	2000      	movs	r0, #0
  4026a6:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4026a8:	3b01      	subs	r3, #1
  4026aa:	d103      	bne.n	4026b4 <pmc_switch_mck_to_pllack+0x50>
  4026ac:	e009      	b.n	4026c2 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4026ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4026b2:	4905      	ldr	r1, [pc, #20]	; (4026c8 <pmc_switch_mck_to_pllack+0x64>)
  4026b4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4026b6:	f012 0f08 	tst.w	r2, #8
  4026ba:	d0f5      	beq.n	4026a8 <pmc_switch_mck_to_pllack+0x44>
  4026bc:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4026be:	2001      	movs	r0, #1
  4026c0:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4026c2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4026c4:	4770      	bx	lr
  4026c6:	bf00      	nop
  4026c8:	400e0600 	.word	0x400e0600

004026cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4026cc:	b138      	cbz	r0, 4026de <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4026ce:	490e      	ldr	r1, [pc, #56]	; (402708 <pmc_switch_mainck_to_xtal+0x3c>)
  4026d0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4026d2:	4a0e      	ldr	r2, [pc, #56]	; (40270c <pmc_switch_mainck_to_xtal+0x40>)
  4026d4:	401a      	ands	r2, r3
  4026d6:	4b0e      	ldr	r3, [pc, #56]	; (402710 <pmc_switch_mainck_to_xtal+0x44>)
  4026d8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4026da:	620b      	str	r3, [r1, #32]
  4026dc:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4026de:	480a      	ldr	r0, [pc, #40]	; (402708 <pmc_switch_mainck_to_xtal+0x3c>)
  4026e0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4026e2:	4a0c      	ldr	r2, [pc, #48]	; (402714 <pmc_switch_mainck_to_xtal+0x48>)
  4026e4:	401a      	ands	r2, r3
  4026e6:	4b0c      	ldr	r3, [pc, #48]	; (402718 <pmc_switch_mainck_to_xtal+0x4c>)
  4026e8:	4313      	orrs	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4026ea:	0209      	lsls	r1, r1, #8
  4026ec:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4026ee:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4026f0:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4026f2:	4602      	mov	r2, r0
  4026f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4026f6:	f013 0f01 	tst.w	r3, #1
  4026fa:	d0fb      	beq.n	4026f4 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4026fc:	4a02      	ldr	r2, [pc, #8]	; (402708 <pmc_switch_mainck_to_xtal+0x3c>)
  4026fe:	6a11      	ldr	r1, [r2, #32]
  402700:	4b06      	ldr	r3, [pc, #24]	; (40271c <pmc_switch_mainck_to_xtal+0x50>)
  402702:	430b      	orrs	r3, r1
  402704:	6213      	str	r3, [r2, #32]
  402706:	4770      	bx	lr
  402708:	400e0600 	.word	0x400e0600
  40270c:	fec8fffc 	.word	0xfec8fffc
  402710:	01370002 	.word	0x01370002
  402714:	ffc8fffc 	.word	0xffc8fffc
  402718:	00370001 	.word	0x00370001
  40271c:	01370000 	.word	0x01370000

00402720 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402720:	4b02      	ldr	r3, [pc, #8]	; (40272c <pmc_osc_is_ready_mainck+0xc>)
  402722:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402724:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402728:	4770      	bx	lr
  40272a:	bf00      	nop
  40272c:	400e0600 	.word	0x400e0600

00402730 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402730:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402734:	4b01      	ldr	r3, [pc, #4]	; (40273c <pmc_disable_pllack+0xc>)
  402736:	629a      	str	r2, [r3, #40]	; 0x28
  402738:	4770      	bx	lr
  40273a:	bf00      	nop
  40273c:	400e0600 	.word	0x400e0600

00402740 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402740:	4b02      	ldr	r3, [pc, #8]	; (40274c <pmc_is_locked_pllack+0xc>)
  402742:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402744:	f000 0002 	and.w	r0, r0, #2
  402748:	4770      	bx	lr
  40274a:	bf00      	nop
  40274c:	400e0600 	.word	0x400e0600

00402750 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402750:	283f      	cmp	r0, #63	; 0x3f
  402752:	d81e      	bhi.n	402792 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402754:	281f      	cmp	r0, #31
  402756:	d80c      	bhi.n	402772 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402758:	4b11      	ldr	r3, [pc, #68]	; (4027a0 <pmc_enable_periph_clk+0x50>)
  40275a:	699a      	ldr	r2, [r3, #24]
  40275c:	2301      	movs	r3, #1
  40275e:	4083      	lsls	r3, r0
  402760:	401a      	ands	r2, r3
  402762:	4293      	cmp	r3, r2
  402764:	d017      	beq.n	402796 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402766:	2301      	movs	r3, #1
  402768:	4083      	lsls	r3, r0
  40276a:	4a0d      	ldr	r2, [pc, #52]	; (4027a0 <pmc_enable_periph_clk+0x50>)
  40276c:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40276e:	2000      	movs	r0, #0
  402770:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402772:	4b0b      	ldr	r3, [pc, #44]	; (4027a0 <pmc_enable_periph_clk+0x50>)
  402774:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402778:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40277a:	2301      	movs	r3, #1
  40277c:	4083      	lsls	r3, r0
  40277e:	401a      	ands	r2, r3
  402780:	4293      	cmp	r3, r2
  402782:	d00a      	beq.n	40279a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  402784:	2301      	movs	r3, #1
  402786:	4083      	lsls	r3, r0
  402788:	4a05      	ldr	r2, [pc, #20]	; (4027a0 <pmc_enable_periph_clk+0x50>)
  40278a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  40278e:	2000      	movs	r0, #0
  402790:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  402792:	2001      	movs	r0, #1
  402794:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402796:	2000      	movs	r0, #0
  402798:	4770      	bx	lr
  40279a:	2000      	movs	r0, #0
}
  40279c:	4770      	bx	lr
  40279e:	bf00      	nop
  4027a0:	400e0600 	.word	0x400e0600

004027a4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4027a4:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4027a6:	23ac      	movs	r3, #172	; 0xac
  4027a8:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4027aa:	680b      	ldr	r3, [r1, #0]
  4027ac:	684a      	ldr	r2, [r1, #4]
  4027ae:	fbb3 f3f2 	udiv	r3, r3, r2
  4027b2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4027b4:	1e5c      	subs	r4, r3, #1
  4027b6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4027ba:	4294      	cmp	r4, r2
  4027bc:	d806      	bhi.n	4027cc <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  4027be:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4027c0:	688b      	ldr	r3, [r1, #8]
  4027c2:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4027c4:	2350      	movs	r3, #80	; 0x50
  4027c6:	6003      	str	r3, [r0, #0]

	return 0;
  4027c8:	2000      	movs	r0, #0
  4027ca:	e000      	b.n	4027ce <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  4027cc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  4027ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  4027d2:	4770      	bx	lr

004027d4 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  4027d4:	2340      	movs	r3, #64	; 0x40
  4027d6:	6003      	str	r3, [r0, #0]
  4027d8:	4770      	bx	lr
  4027da:	bf00      	nop

004027dc <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  4027dc:	2310      	movs	r3, #16
  4027de:	6003      	str	r3, [r0, #0]
  4027e0:	4770      	bx	lr
  4027e2:	bf00      	nop

004027e4 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4027e4:	2350      	movs	r3, #80	; 0x50
  4027e6:	6003      	str	r3, [r0, #0]
  4027e8:	4770      	bx	lr
  4027ea:	bf00      	nop

004027ec <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  4027ec:	6081      	str	r1, [r0, #8]
  4027ee:	4770      	bx	lr

004027f0 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  4027f0:	6940      	ldr	r0, [r0, #20]
}
  4027f2:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4027f6:	4770      	bx	lr

004027f8 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  4027f8:	6201      	str	r1, [r0, #32]
  4027fa:	4770      	bx	lr

004027fc <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4027fc:	6943      	ldr	r3, [r0, #20]
  4027fe:	f013 0f02 	tst.w	r3, #2
  402802:	d002      	beq.n	40280a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402804:	61c1      	str	r1, [r0, #28]
	return 0;
  402806:	2000      	movs	r0, #0
  402808:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  40280a:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  40280c:	4770      	bx	lr
  40280e:	bf00      	nop

00402810 <board_init>:
#define PIOD_SPI					PIO_PD20|PIO_PD21|PIO_PD22
#define PIOB_SPI					PIO_PB2


void board_init(void)
{
  402810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402814:	b08f      	sub	sp, #60	; 0x3c
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  402816:	4878      	ldr	r0, [pc, #480]	; (4029f8 <board_init+0x1e8>)
  402818:	2100      	movs	r1, #0
  40281a:	4b78      	ldr	r3, [pc, #480]	; (4029fc <board_init+0x1ec>)
  40281c:	4798      	blx	r3
	sysclk_init();
  40281e:	4b78      	ldr	r3, [pc, #480]	; (402a00 <board_init+0x1f0>)
  402820:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  402822:	4b78      	ldr	r3, [pc, #480]	; (402a04 <board_init+0x1f4>)
  402824:	ac0b      	add	r4, sp, #44	; 0x2c
  402826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40282a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  40282e:	2008      	movs	r0, #8
  402830:	4e75      	ldr	r6, [pc, #468]	; (402a08 <board_init+0x1f8>)
  402832:	47b0      	blx	r6
		UART_SERIAL_PARITY,
		UART_SERIAL_STOP_BIT,
		UART_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(ID_UART1);
	pmc_enable_periph_clk(ID_UART1);
  402834:	2008      	movs	r0, #8
  402836:	47b0      	blx	r6
	uart_init(UART1, &usart_console_settings);
  402838:	4874      	ldr	r0, [pc, #464]	; (402a0c <board_init+0x1fc>)
  40283a:	4621      	mov	r1, r4
  40283c:	4b74      	ldr	r3, [pc, #464]	; (402a10 <board_init+0x200>)
  40283e:	4798      	blx	r3
	uart_enable(UART1);
  402840:	4872      	ldr	r0, [pc, #456]	; (402a0c <board_init+0x1fc>)
  402842:	4b74      	ldr	r3, [pc, #464]	; (402a14 <board_init+0x204>)
  402844:	4798      	blx	r3
	uart_enable_tx(UART1);
  402846:	4871      	ldr	r0, [pc, #452]	; (402a0c <board_init+0x1fc>)
  402848:	4b73      	ldr	r3, [pc, #460]	; (402a18 <board_init+0x208>)
  40284a:	4798      	blx	r3
	uart_enable_rx(UART1);
  40284c:	486f      	ldr	r0, [pc, #444]	; (402a0c <board_init+0x1fc>)
  40284e:	4b73      	ldr	r3, [pc, #460]	; (402a1c <board_init+0x20c>)
  402850:	4798      	blx	r3
	uart_set_clock_divisor(UART1,(83/1)); //Pippin had GLOBAL_SLOWDOWN IT WAS VALUED 1
  402852:	486e      	ldr	r0, [pc, #440]	; (402a0c <board_init+0x1fc>)
  402854:	2153      	movs	r1, #83	; 0x53
  402856:	4b72      	ldr	r3, [pc, #456]	; (402a20 <board_init+0x210>)
  402858:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  40285a:	200a      	movs	r0, #10
  40285c:	47b0      	blx	r6
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,1<<4 | 1<<5);
  40285e:	4871      	ldr	r0, [pc, #452]	; (402a24 <board_init+0x214>)
  402860:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402864:	2230      	movs	r2, #48	; 0x30
  402866:	f8df b250 	ldr.w	fp, [pc, #592]	; 402ab8 <board_init+0x2a8>
  40286a:	47d8      	blx	fp
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 115200\nBits: 8\nNo stop bits \n");
  40286c:	486e      	ldr	r0, [pc, #440]	; (402a28 <board_init+0x218>)
  40286e:	4d6f      	ldr	r5, [pc, #444]	; (402a2c <board_init+0x21c>)
  402870:	47a8      	blx	r5
	   ######################################
	   ###################################### */
	//sendDebugString("LED INITIALIZATION - STARTED\n");
		//pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
		//pmc_enable_periph_clk(ID_PIOA);
		pmc_enable_periph_clk(ID_PIOD);
  402872:	2010      	movs	r0, #16
  402874:	47b0      	blx	r6
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  402876:	2400      	movs	r4, #0
  402878:	9400      	str	r4, [sp, #0]
  40287a:	486d      	ldr	r0, [pc, #436]	; (402a30 <board_init+0x220>)
  40287c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402880:	4622      	mov	r2, r4
  402882:	4623      	mov	r3, r4
  402884:	f8df a234 	ldr.w	sl, [pc, #564]	; 402abc <board_init+0x2ac>
  402888:	47d0      	blx	sl
		pio_set_output(LED2,LOW,DISABLE,DISABLE);
  40288a:	9400      	str	r4, [sp, #0]
  40288c:	4868      	ldr	r0, [pc, #416]	; (402a30 <board_init+0x220>)
  40288e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402892:	4622      	mov	r2, r4
  402894:	4623      	mov	r3, r4
  402896:	47d0      	blx	sl
			}afec_ch_cfg;
		
		afec_ch_cfg.diff = false;
		afec_ch_cfg.gain = AFEC_GAINVALUE_0;
		
		pmc_enable_periph_clk(AFEC0);
  402898:	f8df 8224 	ldr.w	r8, [pc, #548]	; 402ac0 <board_init+0x2b0>
  40289c:	4640      	mov	r0, r8
  40289e:	47b0      	blx	r6
		
		//afec_disable(AFEC0);
		afec_get_config_defaults(&afec_cfg);
  4028a0:	a804      	add	r0, sp, #16
  4028a2:	4b64      	ldr	r3, [pc, #400]	; (402a34 <board_init+0x224>)
  4028a4:	4798      	blx	r3
		afec_init(AFEC0, &afec_cfg);
  4028a6:	4640      	mov	r0, r8
  4028a8:	a904      	add	r1, sp, #16
  4028aa:	4b63      	ldr	r3, [pc, #396]	; (402a38 <board_init+0x228>)
  4028ac:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4028ae:	f8c8 4064 	str.w	r4, [r8, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4028b2:	f240 13ff 	movw	r3, #511	; 0x1ff
  4028b6:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4028ba:	2701      	movs	r7, #1
  4028bc:	f8c8 7064 	str.w	r7, [r8, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  4028c0:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4028c4:	f8c8 7014 	str.w	r7, [r8, #20]
  4028c8:	2302      	movs	r3, #2
  4028ca:	f8c8 3014 	str.w	r3, [r8, #20]
		
		afec_channel_enable(AFEC0, AFEC_CHANNEL_0);
		afec_channel_enable(AFEC0, AFEC_CHANNEL_1);
		
		//afec_ch_set_config(AFEC0,AFEC_CHANNEL_0,&afec_ch_cfg);
		afec_enable(AFEC0);
  4028ce:	4640      	mov	r0, r8
  4028d0:	4b5a      	ldr	r3, [pc, #360]	; (402a3c <board_init+0x22c>)
  4028d2:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable SPI
	   ######################################
	   ###################################### */
		sendDebugString("SPI INITIALIZATION - STARTED\n");
  4028d4:	485a      	ldr	r0, [pc, #360]	; (402a40 <board_init+0x230>)
  4028d6:	47a8      	blx	r5
  4028d8:	2015      	movs	r0, #21
  4028da:	47b0      	blx	r6
		sysclk_enable_peripheral_clock(ID_SPI0);
		pmc_enable_periph_clk(ID_PIOD);
  4028dc:	2010      	movs	r0, #16
  4028de:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOB);
  4028e0:	200b      	movs	r0, #11
  4028e2:	47b0      	blx	r6
		
		struct spi_device spidevice;
		spidevice.id = 0;
  4028e4:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  4028e8:	f848 4d2c 	str.w	r4, [r8, #-44]!
		
		
		//Set up SPI
		spi_master_init(SPI0);
  4028ec:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 402ac4 <board_init+0x2b4>
  4028f0:	4648      	mov	r0, r9
  4028f2:	4b54      	ldr	r3, [pc, #336]	; (402a44 <board_init+0x234>)
  4028f4:	4798      	blx	r3
		spi_master_setup_device(SPI0,&spidevice,SPI_MODE_0,16000000,0); //was 16000000
  4028f6:	9400      	str	r4, [sp, #0]
  4028f8:	4648      	mov	r0, r9
  4028fa:	4641      	mov	r1, r8
  4028fc:	4622      	mov	r2, r4
  4028fe:	4b52      	ldr	r3, [pc, #328]	; (402a48 <board_init+0x238>)
  402900:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 402ac8 <board_init+0x2b8>
  402904:	47e0      	blx	ip
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  402906:	f8c9 7000 	str.w	r7, [r9]
		spi_enable(SPI0);
		spi_select_device(SPI0,&spidevice);
  40290a:	4648      	mov	r0, r9
  40290c:	4641      	mov	r1, r8
  40290e:	4b4f      	ldr	r3, [pc, #316]	; (402a4c <board_init+0x23c>)
  402910:	4798      	blx	r3
		spi_disable_loopback(SPI0);
		spi_set_peripheral_chip_select_value(SPI0,spi_get_pcs(DEFAULT_CHIP_ID))*/
		
		
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_B,PIOD_SPI);
  402912:	4847      	ldr	r0, [pc, #284]	; (402a30 <board_init+0x220>)
  402914:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402918:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
  40291c:	47d8      	blx	fp
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,PIOB_SPI);
  40291e:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 402acc <board_init+0x2bc>
  402922:	4640      	mov	r0, r8
  402924:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402928:	2204      	movs	r2, #4
  40292a:	47d8      	blx	fp
		sendDebugString("SPI INITIALIZATION - FINISHED\n");
  40292c:	4848      	ldr	r0, [pc, #288]	; (402a50 <board_init+0x240>)
  40292e:	47a8      	blx	r5
		sendDebugString("DWM1000 INITIALIZATION - STARTED\n");
  402930:	4848      	ldr	r0, [pc, #288]	; (402a54 <board_init+0x244>)
  402932:	47a8      	blx	r5
		pio_set_output(PIOB_DWM_RESET,LOW,DISABLE,DISABLE);
  402934:	9400      	str	r4, [sp, #0]
  402936:	4640      	mov	r0, r8
  402938:	4639      	mov	r1, r7
  40293a:	4622      	mov	r2, r4
  40293c:	4623      	mov	r3, r4
  40293e:	47d0      	blx	sl
		pio_set(PIOB_DWM_RESET);
  402940:	4640      	mov	r0, r8
  402942:	4639      	mov	r1, r7
  402944:	4b44      	ldr	r3, [pc, #272]	; (402a58 <board_init+0x248>)
  402946:	4798      	blx	r3
		pio_clear(PIOB_DWM_RESET);
  402948:	4640      	mov	r0, r8
  40294a:	4639      	mov	r1, r7
  40294c:	4b43      	ldr	r3, [pc, #268]	; (402a5c <board_init+0x24c>)
  40294e:	4798      	blx	r3
		
		delay_ms(10);
  402950:	f8df 817c 	ldr.w	r8, [pc, #380]	; 402ad0 <board_init+0x2c0>
  402954:	4640      	mov	r0, r8
  402956:	4c42      	ldr	r4, [pc, #264]	; (402a60 <board_init+0x250>)
  402958:	47a0      	blx	r4
		//DW1000_initialise();
		DW1000_initialise();
  40295a:	4b42      	ldr	r3, [pc, #264]	; (402a64 <board_init+0x254>)
  40295c:	4798      	blx	r3
		delay_ms(10);
  40295e:	4640      	mov	r0, r8
  402960:	47a0      	blx	r4
		DW1000_toggleGPIO_MODE();
  402962:	4b41      	ldr	r3, [pc, #260]	; (402a68 <board_init+0x258>)
  402964:	4798      	blx	r3
		
		
		
		sendDebugString("DWM1000 INITIALIZATION - FINISHED\n");
  402966:	4841      	ldr	r0, [pc, #260]	; (402a6c <board_init+0x25c>)
  402968:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  40296a:	4841      	ldr	r0, [pc, #260]	; (402a70 <board_init+0x260>)
  40296c:	47a8      	blx	r5
		wdt_disable(WDT);
  40296e:	4841      	ldr	r0, [pc, #260]	; (402a74 <board_init+0x264>)
  402970:	4b41      	ldr	r3, [pc, #260]	; (402a78 <board_init+0x268>)
  402972:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  402974:	4841      	ldr	r0, [pc, #260]	; (402a7c <board_init+0x26c>)
  402976:	47a8      	blx	r5
		/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  402978:	4841      	ldr	r0, [pc, #260]	; (402a80 <board_init+0x270>)
  40297a:	47a8      	blx	r5
		cpu_irq_enable();
  40297c:	4b41      	ldr	r3, [pc, #260]	; (402a84 <board_init+0x274>)
  40297e:	701f      	strb	r7, [r3, #0]
  402980:	f3bf 8f5f 	dmb	sy
  402984:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  402986:	4840      	ldr	r0, [pc, #256]	; (402a88 <board_init+0x278>)
  402988:	47a8      	blx	r5
	/* ######################################
	   ######################################
                  Setup Switches
	   ######################################
	   ###################################### */
		pmc_enable_periph_clk(ID_PIOA);
  40298a:	200a      	movs	r0, #10
  40298c:	47b0      	blx	r6
		pio_set_input(PIOA,PIOA_BUTTSANDDIR,PIO_PULLUP|PIO_DEBOUNCE);
  40298e:	4e3f      	ldr	r6, [pc, #252]	; (402a8c <board_init+0x27c>)
  402990:	4824      	ldr	r0, [pc, #144]	; (402a24 <board_init+0x214>)
  402992:	4631      	mov	r1, r6
  402994:	2209      	movs	r2, #9
  402996:	4b3e      	ldr	r3, [pc, #248]	; (402a90 <board_init+0x280>)
  402998:	4798      	blx	r3
		pio_set_debounce_filter(PIOA,PIOA_BUTTSANDDIR,100);
  40299a:	4822      	ldr	r0, [pc, #136]	; (402a24 <board_init+0x214>)
  40299c:	4631      	mov	r1, r6
  40299e:	2264      	movs	r2, #100	; 0x64
  4029a0:	4b3c      	ldr	r3, [pc, #240]	; (402a94 <board_init+0x284>)
  4029a2:	4798      	blx	r3
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIPHERAL IRQ INITIALIZATION - STARTED\n");
  4029a4:	483c      	ldr	r0, [pc, #240]	; (402a98 <board_init+0x288>)
  4029a6:	47a8      	blx	r5
		//NVIC_ClearPendingIRQ(ISI_IRQn);
		//NVIC_SetPriority(ISI_IRQn,7);
		//NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART1,UART_IER_RXRDY);
  4029a8:	4818      	ldr	r0, [pc, #96]	; (402a0c <board_init+0x1fc>)
  4029aa:	4639      	mov	r1, r7
  4029ac:	4b3b      	ldr	r3, [pc, #236]	; (402a9c <board_init+0x28c>)
  4029ae:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4029b0:	4c3b      	ldr	r4, [pc, #236]	; (402aa0 <board_init+0x290>)
  4029b2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4029b6:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4029ba:	27c0      	movs	r7, #192	; 0xc0
  4029bc:	f884 7308 	strb.w	r7, [r4, #776]	; 0x308
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4029c0:	6023      	str	r3, [r4, #0]
		NVIC_ClearPendingIRQ(UART1_IRQn);
		NVIC_SetPriority(UART1_IRQn,6);
		NVIC_EnableIRQ(UART1_IRQn);
		sendDebugString("PERIPHERAL IRQ INITIALIZATION - FINISHED\n");
  4029c2:	4838      	ldr	r0, [pc, #224]	; (402aa4 <board_init+0x294>)
  4029c4:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4029c6:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4029ca:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4029ce:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4029d2:	f884 730a 	strb.w	r7, [r4, #778]	; 0x30a

		NVIC_DisableIRQ(PIOA_IRQn);
		NVIC_ClearPendingIRQ(PIOA_IRQn);
		NVIC_SetPriority(PIOA_IRQn, 6);
		pio_enable_interrupt(PIOA,PIOA_BUTTSANDDIR);
  4029d6:	4813      	ldr	r0, [pc, #76]	; (402a24 <board_init+0x214>)
  4029d8:	4631      	mov	r1, r6
  4029da:	4b33      	ldr	r3, [pc, #204]	; (402aa8 <board_init+0x298>)
  4029dc:	4798      	blx	r3
		pio_configure_interrupt(PIOA,PIOA_BUTTONS, PIO_IT_FALL_EDGE);
  4029de:	4811      	ldr	r0, [pc, #68]	; (402a24 <board_init+0x214>)
  4029e0:	4932      	ldr	r1, [pc, #200]	; (402aac <board_init+0x29c>)
  4029e2:	2250      	movs	r2, #80	; 0x50
  4029e4:	4e32      	ldr	r6, [pc, #200]	; (402ab0 <board_init+0x2a0>)
  4029e6:	47b0      	blx	r6
		pio_configure_interrupt(PIOA,PIOA_DIRECTIONS, PIO_IT_EDGE);
  4029e8:	480e      	ldr	r0, [pc, #56]	; (402a24 <board_init+0x214>)
  4029ea:	4932      	ldr	r1, [pc, #200]	; (402ab4 <board_init+0x2a4>)
  4029ec:	2240      	movs	r2, #64	; 0x40
  4029ee:	47b0      	blx	r6
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4029f0:	6025      	str	r5, [r4, #0]
		NVIC_EnableIRQ(PIOA_IRQn);
		
		 
}
  4029f2:	b00f      	add	sp, #60	; 0x3c
  4029f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029f8:	400e1810 	.word	0x400e1810
  4029fc:	00400519 	.word	0x00400519
  402a00:	00402255 	.word	0x00402255
  402a04:	0040a800 	.word	0x0040a800
  402a08:	00402751 	.word	0x00402751
  402a0c:	400e0a00 	.word	0x400e0a00
  402a10:	004027a5 	.word	0x004027a5
  402a14:	004027e5 	.word	0x004027e5
  402a18:	004027d5 	.word	0x004027d5
  402a1c:	004027dd 	.word	0x004027dd
  402a20:	004027f9 	.word	0x004027f9
  402a24:	400e0e00 	.word	0x400e0e00
  402a28:	0040a80c 	.word	0x0040a80c
  402a2c:	00402d35 	.word	0x00402d35
  402a30:	400e1400 	.word	0x400e1400
  402a34:	00402345 	.word	0x00402345
  402a38:	00402375 	.word	0x00402375
  402a3c:	0040246d 	.word	0x0040246d
  402a40:	0040a870 	.word	0x0040a870
  402a44:	0040019d 	.word	0x0040019d
  402a48:	00f42400 	.word	0x00f42400
  402a4c:	0040026d 	.word	0x0040026d
  402a50:	0040a890 	.word	0x0040a890
  402a54:	0040a8b0 	.word	0x0040a8b0
  402a58:	004024ed 	.word	0x004024ed
  402a5c:	004024f1 	.word	0x004024f1
  402a60:	20400001 	.word	0x20400001
  402a64:	00402f69 	.word	0x00402f69
  402a68:	00403185 	.word	0x00403185
  402a6c:	0040a8d4 	.word	0x0040a8d4
  402a70:	0040a8f8 	.word	0x0040a8f8
  402a74:	400e1850 	.word	0x400e1850
  402a78:	00400545 	.word	0x00400545
  402a7c:	0040a91c 	.word	0x0040a91c
  402a80:	0040a940 	.word	0x0040a940
  402a84:	20400010 	.word	0x20400010
  402a88:	0040a968 	.word	0x0040a968
  402a8c:	01dff800 	.word	0x01dff800
  402a90:	00402589 	.word	0x00402589
  402a94:	004024d1 	.word	0x004024d1
  402a98:	0040a990 	.word	0x0040a990
  402a9c:	004027ed 	.word	0x004027ed
  402aa0:	e000e100 	.word	0xe000e100
  402aa4:	0040a9bc 	.word	0x0040a9bc
  402aa8:	0040261d 	.word	0x0040261d
  402aac:	01043800 	.word	0x01043800
  402ab0:	004025e9 	.word	0x004025e9
  402ab4:	00dbc000 	.word	0x00dbc000
  402ab8:	004024f5 	.word	0x004024f5
  402abc:	004025c1 	.word	0x004025c1
  402ac0:	4003c000 	.word	0x4003c000
  402ac4:	40008000 	.word	0x40008000
  402ac8:	004001f1 	.word	0x004001f1
  402acc:	400e1000 	.word	0x400e1000
  402ad0:	0007b784 	.word	0x0007b784

00402ad4 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  402ad4:	e7fe      	b.n	402ad4 <Dummy_Handler>
  402ad6:	bf00      	nop

00402ad8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402ad8:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  402ada:	4b19      	ldr	r3, [pc, #100]	; (402b40 <Reset_Handler+0x68>)
  402adc:	4a19      	ldr	r2, [pc, #100]	; (402b44 <Reset_Handler+0x6c>)
  402ade:	429a      	cmp	r2, r3
  402ae0:	d003      	beq.n	402aea <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  402ae2:	4b19      	ldr	r3, [pc, #100]	; (402b48 <Reset_Handler+0x70>)
  402ae4:	4a16      	ldr	r2, [pc, #88]	; (402b40 <Reset_Handler+0x68>)
  402ae6:	429a      	cmp	r2, r3
  402ae8:	d304      	bcc.n	402af4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402aea:	4b18      	ldr	r3, [pc, #96]	; (402b4c <Reset_Handler+0x74>)
  402aec:	4a18      	ldr	r2, [pc, #96]	; (402b50 <Reset_Handler+0x78>)
  402aee:	429a      	cmp	r2, r3
  402af0:	d310      	bcc.n	402b14 <Reset_Handler+0x3c>
  402af2:	e01b      	b.n	402b2c <Reset_Handler+0x54>
  402af4:	4912      	ldr	r1, [pc, #72]	; (402b40 <Reset_Handler+0x68>)
  402af6:	1d0a      	adds	r2, r1, #4
  402af8:	4b16      	ldr	r3, [pc, #88]	; (402b54 <Reset_Handler+0x7c>)
  402afa:	1a9b      	subs	r3, r3, r2
  402afc:	f023 0303 	bic.w	r3, r3, #3
  402b00:	3304      	adds	r3, #4
  402b02:	4a10      	ldr	r2, [pc, #64]	; (402b44 <Reset_Handler+0x6c>)
  402b04:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  402b06:	f852 0b04 	ldr.w	r0, [r2], #4
  402b0a:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  402b0e:	429a      	cmp	r2, r3
  402b10:	d1f9      	bne.n	402b06 <Reset_Handler+0x2e>
  402b12:	e7ea      	b.n	402aea <Reset_Handler+0x12>
  402b14:	4b10      	ldr	r3, [pc, #64]	; (402b58 <Reset_Handler+0x80>)
  402b16:	4a11      	ldr	r2, [pc, #68]	; (402b5c <Reset_Handler+0x84>)
  402b18:	1ad2      	subs	r2, r2, r3
  402b1a:	f022 0203 	bic.w	r2, r2, #3
  402b1e:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402b20:	3b04      	subs	r3, #4
                *pDest++ = 0;
  402b22:	2100      	movs	r1, #0
  402b24:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402b28:	4293      	cmp	r3, r2
  402b2a:	d1fb      	bne.n	402b24 <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402b2c:	4a0c      	ldr	r2, [pc, #48]	; (402b60 <Reset_Handler+0x88>)
  402b2e:	4b0d      	ldr	r3, [pc, #52]	; (402b64 <Reset_Handler+0x8c>)
  402b30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402b34:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  402b36:	4b0c      	ldr	r3, [pc, #48]	; (402b68 <Reset_Handler+0x90>)
  402b38:	4798      	blx	r3

        /* Branch to main function */
        main();
  402b3a:	4b0c      	ldr	r3, [pc, #48]	; (402b6c <Reset_Handler+0x94>)
  402b3c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402b3e:	e7fe      	b.n	402b3e <Reset_Handler+0x66>
  402b40:	20400000 	.word	0x20400000
  402b44:	0040af2c 	.word	0x0040af2c
  402b48:	20400894 	.word	0x20400894
  402b4c:	2040c4bc 	.word	0x2040c4bc
  402b50:	20400894 	.word	0x20400894
  402b54:	20400897 	.word	0x20400897
  402b58:	20400898 	.word	0x20400898
  402b5c:	2040c4bf 	.word	0x2040c4bf
  402b60:	e000ed00 	.word	0xe000ed00
  402b64:	00400000 	.word	0x00400000
  402b68:	004064dd 	.word	0x004064dd
  402b6c:	0040334d 	.word	0x0040334d

00402b70 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402b70:	4b3d      	ldr	r3, [pc, #244]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b74:	f003 0303 	and.w	r3, r3, #3
  402b78:	2b01      	cmp	r3, #1
  402b7a:	d012      	beq.n	402ba2 <SystemCoreClockUpdate+0x32>
  402b7c:	b113      	cbz	r3, 402b84 <SystemCoreClockUpdate+0x14>
  402b7e:	2b02      	cmp	r3, #2
  402b80:	d02c      	beq.n	402bdc <SystemCoreClockUpdate+0x6c>
  402b82:	e05a      	b.n	402c3a <SystemCoreClockUpdate+0xca>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402b84:	4b39      	ldr	r3, [pc, #228]	; (402c6c <SystemCoreClockUpdate+0xfc>)
  402b86:	695b      	ldr	r3, [r3, #20]
  402b88:	f013 0f80 	tst.w	r3, #128	; 0x80
  402b8c:	d004      	beq.n	402b98 <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402b8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402b92:	4b37      	ldr	r3, [pc, #220]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402b94:	601a      	str	r2, [r3, #0]
  402b96:	e050      	b.n	402c3a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402b98:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402b9c:	4b34      	ldr	r3, [pc, #208]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402b9e:	601a      	str	r2, [r3, #0]
  402ba0:	e04b      	b.n	402c3a <SystemCoreClockUpdate+0xca>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402ba2:	4b31      	ldr	r3, [pc, #196]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402ba4:	6a1b      	ldr	r3, [r3, #32]
  402ba6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402baa:	d003      	beq.n	402bb4 <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402bac:	4a31      	ldr	r2, [pc, #196]	; (402c74 <SystemCoreClockUpdate+0x104>)
  402bae:	4b30      	ldr	r3, [pc, #192]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402bb0:	601a      	str	r2, [r3, #0]
  402bb2:	e042      	b.n	402c3a <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402bb4:	4a30      	ldr	r2, [pc, #192]	; (402c78 <SystemCoreClockUpdate+0x108>)
  402bb6:	4b2e      	ldr	r3, [pc, #184]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402bb8:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402bba:	4b2b      	ldr	r3, [pc, #172]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402bbc:	6a1b      	ldr	r3, [r3, #32]
  402bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402bc2:	2b10      	cmp	r3, #16
  402bc4:	d002      	beq.n	402bcc <SystemCoreClockUpdate+0x5c>
  402bc6:	2b20      	cmp	r3, #32
  402bc8:	d004      	beq.n	402bd4 <SystemCoreClockUpdate+0x64>
  402bca:	e036      	b.n	402c3a <SystemCoreClockUpdate+0xca>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402bcc:	4a2b      	ldr	r2, [pc, #172]	; (402c7c <SystemCoreClockUpdate+0x10c>)
  402bce:	4b28      	ldr	r3, [pc, #160]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402bd0:	601a      	str	r2, [r3, #0]
          break;
  402bd2:	e032      	b.n	402c3a <SystemCoreClockUpdate+0xca>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402bd4:	4a27      	ldr	r2, [pc, #156]	; (402c74 <SystemCoreClockUpdate+0x104>)
  402bd6:	4b26      	ldr	r3, [pc, #152]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402bd8:	601a      	str	r2, [r3, #0]
          break;
  402bda:	e02e      	b.n	402c3a <SystemCoreClockUpdate+0xca>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402bdc:	4b22      	ldr	r3, [pc, #136]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402bde:	6a1b      	ldr	r3, [r3, #32]
  402be0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402be4:	d003      	beq.n	402bee <SystemCoreClockUpdate+0x7e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402be6:	4a23      	ldr	r2, [pc, #140]	; (402c74 <SystemCoreClockUpdate+0x104>)
  402be8:	4b21      	ldr	r3, [pc, #132]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402bea:	601a      	str	r2, [r3, #0]
  402bec:	e012      	b.n	402c14 <SystemCoreClockUpdate+0xa4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402bee:	4a22      	ldr	r2, [pc, #136]	; (402c78 <SystemCoreClockUpdate+0x108>)
  402bf0:	4b1f      	ldr	r3, [pc, #124]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402bf2:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402bf4:	4b1c      	ldr	r3, [pc, #112]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402bf6:	6a1b      	ldr	r3, [r3, #32]
  402bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402bfc:	2b10      	cmp	r3, #16
  402bfe:	d002      	beq.n	402c06 <SystemCoreClockUpdate+0x96>
  402c00:	2b20      	cmp	r3, #32
  402c02:	d004      	beq.n	402c0e <SystemCoreClockUpdate+0x9e>
  402c04:	e006      	b.n	402c14 <SystemCoreClockUpdate+0xa4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402c06:	4a1d      	ldr	r2, [pc, #116]	; (402c7c <SystemCoreClockUpdate+0x10c>)
  402c08:	4b19      	ldr	r3, [pc, #100]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402c0a:	601a      	str	r2, [r3, #0]
          break;
  402c0c:	e002      	b.n	402c14 <SystemCoreClockUpdate+0xa4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402c0e:	4a19      	ldr	r2, [pc, #100]	; (402c74 <SystemCoreClockUpdate+0x104>)
  402c10:	4b17      	ldr	r3, [pc, #92]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402c12:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402c14:	4b14      	ldr	r3, [pc, #80]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c18:	f003 0303 	and.w	r3, r3, #3
  402c1c:	2b02      	cmp	r3, #2
  402c1e:	d10c      	bne.n	402c3a <SystemCoreClockUpdate+0xca>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402c20:	4a11      	ldr	r2, [pc, #68]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402c22:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402c24:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402c26:	4812      	ldr	r0, [pc, #72]	; (402c70 <SystemCoreClockUpdate+0x100>)
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402c28:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402c2c:	6803      	ldr	r3, [r0, #0]
  402c2e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402c32:	b2d2      	uxtb	r2, r2
  402c34:	fbb3 f3f2 	udiv	r3, r3, r2
  402c38:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402c3a:	4b0b      	ldr	r3, [pc, #44]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402c42:	2b70      	cmp	r3, #112	; 0x70
  402c44:	d107      	bne.n	402c56 <SystemCoreClockUpdate+0xe6>
  {
    SystemCoreClock /= 3U;
  402c46:	4a0a      	ldr	r2, [pc, #40]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402c48:	6813      	ldr	r3, [r2, #0]
  402c4a:	490d      	ldr	r1, [pc, #52]	; (402c80 <SystemCoreClockUpdate+0x110>)
  402c4c:	fba1 1303 	umull	r1, r3, r1, r3
  402c50:	085b      	lsrs	r3, r3, #1
  402c52:	6013      	str	r3, [r2, #0]
  402c54:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402c56:	4b04      	ldr	r3, [pc, #16]	; (402c68 <SystemCoreClockUpdate+0xf8>)
  402c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402c5a:	4905      	ldr	r1, [pc, #20]	; (402c70 <SystemCoreClockUpdate+0x100>)
  402c5c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402c60:	680b      	ldr	r3, [r1, #0]
  402c62:	40d3      	lsrs	r3, r2
  402c64:	600b      	str	r3, [r1, #0]
  402c66:	4770      	bx	lr
  402c68:	400e0600 	.word	0x400e0600
  402c6c:	400e1810 	.word	0x400e1810
  402c70:	20400014 	.word	0x20400014
  402c74:	00b71b00 	.word	0x00b71b00
  402c78:	003d0900 	.word	0x003d0900
  402c7c:	007a1200 	.word	0x007a1200
  402c80:	aaaaaaab 	.word	0xaaaaaaab

00402c84 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402c84:	4b14      	ldr	r3, [pc, #80]	; (402cd8 <system_init_flash+0x54>)
  402c86:	4298      	cmp	r0, r3
  402c88:	d804      	bhi.n	402c94 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402c8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402c8e:	4b13      	ldr	r3, [pc, #76]	; (402cdc <system_init_flash+0x58>)
  402c90:	601a      	str	r2, [r3, #0]
  402c92:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402c94:	4b12      	ldr	r3, [pc, #72]	; (402ce0 <system_init_flash+0x5c>)
  402c96:	4298      	cmp	r0, r3
  402c98:	d803      	bhi.n	402ca2 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402c9a:	4a12      	ldr	r2, [pc, #72]	; (402ce4 <system_init_flash+0x60>)
  402c9c:	4b0f      	ldr	r3, [pc, #60]	; (402cdc <system_init_flash+0x58>)
  402c9e:	601a      	str	r2, [r3, #0]
  402ca0:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402ca2:	4b11      	ldr	r3, [pc, #68]	; (402ce8 <system_init_flash+0x64>)
  402ca4:	4298      	cmp	r0, r3
  402ca6:	d803      	bhi.n	402cb0 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402ca8:	4a10      	ldr	r2, [pc, #64]	; (402cec <system_init_flash+0x68>)
  402caa:	4b0c      	ldr	r3, [pc, #48]	; (402cdc <system_init_flash+0x58>)
  402cac:	601a      	str	r2, [r3, #0]
  402cae:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402cb0:	4b0f      	ldr	r3, [pc, #60]	; (402cf0 <system_init_flash+0x6c>)
  402cb2:	4298      	cmp	r0, r3
  402cb4:	d803      	bhi.n	402cbe <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402cb6:	4a0f      	ldr	r2, [pc, #60]	; (402cf4 <system_init_flash+0x70>)
  402cb8:	4b08      	ldr	r3, [pc, #32]	; (402cdc <system_init_flash+0x58>)
  402cba:	601a      	str	r2, [r3, #0]
  402cbc:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402cbe:	4b0e      	ldr	r3, [pc, #56]	; (402cf8 <system_init_flash+0x74>)
  402cc0:	4298      	cmp	r0, r3
  402cc2:	d804      	bhi.n	402cce <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402cc4:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402cc8:	4b04      	ldr	r3, [pc, #16]	; (402cdc <system_init_flash+0x58>)
  402cca:	601a      	str	r2, [r3, #0]
  402ccc:	4770      	bx	lr
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402cce:	4a0b      	ldr	r2, [pc, #44]	; (402cfc <system_init_flash+0x78>)
  402cd0:	4b02      	ldr	r3, [pc, #8]	; (402cdc <system_init_flash+0x58>)
  402cd2:	601a      	str	r2, [r3, #0]
  402cd4:	4770      	bx	lr
  402cd6:	bf00      	nop
  402cd8:	01312cff 	.word	0x01312cff
  402cdc:	400e0c00 	.word	0x400e0c00
  402ce0:	026259ff 	.word	0x026259ff
  402ce4:	04000100 	.word	0x04000100
  402ce8:	039386ff 	.word	0x039386ff
  402cec:	04000200 	.word	0x04000200
  402cf0:	04c4b3ff 	.word	0x04c4b3ff
  402cf4:	04000300 	.word	0x04000300
  402cf8:	05f5e0ff 	.word	0x05f5e0ff
  402cfc:	04000500 	.word	0x04000500

00402d00 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402d00:	4b09      	ldr	r3, [pc, #36]	; (402d28 <_sbrk+0x28>)
  402d02:	681b      	ldr	r3, [r3, #0]
  402d04:	b913      	cbnz	r3, 402d0c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  402d06:	4a09      	ldr	r2, [pc, #36]	; (402d2c <_sbrk+0x2c>)
  402d08:	4b07      	ldr	r3, [pc, #28]	; (402d28 <_sbrk+0x28>)
  402d0a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402d0c:	4b06      	ldr	r3, [pc, #24]	; (402d28 <_sbrk+0x28>)
  402d0e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402d10:	181a      	adds	r2, r3, r0
  402d12:	4907      	ldr	r1, [pc, #28]	; (402d30 <_sbrk+0x30>)
  402d14:	4291      	cmp	r1, r2
  402d16:	db04      	blt.n	402d22 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402d18:	4610      	mov	r0, r2
  402d1a:	4a03      	ldr	r2, [pc, #12]	; (402d28 <_sbrk+0x28>)
  402d1c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402d1e:	4618      	mov	r0, r3
  402d20:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  402d22:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  402d26:	4770      	bx	lr
  402d28:	2040c34c 	.word	0x2040c34c
  402d2c:	2040e6c0 	.word	0x2040e6c0
  402d30:	2045fffc 	.word	0x2045fffc

00402d34 <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  402d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d38:	4680      	mov	r8, r0
  402d3a:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  402d3c:	2600      	movs	r6, #0
  402d3e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 402d74 <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART1));
  402d42:	4d0a      	ldr	r5, [pc, #40]	; (402d6c <sendDebugString+0x38>)
  402d44:	4c0a      	ldr	r4, [pc, #40]	; (402d70 <sendDebugString+0x3c>)
		uart_write(UART1,in[i]);
  402d46:	f8df a030 	ldr.w	sl, [pc, #48]	; 402d78 <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  402d4a:	e008      	b.n	402d5e <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART1));
  402d4c:	4620      	mov	r0, r4
  402d4e:	47a8      	blx	r5
  402d50:	2800      	cmp	r0, #0
  402d52:	d0fb      	beq.n	402d4c <sendDebugString+0x18>
		uart_write(UART1,in[i]);
  402d54:	4620      	mov	r0, r4
  402d56:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  402d5a:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  402d5c:	3601      	adds	r6, #1
  402d5e:	4640      	mov	r0, r8
  402d60:	47c8      	blx	r9
  402d62:	4286      	cmp	r6, r0
  402d64:	d3f2      	bcc.n	402d4c <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART1));
		uart_write(UART1,in[i]);
	}
}
  402d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d6a:	bf00      	nop
  402d6c:	004027f1 	.word	0x004027f1
  402d70:	400e0a00 	.word	0x400e0a00
  402d74:	0040674d 	.word	0x0040674d
  402d78:	004027fd 	.word	0x004027fd

00402d7c <DW1000_readReg>:
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  402d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d80:	b084      	sub	sp, #16
  402d82:	af00      	add	r7, sp, #0
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
  402d84:	1ddc      	adds	r4, r3, #7
  402d86:	f024 0407 	bic.w	r4, r4, #7
  402d8a:	ebad 0d04 	sub.w	sp, sp, r4

	struct spi_device2{
		uint32_t id;
	}spidevice1;

	spidevice1.id = 0;
  402d8e:	2400      	movs	r4, #0
  402d90:	603c      	str	r4, [r7, #0]


	/* Filter results more than 4 octets */
	if (n > 8) {
  402d92:	2b08      	cmp	r3, #8
  402d94:	dc47      	bgt.n	402e26 <DW1000_readReg+0xaa>
  402d96:	466d      	mov	r5, sp
		return 0;									// TODO: return error
	}

	/* Generate header */
    if (!subindex) {
  402d98:	b919      	cbnz	r1, 402da2 <DW1000_readReg+0x26>
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
  402d9a:	6078      	str	r0, [r7, #4]
/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
  402d9c:	f04f 0a01 	mov.w	sl, #1
  402da0:	e012      	b.n	402dc8 <DW1000_readReg+0x4c>
	/* Generate header */
    if (!subindex) {
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_READ_SUB | cmd;					// 0x40 OR with command if sub-index is present
  402da2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  402da6:	6078      	str	r0, [r7, #4]
    	if (offset < 128) {							// Check if extended sub-index is needed
  402da8:	2a7f      	cmp	r2, #127	; 0x7f
  402daa:	d803      	bhi.n	402db4 <DW1000_readReg+0x38>
    		header[1] = offset;						
  402dac:	60ba      	str	r2, [r7, #8]
    		headerLen = 2;
  402dae:	f04f 0a02 	mov.w	sl, #2
  402db2:	e009      	b.n	402dc8 <DW1000_readReg+0x4c>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
  402db4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  402db8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402dbc:	60b9      	str	r1, [r7, #8]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  402dbe:	f3c2 12c7 	ubfx	r2, r2, #7, #8
  402dc2:	60fa      	str	r2, [r7, #12]
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
  402dc4:	f04f 0a03 	mov.w	sl, #3
  402dc8:	461c      	mov	r4, r3
    	}
    }
	
	spi_select_device(SPI0,&spidevice1);
  402dca:	4e1a      	ldr	r6, [pc, #104]	; (402e34 <DW1000_readReg+0xb8>)
  402dcc:	4630      	mov	r0, r6
  402dce:	4639      	mov	r1, r7
  402dd0:	4b19      	ldr	r3, [pc, #100]	; (402e38 <DW1000_readReg+0xbc>)
  402dd2:	4798      	blx	r3
	spi_write_packet(SPI0,header,headerLen);
  402dd4:	4630      	mov	r0, r6
  402dd6:	1d39      	adds	r1, r7, #4
  402dd8:	4652      	mov	r2, sl
  402dda:	4b18      	ldr	r3, [pc, #96]	; (402e3c <DW1000_readReg+0xc0>)
  402ddc:	4798      	blx	r3


	spi_read_packet(SPI0,data,n);
  402dde:	4630      	mov	r0, r6
  402de0:	4629      	mov	r1, r5
  402de2:	4622      	mov	r2, r4
  402de4:	4b16      	ldr	r3, [pc, #88]	; (402e40 <DW1000_readReg+0xc4>)
  402de6:	4798      	blx	r3
	spi_deselect_device(SPI0,&spidevice1);
  402de8:	4630      	mov	r0, r6
  402dea:	4639      	mov	r1, r7
  402dec:	4b15      	ldr	r3, [pc, #84]	; (402e44 <DW1000_readReg+0xc8>)
  402dee:	4798      	blx	r3
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  402df0:	2c01      	cmp	r4, #1
  402df2:	d413      	bmi.n	402e1c <DW1000_readReg+0xa0>
  402df4:	192b      	adds	r3, r5, r4
  402df6:	4629      	mov	r1, r5
  402df8:	2400      	movs	r4, #0
  402dfa:	2500      	movs	r5, #0
		result = (result << 8) | data[i];
  402dfc:	ea4f 2905 	mov.w	r9, r5, lsl #8
  402e00:	ea49 6914 	orr.w	r9, r9, r4, lsr #24
  402e04:	ea4f 2804 	mov.w	r8, r4, lsl #8
  402e08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  402e0c:	2500      	movs	r5, #0
  402e0e:	ea44 0408 	orr.w	r4, r4, r8
  402e12:	ea45 0509 	orr.w	r5, r5, r9
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  402e16:	428b      	cmp	r3, r1
  402e18:	d1f0      	bne.n	402dfc <DW1000_readReg+0x80>
  402e1a:	e001      	b.n	402e20 <DW1000_readReg+0xa4>

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
	uint64_t result = 0;
  402e1c:	2400      	movs	r4, #0
  402e1e:	2500      	movs	r5, #0
	
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
  402e20:	4620      	mov	r0, r4
  402e22:	4629      	mov	r1, r5
  402e24:	e001      	b.n	402e2a <DW1000_readReg+0xae>
	spidevice1.id = 0;


	/* Filter results more than 4 octets */
	if (n > 8) {
		return 0;									// TODO: return error
  402e26:	2000      	movs	r0, #0
  402e28:	4601      	mov	r1, r0
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
}
  402e2a:	3710      	adds	r7, #16
  402e2c:	46bd      	mov	sp, r7
  402e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e32:	bf00      	nop
  402e34:	40008000 	.word	0x40008000
  402e38:	0040026d 	.word	0x0040026d
  402e3c:	004002b9 	.word	0x004002b9
  402e40:	004002f1 	.word	0x004002f1
  402e44:	00400299 	.word	0x00400299

00402e48 <DW1000_readDeviceIdentifier>:
	 DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	 delay_ms(150);
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}

uint64_t DW1000_readDeviceIdentifier() {
  402e48:	b510      	push	{r4, lr}
	uint64_t result = DW1000_readReg(DEV_ID_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, DEV_ID_LEN);
  402e4a:	2000      	movs	r0, #0
  402e4c:	4601      	mov	r1, r0
  402e4e:	4602      	mov	r2, r0
  402e50:	2304      	movs	r3, #4
  402e52:	4c01      	ldr	r4, [pc, #4]	; (402e58 <DW1000_readDeviceIdentifier+0x10>)
  402e54:	47a0      	blx	r4
	return result;
}
  402e56:	bd10      	pop	{r4, pc}
  402e58:	00402d7d 	.word	0x00402d7d

00402e5c <DW1000_readSystemStatus>:
uint64_t DW1000_readSystemConfiguration() {
	DW1000__syscfg = DW1000_readReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CFG_LEN);
	return DW1000__syscfg;
}

uint64_t DW1000_readSystemStatus() {
  402e5c:	b510      	push	{r4, lr}
	DW1000__sysstat = DW1000_readReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_STATUS_LEN);
  402e5e:	200f      	movs	r0, #15
  402e60:	2100      	movs	r1, #0
  402e62:	460a      	mov	r2, r1
  402e64:	2305      	movs	r3, #5
  402e66:	4c03      	ldr	r4, [pc, #12]	; (402e74 <DW1000_readSystemStatus+0x18>)
  402e68:	47a0      	blx	r4
  402e6a:	4b03      	ldr	r3, [pc, #12]	; (402e78 <DW1000_readSystemStatus+0x1c>)
  402e6c:	6018      	str	r0, [r3, #0]
	return DW1000__sysstat;
}
  402e6e:	17c1      	asrs	r1, r0, #31
  402e70:	bd10      	pop	{r4, pc}
  402e72:	bf00      	nop
  402e74:	00402d7d 	.word	0x00402d7d
  402e78:	2040c478 	.word	0x2040c478

00402e7c <DW1000_writeReg>:
	}

	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
  402e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e80:	b087      	sub	sp, #28
  402e82:	af00      	add	r7, sp, #0
  402e84:	6078      	str	r0, [r7, #4]
  402e86:	60b9      	str	r1, [r7, #8]
  402e88:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
  402e8c:	6cbe      	ldr	r6, [r7, #72]	; 0x48

	struct spi_device2{
		uint32_t id;
	}spidevice1;
	
	spidevice1.id = 0;
  402e8e:	2300      	movs	r3, #0
  402e90:	613b      	str	r3, [r7, #16]

	/* Split data buffer */
	uint8_t data[n];									// Array
  402e92:	1df3      	adds	r3, r6, #7
  402e94:	f023 0307 	bic.w	r3, r3, #7
  402e98:	ebad 0d03 	sub.w	sp, sp, r3
  402e9c:	f8c7 d00c 	str.w	sp, [r7, #12]
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  402ea0:	2e00      	cmp	r6, #0
  402ea2:	dd25      	ble.n	402ef0 <DW1000_writeReg+0x74>
  402ea4:	eb0d 0b06 	add.w	fp, sp, r6
  402ea8:	2300      	movs	r3, #0
  402eaa:	20ff      	movs	r0, #255	; 0xff
  402eac:	2100      	movs	r1, #0
  402eae:	46ee      	mov	lr, sp
  402eb0:	46dc      	mov	ip, fp
  402eb2:	46c2      	mov	sl, r8
  402eb4:	46cb      	mov	fp, r9
        data[i] = (buffer & mask) >> (i * 8);
  402eb6:	ea00 080a 	and.w	r8, r0, sl
  402eba:	ea01 090b 	and.w	r9, r1, fp
  402ebe:	f1c3 0520 	rsb	r5, r3, #32
  402ec2:	f1a3 0420 	sub.w	r4, r3, #32
  402ec6:	fa28 f803 	lsr.w	r8, r8, r3
  402eca:	fa09 f505 	lsl.w	r5, r9, r5
  402ece:	ea48 0805 	orr.w	r8, r8, r5
  402ed2:	fa29 f404 	lsr.w	r4, r9, r4
  402ed6:	ea48 0804 	orr.w	r8, r8, r4
  402eda:	f80e 8b01 	strb.w	r8, [lr], #1
        mask = mask << 8;
  402ede:	020c      	lsls	r4, r1, #8
  402ee0:	ea44 6410 	orr.w	r4, r4, r0, lsr #24
  402ee4:	0205      	lsls	r5, r0, #8
  402ee6:	4628      	mov	r0, r5
  402ee8:	4621      	mov	r1, r4
  402eea:	3308      	adds	r3, #8
	spidevice1.id = 0;

	/* Split data buffer */
	uint8_t data[n];									// Array
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  402eec:	45e6      	cmp	lr, ip
  402eee:	d1e2      	bne.n	402eb6 <DW1000_writeReg+0x3a>
        data[i] = (buffer & mask) >> (i * 8);
        mask = mask << 8;
    }

    /* Generate header */
    if (!subindex) {
  402ef0:	68bb      	ldr	r3, [r7, #8]
  402ef2:	b92b      	cbnz	r3, 402f00 <DW1000_writeReg+0x84>
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
  402ef4:	687b      	ldr	r3, [r7, #4]
  402ef6:	f063 007f 	orn	r0, r3, #127	; 0x7f
  402efa:	7538      	strb	r0, [r7, #20]
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
  402efc:	2501      	movs	r5, #1
  402efe:	e00f      	b.n	402f20 <DW1000_writeReg+0xa4>
    /* Generate header */
    if (!subindex) {
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_WRITE_SUB | cmd;				// 0xC0 OR with command if sub-index is present
  402f00:	687b      	ldr	r3, [r7, #4]
  402f02:	f063 003f 	orn	r0, r3, #63	; 0x3f
  402f06:	7538      	strb	r0, [r7, #20]
    	if (offset < 128) {							// Check if extended sub-index is needed
  402f08:	2a7f      	cmp	r2, #127	; 0x7f
  402f0a:	d802      	bhi.n	402f12 <DW1000_writeReg+0x96>
    		header[1] = offset;						
  402f0c:	757a      	strb	r2, [r7, #21]
    		headerLen = 2;
  402f0e:	2502      	movs	r5, #2
  402f10:	e006      	b.n	402f20 <DW1000_writeReg+0xa4>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  402f12:	f062 037f 	orn	r3, r2, #127	; 0x7f
  402f16:	757b      	strb	r3, [r7, #21]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  402f18:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
  402f1c:	75ba      	strb	r2, [r7, #22]
    		headerLen = 3;
  402f1e:	2503      	movs	r5, #3
    	}
    }
	//while(!(SPI0->SPI_SR & SPI_SR_TXEMPTY));
	spi_select_device(SPI0,&spidevice1);
  402f20:	4c0c      	ldr	r4, [pc, #48]	; (402f54 <DW1000_writeReg+0xd8>)
  402f22:	4620      	mov	r0, r4
  402f24:	f107 0110 	add.w	r1, r7, #16
  402f28:	4b0b      	ldr	r3, [pc, #44]	; (402f58 <DW1000_writeReg+0xdc>)
  402f2a:	4798      	blx	r3
	
	spi_write_packet(SPI0,header,headerLen);
  402f2c:	4620      	mov	r0, r4
  402f2e:	f107 0114 	add.w	r1, r7, #20
  402f32:	462a      	mov	r2, r5
  402f34:	4d09      	ldr	r5, [pc, #36]	; (402f5c <DW1000_writeReg+0xe0>)
  402f36:	47a8      	blx	r5
	
	//for(int i = 0;i<headerLen;i++){
	//	 spi_write(SPI0,header+i,NULL,NULL);
	//}
	
	spi_write_packet(SPI0,data,n);
  402f38:	4620      	mov	r0, r4
  402f3a:	68f9      	ldr	r1, [r7, #12]
  402f3c:	4632      	mov	r2, r6
  402f3e:	47a8      	blx	r5
	
	spi_deselect_device(SPI0,&spidevice1);
  402f40:	4620      	mov	r0, r4
  402f42:	f107 0110 	add.w	r1, r7, #16
  402f46:	4b06      	ldr	r3, [pc, #24]	; (402f60 <DW1000_writeReg+0xe4>)
  402f48:	4798      	blx	r3
    //}
    //for (i = 0; i < n; i++) {
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}
  402f4a:	371c      	adds	r7, #28
  402f4c:	46bd      	mov	sp, r7
  402f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f52:	bf00      	nop
  402f54:	40008000 	.word	0x40008000
  402f58:	0040026d 	.word	0x0040026d
  402f5c:	004002b9 	.word	0x004002b9
  402f60:	00400299 	.word	0x00400299
  402f64:	00000000 	.word	0x00000000

00402f68 <DW1000_initialise>:
 * Preamble code:		5
 * Preamble length:		2048 (changed from 128)
 * PAC size:			64 (changed from 8)
 * SFD length:			64 (changed from 8 (standard))
 */
void DW1000_initialise() {
  402f68:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f6a:	b085      	sub	sp, #20
	//delay(5);
	//digitalWrite(DW1000__rst, HIGH);
	//delay(5);

	// Channel, preamble, bitrate selection
	 DW1000_writeReg(CHAN_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x10840011, CHAN_CTRL_LEN);
  402f6c:	a383      	add	r3, pc, #524	; (adr r3, 40317c <DW1000_initialise+0x214>)
  402f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f72:	e9cd 2300 	strd	r2, r3, [sp]
  402f76:	2604      	movs	r6, #4
  402f78:	9602      	str	r6, [sp, #8]
  402f7a:	201f      	movs	r0, #31
  402f7c:	2100      	movs	r1, #0
  402f7e:	460a      	mov	r2, r1
  402f80:	4c79      	ldr	r4, [pc, #484]	; (403168 <DW1000_initialise+0x200>)
  402f82:	47a0      	blx	r4
	 //DW1000_writeReg(TX_FCTRL_ID, NO_SUB, NO_OFFSET, 0x0015400C, TX_FCTRL_LEN);
	 DW1000_writeReg(ACK_RESP_T_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x00000000, ACK_RESP_T_LEN); // changed
  402f84:	2200      	movs	r2, #0
  402f86:	2300      	movs	r3, #0
  402f88:	e9cd 2300 	strd	r2, r3, [sp]
  402f8c:	9602      	str	r6, [sp, #8]
  402f8e:	201a      	movs	r0, #26
  402f90:	2100      	movs	r1, #0
  402f92:	460a      	mov	r2, r1
  402f94:	47a0      	blx	r4
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x20441200, SYS_CFG_LEN); // changed
  402f96:	a36e      	add	r3, pc, #440	; (adr r3, 403150 <DW1000_initialise+0x1e8>)
  402f98:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f9c:	e9cd 2300 	strd	r2, r3, [sp]
  402fa0:	9602      	str	r6, [sp, #8]
  402fa2:	4630      	mov	r0, r6
  402fa4:	2100      	movs	r1, #0
  402fa6:	460a      	mov	r2, r1
  402fa8:	47a0      	blx	r4
	 DW1000_writeReg(TX_POWER_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x1F1F1F1F, TX_POWER_LEN);
  402faa:	f04f 321f 	mov.w	r2, #522133279	; 0x1f1f1f1f
  402fae:	2300      	movs	r3, #0
  402fb0:	e9cd 2300 	strd	r2, r3, [sp]
  402fb4:	9602      	str	r6, [sp, #8]
  402fb6:	201e      	movs	r0, #30
  402fb8:	2100      	movs	r1, #0
  402fba:	460a      	mov	r2, r1
  402fbc:	47a0      	blx	r4

	// Default values that should be modified
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE1_OFFSET, (AGC_TUNE1_16M & AGC_TUNE1_MASK), AGC_TUNE1_LEN);
  402fbe:	f648 0270 	movw	r2, #34928	; 0x8870
  402fc2:	2300      	movs	r3, #0
  402fc4:	e9cd 2300 	strd	r2, r3, [sp]
  402fc8:	2702      	movs	r7, #2
  402fca:	9702      	str	r7, [sp, #8]
  402fcc:	2023      	movs	r0, #35	; 0x23
  402fce:	2101      	movs	r1, #1
  402fd0:	4632      	mov	r2, r6
  402fd2:	47a0      	blx	r4
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE2_OFFSET, (AGC_TUNE2_VAL & AGC_TUNE2_MASK), AGC_TUNE2_LEN);
  402fd4:	a360      	add	r3, pc, #384	; (adr r3, 403158 <DW1000_initialise+0x1f0>)
  402fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
  402fda:	e9cd 2300 	strd	r2, r3, [sp]
  402fde:	9602      	str	r6, [sp, #8]
  402fe0:	2023      	movs	r0, #35	; 0x23
  402fe2:	2101      	movs	r1, #1
  402fe4:	220c      	movs	r2, #12
  402fe6:	47a0      	blx	r4
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE3_OFFSET, (AGC_TUNE3_VAL & AGC_TUNE3_MASK), AGC_TUNE3_LEN);
  402fe8:	2255      	movs	r2, #85	; 0x55
  402fea:	2300      	movs	r3, #0
  402fec:	e9cd 2300 	strd	r2, r3, [sp]
  402ff0:	9702      	str	r7, [sp, #8]
  402ff2:	2023      	movs	r0, #35	; 0x23
  402ff4:	2101      	movs	r1, #1
  402ff6:	2212      	movs	r2, #18
  402ff8:	47a0      	blx	r4

	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE0b_OFFSET, 0x000A, DRX_TUNE0b_LEN); // changed
  402ffa:	220a      	movs	r2, #10
  402ffc:	2300      	movs	r3, #0
  402ffe:	e9cd 2300 	strd	r2, r3, [sp]
  403002:	9702      	str	r7, [sp, #8]
  403004:	2027      	movs	r0, #39	; 0x27
  403006:	2101      	movs	r1, #1
  403008:	463a      	mov	r2, r7
  40300a:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE1a_OFFSET, 0x0087, DRX_TUNE1a_LEN);
  40300c:	2287      	movs	r2, #135	; 0x87
  40300e:	2300      	movs	r3, #0
  403010:	e9cd 2300 	strd	r2, r3, [sp]
  403014:	9702      	str	r7, [sp, #8]
  403016:	2027      	movs	r0, #39	; 0x27
  403018:	2101      	movs	r1, #1
  40301a:	4632      	mov	r2, r6
  40301c:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE1b_OFFSET, 0x0064, DRX_TUNE1b_LEN); // changed
  40301e:	2264      	movs	r2, #100	; 0x64
  403020:	2300      	movs	r3, #0
  403022:	e9cd 2300 	strd	r2, r3, [sp]
  403026:	9702      	str	r7, [sp, #8]
  403028:	2027      	movs	r0, #39	; 0x27
  40302a:	2101      	movs	r1, #1
  40302c:	2206      	movs	r2, #6
  40302e:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE2_OFFSET, 0x371A011D, DRX_TUNE2_LEN); // changed````
  403030:	a34b      	add	r3, pc, #300	; (adr r3, 403160 <DW1000_initialise+0x1f8>)
  403032:	e9d3 2300 	ldrd	r2, r3, [r3]
  403036:	e9cd 2300 	strd	r2, r3, [sp]
  40303a:	9602      	str	r6, [sp, #8]
  40303c:	2027      	movs	r0, #39	; 0x27
  40303e:	2101      	movs	r1, #1
  403040:	2208      	movs	r2, #8
  403042:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE4H_OFFSET, 0x0028, DRX_TUNE4H_LEN); // changed
  403044:	2228      	movs	r2, #40	; 0x28
  403046:	2300      	movs	r3, #0
  403048:	e9cd 2300 	strd	r2, r3, [sp]
  40304c:	9702      	str	r7, [sp, #8]
  40304e:	2027      	movs	r0, #39	; 0x27
  403050:	2101      	movs	r1, #1
  403052:	2226      	movs	r2, #38	; 0x26
  403054:	47a0      	blx	r4
	 
	// DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_SFDTOC_OFFSET, 0xFFFF, DRX_SFDTOC_LEN); // changed

	 DW1000_writeReg(RF_CONF_ID, DW1000_SUB, RF_RXCTRLH_OFFSET, 0xD8, 1);
  403056:	22d8      	movs	r2, #216	; 0xd8
  403058:	2300      	movs	r3, #0
  40305a:	e9cd 2300 	strd	r2, r3, [sp]
  40305e:	2501      	movs	r5, #1
  403060:	9502      	str	r5, [sp, #8]
  403062:	2028      	movs	r0, #40	; 0x28
  403064:	4629      	mov	r1, r5
  403066:	220b      	movs	r2, #11
  403068:	47a0      	blx	r4
	 DW1000_writeReg(RF_CONF_ID, DW1000_SUB, RF_TXCTRL_OFFSET, RF_TXCTRL_CH1, RF_TXCTRL_LEN);
  40306a:	f645 4240 	movw	r2, #23616	; 0x5c40
  40306e:	2300      	movs	r3, #0
  403070:	e9cd 2300 	strd	r2, r3, [sp]
  403074:	9602      	str	r6, [sp, #8]
  403076:	2028      	movs	r0, #40	; 0x28
  403078:	4629      	mov	r1, r5
  40307a:	220c      	movs	r2, #12
  40307c:	47a0      	blx	r4

	 DW1000_writeReg(TX_CAL_ID, DW1000_SUB, TC_PGDELAY_OFFSET, TC_PGDELAY_CH1, TC_PGDELAY_LEN);
  40307e:	22c9      	movs	r2, #201	; 0xc9
  403080:	2300      	movs	r3, #0
  403082:	e9cd 2300 	strd	r2, r3, [sp]
  403086:	9502      	str	r5, [sp, #8]
  403088:	202a      	movs	r0, #42	; 0x2a
  40308a:	4629      	mov	r1, r5
  40308c:	220b      	movs	r2, #11
  40308e:	47a0      	blx	r4

	 DW1000_writeReg(FS_CTRL_ID, DW1000_SUB, FS_PLLCFG_OFFSET, FS_PLLCFG_CH1, FS_PLLCFG_LEN);
  403090:	4a36      	ldr	r2, [pc, #216]	; (40316c <DW1000_initialise+0x204>)
  403092:	2300      	movs	r3, #0
  403094:	e9cd 2300 	strd	r2, r3, [sp]
  403098:	2305      	movs	r3, #5
  40309a:	9302      	str	r3, [sp, #8]
  40309c:	202b      	movs	r0, #43	; 0x2b
  40309e:	4629      	mov	r1, r5
  4030a0:	2207      	movs	r2, #7
  4030a2:	47a0      	blx	r4
	 DW1000_writeReg(FS_CTRL_ID, DW1000_SUB, FS_PLLTUNE_OFFSET, FS_PLLTUNE_CH1, FS_PLLTUNE_LEN);
  4030a4:	221e      	movs	r2, #30
  4030a6:	2300      	movs	r3, #0
  4030a8:	e9cd 2300 	strd	r2, r3, [sp]
  4030ac:	9502      	str	r5, [sp, #8]
  4030ae:	202b      	movs	r0, #43	; 0x2b
  4030b0:	4629      	mov	r1, r5
  4030b2:	220b      	movs	r2, #11
  4030b4:	47a0      	blx	r4

	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_CFG1_OFFSET, 0x6D, LDE_CFG1_LEN);
  4030b6:	226d      	movs	r2, #109	; 0x6d
  4030b8:	2300      	movs	r3, #0
  4030ba:	e9cd 2300 	strd	r2, r3, [sp]
  4030be:	9502      	str	r5, [sp, #8]
  4030c0:	202e      	movs	r0, #46	; 0x2e
  4030c2:	4629      	mov	r1, r5
  4030c4:	f640 0206 	movw	r2, #2054	; 0x806
  4030c8:	47a0      	blx	r4
	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_CFG2_OFFSET, 0x1607, LDE_CFG2_LEN);
  4030ca:	f241 6207 	movw	r2, #5639	; 0x1607
  4030ce:	2300      	movs	r3, #0
  4030d0:	e9cd 2300 	strd	r2, r3, [sp]
  4030d4:	9702      	str	r7, [sp, #8]
  4030d6:	202e      	movs	r0, #46	; 0x2e
  4030d8:	4629      	mov	r1, r5
  4030da:	f641 0206 	movw	r2, #6150	; 0x1806
  4030de:	47a0      	blx	r4
	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_REPC_OFFSET, (0x451E/8), LDE_REPC_LEN); // changed
  4030e0:	f640 02a3 	movw	r2, #2211	; 0x8a3
  4030e4:	2300      	movs	r3, #0
  4030e6:	e9cd 2300 	strd	r2, r3, [sp]
  4030ea:	9702      	str	r7, [sp, #8]
  4030ec:	202e      	movs	r0, #46	; 0x2e
  4030ee:	4629      	mov	r1, r5
  4030f0:	f642 0204 	movw	r2, #10244	; 0x2804
  4030f4:	47a0      	blx	r4

	// Ensure CPLOCK and CPLL_LL flags are working correctly
	 DW1000_writeReg(EXT_SYNC_ID, DW1000_SUB, EC_CTRL_OFFSET, 0x4, EC_CTRL_LEN);
  4030f6:	2204      	movs	r2, #4
  4030f8:	2300      	movs	r3, #0
  4030fa:	e9cd 2300 	strd	r2, r3, [sp]
  4030fe:	9602      	str	r6, [sp, #8]
  403100:	2024      	movs	r0, #36	; 0x24
  403102:	4629      	mov	r1, r5
  403104:	2200      	movs	r2, #0
  403106:	47a0      	blx	r4
	 DW1000_writeReg(SYS_MASK_ID, DW1000_NO_SUB,DW1000_NO_OFFSET,1<<13,SYS_MASK_LEN);
  403108:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40310c:	2300      	movs	r3, #0
  40310e:	e9cd 2300 	strd	r2, r3, [sp]
  403112:	9602      	str	r6, [sp, #8]
  403114:	200e      	movs	r0, #14
  403116:	2100      	movs	r1, #0
  403118:	460a      	mov	r2, r1
  40311a:	47a0      	blx	r4
	 	DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x03,1);
  40311c:	2203      	movs	r2, #3
  40311e:	2300      	movs	r3, #0
  403120:	e9cd 2300 	strd	r2, r3, [sp]
  403124:	9502      	str	r5, [sp, #8]
  403126:	202d      	movs	r0, #45	; 0x2d
  403128:	4629      	mov	r1, r5
  40312a:	2206      	movs	r2, #6
  40312c:	47a0      	blx	r4
	// DW1000_writeReg(AON_ID, SUB, AON_WCFG_OFFSET, 0, AON_WCFG_LEN);
	 delay_ms(100);
  40312e:	4810      	ldr	r0, [pc, #64]	; (403170 <DW1000_initialise+0x208>)
  403130:	4b10      	ldr	r3, [pc, #64]	; (403174 <DW1000_initialise+0x20c>)
  403132:	4798      	blx	r3
	 //DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000,			2);
	 //delay_ms(2);
	 //DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, (0x0200),  2);

	 
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (0x10000738),  4);
  403134:	4a10      	ldr	r2, [pc, #64]	; (403178 <DW1000_initialise+0x210>)
  403136:	2300      	movs	r3, #0
  403138:	e9cd 2300 	strd	r2, r3, [sp]
  40313c:	9602      	str	r6, [sp, #8]
  40313e:	2036      	movs	r0, #54	; 0x36
  403140:	4629      	mov	r1, r5
  403142:	4632      	mov	r2, r6
  403144:	47a0      	blx	r4
	//long temp = DW1000_readReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, PMSC_CTRL1_LEN);
	//DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp & 0xFFFDFFFF), PMSC_CTRL1_LEN);
	//DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	//delay_us(150);
	//DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}
  403146:	b005      	add	sp, #20
  403148:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40314a:	bf00      	nop
  40314c:	f3af 8000 	nop.w
  403150:	20441200 	.word	0x20441200
  403154:	00000000 	.word	0x00000000
  403158:	2502a907 	.word	0x2502a907
  40315c:	00000000 	.word	0x00000000
  403160:	371a011d 	.word	0x371a011d
  403164:	00000000 	.word	0x00000000
  403168:	00402e7d 	.word	0x00402e7d
  40316c:	09000407 	.word	0x09000407
  403170:	004d2b25 	.word	0x004d2b25
  403174:	20400001 	.word	0x20400001
  403178:	10000738 	.word	0x10000738
  40317c:	10840011 	.word	0x10840011
  403180:	00000000 	.word	0x00000000

00403184 <DW1000_toggleGPIO_MODE>:
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, SYS_CFG_LEN);
}


//if running this right after doing a reset of the DW1000 put in a dealy
void DW1000_toggleGPIO_MODE() {
  403184:	b570      	push	{r4, r5, r6, lr}
  403186:	b084      	sub	sp, #16
	uint32_t led = 0;
	//read the gio_mode register so we collect any of the reserved bits, not necessary for this one its all 0's  
	led = DW1000_readReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET, GPIO_MODE_LEN);
  403188:	2026      	movs	r0, #38	; 0x26
  40318a:	2101      	movs	r1, #1
  40318c:	2200      	movs	r2, #0
  40318e:	2304      	movs	r3, #4
  403190:	4e18      	ldr	r6, [pc, #96]	; (4031f4 <DW1000_toggleGPIO_MODE+0x70>)
  403192:	47b0      	blx	r6
	//write to set up all the gpios as leds plus an extra 4 in the first 5, all the cool kids are doing it
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET,0x1540, GPIO_MODE_LEN);
  403194:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
  403198:	2300      	movs	r3, #0
  40319a:	e9cd 2300 	strd	r2, r3, [sp]
  40319e:	2404      	movs	r4, #4
  4031a0:	9402      	str	r4, [sp, #8]
  4031a2:	2026      	movs	r0, #38	; 0x26
  4031a4:	2101      	movs	r1, #1
  4031a6:	2200      	movs	r2, #0
  4031a8:	4d13      	ldr	r5, [pc, #76]	; (4031f8 <DW1000_toggleGPIO_MODE+0x74>)
  4031aa:	47a8      	blx	r5
	
	//read the ctrl0 register to get all those reserved bits
	led = DW1000_readReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, PMSC_CTRL0_LEN);
  4031ac:	2036      	movs	r0, #54	; 0x36
  4031ae:	2101      	movs	r1, #1
  4031b0:	2200      	movs	r2, #0
  4031b2:	4623      	mov	r3, r4
  4031b4:	47b0      	blx	r6
	led |= (1<<18) | (1<<23); //activate those 2 weird clocks bro
  4031b6:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
	//and slam them in there
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, led, PMSC_CTRL0_LEN);
  4031ba:	2200      	movs	r2, #0
  4031bc:	9000      	str	r0, [sp, #0]
  4031be:	9201      	str	r2, [sp, #4]
  4031c0:	9402      	str	r4, [sp, #8]
  4031c2:	2036      	movs	r0, #54	; 0x36
  4031c4:	2101      	movs	r1, #1
  4031c6:	47a8      	blx	r5
	led = PMSC_LEDC_BLNKEN | (1<<5);
	
	//this makes all the lights blink now
	led|= 0xf0000;
	//slam it in
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, led, PMSC_LEDC_LEN);
  4031c8:	4a0c      	ldr	r2, [pc, #48]	; (4031fc <DW1000_toggleGPIO_MODE+0x78>)
  4031ca:	2300      	movs	r3, #0
  4031cc:	e9cd 2300 	strd	r2, r3, [sp]
  4031d0:	9402      	str	r4, [sp, #8]
  4031d2:	2036      	movs	r0, #54	; 0x36
  4031d4:	2101      	movs	r1, #1
  4031d6:	2228      	movs	r2, #40	; 0x28
  4031d8:	47a8      	blx	r5
	
	led &= ~0xf0000; //write the same thing without the blink now
	//and it should be ready to do stuff normally
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, led, PMSC_LEDC_LEN);
  4031da:	f44f 7290 	mov.w	r2, #288	; 0x120
  4031de:	2300      	movs	r3, #0
  4031e0:	e9cd 2300 	strd	r2, r3, [sp]
  4031e4:	9402      	str	r4, [sp, #8]
  4031e6:	2036      	movs	r0, #54	; 0x36
  4031e8:	2101      	movs	r1, #1
  4031ea:	2228      	movs	r2, #40	; 0x28
  4031ec:	47a8      	blx	r5
	
	
}
  4031ee:	b004      	add	sp, #16
  4031f0:	bd70      	pop	{r4, r5, r6, pc}
  4031f2:	bf00      	nop
  4031f4:	00402d7d 	.word	0x00402d7d
  4031f8:	00402e7d 	.word	0x00402e7d
  4031fc:	000f0120 	.word	0x000f0120

00403200 <DW1000_setTxFrameControl>:
 
void DW1000_setTxFrameControl(long buffer) {
  403200:	b500      	push	{lr}
  403202:	b085      	sub	sp, #20
	 DW1000_writeReg(TX_FCTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, TX_FCTRL_LEN);
  403204:	17c1      	asrs	r1, r0, #31
  403206:	e9cd 0100 	strd	r0, r1, [sp]
  40320a:	2305      	movs	r3, #5
  40320c:	9302      	str	r3, [sp, #8]
  40320e:	2008      	movs	r0, #8
  403210:	2100      	movs	r1, #0
  403212:	460a      	mov	r2, r1
  403214:	4b02      	ldr	r3, [pc, #8]	; (403220 <DW1000_setTxFrameControl+0x20>)
  403216:	4798      	blx	r3
}
  403218:	b005      	add	sp, #20
  40321a:	f85d fb04 	ldr.w	pc, [sp], #4
  40321e:	bf00      	nop
  403220:	00402e7d 	.word	0x00402e7d

00403224 <DW1000_writeTxBuffer>:

void DW1000_writeTxBuffer(uint16_t offset, uint64_t buffer, int n) {
  403224:	b510      	push	{r4, lr}
  403226:	b084      	sub	sp, #16
  403228:	4604      	mov	r4, r0
	 DW1000_writeReg(TX_BUFFER_ID, DW1000_SUB, offset, buffer, n);
  40322a:	e9cd 2300 	strd	r2, r3, [sp]
  40322e:	9b06      	ldr	r3, [sp, #24]
  403230:	9302      	str	r3, [sp, #8]
  403232:	2009      	movs	r0, #9
  403234:	2101      	movs	r1, #1
  403236:	4622      	mov	r2, r4
  403238:	4b01      	ldr	r3, [pc, #4]	; (403240 <DW1000_writeTxBuffer+0x1c>)
  40323a:	4798      	blx	r3
}
  40323c:	b004      	add	sp, #16
  40323e:	bd10      	pop	{r4, pc}
  403240:	00402e7d 	.word	0x00402e7d

00403244 <DW1000_startTx>:
uint64_t DW1000_readRxBuffer(uint16_t offset, int n) {
	uint64_t rxBuffer = DW1000_readReg(RX_BUFFER_ID, DW1000_NO_SUB, offset, n);
	return rxBuffer;
}

void DW1000_startTx() {
  403244:	b500      	push	{lr}
  403246:	b085      	sub	sp, #20
	 DW1000_writeReg(SYS_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CTRL_TXSTRT, SYS_CTRL_LEN);
  403248:	2202      	movs	r2, #2
  40324a:	2300      	movs	r3, #0
  40324c:	e9cd 2300 	strd	r2, r3, [sp]
  403250:	2304      	movs	r3, #4
  403252:	9302      	str	r3, [sp, #8]
  403254:	200d      	movs	r0, #13
  403256:	2100      	movs	r1, #0
  403258:	460a      	mov	r2, r1
  40325a:	4b02      	ldr	r3, [pc, #8]	; (403264 <DW1000_startTx+0x20>)
  40325c:	4798      	blx	r3
}
  40325e:	b005      	add	sp, #20
  403260:	f85d fb04 	ldr.w	pc, [sp], #4
  403264:	00402e7d 	.word	0x00402e7d

00403268 <cmdDWMsend>:
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}

void cmdDWMsend(char* tosend, int charlen) {
  403268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40326c:	b083      	sub	sp, #12
	for(int i = 0; i< charlen;i++){
  40326e:	f1b1 0900 	subs.w	r9, r1, #0
  403272:	dd0f      	ble.n	403294 <cmdDWMsend+0x2c>
  403274:	4680      	mov	r8, r0
  403276:	eb00 0709 	add.w	r7, r0, r9
  40327a:	4604      	mov	r4, r0
	DW1000_writeTxBuffer(i,tosend[i],1);
  40327c:	2601      	movs	r6, #1
  40327e:	4d0b      	ldr	r5, [pc, #44]	; (4032ac <cmdDWMsend+0x44>)
  403280:	ebc8 0004 	rsb	r0, r8, r4
  403284:	f814 2b01 	ldrb.w	r2, [r4], #1
  403288:	2300      	movs	r3, #0
  40328a:	9600      	str	r6, [sp, #0]
  40328c:	b280      	uxth	r0, r0
  40328e:	47a8      	blx	r5
    //}
    //digitalWrite(_ss, HIGH);
}

void cmdDWMsend(char* tosend, int charlen) {
	for(int i = 0; i< charlen;i++){
  403290:	42bc      	cmp	r4, r7
  403292:	d1f5      	bne.n	403280 <cmdDWMsend+0x18>
	DW1000_writeTxBuffer(i,tosend[i],1);
	}
	DW1000_setTxFrameControl( 0x00090000 | 0x7F&charlen  );
  403294:	f009 007f 	and.w	r0, r9, #127	; 0x7f
  403298:	f440 2010 	orr.w	r0, r0, #589824	; 0x90000
  40329c:	4b04      	ldr	r3, [pc, #16]	; (4032b0 <cmdDWMsend+0x48>)
  40329e:	4798      	blx	r3
	DW1000_startTx();
  4032a0:	4b04      	ldr	r3, [pc, #16]	; (4032b4 <cmdDWMsend+0x4c>)
  4032a2:	4798      	blx	r3
}
  4032a4:	b003      	add	sp, #12
  4032a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4032aa:	bf00      	nop
  4032ac:	00403225 	.word	0x00403225
  4032b0:	00403201 	.word	0x00403201
  4032b4:	00403245 	.word	0x00403245

004032b8 <SendFrameTask>:

	}
}


void SendFrameTask (void* pvParameters){
  4032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4032ba:	b087      	sub	sp, #28
	int status = 0;
	char buf[20];
	char rxbuf[10];
	for (;;){
		// kill this
		if (sendFrame){
  4032bc:	4c16      	ldr	r4, [pc, #88]	; (403318 <SendFrameTask+0x60>)
			if (FRAMEsem !=NULL){
  4032be:	4d17      	ldr	r5, [pc, #92]	; (40331c <SendFrameTask+0x64>)
				if(xSemaphoreTake(FRAMEsem,0xFFFF) == pdTRUE){
  4032c0:	4e17      	ldr	r6, [pc, #92]	; (403320 <SendFrameTask+0x68>)
	int status = 0;
	char buf[20];
	char rxbuf[10];
	for (;;){
		// kill this
		if (sendFrame){
  4032c2:	6823      	ldr	r3, [r4, #0]
  4032c4:	b313      	cbz	r3, 40330c <SendFrameTask+0x54>
			if (FRAMEsem !=NULL){
  4032c6:	6828      	ldr	r0, [r5, #0]
  4032c8:	b300      	cbz	r0, 40330c <SendFrameTask+0x54>
				if(xSemaphoreTake(FRAMEsem,0xFFFF) == pdTRUE){
  4032ca:	2100      	movs	r1, #0
  4032cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4032d0:	460b      	mov	r3, r1
  4032d2:	47b0      	blx	r6
  4032d4:	2801      	cmp	r0, #1
  4032d6:	d119      	bne.n	40330c <SendFrameTask+0x54>
					//DW1000_clearSystemStatus(0xFFFFFFFF);
					
					
					cmdDWMsend(sendArr,sendlength+2);
  4032d8:	4b12      	ldr	r3, [pc, #72]	; (403324 <SendFrameTask+0x6c>)
  4032da:	6819      	ldr	r1, [r3, #0]
  4032dc:	4812      	ldr	r0, [pc, #72]	; (403328 <SendFrameTask+0x70>)
  4032de:	3102      	adds	r1, #2
  4032e0:	4b12      	ldr	r3, [pc, #72]	; (40332c <SendFrameTask+0x74>)
  4032e2:	4798      	blx	r3
					//sendDebugString("HEIL HITLER!!\n");
					status = DW1000_readSystemStatus();
  4032e4:	4b12      	ldr	r3, [pc, #72]	; (403330 <SendFrameTask+0x78>)
  4032e6:	4798      	blx	r3
  4032e8:	4602      	mov	r2, r0
					sprintf(buf,"%x\n",status);
  4032ea:	a801      	add	r0, sp, #4
  4032ec:	4911      	ldr	r1, [pc, #68]	; (403334 <SendFrameTask+0x7c>)
  4032ee:	4b12      	ldr	r3, [pc, #72]	; (403338 <SendFrameTask+0x80>)
  4032f0:	4798      	blx	r3
					sendDebugString(buf);
  4032f2:	a801      	add	r0, sp, #4
  4032f4:	4b11      	ldr	r3, [pc, #68]	; (40333c <SendFrameTask+0x84>)
  4032f6:	4798      	blx	r3
					//kill this
					if(holdFrame){
  4032f8:	4b11      	ldr	r3, [pc, #68]	; (403340 <SendFrameTask+0x88>)
  4032fa:	681b      	ldr	r3, [r3, #0]
  4032fc:	b903      	cbnz	r3, 403300 <SendFrameTask+0x48>
						
						
						
					}
					else{
						sendFrame = 0;
  4032fe:	6023      	str	r3, [r4, #0]
						
					}
					
					xSemaphoreGive(FRAMEsem);
  403300:	6828      	ldr	r0, [r5, #0]
  403302:	2100      	movs	r1, #0
  403304:	460a      	mov	r2, r1
  403306:	460b      	mov	r3, r1
  403308:	4f0e      	ldr	r7, [pc, #56]	; (403344 <SendFrameTask+0x8c>)
  40330a:	47b8      	blx	r7
				}
			}
		}
		
		
		vTaskDelay(500);
  40330c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  403310:	4b0d      	ldr	r3, [pc, #52]	; (403348 <SendFrameTask+0x90>)
  403312:	4798      	blx	r3
	}
  403314:	e7d5      	b.n	4032c2 <SendFrameTask+0xa>
  403316:	bf00      	nop
  403318:	2040c350 	.word	0x2040c350
  40331c:	2040c370 	.word	0x2040c370
  403320:	00401065 	.word	0x00401065
  403324:	2040c354 	.word	0x2040c354
  403328:	2040c48c 	.word	0x2040c48c
  40332c:	00403269 	.word	0x00403269
  403330:	00402e5d 	.word	0x00402e5d
  403334:	0040aae4 	.word	0x0040aae4
  403338:	00406701 	.word	0x00406701
  40333c:	00402d35 	.word	0x00402d35
  403340:	2040c364 	.word	0x2040c364
  403344:	00400c59 	.word	0x00400c59
  403348:	00401851 	.word	0x00401851

0040334c <main>:





int main (void){
  40334c:	b570      	push	{r4, r5, r6, lr}
  40334e:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  403350:	4b1b      	ldr	r3, [pc, #108]	; (4033c0 <main+0x74>)
  403352:	4798      	blx	r3
	//DW1000_toggleGPIO_MODE();
	xTaskCreate(Task1,"TASK1",600,NULL,2,NULL);
  403354:	2302      	movs	r3, #2
  403356:	9300      	str	r3, [sp, #0]
  403358:	2400      	movs	r4, #0
  40335a:	9401      	str	r4, [sp, #4]
  40335c:	9402      	str	r4, [sp, #8]
  40335e:	9403      	str	r4, [sp, #12]
  403360:	4818      	ldr	r0, [pc, #96]	; (4033c4 <main+0x78>)
  403362:	4919      	ldr	r1, [pc, #100]	; (4033c8 <main+0x7c>)
  403364:	f44f 7216 	mov.w	r2, #600	; 0x258
  403368:	4623      	mov	r3, r4
  40336a:	4d18      	ldr	r5, [pc, #96]	; (4033cc <main+0x80>)
  40336c:	47a8      	blx	r5
	xTaskCreate(ButtonTask,"BUTTONTASK",600,NULL,1,NULL);
  40336e:	2301      	movs	r3, #1
  403370:	9300      	str	r3, [sp, #0]
  403372:	9401      	str	r4, [sp, #4]
  403374:	9402      	str	r4, [sp, #8]
  403376:	9403      	str	r4, [sp, #12]
  403378:	4815      	ldr	r0, [pc, #84]	; (4033d0 <main+0x84>)
  40337a:	4916      	ldr	r1, [pc, #88]	; (4033d4 <main+0x88>)
  40337c:	f44f 7216 	mov.w	r2, #600	; 0x258
  403380:	4623      	mov	r3, r4
  403382:	47a8      	blx	r5
	xTaskCreate(SendFrameTask,"SENDFRAMETASK",600,NULL,3,NULL);
  403384:	2303      	movs	r3, #3
  403386:	9300      	str	r3, [sp, #0]
  403388:	9401      	str	r4, [sp, #4]
  40338a:	9402      	str	r4, [sp, #8]
  40338c:	9403      	str	r4, [sp, #12]
  40338e:	4812      	ldr	r0, [pc, #72]	; (4033d8 <main+0x8c>)
  403390:	4912      	ldr	r1, [pc, #72]	; (4033dc <main+0x90>)
  403392:	f44f 7216 	mov.w	r2, #600	; 0x258
  403396:	4623      	mov	r3, r4
  403398:	47a8      	blx	r5

	pio_clear(LED1);
  40339a:	4e11      	ldr	r6, [pc, #68]	; (4033e0 <main+0x94>)
  40339c:	4630      	mov	r0, r6
  40339e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4033a2:	4d10      	ldr	r5, [pc, #64]	; (4033e4 <main+0x98>)
  4033a4:	47a8      	blx	r5
	pio_clear(LED1);
  4033a6:	4630      	mov	r0, r6
  4033a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4033ac:	47a8      	blx	r5
	sendDebugString("Lights on\n Hi Shovel Lord\n");
  4033ae:	480e      	ldr	r0, [pc, #56]	; (4033e8 <main+0x9c>)
  4033b0:	4b0e      	ldr	r3, [pc, #56]	; (4033ec <main+0xa0>)
  4033b2:	4798      	blx	r3
	vTaskStartScheduler();
  4033b4:	4b0e      	ldr	r3, [pc, #56]	; (4033f0 <main+0xa4>)
  4033b6:	4798      	blx	r3
	
	
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  4033b8:	4620      	mov	r0, r4
  4033ba:	b004      	add	sp, #16
  4033bc:	bd70      	pop	{r4, r5, r6, pc}
  4033be:	bf00      	nop
  4033c0:	00402811 	.word	0x00402811
  4033c4:	00403c21 	.word	0x00403c21
  4033c8:	0040a9e8 	.word	0x0040a9e8
  4033cc:	00401331 	.word	0x00401331
  4033d0:	004034f1 	.word	0x004034f1
  4033d4:	0040a9f0 	.word	0x0040a9f0
  4033d8:	004032b9 	.word	0x004032b9
  4033dc:	0040a9fc 	.word	0x0040a9fc
  4033e0:	400e1400 	.word	0x400e1400
  4033e4:	004024f1 	.word	0x004024f1
  4033e8:	0040aa0c 	.word	0x0040aa0c
  4033ec:	00402d35 	.word	0x00402d35
  4033f0:	00401559 	.word	0x00401559

004033f4 <PIOA_Handler>:
CLIbuf[CLIbufIndex] = temp;
CLIbufIndex++;
if(temp = "\n") xSemaphoreGiveFromISR(UARTsem,NULL);
}*/

void PIOA_Handler (void) {
  4033f4:	b538      	push	{r3, r4, r5, lr}
	
	ButtonStatus = pio_get_interrupt_status(PIOA);
  4033f6:	4d09      	ldr	r5, [pc, #36]	; (40341c <PIOA_Handler+0x28>)
  4033f8:	4628      	mov	r0, r5
  4033fa:	4b09      	ldr	r3, [pc, #36]	; (403420 <PIOA_Handler+0x2c>)
  4033fc:	4798      	blx	r3
  4033fe:	4c09      	ldr	r4, [pc, #36]	; (403424 <PIOA_Handler+0x30>)
  403400:	6020      	str	r0, [r4, #0]
	ButtonStatus &= pio_get_interrupt_mask(PIOA);
  403402:	4628      	mov	r0, r5
  403404:	4b08      	ldr	r3, [pc, #32]	; (403428 <PIOA_Handler+0x34>)
  403406:	4798      	blx	r3
  403408:	6823      	ldr	r3, [r4, #0]
  40340a:	4018      	ands	r0, r3
  40340c:	6020      	str	r0, [r4, #0]
	xSemaphoreGiveFromISR(PIOAsem,NULL);
  40340e:	4b07      	ldr	r3, [pc, #28]	; (40342c <PIOA_Handler+0x38>)
  403410:	6818      	ldr	r0, [r3, #0]
  403412:	2100      	movs	r1, #0
  403414:	4b06      	ldr	r3, [pc, #24]	; (403430 <PIOA_Handler+0x3c>)
  403416:	4798      	blx	r3
  403418:	bd38      	pop	{r3, r4, r5, pc}
  40341a:	bf00      	nop
  40341c:	400e0e00 	.word	0x400e0e00
  403420:	00402625 	.word	0x00402625
  403424:	2040c4b4 	.word	0x2040c4b4
  403428:	00402629 	.word	0x00402629
  40342c:	2040c360 	.word	0x2040c360
  403430:	00400f85 	.word	0x00400f85

00403434 <buildFrameExtd>:
		sendDebugString(buf);
	}
	
}

void buildFrameExtd(float Turn,float Dir,int cycle,int max_i,Byte walkEN,int stance, int height, int pUp, int stride) {
  403434:	b5f0      	push	{r4, r5, r6, r7, lr}
  403436:	f8dd e018 	ldr.w	lr, [sp, #24]
  40343a:	9f07      	ldr	r7, [sp, #28]
  40343c:	9e08      	ldr	r6, [sp, #32]
  40343e:	9d09      	ldr	r5, [sp, #36]	; 0x24
	
	//************************
	//kill this later yo
	char buf[40];
	//************************
	sendlength = 35;
  403440:	f04f 0c23 	mov.w	ip, #35	; 0x23
  403444:	4c28      	ldr	r4, [pc, #160]	; (4034e8 <buildFrameExtd+0xb4>)
  403446:	f8c4 c000 	str.w	ip, [r4]
	sendArr[0] = 2;
  40344a:	4c28      	ldr	r4, [pc, #160]	; (4034ec <buildFrameExtd+0xb8>)
  40344c:	f04f 0c02 	mov.w	ip, #2
  403450:	f884 c000 	strb.w	ip, [r4]
	
	floatchangeTurn = *((uint32_t*)&Turn);
	floatchangeDir = *((uint32_t*)&Dir);
	
	sendArr[1] = (Byte)(floatchangeTurn);
  403454:	7060      	strb	r0, [r4, #1]
	sendArr[2] = (Byte)(floatchangeTurn >> 8);
  403456:	ea4f 2c20 	mov.w	ip, r0, asr #8
  40345a:	f884 c002 	strb.w	ip, [r4, #2]
	sendArr[3] = (Byte)(floatchangeTurn >> 16);
  40345e:	ea4f 4c20 	mov.w	ip, r0, asr #16
  403462:	f884 c003 	strb.w	ip, [r4, #3]
	sendArr[4] = (Byte)(floatchangeTurn >> 24);
  403466:	1600      	asrs	r0, r0, #24
  403468:	7120      	strb	r0, [r4, #4]
	
	sendArr[5] = (Byte)(floatchangeDir);
  40346a:	7161      	strb	r1, [r4, #5]
	sendArr[6] = (Byte)(floatchangeDir >> 8);
  40346c:	1208      	asrs	r0, r1, #8
  40346e:	71a0      	strb	r0, [r4, #6]
	sendArr[7] = (Byte)(floatchangeDir >> 16);
  403470:	1408      	asrs	r0, r1, #16
  403472:	71e0      	strb	r0, [r4, #7]
	sendArr[8] = (Byte)(floatchangeDir >> 24);
  403474:	1609      	asrs	r1, r1, #24
  403476:	7221      	strb	r1, [r4, #8]
	
	sendArr[9] = (Byte)cycle;
  403478:	7262      	strb	r2, [r4, #9]
	sendArr[10] = (Byte)(cycle >> 8);
  40347a:	1211      	asrs	r1, r2, #8
  40347c:	72a1      	strb	r1, [r4, #10]
	sendArr[11] = (Byte)(cycle >> 16);
  40347e:	1411      	asrs	r1, r2, #16
  403480:	72e1      	strb	r1, [r4, #11]
	sendArr[12] = (Byte)(cycle >> 24);
  403482:	1612      	asrs	r2, r2, #24
  403484:	7322      	strb	r2, [r4, #12]
	
	sendArr[13] = (Byte)max_i;
  403486:	7363      	strb	r3, [r4, #13]
	sendArr[14] = (Byte)(max_i >> 8);
  403488:	121a      	asrs	r2, r3, #8
  40348a:	73a2      	strb	r2, [r4, #14]
	sendArr[15] = (Byte)(max_i >> 16);
  40348c:	141a      	asrs	r2, r3, #16
  40348e:	73e2      	strb	r2, [r4, #15]
	sendArr[16] = (Byte)(max_i >> 24);
  403490:	161b      	asrs	r3, r3, #24
  403492:	7423      	strb	r3, [r4, #16]
	
	sendArr[17] = walkEN;
  403494:	f89d 3014 	ldrb.w	r3, [sp, #20]
  403498:	7463      	strb	r3, [r4, #17]
	
	//stance
	sendArr[18] = (Byte)stance;
  40349a:	f884 e012 	strb.w	lr, [r4, #18]
	sendArr[19] = (Byte)(stance >> 8);
  40349e:	ea4f 232e 	mov.w	r3, lr, asr #8
  4034a2:	74e3      	strb	r3, [r4, #19]
	sendArr[20] = (Byte)(stance >> 16);
  4034a4:	ea4f 432e 	mov.w	r3, lr, asr #16
  4034a8:	7523      	strb	r3, [r4, #20]
	sendArr[21] = (Byte)(stance >> 24);
  4034aa:	ea4f 6e2e 	mov.w	lr, lr, asr #24
  4034ae:	f884 e015 	strb.w	lr, [r4, #21]
	
	//height
	sendArr[22] = (Byte)height;
  4034b2:	75a7      	strb	r7, [r4, #22]
	sendArr[23] = (Byte)(height >> 8);
  4034b4:	123b      	asrs	r3, r7, #8
  4034b6:	75e3      	strb	r3, [r4, #23]
	sendArr[24] = (Byte)(height >> 16);
  4034b8:	143b      	asrs	r3, r7, #16
  4034ba:	7623      	strb	r3, [r4, #24]
	sendArr[25] = (Byte)(height >> 24);
  4034bc:	163f      	asrs	r7, r7, #24
  4034be:	7667      	strb	r7, [r4, #25]
	
	//pull up
	sendArr[26] = (Byte)pUp;
  4034c0:	76a6      	strb	r6, [r4, #26]
	sendArr[27] = (Byte)(pUp >> 8);
  4034c2:	1233      	asrs	r3, r6, #8
  4034c4:	76e3      	strb	r3, [r4, #27]
	sendArr[28] = (Byte)(pUp >> 16);
  4034c6:	1433      	asrs	r3, r6, #16
  4034c8:	7723      	strb	r3, [r4, #28]
	sendArr[29] = (Byte)(pUp >> 24);
  4034ca:	1636      	asrs	r6, r6, #24
  4034cc:	7766      	strb	r6, [r4, #29]
	
	//stride
	sendArr[30] = (Byte)stride;
  4034ce:	77a5      	strb	r5, [r4, #30]
	sendArr[31] = (Byte)(stride >> 8);
  4034d0:	122b      	asrs	r3, r5, #8
  4034d2:	77e3      	strb	r3, [r4, #31]
	sendArr[32] = (Byte)(stride >> 16);
  4034d4:	142b      	asrs	r3, r5, #16
  4034d6:	f884 3020 	strb.w	r3, [r4, #32]
	sendArr[33] = (Byte)(stride >> 24);
  4034da:	162d      	asrs	r5, r5, #24
  4034dc:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	
	//retval
	sendArr[34] = 1;
  4034e0:	2301      	movs	r3, #1
  4034e2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  4034e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034e8:	2040c354 	.word	0x2040c354
  4034ec:	2040c48c 	.word	0x2040c48c

004034f0 <ButtonTask>:
	
	
	
}

void ButtonTask(void* pvParameters){
  4034f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4034f4:	ed2d 8b0c 	vpush	{d8-d13}
  4034f8:	b099      	sub	sp, #100	; 0x64
	float movDir = 0;
	int cycle = 60;
	int max_i = 0;
	Byte walkEN = 0;
	
	PIOAsem = xSemaphoreCreateBinary();
  4034fa:	2001      	movs	r0, #1
  4034fc:	2100      	movs	r1, #0
  4034fe:	2203      	movs	r2, #3
  403500:	4ba7      	ldr	r3, [pc, #668]	; (4037a0 <ButtonTask+0x2b0>)
  403502:	4798      	blx	r3
  403504:	4ba7      	ldr	r3, [pc, #668]	; (4037a4 <ButtonTask+0x2b4>)
  403506:	6018      	str	r0, [r3, #0]
	FRAMEsem = xSemaphoreCreateMutex();
  403508:	2001      	movs	r0, #1
  40350a:	4ba7      	ldr	r3, [pc, #668]	; (4037a8 <ButtonTask+0x2b8>)
  40350c:	4798      	blx	r3
  40350e:	4ba7      	ldr	r3, [pc, #668]	; (4037ac <ButtonTask+0x2bc>)
  403510:	6018      	str	r0, [r3, #0]
	
	float moveTurn = 0;
	float movDir = 0;
	int cycle = 60;
	int max_i = 0;
	Byte walkEN = 0;
  403512:	2700      	movs	r7, #0
	
	
	float moveTurn = 0;
	float movDir = 0;
	int cycle = 60;
	int max_i = 0;
  403514:	46ba      	mov	sl, r7
	
	
	
	float moveTurn = 0;
	float movDir = 0;
	int cycle = 60;
  403516:	f04f 093c 	mov.w	r9, #60	; 0x3c
	int SW5Righttg = 0;
	int floatchange = 0;
	
	
	
	float moveTurn = 0;
  40351a:	ed9f caa5 	vldr	s24, [pc, #660]	; 4037b0 <ButtonTask+0x2c0>
	int SW4Lefttg = 0;
	int SW4Righttg = 0;
	int SW5Uptg = 0;
	int SW5Downtg = 0;
	int SW5Lefttg = 0;
	int SW5Righttg = 0;
  40351e:	970d      	str	r7, [sp, #52]	; 0x34
	int SW4Downtg = 0;
	int SW4Lefttg = 0;
	int SW4Righttg = 0;
	int SW5Uptg = 0;
	int SW5Downtg = 0;
	int SW5Lefttg = 0;
  403520:	970c      	str	r7, [sp, #48]	; 0x30
	int tgstand = 0;
	
	int SW4Uptg = 0;
	int SW4Downtg = 0;
	int SW4Lefttg = 0;
	int SW4Righttg = 0;
  403522:	970b      	str	r7, [sp, #44]	; 0x2c
	int tgd = 1;
	int tgstand = 0;
	
	int SW4Uptg = 0;
	int SW4Downtg = 0;
	int SW4Lefttg = 0;
  403524:	970a      	str	r7, [sp, #40]	; 0x28
	int tg2 = 1;
	int tgd = 1;
	int tgstand = 0;
	
	int SW4Uptg = 0;
	int SW4Downtg = 0;
  403526:	9709      	str	r7, [sp, #36]	; 0x24
	int tg1 = 1;
	int tg2 = 1;
	int tgd = 1;
	int tgstand = 0;
	
	int SW4Uptg = 0;
  403528:	9708      	str	r7, [sp, #32]
void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
	int tg2 = 1;
	int tgd = 1;
	int tgstand = 0;
  40352a:	9707      	str	r7, [sp, #28]

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
	int tg2 = 1;
	int tgd = 1;
  40352c:	2301      	movs	r3, #1
  40352e:	9306      	str	r3, [sp, #24]
}

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
	int tg2 = 1;
  403530:	4698      	mov	r8, r3
	
}

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
  403532:	469b      	mov	fp, r3
						
						sprintf(buf,"floatchange hex: %x\n",floatchange);
						sendDebugString(buf);
						sprintf(buf,"floatchange float: %f\n",floatchange);
						sendDebugString(buf);
						sprintf(buf,"float orig: %x\n",movDir);
  403534:	ed9f bb90 	vldr	d11, [pc, #576]	; 403778 <ButtonTask+0x288>
							//default is 85; scale to 40 at sideways
							pUp    = 85 - 45*(fabsf(sin(anaAng)));
							//default is 65; reduce to 40 at sideways
							stride = 65 - 25*(fabsf(sin(anaAng)));
							//start at 100 for 250; move to 30 at 2100
							cycle = 100 - (anaMag-250.00)*0.03783;
  403538:	ed9f ab91 	vldr	d10, [pc, #580]	; 403780 <ButtonTask+0x290>
  40353c:	ed9f 9b92 	vldr	d9, [pc, #584]	; 403788 <ButtonTask+0x298>
  403540:	ed9f 8b93 	vldr	d8, [pc, #588]	; 403790 <ButtonTask+0x2a0>
  403544:	eeb0 da48 	vmov.f32	s26, s16
  403548:	eef0 da68 	vmov.f32	s27, s17
  40354c:	eef0 8a4c 	vmov.f32	s17, s24
	
	//spidevice1.id = 0;
	
	for(;;){
		
		if( PIOAsem !=NULL){
  403550:	4e94      	ldr	r6, [pc, #592]	; (4037a4 <ButtonTask+0x2b4>)
			
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){
  403552:	2500      	movs	r5, #0
  403554:	4c97      	ldr	r4, [pc, #604]	; (4037b4 <ButtonTask+0x2c4>)
	
	//spidevice1.id = 0;
	
	for(;;){
		
		if( PIOAsem !=NULL){
  403556:	6830      	ldr	r0, [r6, #0]
  403558:	2800      	cmp	r0, #0
  40355a:	d0fd      	beq.n	403558 <ButtonTask+0x68>
			
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){
  40355c:	4629      	mov	r1, r5
  40355e:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403562:	462b      	mov	r3, r5
  403564:	47a0      	blx	r4
  403566:	2801      	cmp	r0, #1
  403568:	d1f5      	bne.n	403556 <ButtonTask+0x66>
				
				sendFrame = 1;
  40356a:	2201      	movs	r2, #1
  40356c:	4b92      	ldr	r3, [pc, #584]	; (4037b8 <ButtonTask+0x2c8>)
  40356e:	601a      	str	r2, [r3, #0]
				if(!analogFlag){ 
  403570:	4b92      	ldr	r3, [pc, #584]	; (4037bc <ButtonTask+0x2cc>)
  403572:	681b      	ldr	r3, [r3, #0]
  403574:	2b00      	cmp	r3, #0
  403576:	f040 8291 	bne.w	403a9c <ButtonTask+0x5ac>
					
				switch(ButtonStatus){
  40357a:	4b91      	ldr	r3, [pc, #580]	; (4037c0 <ButtonTask+0x2d0>)
  40357c:	681b      	ldr	r3, [r3, #0]
  40357e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
  403582:	f000 80df 	beq.w	403744 <ButtonTask+0x254>
  403586:	d814      	bhi.n	4035b2 <ButtonTask+0xc2>
  403588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  40358c:	f000 8182 	beq.w	403894 <ButtonTask+0x3a4>
  403590:	d806      	bhi.n	4035a0 <ButtonTask+0xb0>
  403592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  403596:	d027      	beq.n	4035e8 <ButtonTask+0xf8>
  403598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40359c:	d04f      	beq.n	40363e <ButtonTask+0x14e>
  40359e:	e23d      	b.n	403a1c <ButtonTask+0x52c>
  4035a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  4035a4:	f000 814f 	beq.w	403846 <ButtonTask+0x356>
  4035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4035ac:	f000 8091 	beq.w	4036d2 <ButtonTask+0x1e2>
  4035b0:	e234      	b.n	403a1c <ButtonTask+0x52c>
  4035b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  4035b6:	f000 81ef 	beq.w	403998 <ButtonTask+0x4a8>
  4035ba:	d808      	bhi.n	4035ce <ButtonTask+0xde>
  4035bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  4035c0:	f000 818c 	beq.w	4038dc <ButtonTask+0x3ec>
  4035c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
  4035c8:	f000 81fc 	beq.w	4039c4 <ButtonTask+0x4d4>
  4035cc:	e226      	b.n	403a1c <ButtonTask+0x52c>
  4035ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
  4035d2:	f000 81bd 	beq.w	403950 <ButtonTask+0x460>
  4035d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  4035da:	f000 8209 	beq.w	4039f0 <ButtonTask+0x500>
  4035de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
  4035e2:	f040 821b 	bne.w	403a1c <ButtonTask+0x52c>
  4035e6:	e18f      	b.n	403908 <ButtonTask+0x418>
					
					case(Push1) :
					sendDebugString("Push Switch 1\n");
  4035e8:	4876      	ldr	r0, [pc, #472]	; (4037c4 <ButtonTask+0x2d4>)
  4035ea:	4b77      	ldr	r3, [pc, #476]	; (4037c8 <ButtonTask+0x2d8>)
  4035ec:	4798      	blx	r3
					
					button = 1;
  4035ee:	2201      	movs	r2, #1
  4035f0:	4b76      	ldr	r3, [pc, #472]	; (4037cc <ButtonTask+0x2dc>)
  4035f2:	601a      	str	r2, [r3, #0]
					sendlength = 2;
  4035f4:	2202      	movs	r2, #2
  4035f6:	4b76      	ldr	r3, [pc, #472]	; (4037d0 <ButtonTask+0x2e0>)
  4035f8:	601a      	str	r2, [r3, #0]
					if (!tgstand){
  4035fa:	9b07      	ldr	r3, [sp, #28]
  4035fc:	b933      	cbnz	r3, 40360c <ButtonTask+0x11c>
						sendArr[0] = 4;
  4035fe:	4a75      	ldr	r2, [pc, #468]	; (4037d4 <ButtonTask+0x2e4>)
  403600:	2304      	movs	r3, #4
  403602:	7013      	strb	r3, [r2, #0]
						sendArr[1] = 1;
  403604:	2301      	movs	r3, #1
  403606:	7053      	strb	r3, [r2, #1]
						tgstand = !tgstand;
  403608:	9307      	str	r3, [sp, #28]
  40360a:	e005      	b.n	403618 <ButtonTask+0x128>
					}
					else{
						sendArr[0] = 4;
  40360c:	4a71      	ldr	r2, [pc, #452]	; (4037d4 <ButtonTask+0x2e4>)
  40360e:	2304      	movs	r3, #4
  403610:	7013      	strb	r3, [r2, #0]
						sendArr[1] = 0;
  403612:	2300      	movs	r3, #0
  403614:	7053      	strb	r3, [r2, #1]
						tgstand = !tgstand;
  403616:	9307      	str	r3, [sp, #28]
					sendDebugString(buffcast);
					*/
					
					
					
					if(tg2){
  403618:	f1b8 0f00 	cmp.w	r8, #0
  40361c:	d007      	beq.n	40362e <ButtonTask+0x13e>
						pio_set(LED2);
  40361e:	486e      	ldr	r0, [pc, #440]	; (4037d8 <ButtonTask+0x2e8>)
  403620:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403624:	4b6d      	ldr	r3, [pc, #436]	; (4037dc <ButtonTask+0x2ec>)
  403626:	4798      	blx	r3
						tg2 = !tg2;
  403628:	f04f 0800 	mov.w	r8, #0
  40362c:	e236      	b.n	403a9c <ButtonTask+0x5ac>
					}
					else {
						pio_clear(LED2);
  40362e:	486a      	ldr	r0, [pc, #424]	; (4037d8 <ButtonTask+0x2e8>)
  403630:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403634:	4b6a      	ldr	r3, [pc, #424]	; (4037e0 <ButtonTask+0x2f0>)
  403636:	4798      	blx	r3
						tg2 = !tg2;
  403638:	f04f 0801 	mov.w	r8, #1
  40363c:	e22e      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
					
					case(Push2) :
					sendDebugString("Push Switch 2\n");
  40363e:	4869      	ldr	r0, [pc, #420]	; (4037e4 <ButtonTask+0x2f4>)
  403640:	4c61      	ldr	r4, [pc, #388]	; (4037c8 <ButtonTask+0x2d8>)
  403642:	47a0      	blx	r4
					
					char buf[40];
					
					//spi_select_device(SPI0,&spidevice1);

					delay_us(1);
  403644:	2033      	movs	r0, #51	; 0x33
  403646:	4b68      	ldr	r3, [pc, #416]	; (4037e8 <ButtonTask+0x2f8>)
  403648:	4798      	blx	r3
					sprintf(buf,"TestDevID: 0x%x\n",DW1000_readDeviceIdentifier());
  40364a:	4b68      	ldr	r3, [pc, #416]	; (4037ec <ButtonTask+0x2fc>)
  40364c:	4798      	blx	r3
  40364e:	4602      	mov	r2, r0
  403650:	460b      	mov	r3, r1
  403652:	a80e      	add	r0, sp, #56	; 0x38
  403654:	4966      	ldr	r1, [pc, #408]	; (4037f0 <ButtonTask+0x300>)
  403656:	4d67      	ldr	r5, [pc, #412]	; (4037f4 <ButtonTask+0x304>)
  403658:	47a8      	blx	r5
					sendDebugString(buf);
  40365a:	a80e      	add	r0, sp, #56	; 0x38
  40365c:	47a0      	blx	r4
					sendDebugString("\n");
  40365e:	4e66      	ldr	r6, [pc, #408]	; (4037f8 <ButtonTask+0x308>)
  403660:	4630      	mov	r0, r6
  403662:	47a0      	blx	r4
					
					
					//spi_deselect_device(SPI0,&spidevice1);
					
					sprintf(buf,"SysStatus: 0x%x\n", DW1000_readSystemStatus());
  403664:	4b65      	ldr	r3, [pc, #404]	; (4037fc <ButtonTask+0x30c>)
  403666:	4798      	blx	r3
  403668:	4602      	mov	r2, r0
  40366a:	460b      	mov	r3, r1
  40366c:	a80e      	add	r0, sp, #56	; 0x38
  40366e:	4964      	ldr	r1, [pc, #400]	; (403800 <ButtonTask+0x310>)
  403670:	47a8      	blx	r5
					sendDebugString(buf);
  403672:	a80e      	add	r0, sp, #56	; 0x38
  403674:	47a0      	blx	r4
					sendDebugString("\n");
  403676:	4630      	mov	r0, r6
  403678:	47a0      	blx	r4
					DW1000_writeReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,0xDECA2230,PANADR_LEN);
  40367a:	a347      	add	r3, pc, #284	; (adr r3, 403798 <ButtonTask+0x2a8>)
  40367c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403680:	e9cd 2300 	strd	r2, r3, [sp]
  403684:	2604      	movs	r6, #4
  403686:	9602      	str	r6, [sp, #8]
  403688:	2003      	movs	r0, #3
  40368a:	2100      	movs	r1, #0
  40368c:	460a      	mov	r2, r1
  40368e:	4b5d      	ldr	r3, [pc, #372]	; (403804 <ButtonTask+0x314>)
  403690:	4798      	blx	r3
					sprintf(buf,"ID WRITTEN\nREAD BACK: 0x%x\n",DW1000_readReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,PANADR_LEN));
  403692:	2003      	movs	r0, #3
  403694:	2100      	movs	r1, #0
  403696:	460a      	mov	r2, r1
  403698:	4633      	mov	r3, r6
  40369a:	4e5b      	ldr	r6, [pc, #364]	; (403808 <ButtonTask+0x318>)
  40369c:	47b0      	blx	r6
  40369e:	4602      	mov	r2, r0
  4036a0:	460b      	mov	r3, r1
  4036a2:	a80e      	add	r0, sp, #56	; 0x38
  4036a4:	4959      	ldr	r1, [pc, #356]	; (40380c <ButtonTask+0x31c>)
  4036a6:	47a8      	blx	r5
					sendDebugString(buf);
  4036a8:	a80e      	add	r0, sp, #56	; 0x38
  4036aa:	47a0      	blx	r4
					
					//pio_set(PIOB_DWM_RESET);
					//pio_clear(PIOB_DWM_RESET);
					
					
					if(tg1){
  4036ac:	f1bb 0f00 	cmp.w	fp, #0
  4036b0:	d007      	beq.n	4036c2 <ButtonTask+0x1d2>
						pio_set(LED1);
  4036b2:	4849      	ldr	r0, [pc, #292]	; (4037d8 <ButtonTask+0x2e8>)
  4036b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4036b8:	4b48      	ldr	r3, [pc, #288]	; (4037dc <ButtonTask+0x2ec>)
  4036ba:	4798      	blx	r3
						tg1 = !tg1;
  4036bc:	f04f 0b00 	mov.w	fp, #0
  4036c0:	e1ec      	b.n	403a9c <ButtonTask+0x5ac>
					}
					else {
						pio_clear(LED1);
  4036c2:	4845      	ldr	r0, [pc, #276]	; (4037d8 <ButtonTask+0x2e8>)
  4036c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4036c8:	4b45      	ldr	r3, [pc, #276]	; (4037e0 <ButtonTask+0x2f0>)
  4036ca:	4798      	blx	r3
						tg1 = !tg1;
  4036cc:	f04f 0b01 	mov.w	fp, #1
  4036d0:	e1e4      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
#if ~ANACTRL
					case(SW4Left) :
					sendDebugString("NAV4 Left\n");
  4036d2:	484f      	ldr	r0, [pc, #316]	; (403810 <ButtonTask+0x320>)
  4036d4:	4b3c      	ldr	r3, [pc, #240]	; (4037c8 <ButtonTask+0x2d8>)
  4036d6:	4798      	blx	r3
					
					SW4Lefttg = !SW4Lefttg;
					
					if (SW4Lefttg){
  4036d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036da:	f093 0301 	eors.w	r3, r3, #1
  4036de:	930a      	str	r3, [sp, #40]	; 0x28
  4036e0:	d025      	beq.n	40372e <ButtonTask+0x23e>
						moveTurn = 0;
						movDir = 4.71;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  4036e2:	2701      	movs	r7, #1
  4036e4:	4b4b      	ldr	r3, [pc, #300]	; (403814 <ButtonTask+0x324>)
  4036e6:	601f      	str	r7, [r3, #0]
						
						pio_set(LED1);
  4036e8:	483b      	ldr	r0, [pc, #236]	; (4037d8 <ButtonTask+0x2e8>)
  4036ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4036ee:	4b3b      	ldr	r3, [pc, #236]	; (4037dc <ButtonTask+0x2ec>)
  4036f0:	4798      	blx	r3
						LEDtg = 1;
  4036f2:	4b49      	ldr	r3, [pc, #292]	; (403818 <ButtonTask+0x328>)
  4036f4:	601f      	str	r7, [r3, #0]
						
						floatchange = *((uint32_t*)&movDir);
						
						sprintf(buf,"floatchange hex: %x\n",floatchange);
  4036f6:	a80e      	add	r0, sp, #56	; 0x38
  4036f8:	4948      	ldr	r1, [pc, #288]	; (40381c <ButtonTask+0x32c>)
  4036fa:	4a49      	ldr	r2, [pc, #292]	; (403820 <ButtonTask+0x330>)
  4036fc:	4d3d      	ldr	r5, [pc, #244]	; (4037f4 <ButtonTask+0x304>)
  4036fe:	47a8      	blx	r5
						sendDebugString(buf);
  403700:	a80e      	add	r0, sp, #56	; 0x38
  403702:	4c31      	ldr	r4, [pc, #196]	; (4037c8 <ButtonTask+0x2d8>)
  403704:	47a0      	blx	r4
						sprintf(buf,"floatchange float: %f\n",floatchange);
  403706:	a80e      	add	r0, sp, #56	; 0x38
  403708:	4946      	ldr	r1, [pc, #280]	; (403824 <ButtonTask+0x334>)
  40370a:	4a45      	ldr	r2, [pc, #276]	; (403820 <ButtonTask+0x330>)
  40370c:	47a8      	blx	r5
						sendDebugString(buf);
  40370e:	a80e      	add	r0, sp, #56	; 0x38
  403710:	47a0      	blx	r4
						sprintf(buf,"float orig: %x\n",movDir);
  403712:	a80e      	add	r0, sp, #56	; 0x38
  403714:	4944      	ldr	r1, [pc, #272]	; (403828 <ButtonTask+0x338>)
  403716:	ec53 2b1b 	vmov	r2, r3, d11
  40371a:	47a8      	blx	r5
						sendDebugString(buf);
  40371c:	a80e      	add	r0, sp, #56	; 0x38
  40371e:	47a0      	blx	r4
					
					if (SW4Lefttg){
						moveTurn = 0;
						movDir = 4.71;
						cycle = 60;
						max_i = 30;
  403720:	f04f 0a1e 	mov.w	sl, #30
					SW4Lefttg = !SW4Lefttg;
					
					if (SW4Lefttg){
						moveTurn = 0;
						movDir = 4.71;
						cycle = 60;
  403724:	f04f 093c 	mov.w	r9, #60	; 0x3c
					sendDebugString("NAV4 Left\n");
					
					SW4Lefttg = !SW4Lefttg;
					
					if (SW4Lefttg){
						moveTurn = 0;
  403728:	eddf 8a21 	vldr	s17, [pc, #132]	; 4037b0 <ButtonTask+0x2c0>
  40372c:	e1b6      	b.n	403a9c <ButtonTask+0x5ac>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  40372e:	2700      	movs	r7, #0
  403730:	4b38      	ldr	r3, [pc, #224]	; (403814 <ButtonTask+0x324>)
  403732:	601f      	str	r7, [r3, #0]
						pio_clear(LED1);
  403734:	4828      	ldr	r0, [pc, #160]	; (4037d8 <ButtonTask+0x2e8>)
  403736:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40373a:	4b29      	ldr	r3, [pc, #164]	; (4037e0 <ButtonTask+0x2f0>)
  40373c:	4798      	blx	r3
						LEDtg = 0;
  40373e:	4b36      	ldr	r3, [pc, #216]	; (403818 <ButtonTask+0x328>)
  403740:	601f      	str	r7, [r3, #0]
  403742:	e1ab      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
					
					case(SW4Right) :
					sendDebugString("NAV4 Right\n");
  403744:	4839      	ldr	r0, [pc, #228]	; (40382c <ButtonTask+0x33c>)
  403746:	4b20      	ldr	r3, [pc, #128]	; (4037c8 <ButtonTask+0x2d8>)
  403748:	4798      	blx	r3
					
					SW4Righttg = !SW4Righttg;
					
					if (SW4Righttg){
  40374a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40374c:	f093 0301 	eors.w	r3, r3, #1
  403750:	930b      	str	r3, [sp, #44]	; 0x2c
  403752:	d06d      	beq.n	403830 <ButtonTask+0x340>
						moveTurn = 0;
						movDir = 1.57;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  403754:	2701      	movs	r7, #1
  403756:	4b2f      	ldr	r3, [pc, #188]	; (403814 <ButtonTask+0x324>)
  403758:	601f      	str	r7, [r3, #0]
						
						pio_set(LED1);
  40375a:	481f      	ldr	r0, [pc, #124]	; (4037d8 <ButtonTask+0x2e8>)
  40375c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403760:	4b1e      	ldr	r3, [pc, #120]	; (4037dc <ButtonTask+0x2ec>)
  403762:	4798      	blx	r3
						LEDtg = 1;
  403764:	4b2c      	ldr	r3, [pc, #176]	; (403818 <ButtonTask+0x328>)
  403766:	601f      	str	r7, [r3, #0]
					
					if (SW4Righttg){
						moveTurn = 0;
						movDir = 1.57;
						cycle = 60;
						max_i = 30;
  403768:	f04f 0a1e 	mov.w	sl, #30
					SW4Righttg = !SW4Righttg;
					
					if (SW4Righttg){
						moveTurn = 0;
						movDir = 1.57;
						cycle = 60;
  40376c:	f04f 093c 	mov.w	r9, #60	; 0x3c
					sendDebugString("NAV4 Right\n");
					
					SW4Righttg = !SW4Righttg;
					
					if (SW4Righttg){
						moveTurn = 0;
  403770:	eddf 8a0f 	vldr	s17, [pc, #60]	; 4037b0 <ButtonTask+0x2c0>
  403774:	e192      	b.n	403a9c <ButtonTask+0x5ac>
  403776:	bf00      	nop
  403778:	40000000 	.word	0x40000000
  40377c:	4012d70a 	.word	0x4012d70a
  403780:	00000000 	.word	0x00000000
  403784:	406f4000 	.word	0x406f4000
  403788:	299d883c 	.word	0x299d883c
  40378c:	3fa35e74 	.word	0x3fa35e74
  403790:	00000000 	.word	0x00000000
  403794:	40590000 	.word	0x40590000
  403798:	deca2230 	.word	0xdeca2230
  40379c:	00000000 	.word	0x00000000
  4037a0:	00400bd5 	.word	0x00400bd5
  4037a4:	2040c360 	.word	0x2040c360
  4037a8:	00400e35 	.word	0x00400e35
  4037ac:	2040c370 	.word	0x2040c370
  4037b0:	00000000 	.word	0x00000000
  4037b4:	00401065 	.word	0x00401065
  4037b8:	2040c350 	.word	0x2040c350
  4037bc:	2040c374 	.word	0x2040c374
  4037c0:	2040c4b4 	.word	0x2040c4b4
  4037c4:	0040aa38 	.word	0x0040aa38
  4037c8:	00402d35 	.word	0x00402d35
  4037cc:	2040c36c 	.word	0x2040c36c
  4037d0:	2040c354 	.word	0x2040c354
  4037d4:	2040c48c 	.word	0x2040c48c
  4037d8:	400e1400 	.word	0x400e1400
  4037dc:	004024ed 	.word	0x004024ed
  4037e0:	004024f1 	.word	0x004024f1
  4037e4:	0040aa48 	.word	0x0040aa48
  4037e8:	20400001 	.word	0x20400001
  4037ec:	00402e49 	.word	0x00402e49
  4037f0:	0040aa58 	.word	0x0040aa58
  4037f4:	00406701 	.word	0x00406701
  4037f8:	0040a86c 	.word	0x0040a86c
  4037fc:	00402e5d 	.word	0x00402e5d
  403800:	0040aa6c 	.word	0x0040aa6c
  403804:	00402e7d 	.word	0x00402e7d
  403808:	00402d7d 	.word	0x00402d7d
  40380c:	0040aa80 	.word	0x0040aa80
  403810:	0040aa9c 	.word	0x0040aa9c
  403814:	2040c364 	.word	0x2040c364
  403818:	2040c35c 	.word	0x2040c35c
  40381c:	0040aaa8 	.word	0x0040aaa8
  403820:	4096b852 	.word	0x4096b852
  403824:	0040aac0 	.word	0x0040aac0
  403828:	0040aad8 	.word	0x0040aad8
  40382c:	0040aae8 	.word	0x0040aae8
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  403830:	2700      	movs	r7, #0
  403832:	4b83      	ldr	r3, [pc, #524]	; (403a40 <ButtonTask+0x550>)
  403834:	601f      	str	r7, [r3, #0]
						pio_clear(LED1);
  403836:	4883      	ldr	r0, [pc, #524]	; (403a44 <ButtonTask+0x554>)
  403838:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40383c:	4b82      	ldr	r3, [pc, #520]	; (403a48 <ButtonTask+0x558>)
  40383e:	4798      	blx	r3
						LEDtg = 0;
  403840:	4b82      	ldr	r3, [pc, #520]	; (403a4c <ButtonTask+0x55c>)
  403842:	601f      	str	r7, [r3, #0]
  403844:	e12a      	b.n	403a9c <ButtonTask+0x5ac>
					
					
					
					SW4Uptg = !SW4Uptg;
					
					if (SW4Uptg){
  403846:	9b08      	ldr	r3, [sp, #32]
  403848:	f093 0301 	eors.w	r3, r3, #1
  40384c:	9308      	str	r3, [sp, #32]
  40384e:	d013      	beq.n	403878 <ButtonTask+0x388>
						sendDebugString("NAV4 Up On\n");
  403850:	487f      	ldr	r0, [pc, #508]	; (403a50 <ButtonTask+0x560>)
  403852:	4b80      	ldr	r3, [pc, #512]	; (403a54 <ButtonTask+0x564>)
  403854:	4798      	blx	r3
						moveTurn = 0.2;
						movDir = 0;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  403856:	2701      	movs	r7, #1
  403858:	4b79      	ldr	r3, [pc, #484]	; (403a40 <ButtonTask+0x550>)
  40385a:	601f      	str	r7, [r3, #0]
						
						pio_set(LED1);
  40385c:	4879      	ldr	r0, [pc, #484]	; (403a44 <ButtonTask+0x554>)
  40385e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403862:	4b7d      	ldr	r3, [pc, #500]	; (403a58 <ButtonTask+0x568>)
  403864:	4798      	blx	r3
						LEDtg = 1;
  403866:	4b79      	ldr	r3, [pc, #484]	; (403a4c <ButtonTask+0x55c>)
  403868:	601f      	str	r7, [r3, #0]
					if (SW4Uptg){
						sendDebugString("NAV4 Up On\n");
						moveTurn = 0.2;
						movDir = 0;
						cycle = 60;
						max_i = 30;
  40386a:	f04f 0a1e 	mov.w	sl, #30
					
					if (SW4Uptg){
						sendDebugString("NAV4 Up On\n");
						moveTurn = 0.2;
						movDir = 0;
						cycle = 60;
  40386e:	f04f 093c 	mov.w	r9, #60	; 0x3c
					
					SW4Uptg = !SW4Uptg;
					
					if (SW4Uptg){
						sendDebugString("NAV4 Up On\n");
						moveTurn = 0.2;
  403872:	eddf 8a7a 	vldr	s17, [pc, #488]	; 403a5c <ButtonTask+0x56c>
  403876:	e111      	b.n	403a9c <ButtonTask+0x5ac>
						pio_set(LED1);
						LEDtg = 1;
						
					}
					else{
						sendDebugString("NAV4 Up Off\n");
  403878:	4879      	ldr	r0, [pc, #484]	; (403a60 <ButtonTask+0x570>)
  40387a:	4b76      	ldr	r3, [pc, #472]	; (403a54 <ButtonTask+0x564>)
  40387c:	4798      	blx	r3
						walkEN = 0;
						holdFrame = 0;
  40387e:	2700      	movs	r7, #0
  403880:	4b6f      	ldr	r3, [pc, #444]	; (403a40 <ButtonTask+0x550>)
  403882:	601f      	str	r7, [r3, #0]
						pio_clear(LED1);
  403884:	486f      	ldr	r0, [pc, #444]	; (403a44 <ButtonTask+0x554>)
  403886:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40388a:	4b6f      	ldr	r3, [pc, #444]	; (403a48 <ButtonTask+0x558>)
  40388c:	4798      	blx	r3
						LEDtg = 0;
  40388e:	4b6f      	ldr	r3, [pc, #444]	; (403a4c <ButtonTask+0x55c>)
  403890:	601f      	str	r7, [r3, #0]
  403892:	e103      	b.n	403a9c <ButtonTask+0x5ac>
					break;
					
					
					
					case(SW4Down) :
					sendDebugString("NAV4 Down\n");
  403894:	4873      	ldr	r0, [pc, #460]	; (403a64 <ButtonTask+0x574>)
  403896:	4b6f      	ldr	r3, [pc, #444]	; (403a54 <ButtonTask+0x564>)
  403898:	4798      	blx	r3
					
					
					SW4Downtg = !SW4Downtg;
					
					
					if (SW4Downtg){
  40389a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40389c:	f093 0301 	eors.w	r3, r3, #1
  4038a0:	9309      	str	r3, [sp, #36]	; 0x24
  4038a2:	d010      	beq.n	4038c6 <ButtonTask+0x3d6>
						moveTurn = 0.2;
						movDir = 3.14;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  4038a4:	2701      	movs	r7, #1
  4038a6:	4b66      	ldr	r3, [pc, #408]	; (403a40 <ButtonTask+0x550>)
  4038a8:	601f      	str	r7, [r3, #0]
						
						pio_set(LED1);
  4038aa:	4866      	ldr	r0, [pc, #408]	; (403a44 <ButtonTask+0x554>)
  4038ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4038b0:	4b69      	ldr	r3, [pc, #420]	; (403a58 <ButtonTask+0x568>)
  4038b2:	4798      	blx	r3
						LEDtg = 1;
  4038b4:	4b65      	ldr	r3, [pc, #404]	; (403a4c <ButtonTask+0x55c>)
  4038b6:	601f      	str	r7, [r3, #0]
					
					if (SW4Downtg){
						moveTurn = 0.2;
						movDir = 3.14;
						cycle = 60;
						max_i = 30;
  4038b8:	f04f 0a1e 	mov.w	sl, #30
					
					
					if (SW4Downtg){
						moveTurn = 0.2;
						movDir = 3.14;
						cycle = 60;
  4038bc:	f04f 093c 	mov.w	r9, #60	; 0x3c
					
					SW4Downtg = !SW4Downtg;
					
					
					if (SW4Downtg){
						moveTurn = 0.2;
  4038c0:	eddf 8a66 	vldr	s17, [pc, #408]	; 403a5c <ButtonTask+0x56c>
  4038c4:	e0ea      	b.n	403a9c <ButtonTask+0x5ac>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  4038c6:	2700      	movs	r7, #0
  4038c8:	4b5d      	ldr	r3, [pc, #372]	; (403a40 <ButtonTask+0x550>)
  4038ca:	601f      	str	r7, [r3, #0]
						pio_clear(LED1);
  4038cc:	485d      	ldr	r0, [pc, #372]	; (403a44 <ButtonTask+0x554>)
  4038ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4038d2:	4b5d      	ldr	r3, [pc, #372]	; (403a48 <ButtonTask+0x558>)
  4038d4:	4798      	blx	r3
						LEDtg = 0;
  4038d6:	4b5d      	ldr	r3, [pc, #372]	; (403a4c <ButtonTask+0x55c>)
  4038d8:	601f      	str	r7, [r3, #0]
  4038da:	e0df      	b.n	403a9c <ButtonTask+0x5ac>
					
					
					break;
					
					case(SW4Push) :
					sendDebugString("NAV4 Push\n");
  4038dc:	4862      	ldr	r0, [pc, #392]	; (403a68 <ButtonTask+0x578>)
  4038de:	4b5d      	ldr	r3, [pc, #372]	; (403a54 <ButtonTask+0x564>)
  4038e0:	4798      	blx	r3
					if(tg1){
  4038e2:	f1bb 0f00 	cmp.w	fp, #0
  4038e6:	d007      	beq.n	4038f8 <ButtonTask+0x408>
						pio_set(LED1);
  4038e8:	4856      	ldr	r0, [pc, #344]	; (403a44 <ButtonTask+0x554>)
  4038ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4038ee:	4b5a      	ldr	r3, [pc, #360]	; (403a58 <ButtonTask+0x568>)
  4038f0:	4798      	blx	r3
						tg1 = !tg1;
  4038f2:	f04f 0b00 	mov.w	fp, #0
  4038f6:	e0d1      	b.n	403a9c <ButtonTask+0x5ac>
					}
					else {
						pio_clear(LED1);
  4038f8:	4852      	ldr	r0, [pc, #328]	; (403a44 <ButtonTask+0x554>)
  4038fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4038fe:	4b52      	ldr	r3, [pc, #328]	; (403a48 <ButtonTask+0x558>)
  403900:	4798      	blx	r3
						tg1 = !tg1;
  403902:	f04f 0b01 	mov.w	fp, #1
  403906:	e0c9      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
#endif
					
					case(SW5Left) :
					sendDebugString("NAV5 Left\n");
  403908:	4858      	ldr	r0, [pc, #352]	; (403a6c <ButtonTask+0x57c>)
  40390a:	4b52      	ldr	r3, [pc, #328]	; (403a54 <ButtonTask+0x564>)
  40390c:	4798      	blx	r3
					
					SW5Lefttg = !SW5Lefttg;
					
					if (SW5Lefttg){
  40390e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403910:	f093 0301 	eors.w	r3, r3, #1
  403914:	930c      	str	r3, [sp, #48]	; 0x30
  403916:	d010      	beq.n	40393a <ButtonTask+0x44a>
						moveTurn = -1;
						movDir = 0;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  403918:	2701      	movs	r7, #1
  40391a:	4b49      	ldr	r3, [pc, #292]	; (403a40 <ButtonTask+0x550>)
  40391c:	601f      	str	r7, [r3, #0]
						
						pio_set(LED2);
  40391e:	4849      	ldr	r0, [pc, #292]	; (403a44 <ButtonTask+0x554>)
  403920:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403924:	4b4c      	ldr	r3, [pc, #304]	; (403a58 <ButtonTask+0x568>)
  403926:	4798      	blx	r3
						LEDtg = 1;
  403928:	4b48      	ldr	r3, [pc, #288]	; (403a4c <ButtonTask+0x55c>)
  40392a:	601f      	str	r7, [r3, #0]
					
					if (SW5Lefttg){
						moveTurn = -1;
						movDir = 0;
						cycle = 60;
						max_i = 30;
  40392c:	f04f 0a1e 	mov.w	sl, #30
					SW5Lefttg = !SW5Lefttg;
					
					if (SW5Lefttg){
						moveTurn = -1;
						movDir = 0;
						cycle = 60;
  403930:	f04f 093c 	mov.w	r9, #60	; 0x3c
					sendDebugString("NAV5 Left\n");
					
					SW5Lefttg = !SW5Lefttg;
					
					if (SW5Lefttg){
						moveTurn = -1;
  403934:	eeff 8a00 	vmov.f32	s17, #240	; 0xf0
  403938:	e0b0      	b.n	403a9c <ButtonTask+0x5ac>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  40393a:	2700      	movs	r7, #0
  40393c:	4b40      	ldr	r3, [pc, #256]	; (403a40 <ButtonTask+0x550>)
  40393e:	601f      	str	r7, [r3, #0]
						pio_clear(LED2);
  403940:	4840      	ldr	r0, [pc, #256]	; (403a44 <ButtonTask+0x554>)
  403942:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403946:	4b40      	ldr	r3, [pc, #256]	; (403a48 <ButtonTask+0x558>)
  403948:	4798      	blx	r3
						LEDtg = 0;
  40394a:	4b40      	ldr	r3, [pc, #256]	; (403a4c <ButtonTask+0x55c>)
  40394c:	601f      	str	r7, [r3, #0]
  40394e:	e0a5      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
					
					case(SW5Right) :
					sendDebugString("NAV5 Right\n");
  403950:	4847      	ldr	r0, [pc, #284]	; (403a70 <ButtonTask+0x580>)
  403952:	4b40      	ldr	r3, [pc, #256]	; (403a54 <ButtonTask+0x564>)
  403954:	4798      	blx	r3
					
					SW5Righttg = !SW5Righttg;
					
					if (SW5Righttg){
  403956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403958:	f093 0301 	eors.w	r3, r3, #1
  40395c:	930d      	str	r3, [sp, #52]	; 0x34
  40395e:	d010      	beq.n	403982 <ButtonTask+0x492>
						moveTurn = 1;
						movDir = 0;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  403960:	2701      	movs	r7, #1
  403962:	4b37      	ldr	r3, [pc, #220]	; (403a40 <ButtonTask+0x550>)
  403964:	601f      	str	r7, [r3, #0]
						
						pio_set(LED1);
  403966:	4837      	ldr	r0, [pc, #220]	; (403a44 <ButtonTask+0x554>)
  403968:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40396c:	4b3a      	ldr	r3, [pc, #232]	; (403a58 <ButtonTask+0x568>)
  40396e:	4798      	blx	r3
						LEDtg = 1;
  403970:	4b36      	ldr	r3, [pc, #216]	; (403a4c <ButtonTask+0x55c>)
  403972:	601f      	str	r7, [r3, #0]
					
					if (SW5Righttg){
						moveTurn = 1;
						movDir = 0;
						cycle = 60;
						max_i = 30;
  403974:	f04f 0a1e 	mov.w	sl, #30
					SW5Righttg = !SW5Righttg;
					
					if (SW5Righttg){
						moveTurn = 1;
						movDir = 0;
						cycle = 60;
  403978:	f04f 093c 	mov.w	r9, #60	; 0x3c
					sendDebugString("NAV5 Right\n");
					
					SW5Righttg = !SW5Righttg;
					
					if (SW5Righttg){
						moveTurn = 1;
  40397c:	eef7 8a00 	vmov.f32	s17, #112	; 0x70
  403980:	e08c      	b.n	403a9c <ButtonTask+0x5ac>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  403982:	2700      	movs	r7, #0
  403984:	4b2e      	ldr	r3, [pc, #184]	; (403a40 <ButtonTask+0x550>)
  403986:	601f      	str	r7, [r3, #0]
						pio_clear(LED1);
  403988:	482e      	ldr	r0, [pc, #184]	; (403a44 <ButtonTask+0x554>)
  40398a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40398e:	4b2e      	ldr	r3, [pc, #184]	; (403a48 <ButtonTask+0x558>)
  403990:	4798      	blx	r3
						LEDtg = 0;
  403992:	4b2e      	ldr	r3, [pc, #184]	; (403a4c <ButtonTask+0x55c>)
  403994:	601f      	str	r7, [r3, #0]
  403996:	e081      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
					
					case(SW5Up) :
					sendDebugString("NAV5 Up\n");
  403998:	4836      	ldr	r0, [pc, #216]	; (403a74 <ButtonTask+0x584>)
  40399a:	4b2e      	ldr	r3, [pc, #184]	; (403a54 <ButtonTask+0x564>)
  40399c:	4798      	blx	r3
					
					SW5Uptg = !SW5Uptg;
					
					if(tg2){
  40399e:	f1b8 0f00 	cmp.w	r8, #0
  4039a2:	d007      	beq.n	4039b4 <ButtonTask+0x4c4>
						pio_set(LED2);
  4039a4:	4827      	ldr	r0, [pc, #156]	; (403a44 <ButtonTask+0x554>)
  4039a6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4039aa:	4b2b      	ldr	r3, [pc, #172]	; (403a58 <ButtonTask+0x568>)
  4039ac:	4798      	blx	r3
						tg2 = !tg2;
  4039ae:	f04f 0800 	mov.w	r8, #0
  4039b2:	e073      	b.n	403a9c <ButtonTask+0x5ac>
					}
					else {
						pio_clear(LED2);
  4039b4:	4823      	ldr	r0, [pc, #140]	; (403a44 <ButtonTask+0x554>)
  4039b6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4039ba:	4b23      	ldr	r3, [pc, #140]	; (403a48 <ButtonTask+0x558>)
  4039bc:	4798      	blx	r3
						tg2 = !tg2;
  4039be:	f04f 0801 	mov.w	r8, #1
  4039c2:	e06b      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
					
					case(SW5Down) :
					sendDebugString("NAV5 Down\n");
  4039c4:	482c      	ldr	r0, [pc, #176]	; (403a78 <ButtonTask+0x588>)
  4039c6:	4b23      	ldr	r3, [pc, #140]	; (403a54 <ButtonTask+0x564>)
  4039c8:	4798      	blx	r3
					
					SW5Downtg = !SW5Downtg;
					
					if(tg2){
  4039ca:	f1b8 0f00 	cmp.w	r8, #0
  4039ce:	d007      	beq.n	4039e0 <ButtonTask+0x4f0>
						pio_set(LED2);
  4039d0:	481c      	ldr	r0, [pc, #112]	; (403a44 <ButtonTask+0x554>)
  4039d2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4039d6:	4b20      	ldr	r3, [pc, #128]	; (403a58 <ButtonTask+0x568>)
  4039d8:	4798      	blx	r3
						tg2 = !tg2;
  4039da:	f04f 0800 	mov.w	r8, #0
  4039de:	e05d      	b.n	403a9c <ButtonTask+0x5ac>
					}
					else {
						pio_clear(LED2);
  4039e0:	4818      	ldr	r0, [pc, #96]	; (403a44 <ButtonTask+0x554>)
  4039e2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4039e6:	4b18      	ldr	r3, [pc, #96]	; (403a48 <ButtonTask+0x558>)
  4039e8:	4798      	blx	r3
						tg2 = !tg2;
  4039ea:	f04f 0801 	mov.w	r8, #1
  4039ee:	e055      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
					
					case(SW5Push) :
					sendDebugString("NAV5 Push\n");
  4039f0:	4822      	ldr	r0, [pc, #136]	; (403a7c <ButtonTask+0x58c>)
  4039f2:	4b18      	ldr	r3, [pc, #96]	; (403a54 <ButtonTask+0x564>)
  4039f4:	4798      	blx	r3
					if(tg2){
  4039f6:	f1b8 0f00 	cmp.w	r8, #0
  4039fa:	d007      	beq.n	403a0c <ButtonTask+0x51c>
						pio_set(LED2);
  4039fc:	4811      	ldr	r0, [pc, #68]	; (403a44 <ButtonTask+0x554>)
  4039fe:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403a02:	4b15      	ldr	r3, [pc, #84]	; (403a58 <ButtonTask+0x568>)
  403a04:	4798      	blx	r3
						tg2 = !tg2;
  403a06:	f04f 0800 	mov.w	r8, #0
  403a0a:	e047      	b.n	403a9c <ButtonTask+0x5ac>
					}
					else {
						pio_clear(LED2);
  403a0c:	480d      	ldr	r0, [pc, #52]	; (403a44 <ButtonTask+0x554>)
  403a0e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403a12:	4b0d      	ldr	r3, [pc, #52]	; (403a48 <ButtonTask+0x558>)
  403a14:	4798      	blx	r3
						tg2 = !tg2;
  403a16:	f04f 0801 	mov.w	r8, #1
  403a1a:	e03f      	b.n	403a9c <ButtonTask+0x5ac>
					}
					break;
					
					default :
					sendDebugString("ANALOGUE BITCH!\n");
  403a1c:	4818      	ldr	r0, [pc, #96]	; (403a80 <ButtonTask+0x590>)
  403a1e:	4b0d      	ldr	r3, [pc, #52]	; (403a54 <ButtonTask+0x564>)
  403a20:	4798      	blx	r3
					if(tgd){
  403a22:	9b06      	ldr	r3, [sp, #24]
  403a24:	b373      	cbz	r3, 403a84 <ButtonTask+0x594>
						pio_set(LED1);
  403a26:	4d07      	ldr	r5, [pc, #28]	; (403a44 <ButtonTask+0x554>)
  403a28:	4628      	mov	r0, r5
  403a2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403a2e:	4c0a      	ldr	r4, [pc, #40]	; (403a58 <ButtonTask+0x568>)
  403a30:	47a0      	blx	r4
						pio_set(LED2);
  403a32:	4628      	mov	r0, r5
  403a34:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403a38:	47a0      	blx	r4
						tgd = !tgd;
  403a3a:	2300      	movs	r3, #0
  403a3c:	9306      	str	r3, [sp, #24]
  403a3e:	e02d      	b.n	403a9c <ButtonTask+0x5ac>
  403a40:	2040c364 	.word	0x2040c364
  403a44:	400e1400 	.word	0x400e1400
  403a48:	004024f1 	.word	0x004024f1
  403a4c:	2040c35c 	.word	0x2040c35c
  403a50:	0040aaf4 	.word	0x0040aaf4
  403a54:	00402d35 	.word	0x00402d35
  403a58:	004024ed 	.word	0x004024ed
  403a5c:	3e4ccccd 	.word	0x3e4ccccd
  403a60:	0040ab00 	.word	0x0040ab00
  403a64:	0040ab10 	.word	0x0040ab10
  403a68:	0040ab1c 	.word	0x0040ab1c
  403a6c:	0040ab28 	.word	0x0040ab28
  403a70:	0040ab34 	.word	0x0040ab34
  403a74:	0040ab40 	.word	0x0040ab40
  403a78:	0040ab4c 	.word	0x0040ab4c
  403a7c:	0040ab58 	.word	0x0040ab58
  403a80:	0040ab64 	.word	0x0040ab64
					}
					else {
						pio_clear(LED1);
  403a84:	4d41      	ldr	r5, [pc, #260]	; (403b8c <ButtonTask+0x69c>)
  403a86:	4628      	mov	r0, r5
  403a88:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403a8c:	4c40      	ldr	r4, [pc, #256]	; (403b90 <ButtonTask+0x6a0>)
  403a8e:	47a0      	blx	r4
						pio_clear(LED2);
  403a90:	4628      	mov	r0, r5
  403a92:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403a96:	47a0      	blx	r4
						tgd = !tgd;
  403a98:	2301      	movs	r3, #1
  403a9a:	9306      	str	r3, [sp, #24]
					}
					break;
				}
				}
				
				if (!button){
  403a9c:	4b3d      	ldr	r3, [pc, #244]	; (403b94 <ButtonTask+0x6a4>)
  403a9e:	681b      	ldr	r3, [r3, #0]
  403aa0:	2b00      	cmp	r3, #0
  403aa2:	d16d      	bne.n	403b80 <ButtonTask+0x690>
					if (FRAMEsem !=NULL){
  403aa4:	4b3c      	ldr	r3, [pc, #240]	; (403b98 <ButtonTask+0x6a8>)
  403aa6:	6818      	ldr	r0, [r3, #0]
  403aa8:	2800      	cmp	r0, #0
  403aaa:	d069      	beq.n	403b80 <ButtonTask+0x690>
						if(xSemaphoreTake(FRAMEsem,0xFFFF) == pdTRUE){
  403aac:	2100      	movs	r1, #0
  403aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403ab2:	460b      	mov	r3, r1
  403ab4:	4c39      	ldr	r4, [pc, #228]	; (403b9c <ButtonTask+0x6ac>)
  403ab6:	47a0      	blx	r4
  403ab8:	2801      	cmp	r0, #1
  403aba:	d161      	bne.n	403b80 <ButtonTask+0x690>
							int stance = 165;
							int height = 20;
							int pUp = 85;
							int stride = 65;
							
							if(analogFlag){
  403abc:	4b38      	ldr	r3, [pc, #224]	; (403ba0 <ButtonTask+0x6b0>)
  403abe:	681b      	ldr	r3, [r3, #0]
  403ac0:	2b00      	cmp	r3, #0
  403ac2:	d045      	beq.n	403b50 <ButtonTask+0x660>
							stance =  165;
							//default is 20; scale to 100 at sideways
							height = 20 + 80*(fabsf(sin(anaAng)));
  403ac4:	4f37      	ldr	r7, [pc, #220]	; (403ba4 <ButtonTask+0x6b4>)
  403ac6:	4b38      	ldr	r3, [pc, #224]	; (403ba8 <ButtonTask+0x6b8>)
  403ac8:	6818      	ldr	r0, [r3, #0]
  403aca:	47b8      	blx	r7
  403acc:	4b37      	ldr	r3, [pc, #220]	; (403bac <ButtonTask+0x6bc>)
  403ace:	4798      	blx	r3
  403ad0:	4b37      	ldr	r3, [pc, #220]	; (403bb0 <ButtonTask+0x6c0>)
  403ad2:	4798      	blx	r3
  403ad4:	ee07 0a90 	vmov	s15, r0
  403ad8:	eef0 7ae7 	vabs.f32	s15, s15
  403adc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 403bb4 <ButtonTask+0x6c4>
  403ae0:	ee67 6a87 	vmul.f32	s13, s15, s14
  403ae4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x34
  403ae8:	ee36 7a87 	vadd.f32	s14, s13, s14
  403aec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  403af0:	ee17 6a10 	vmov	r6, s14
							//default is 85; scale to 40 at sideways
							pUp    = 85 - 45*(fabsf(sin(anaAng)));
  403af4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 403bb8 <ButtonTask+0x6c8>
  403af8:	ee27 7a87 	vmul.f32	s14, s15, s14
  403afc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 403bbc <ButtonTask+0x6cc>
  403b00:	ee36 7ac7 	vsub.f32	s14, s13, s14
  403b04:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  403b08:	ee17 5a10 	vmov	r5, s14
							//default is 65; reduce to 40 at sideways
							stride = 65 - 25*(fabsf(sin(anaAng)));
  403b0c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x39
  403b10:	ee67 7a87 	vmul.f32	s15, s15, s14
  403b14:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 403bc0 <ButtonTask+0x6d0>
  403b18:	ee77 7a67 	vsub.f32	s15, s14, s15
  403b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  403b20:	ee17 4a90 	vmov	r4, s15
							//start at 100 for 250; move to 30 at 2100
							cycle = 100 - (anaMag-250.00)*0.03783;
  403b24:	4b27      	ldr	r3, [pc, #156]	; (403bc4 <ButtonTask+0x6d4>)
  403b26:	6818      	ldr	r0, [r3, #0]
  403b28:	47b8      	blx	r7
  403b2a:	4f27      	ldr	r7, [pc, #156]	; (403bc8 <ButtonTask+0x6d8>)
  403b2c:	ec53 2b1a 	vmov	r2, r3, d10
  403b30:	47b8      	blx	r7
  403b32:	ec53 2b19 	vmov	r2, r3, d9
  403b36:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 403bd8 <ButtonTask+0x6e8>
  403b3a:	47e0      	blx	ip
  403b3c:	4602      	mov	r2, r0
  403b3e:	460b      	mov	r3, r1
  403b40:	ec51 0b1d 	vmov	r0, r1, d13
  403b44:	47b8      	blx	r7
  403b46:	4b21      	ldr	r3, [pc, #132]	; (403bcc <ButtonTask+0x6dc>)
  403b48:	4798      	blx	r3
  403b4a:	4681      	mov	r9, r0
							//walkEN
							walkEN = 1;
  403b4c:	2701      	movs	r7, #1
  403b4e:	e002      	b.n	403b56 <ButtonTask+0x666>
					if (FRAMEsem !=NULL){
						if(xSemaphoreTake(FRAMEsem,0xFFFF) == pdTRUE){
							int stance = 165;
							int height = 20;
							int pUp = 85;
							int stride = 65;
  403b50:	2441      	movs	r4, #65	; 0x41
				if (!button){
					if (FRAMEsem !=NULL){
						if(xSemaphoreTake(FRAMEsem,0xFFFF) == pdTRUE){
							int stance = 165;
							int height = 20;
							int pUp = 85;
  403b52:	2555      	movs	r5, #85	; 0x55
				
				if (!button){
					if (FRAMEsem !=NULL){
						if(xSemaphoreTake(FRAMEsem,0xFFFF) == pdTRUE){
							int stance = 165;
							int height = 20;
  403b54:	2614      	movs	r6, #20
							//start at 100 for 250; move to 30 at 2100
							cycle = 100 - (anaMag-250.00)*0.03783;
							//walkEN
							walkEN = 1;
							}
							buildFrameExtd(moveTurn,anaAng,cycle,max_i,walkEN,stance,height,pUp,stride);
  403b56:	4b14      	ldr	r3, [pc, #80]	; (403ba8 <ButtonTask+0x6b8>)
  403b58:	6819      	ldr	r1, [r3, #0]
  403b5a:	9700      	str	r7, [sp, #0]
  403b5c:	23a5      	movs	r3, #165	; 0xa5
  403b5e:	9301      	str	r3, [sp, #4]
  403b60:	9602      	str	r6, [sp, #8]
  403b62:	9503      	str	r5, [sp, #12]
  403b64:	9404      	str	r4, [sp, #16]
  403b66:	ee18 0a90 	vmov	r0, s17
  403b6a:	464a      	mov	r2, r9
  403b6c:	4653      	mov	r3, sl
  403b6e:	4c18      	ldr	r4, [pc, #96]	; (403bd0 <ButtonTask+0x6e0>)
  403b70:	47a0      	blx	r4
							xSemaphoreGive(FRAMEsem);
  403b72:	4b09      	ldr	r3, [pc, #36]	; (403b98 <ButtonTask+0x6a8>)
  403b74:	6818      	ldr	r0, [r3, #0]
  403b76:	2100      	movs	r1, #0
  403b78:	460a      	mov	r2, r1
  403b7a:	460b      	mov	r3, r1
  403b7c:	4c15      	ldr	r4, [pc, #84]	; (403bd4 <ButtonTask+0x6e4>)
  403b7e:	47a0      	blx	r4
						}
					}
				}
				analogFlag = 0;
  403b80:	2300      	movs	r3, #0
  403b82:	4a07      	ldr	r2, [pc, #28]	; (403ba0 <ButtonTask+0x6b0>)
  403b84:	6013      	str	r3, [r2, #0]
				button = 0;
  403b86:	4a03      	ldr	r2, [pc, #12]	; (403b94 <ButtonTask+0x6a4>)
  403b88:	6013      	str	r3, [r2, #0]
  403b8a:	e4e1      	b.n	403550 <ButtonTask+0x60>
  403b8c:	400e1400 	.word	0x400e1400
  403b90:	004024f1 	.word	0x004024f1
  403b94:	2040c36c 	.word	0x2040c36c
  403b98:	2040c370 	.word	0x2040c370
  403b9c:	00401065 	.word	0x00401065
  403ba0:	2040c374 	.word	0x2040c374
  403ba4:	0040585d 	.word	0x0040585d
  403ba8:	2040c368 	.word	0x2040c368
  403bac:	00403d55 	.word	0x00403d55
  403bb0:	00405e89 	.word	0x00405e89
  403bb4:	42a00000 	.word	0x42a00000
  403bb8:	42340000 	.word	0x42340000
  403bbc:	42aa0000 	.word	0x42aa0000
  403bc0:	42820000 	.word	0x42820000
  403bc4:	2040c358 	.word	0x2040c358
  403bc8:	0040559d 	.word	0x0040559d
  403bcc:	00405e39 	.word	0x00405e39
  403bd0:	00403435 	.word	0x00403435
  403bd4:	00400c59 	.word	0x00400c59
  403bd8:	00405905 	.word	0x00405905

00403bdc <getAnalog>:


uint32_t getAnalog(int channel) {
	uint32_t result;
	
	if (channel == 0){
  403bdc:	b970      	cbnz	r0, 403bfc <getAnalog+0x20>
  403bde:	4b0e      	ldr	r3, [pc, #56]	; (403c18 <getAnalog+0x3c>)
  403be0:	2201      	movs	r2, #1
  403be2:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  403be4:	2202      	movs	r2, #2
  403be6:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  403be8:	461a      	mov	r2, r3
  403bea:	6b13      	ldr	r3, [r2, #48]	; 0x30
		afec_channel_enable(AFEC0, AFEC_CHANNEL_0);
		afec_start_software_conversion(AFEC0);
		
		while (!(afec_get_interrupt_status(AFEC0) & (1 << AFEC_CHANNEL_0)));
  403bec:	f013 0f01 	tst.w	r3, #1
  403bf0:	d0fb      	beq.n	403bea <getAnalog+0xe>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  403bf2:	4b09      	ldr	r3, [pc, #36]	; (403c18 <getAnalog+0x3c>)
  403bf4:	2200      	movs	r2, #0
  403bf6:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403bf8:	6e98      	ldr	r0, [r3, #104]	; 0x68
  403bfa:	4770      	bx	lr
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  403bfc:	4b06      	ldr	r3, [pc, #24]	; (403c18 <getAnalog+0x3c>)
  403bfe:	2202      	movs	r2, #2
  403c00:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  403c02:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  403c04:	461a      	mov	r2, r3
  403c06:	6b13      	ldr	r3, [r2, #48]	; 0x30
	}
	else{
		afec_channel_enable(AFEC0, AFEC_CHANNEL_1);
		afec_start_software_conversion(AFEC0);
		
		while (!(afec_get_interrupt_status(AFEC0) & (1 << AFEC_CHANNEL_1)));
  403c08:	f013 0f02 	tst.w	r3, #2
  403c0c:	d0fb      	beq.n	403c06 <getAnalog+0x2a>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  403c0e:	4b02      	ldr	r3, [pc, #8]	; (403c18 <getAnalog+0x3c>)
  403c10:	2201      	movs	r2, #1
  403c12:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  403c14:	6e98      	ldr	r0, [r3, #104]	; 0x68
		result = afec_channel_get_value(AFEC0, AFEC_CHANNEL_1);
		//afec_channel_disable(AFEC0, AFEC_CHANNEL_1);
		
	}
	return result;
}
  403c16:	4770      	bx	lr
  403c18:	4003c000 	.word	0x4003c000
  403c1c:	00000000 	.word	0x00000000

00403c20 <Task1>:
	/* Insert application code here, after the board has been initialized. */
}



void Task1 (void* pvParameters) {
  403c20:	e92d 4670 	stmdb	sp!, {r4, r5, r6, r9, sl, lr}
  403c24:	ed2d 8b02 	vpush	{d8}
	int tg = 1;
	int AnaX = 0;
	int AnaY = 0;
	char buf[20];
	pio_clear(LED1);
  403c28:	4d37      	ldr	r5, [pc, #220]	; (403d08 <Task1+0xe8>)
  403c2a:	4628      	mov	r0, r5
  403c2c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403c30:	4c36      	ldr	r4, [pc, #216]	; (403d0c <Task1+0xec>)
  403c32:	47a0      	blx	r4
	pio_clear(LED2);
  403c34:	4628      	mov	r0, r5
  403c36:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403c3a:	47a0      	blx	r4
}



void Task1 (void* pvParameters) {
	int tg = 1;
  403c3c:	f04f 0901 	mov.w	r9, #1
		AnaY = 2048-getAnalog(0);
		AnaX = getAnalog(1)-2048;
		anaAng = atan2f(AnaY,AnaX) - (M_PI/2.00);
		anaMag = sqrt(AnaX*AnaX + AnaY*AnaY);
		
		if(anaMag > ANA_THRESH) {
  403c40:	ed9f 8a33 	vldr	s16, [pc, #204]	; 403d10 <Task1+0xf0>
				tg = !tg;
				//sendDebugString("On\n");
			}
			else {
				
				pio_clear(LED1);
  403c44:	46aa      	mov	sl, r5
	
	
	for(;;){
		
		
		AnaY = 2048-getAnalog(0);
  403c46:	2000      	movs	r0, #0
  403c48:	4c32      	ldr	r4, [pc, #200]	; (403d14 <Task1+0xf4>)
  403c4a:	47a0      	blx	r4
  403c4c:	f5c0 6500 	rsb	r5, r0, #2048	; 0x800
		AnaX = getAnalog(1)-2048;
  403c50:	2001      	movs	r0, #1
  403c52:	47a0      	blx	r4
  403c54:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
		anaAng = atan2f(AnaY,AnaX) - (M_PI/2.00);
  403c58:	ee07 5a90 	vmov	s15, r5
  403c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403c60:	ee17 0a90 	vmov	r0, s15
  403c64:	ee07 4a90 	vmov	s15, r4
  403c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403c6c:	ee17 1a90 	vmov	r1, s15
  403c70:	4b29      	ldr	r3, [pc, #164]	; (403d18 <Task1+0xf8>)
  403c72:	4798      	blx	r3
  403c74:	4b29      	ldr	r3, [pc, #164]	; (403d1c <Task1+0xfc>)
  403c76:	4798      	blx	r3
  403c78:	a321      	add	r3, pc, #132	; (adr r3, 403d00 <Task1+0xe0>)
  403c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c7e:	4e28      	ldr	r6, [pc, #160]	; (403d20 <Task1+0x100>)
  403c80:	47b0      	blx	r6
  403c82:	4e28      	ldr	r6, [pc, #160]	; (403d24 <Task1+0x104>)
  403c84:	47b0      	blx	r6
  403c86:	4b28      	ldr	r3, [pc, #160]	; (403d28 <Task1+0x108>)
  403c88:	6018      	str	r0, [r3, #0]
		anaMag = sqrt(AnaX*AnaX + AnaY*AnaY);
  403c8a:	fb05 f505 	mul.w	r5, r5, r5
  403c8e:	fb04 5404 	mla	r4, r4, r4, r5
  403c92:	4d26      	ldr	r5, [pc, #152]	; (403d2c <Task1+0x10c>)
  403c94:	4620      	mov	r0, r4
  403c96:	47a8      	blx	r5
  403c98:	4b25      	ldr	r3, [pc, #148]	; (403d30 <Task1+0x110>)
  403c9a:	4798      	blx	r3
  403c9c:	47b0      	blx	r6
  403c9e:	ee07 0a90 	vmov	s15, r0
  403ca2:	4b24      	ldr	r3, [pc, #144]	; (403d34 <Task1+0x114>)
  403ca4:	6018      	str	r0, [r3, #0]
		
		if(anaMag > ANA_THRESH) {
  403ca6:	eef4 7ac8 	vcmpe.f32	s15, s16
  403caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403cae:	dd0b      	ble.n	403cc8 <Task1+0xa8>
			button = 0;
  403cb0:	2300      	movs	r3, #0
  403cb2:	4a21      	ldr	r2, [pc, #132]	; (403d38 <Task1+0x118>)
  403cb4:	6013      	str	r3, [r2, #0]
			xSemaphoreGive(PIOAsem);
  403cb6:	4a21      	ldr	r2, [pc, #132]	; (403d3c <Task1+0x11c>)
  403cb8:	6810      	ldr	r0, [r2, #0]
  403cba:	4619      	mov	r1, r3
  403cbc:	461a      	mov	r2, r3
  403cbe:	4c20      	ldr	r4, [pc, #128]	; (403d40 <Task1+0x120>)
  403cc0:	47a0      	blx	r4
			analogFlag = 1;
  403cc2:	2201      	movs	r2, #1
  403cc4:	4b1f      	ldr	r3, [pc, #124]	; (403d44 <Task1+0x124>)
  403cc6:	601a      	str	r2, [r3, #0]
		}
		//sprintf(buf,"anaMag:%f, anaAngle:%f\n",sqrt(AnaX*AnaX + AnaY*AnaY));
		//sendDebugString(buf);
		
		if(LEDtg){
  403cc8:	4b1f      	ldr	r3, [pc, #124]	; (403d48 <Task1+0x128>)
  403cca:	681b      	ldr	r3, [r3, #0]
  403ccc:	b18b      	cbz	r3, 403cf2 <Task1+0xd2>
			
			
			if (tg){
  403cce:	f1b9 0f00 	cmp.w	r9, #0
  403cd2:	d007      	beq.n	403ce4 <Task1+0xc4>
				
				pio_set(LED1);
  403cd4:	4650      	mov	r0, sl
  403cd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403cda:	4b1c      	ldr	r3, [pc, #112]	; (403d4c <Task1+0x12c>)
  403cdc:	4798      	blx	r3
				tg = !tg;
  403cde:	f04f 0900 	mov.w	r9, #0
  403ce2:	e006      	b.n	403cf2 <Task1+0xd2>
				//sendDebugString("On\n");
			}
			else {
				
				pio_clear(LED1);
  403ce4:	4650      	mov	r0, sl
  403ce6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403cea:	4b08      	ldr	r3, [pc, #32]	; (403d0c <Task1+0xec>)
  403cec:	4798      	blx	r3
				tg = !tg;
  403cee:	f04f 0901 	mov.w	r9, #1
				//sendDebugString("Fresh\n");
			}
			
		}
		vTaskDelay(20);
  403cf2:	2014      	movs	r0, #20
  403cf4:	4b16      	ldr	r3, [pc, #88]	; (403d50 <Task1+0x130>)
  403cf6:	4798      	blx	r3
		

	}
  403cf8:	e7a5      	b.n	403c46 <Task1+0x26>
  403cfa:	bf00      	nop
  403cfc:	f3af 8000 	nop.w
  403d00:	54442d18 	.word	0x54442d18
  403d04:	3ff921fb 	.word	0x3ff921fb
  403d08:	400e1400 	.word	0x400e1400
  403d0c:	004024f1 	.word	0x004024f1
  403d10:	437a0000 	.word	0x437a0000
  403d14:	00403bdd 	.word	0x00403bdd
  403d18:	00403e9d 	.word	0x00403e9d
  403d1c:	0040585d 	.word	0x0040585d
  403d20:	0040559d 	.word	0x0040559d
  403d24:	00405e89 	.word	0x00405e89
  403d28:	2040c368 	.word	0x2040c368
  403d2c:	00405839 	.word	0x00405839
  403d30:	00403de9 	.word	0x00403de9
  403d34:	2040c358 	.word	0x2040c358
  403d38:	2040c36c 	.word	0x2040c36c
  403d3c:	2040c360 	.word	0x2040c360
  403d40:	00400c59 	.word	0x00400c59
  403d44:	2040c374 	.word	0x2040c374
  403d48:	2040c35c 	.word	0x2040c35c
  403d4c:	004024ed 	.word	0x004024ed
  403d50:	00401851 	.word	0x00401851

00403d54 <sin>:
  403d54:	4a22      	ldr	r2, [pc, #136]	; (403de0 <sin+0x8c>)
  403d56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403d5a:	4293      	cmp	r3, r2
  403d5c:	b530      	push	{r4, r5, lr}
  403d5e:	b087      	sub	sp, #28
  403d60:	dd1b      	ble.n	403d9a <sin+0x46>
  403d62:	4a20      	ldr	r2, [pc, #128]	; (403de4 <sin+0x90>)
  403d64:	4293      	cmp	r3, r2
  403d66:	dd05      	ble.n	403d74 <sin+0x20>
  403d68:	4602      	mov	r2, r0
  403d6a:	460b      	mov	r3, r1
  403d6c:	f001 fc16 	bl	40559c <__aeabi_dsub>
  403d70:	b007      	add	sp, #28
  403d72:	bd30      	pop	{r4, r5, pc}
  403d74:	aa02      	add	r2, sp, #8
  403d76:	f000 f893 	bl	403ea0 <__ieee754_rem_pio2>
  403d7a:	f000 0003 	and.w	r0, r0, #3
  403d7e:	2801      	cmp	r0, #1
  403d80:	d01e      	beq.n	403dc0 <sin+0x6c>
  403d82:	2802      	cmp	r0, #2
  403d84:	d011      	beq.n	403daa <sin+0x56>
  403d86:	b310      	cbz	r0, 403dce <sin+0x7a>
  403d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403d8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403d90:	f000 fbe2 	bl	404558 <__kernel_cos>
  403d94:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403d98:	e7ea      	b.n	403d70 <sin+0x1c>
  403d9a:	2400      	movs	r4, #0
  403d9c:	2200      	movs	r2, #0
  403d9e:	2300      	movs	r3, #0
  403da0:	9400      	str	r4, [sp, #0]
  403da2:	f001 f8fd 	bl	404fa0 <__kernel_sin>
  403da6:	b007      	add	sp, #28
  403da8:	bd30      	pop	{r4, r5, pc}
  403daa:	2401      	movs	r4, #1
  403dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403db4:	9400      	str	r4, [sp, #0]
  403db6:	f001 f8f3 	bl	404fa0 <__kernel_sin>
  403dba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403dbe:	e7d7      	b.n	403d70 <sin+0x1c>
  403dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403dc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403dc8:	f000 fbc6 	bl	404558 <__kernel_cos>
  403dcc:	e7d0      	b.n	403d70 <sin+0x1c>
  403dce:	2401      	movs	r4, #1
  403dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403dd8:	9400      	str	r4, [sp, #0]
  403dda:	f001 f8e1 	bl	404fa0 <__kernel_sin>
  403dde:	e7c7      	b.n	403d70 <sin+0x1c>
  403de0:	3fe921fb 	.word	0x3fe921fb
  403de4:	7fefffff 	.word	0x7fefffff

00403de8 <sqrt>:
  403de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403dec:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 403e98 <sqrt+0xb0>
  403df0:	b08a      	sub	sp, #40	; 0x28
  403df2:	4606      	mov	r6, r0
  403df4:	460f      	mov	r7, r1
  403df6:	f000 fa71 	bl	4042dc <__ieee754_sqrt>
  403dfa:	f998 3000 	ldrsb.w	r3, [r8]
  403dfe:	4604      	mov	r4, r0
  403e00:	460d      	mov	r5, r1
  403e02:	3301      	adds	r3, #1
  403e04:	d02d      	beq.n	403e62 <sqrt+0x7a>
  403e06:	4630      	mov	r0, r6
  403e08:	4639      	mov	r1, r7
  403e0a:	f001 fa0d 	bl	405228 <__fpclassifyd>
  403e0e:	b340      	cbz	r0, 403e62 <sqrt+0x7a>
  403e10:	2300      	movs	r3, #0
  403e12:	4630      	mov	r0, r6
  403e14:	4639      	mov	r1, r7
  403e16:	2200      	movs	r2, #0
  403e18:	f001 ffe6 	bl	405de8 <__aeabi_dcmplt>
  403e1c:	f04f 0301 	mov.w	r3, #1
  403e20:	b900      	cbnz	r0, 403e24 <sqrt+0x3c>
  403e22:	4603      	mov	r3, r0
  403e24:	f013 0fff 	tst.w	r3, #255	; 0xff
  403e28:	d01b      	beq.n	403e62 <sqrt+0x7a>
  403e2a:	2101      	movs	r1, #1
  403e2c:	4a19      	ldr	r2, [pc, #100]	; (403e94 <sqrt+0xac>)
  403e2e:	2300      	movs	r3, #0
  403e30:	f898 4000 	ldrb.w	r4, [r8]
  403e34:	e88d 0006 	stmia.w	sp, {r1, r2}
  403e38:	9308      	str	r3, [sp, #32]
  403e3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  403e3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
  403e42:	b99c      	cbnz	r4, 403e6c <sqrt+0x84>
  403e44:	2200      	movs	r2, #0
  403e46:	2300      	movs	r3, #0
  403e48:	e9cd 2306 	strd	r2, r3, [sp, #24]
  403e4c:	4668      	mov	r0, sp
  403e4e:	f001 fa0d 	bl	40526c <matherr>
  403e52:	b1a8      	cbz	r0, 403e80 <sqrt+0x98>
  403e54:	9b08      	ldr	r3, [sp, #32]
  403e56:	b9c3      	cbnz	r3, 403e8a <sqrt+0xa2>
  403e58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403e5c:	b00a      	add	sp, #40	; 0x28
  403e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e62:	4620      	mov	r0, r4
  403e64:	4629      	mov	r1, r5
  403e66:	b00a      	add	sp, #40	; 0x28
  403e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403e6c:	2000      	movs	r0, #0
  403e6e:	2100      	movs	r1, #0
  403e70:	4602      	mov	r2, r0
  403e72:	460b      	mov	r3, r1
  403e74:	f001 fe70 	bl	405b58 <__aeabi_ddiv>
  403e78:	2c02      	cmp	r4, #2
  403e7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403e7e:	d1e5      	bne.n	403e4c <sqrt+0x64>
  403e80:	f002 fb26 	bl	4064d0 <__errno>
  403e84:	2321      	movs	r3, #33	; 0x21
  403e86:	6003      	str	r3, [r0, #0]
  403e88:	e7e4      	b.n	403e54 <sqrt+0x6c>
  403e8a:	f002 fb21 	bl	4064d0 <__errno>
  403e8e:	9b08      	ldr	r3, [sp, #32]
  403e90:	6003      	str	r3, [r0, #0]
  403e92:	e7e1      	b.n	403e58 <sqrt+0x70>
  403e94:	0040ab78 	.word	0x0040ab78
  403e98:	20400018 	.word	0x20400018

00403e9c <atan2f>:
  403e9c:	f000 bacc 	b.w	404438 <__ieee754_atan2f>

00403ea0 <__ieee754_rem_pio2>:
  403ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ea4:	4c96      	ldr	r4, [pc, #600]	; (404100 <__ieee754_rem_pio2+0x260>)
  403ea6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  403eaa:	b08f      	sub	sp, #60	; 0x3c
  403eac:	460b      	mov	r3, r1
  403eae:	42a7      	cmp	r7, r4
  403eb0:	460e      	mov	r6, r1
  403eb2:	f340 8082 	ble.w	403fba <__ieee754_rem_pio2+0x11a>
  403eb6:	4614      	mov	r4, r2
  403eb8:	4a92      	ldr	r2, [pc, #584]	; (404104 <__ieee754_rem_pio2+0x264>)
  403eba:	4297      	cmp	r7, r2
  403ebc:	dc28      	bgt.n	403f10 <__ieee754_rem_pio2+0x70>
  403ebe:	2900      	cmp	r1, #0
  403ec0:	a385      	add	r3, pc, #532	; (adr r3, 4040d8 <__ieee754_rem_pio2+0x238>)
  403ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ec6:	f340 81a3 	ble.w	404210 <__ieee754_rem_pio2+0x370>
  403eca:	f001 fb67 	bl	40559c <__aeabi_dsub>
  403ece:	4b8e      	ldr	r3, [pc, #568]	; (404108 <__ieee754_rem_pio2+0x268>)
  403ed0:	4680      	mov	r8, r0
  403ed2:	4689      	mov	r9, r1
  403ed4:	429f      	cmp	r7, r3
  403ed6:	f000 8087 	beq.w	403fe8 <__ieee754_rem_pio2+0x148>
  403eda:	2501      	movs	r5, #1
  403edc:	a380      	add	r3, pc, #512	; (adr r3, 4040e0 <__ieee754_rem_pio2+0x240>)
  403ede:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ee2:	f001 fb5b 	bl	40559c <__aeabi_dsub>
  403ee6:	4606      	mov	r6, r0
  403ee8:	460f      	mov	r7, r1
  403eea:	4640      	mov	r0, r8
  403eec:	4632      	mov	r2, r6
  403eee:	4649      	mov	r1, r9
  403ef0:	463b      	mov	r3, r7
  403ef2:	e9c4 6700 	strd	r6, r7, [r4]
  403ef6:	f001 fb51 	bl	40559c <__aeabi_dsub>
  403efa:	a379      	add	r3, pc, #484	; (adr r3, 4040e0 <__ieee754_rem_pio2+0x240>)
  403efc:	e9d3 2300 	ldrd	r2, r3, [r3]
  403f00:	f001 fb4c 	bl	40559c <__aeabi_dsub>
  403f04:	e9c4 0102 	strd	r0, r1, [r4, #8]
  403f08:	4628      	mov	r0, r5
  403f0a:	b00f      	add	sp, #60	; 0x3c
  403f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f10:	4a7e      	ldr	r2, [pc, #504]	; (40410c <__ieee754_rem_pio2+0x26c>)
  403f12:	4297      	cmp	r7, r2
  403f14:	f340 8087 	ble.w	404026 <__ieee754_rem_pio2+0x186>
  403f18:	4a7d      	ldr	r2, [pc, #500]	; (404110 <__ieee754_rem_pio2+0x270>)
  403f1a:	4297      	cmp	r7, r2
  403f1c:	dc5a      	bgt.n	403fd4 <__ieee754_rem_pio2+0x134>
  403f1e:	153a      	asrs	r2, r7, #20
  403f20:	4682      	mov	sl, r0
  403f22:	f2a2 4516 	subw	r5, r2, #1046	; 0x416
  403f26:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
  403f2a:	468b      	mov	fp, r1
  403f2c:	f001 ff84 	bl	405e38 <__aeabi_d2iz>
  403f30:	f001 fc82 	bl	405838 <__aeabi_i2d>
  403f34:	4680      	mov	r8, r0
  403f36:	4689      	mov	r9, r1
  403f38:	4650      	mov	r0, sl
  403f3a:	4642      	mov	r2, r8
  403f3c:	4659      	mov	r1, fp
  403f3e:	464b      	mov	r3, r9
  403f40:	e9cd 8908 	strd	r8, r9, [sp, #32]
  403f44:	f001 fb2a 	bl	40559c <__aeabi_dsub>
  403f48:	2200      	movs	r2, #0
  403f4a:	4b72      	ldr	r3, [pc, #456]	; (404114 <__ieee754_rem_pio2+0x274>)
  403f4c:	f001 fcda 	bl	405904 <__aeabi_dmul>
  403f50:	468b      	mov	fp, r1
  403f52:	4682      	mov	sl, r0
  403f54:	f001 ff70 	bl	405e38 <__aeabi_d2iz>
  403f58:	f001 fc6e 	bl	405838 <__aeabi_i2d>
  403f5c:	4680      	mov	r8, r0
  403f5e:	4689      	mov	r9, r1
  403f60:	4650      	mov	r0, sl
  403f62:	4642      	mov	r2, r8
  403f64:	4659      	mov	r1, fp
  403f66:	464b      	mov	r3, r9
  403f68:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  403f6c:	f001 fb16 	bl	40559c <__aeabi_dsub>
  403f70:	2200      	movs	r2, #0
  403f72:	4b68      	ldr	r3, [pc, #416]	; (404114 <__ieee754_rem_pio2+0x274>)
  403f74:	f001 fcc6 	bl	405904 <__aeabi_dmul>
  403f78:	2200      	movs	r2, #0
  403f7a:	2300      	movs	r3, #0
  403f7c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403f80:	f001 ff28 	bl	405dd4 <__aeabi_dcmpeq>
  403f84:	2800      	cmp	r0, #0
  403f86:	f000 816d 	beq.w	404264 <__ieee754_rem_pio2+0x3c4>
  403f8a:	2300      	movs	r3, #0
  403f8c:	4640      	mov	r0, r8
  403f8e:	4649      	mov	r1, r9
  403f90:	2200      	movs	r2, #0
  403f92:	f001 ff1f 	bl	405dd4 <__aeabi_dcmpeq>
  403f96:	2800      	cmp	r0, #0
  403f98:	bf14      	ite	ne
  403f9a:	2301      	movne	r3, #1
  403f9c:	2302      	moveq	r3, #2
  403f9e:	2002      	movs	r0, #2
  403fa0:	495d      	ldr	r1, [pc, #372]	; (404118 <__ieee754_rem_pio2+0x278>)
  403fa2:	462a      	mov	r2, r5
  403fa4:	9000      	str	r0, [sp, #0]
  403fa6:	a808      	add	r0, sp, #32
  403fa8:	9101      	str	r1, [sp, #4]
  403faa:	4621      	mov	r1, r4
  403fac:	f000 fbf8 	bl	4047a0 <__kernel_rem_pio2>
  403fb0:	2e00      	cmp	r6, #0
  403fb2:	f2c0 814d 	blt.w	404250 <__ieee754_rem_pio2+0x3b0>
  403fb6:	4605      	mov	r5, r0
  403fb8:	e008      	b.n	403fcc <__ieee754_rem_pio2+0x12c>
  403fba:	4606      	mov	r6, r0
  403fbc:	2100      	movs	r1, #0
  403fbe:	2000      	movs	r0, #0
  403fc0:	461f      	mov	r7, r3
  403fc2:	2500      	movs	r5, #0
  403fc4:	e9c2 0102 	strd	r0, r1, [r2, #8]
  403fc8:	e9c2 6700 	strd	r6, r7, [r2]
  403fcc:	4628      	mov	r0, r5
  403fce:	b00f      	add	sp, #60	; 0x3c
  403fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fd4:	4602      	mov	r2, r0
  403fd6:	460b      	mov	r3, r1
  403fd8:	f001 fae0 	bl	40559c <__aeabi_dsub>
  403fdc:	2500      	movs	r5, #0
  403fde:	e9c4 0102 	strd	r0, r1, [r4, #8]
  403fe2:	e9c4 0100 	strd	r0, r1, [r4]
  403fe6:	e7f1      	b.n	403fcc <__ieee754_rem_pio2+0x12c>
  403fe8:	a33f      	add	r3, pc, #252	; (adr r3, 4040e8 <__ieee754_rem_pio2+0x248>)
  403fea:	e9d3 2300 	ldrd	r2, r3, [r3]
  403fee:	f001 fad5 	bl	40559c <__aeabi_dsub>
  403ff2:	4680      	mov	r8, r0
  403ff4:	4689      	mov	r9, r1
  403ff6:	2501      	movs	r5, #1
  403ff8:	a33d      	add	r3, pc, #244	; (adr r3, 4040f0 <__ieee754_rem_pio2+0x250>)
  403ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ffe:	f001 facd 	bl	40559c <__aeabi_dsub>
  404002:	4606      	mov	r6, r0
  404004:	460f      	mov	r7, r1
  404006:	4640      	mov	r0, r8
  404008:	4632      	mov	r2, r6
  40400a:	4649      	mov	r1, r9
  40400c:	463b      	mov	r3, r7
  40400e:	e9c4 6700 	strd	r6, r7, [r4]
  404012:	f001 fac3 	bl	40559c <__aeabi_dsub>
  404016:	a336      	add	r3, pc, #216	; (adr r3, 4040f0 <__ieee754_rem_pio2+0x250>)
  404018:	e9d3 2300 	ldrd	r2, r3, [r3]
  40401c:	f001 fabe 	bl	40559c <__aeabi_dsub>
  404020:	e9c4 0102 	strd	r0, r1, [r4, #8]
  404024:	e7d2      	b.n	403fcc <__ieee754_rem_pio2+0x12c>
  404026:	f001 f871 	bl	40510c <fabs>
  40402a:	4680      	mov	r8, r0
  40402c:	4689      	mov	r9, r1
  40402e:	a332      	add	r3, pc, #200	; (adr r3, 4040f8 <__ieee754_rem_pio2+0x258>)
  404030:	e9d3 2300 	ldrd	r2, r3, [r3]
  404034:	f001 fc66 	bl	405904 <__aeabi_dmul>
  404038:	2200      	movs	r2, #0
  40403a:	4b38      	ldr	r3, [pc, #224]	; (40411c <__ieee754_rem_pio2+0x27c>)
  40403c:	f001 fab0 	bl	4055a0 <__adddf3>
  404040:	f001 fefa 	bl	405e38 <__aeabi_d2iz>
  404044:	4605      	mov	r5, r0
  404046:	f001 fbf7 	bl	405838 <__aeabi_i2d>
  40404a:	a323      	add	r3, pc, #140	; (adr r3, 4040d8 <__ieee754_rem_pio2+0x238>)
  40404c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404050:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404054:	f001 fc56 	bl	405904 <__aeabi_dmul>
  404058:	4602      	mov	r2, r0
  40405a:	460b      	mov	r3, r1
  40405c:	4640      	mov	r0, r8
  40405e:	4649      	mov	r1, r9
  404060:	f001 fa9c 	bl	40559c <__aeabi_dsub>
  404064:	4682      	mov	sl, r0
  404066:	468b      	mov	fp, r1
  404068:	a31d      	add	r3, pc, #116	; (adr r3, 4040e0 <__ieee754_rem_pio2+0x240>)
  40406a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40406e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404072:	f001 fc47 	bl	405904 <__aeabi_dmul>
  404076:	2d1f      	cmp	r5, #31
  404078:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40407c:	4650      	mov	r0, sl
  40407e:	4659      	mov	r1, fp
  404080:	dc50      	bgt.n	404124 <__ieee754_rem_pio2+0x284>
  404082:	4b27      	ldr	r3, [pc, #156]	; (404120 <__ieee754_rem_pio2+0x280>)
  404084:	1e6a      	subs	r2, r5, #1
  404086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40408a:	42bb      	cmp	r3, r7
  40408c:	d04a      	beq.n	404124 <__ieee754_rem_pio2+0x284>
  40408e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404092:	f001 fa83 	bl	40559c <__aeabi_dsub>
  404096:	4602      	mov	r2, r0
  404098:	460b      	mov	r3, r1
  40409a:	4681      	mov	r9, r0
  40409c:	4688      	mov	r8, r1
  40409e:	e9c4 2300 	strd	r2, r3, [r4]
  4040a2:	464a      	mov	r2, r9
  4040a4:	4643      	mov	r3, r8
  4040a6:	4650      	mov	r0, sl
  4040a8:	4659      	mov	r1, fp
  4040aa:	f001 fa77 	bl	40559c <__aeabi_dsub>
  4040ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4040b2:	f001 fa73 	bl	40559c <__aeabi_dsub>
  4040b6:	2e00      	cmp	r6, #0
  4040b8:	4602      	mov	r2, r0
  4040ba:	460b      	mov	r3, r1
  4040bc:	e9c4 2302 	strd	r2, r3, [r4, #8]
  4040c0:	da84      	bge.n	403fcc <__ieee754_rem_pio2+0x12c>
  4040c2:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
  4040c6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4040ca:	60a0      	str	r0, [r4, #8]
  4040cc:	426d      	negs	r5, r5
  4040ce:	f8c4 9000 	str.w	r9, [r4]
  4040d2:	6063      	str	r3, [r4, #4]
  4040d4:	60e1      	str	r1, [r4, #12]
  4040d6:	e779      	b.n	403fcc <__ieee754_rem_pio2+0x12c>
  4040d8:	54400000 	.word	0x54400000
  4040dc:	3ff921fb 	.word	0x3ff921fb
  4040e0:	1a626331 	.word	0x1a626331
  4040e4:	3dd0b461 	.word	0x3dd0b461
  4040e8:	1a600000 	.word	0x1a600000
  4040ec:	3dd0b461 	.word	0x3dd0b461
  4040f0:	2e037073 	.word	0x2e037073
  4040f4:	3ba3198a 	.word	0x3ba3198a
  4040f8:	6dc9c883 	.word	0x6dc9c883
  4040fc:	3fe45f30 	.word	0x3fe45f30
  404100:	3fe921fb 	.word	0x3fe921fb
  404104:	4002d97b 	.word	0x4002d97b
  404108:	3ff921fb 	.word	0x3ff921fb
  40410c:	413921fb 	.word	0x413921fb
  404110:	7fefffff 	.word	0x7fefffff
  404114:	41700000 	.word	0x41700000
  404118:	0040ac00 	.word	0x0040ac00
  40411c:	3fe00000 	.word	0x3fe00000
  404120:	0040ab80 	.word	0x0040ab80
  404124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404128:	f001 fa38 	bl	40559c <__aeabi_dsub>
  40412c:	4688      	mov	r8, r1
  40412e:	153f      	asrs	r7, r7, #20
  404130:	4681      	mov	r9, r0
  404132:	f3c8 530a 	ubfx	r3, r8, #20, #11
  404136:	1afb      	subs	r3, r7, r3
  404138:	2b10      	cmp	r3, #16
  40413a:	e9c4 0100 	strd	r0, r1, [r4]
  40413e:	ddb0      	ble.n	4040a2 <__ieee754_rem_pio2+0x202>
  404140:	a35b      	add	r3, pc, #364	; (adr r3, 4042b0 <__ieee754_rem_pio2+0x410>)
  404142:	e9d3 2300 	ldrd	r2, r3, [r3]
  404146:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40414a:	f001 fbdb 	bl	405904 <__aeabi_dmul>
  40414e:	4680      	mov	r8, r0
  404150:	4689      	mov	r9, r1
  404152:	4650      	mov	r0, sl
  404154:	4642      	mov	r2, r8
  404156:	4659      	mov	r1, fp
  404158:	464b      	mov	r3, r9
  40415a:	f001 fa1f 	bl	40559c <__aeabi_dsub>
  40415e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  404166:	4650      	mov	r0, sl
  404168:	4659      	mov	r1, fp
  40416a:	f001 fa17 	bl	40559c <__aeabi_dsub>
  40416e:	4642      	mov	r2, r8
  404170:	464b      	mov	r3, r9
  404172:	f001 fa13 	bl	40559c <__aeabi_dsub>
  404176:	4680      	mov	r8, r0
  404178:	4689      	mov	r9, r1
  40417a:	a34f      	add	r3, pc, #316	; (adr r3, 4042b8 <__ieee754_rem_pio2+0x418>)
  40417c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404184:	f001 fbbe 	bl	405904 <__aeabi_dmul>
  404188:	4642      	mov	r2, r8
  40418a:	464b      	mov	r3, r9
  40418c:	f001 fa06 	bl	40559c <__aeabi_dsub>
  404190:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  40419c:	f001 f9fe 	bl	40559c <__aeabi_dsub>
  4041a0:	4688      	mov	r8, r1
  4041a2:	f3c1 510a 	ubfx	r1, r1, #20, #11
  4041a6:	4602      	mov	r2, r0
  4041a8:	4643      	mov	r3, r8
  4041aa:	4681      	mov	r9, r0
  4041ac:	1a7f      	subs	r7, r7, r1
  4041ae:	2f31      	cmp	r7, #49	; 0x31
  4041b0:	e9c4 2300 	strd	r2, r3, [r4]
  4041b4:	dd78      	ble.n	4042a8 <__ieee754_rem_pio2+0x408>
  4041b6:	a342      	add	r3, pc, #264	; (adr r3, 4042c0 <__ieee754_rem_pio2+0x420>)
  4041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4041c0:	f001 fba0 	bl	405904 <__aeabi_dmul>
  4041c4:	4680      	mov	r8, r0
  4041c6:	4689      	mov	r9, r1
  4041c8:	4642      	mov	r2, r8
  4041ca:	464b      	mov	r3, r9
  4041cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4041d0:	f001 f9e4 	bl	40559c <__aeabi_dsub>
  4041d4:	4682      	mov	sl, r0
  4041d6:	468b      	mov	fp, r1
  4041d8:	4652      	mov	r2, sl
  4041da:	465b      	mov	r3, fp
  4041dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  4041e0:	f001 f9dc 	bl	40559c <__aeabi_dsub>
  4041e4:	4642      	mov	r2, r8
  4041e6:	464b      	mov	r3, r9
  4041e8:	f001 f9d8 	bl	40559c <__aeabi_dsub>
  4041ec:	4680      	mov	r8, r0
  4041ee:	4689      	mov	r9, r1
  4041f0:	a335      	add	r3, pc, #212	; (adr r3, 4042c8 <__ieee754_rem_pio2+0x428>)
  4041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  4041fa:	f001 fb83 	bl	405904 <__aeabi_dmul>
  4041fe:	4642      	mov	r2, r8
  404200:	464b      	mov	r3, r9
  404202:	f001 f9cb 	bl	40559c <__aeabi_dsub>
  404206:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40420a:	4650      	mov	r0, sl
  40420c:	4659      	mov	r1, fp
  40420e:	e73e      	b.n	40408e <__ieee754_rem_pio2+0x1ee>
  404210:	f001 f9c6 	bl	4055a0 <__adddf3>
  404214:	4b30      	ldr	r3, [pc, #192]	; (4042d8 <__ieee754_rem_pio2+0x438>)
  404216:	4680      	mov	r8, r0
  404218:	4689      	mov	r9, r1
  40421a:	429f      	cmp	r7, r3
  40421c:	d024      	beq.n	404268 <__ieee754_rem_pio2+0x3c8>
  40421e:	f04f 35ff 	mov.w	r5, #4294967295
  404222:	a32b      	add	r3, pc, #172	; (adr r3, 4042d0 <__ieee754_rem_pio2+0x430>)
  404224:	e9d3 2300 	ldrd	r2, r3, [r3]
  404228:	f001 f9ba 	bl	4055a0 <__adddf3>
  40422c:	4606      	mov	r6, r0
  40422e:	460f      	mov	r7, r1
  404230:	4640      	mov	r0, r8
  404232:	4632      	mov	r2, r6
  404234:	4649      	mov	r1, r9
  404236:	463b      	mov	r3, r7
  404238:	e9c4 6700 	strd	r6, r7, [r4]
  40423c:	f001 f9ae 	bl	40559c <__aeabi_dsub>
  404240:	a323      	add	r3, pc, #140	; (adr r3, 4042d0 <__ieee754_rem_pio2+0x430>)
  404242:	e9d3 2300 	ldrd	r2, r3, [r3]
  404246:	f001 f9ab 	bl	4055a0 <__adddf3>
  40424a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  40424e:	e6bd      	b.n	403fcc <__ieee754_rem_pio2+0x12c>
  404250:	6862      	ldr	r2, [r4, #4]
  404252:	4245      	negs	r5, r0
  404254:	68e3      	ldr	r3, [r4, #12]
  404256:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  40425a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40425e:	6062      	str	r2, [r4, #4]
  404260:	60e3      	str	r3, [r4, #12]
  404262:	e6b3      	b.n	403fcc <__ieee754_rem_pio2+0x12c>
  404264:	2303      	movs	r3, #3
  404266:	e69a      	b.n	403f9e <__ieee754_rem_pio2+0xfe>
  404268:	a311      	add	r3, pc, #68	; (adr r3, 4042b0 <__ieee754_rem_pio2+0x410>)
  40426a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40426e:	f001 f997 	bl	4055a0 <__adddf3>
  404272:	4680      	mov	r8, r0
  404274:	4689      	mov	r9, r1
  404276:	f04f 35ff 	mov.w	r5, #4294967295
  40427a:	a30f      	add	r3, pc, #60	; (adr r3, 4042b8 <__ieee754_rem_pio2+0x418>)
  40427c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404280:	f001 f98e 	bl	4055a0 <__adddf3>
  404284:	4606      	mov	r6, r0
  404286:	460f      	mov	r7, r1
  404288:	4640      	mov	r0, r8
  40428a:	4632      	mov	r2, r6
  40428c:	4649      	mov	r1, r9
  40428e:	463b      	mov	r3, r7
  404290:	e9c4 6700 	strd	r6, r7, [r4]
  404294:	f001 f982 	bl	40559c <__aeabi_dsub>
  404298:	a307      	add	r3, pc, #28	; (adr r3, 4042b8 <__ieee754_rem_pio2+0x418>)
  40429a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40429e:	f001 f97f 	bl	4055a0 <__adddf3>
  4042a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
  4042a6:	e691      	b.n	403fcc <__ieee754_rem_pio2+0x12c>
  4042a8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  4042ac:	e6f9      	b.n	4040a2 <__ieee754_rem_pio2+0x202>
  4042ae:	bf00      	nop
  4042b0:	1a600000 	.word	0x1a600000
  4042b4:	3dd0b461 	.word	0x3dd0b461
  4042b8:	2e037073 	.word	0x2e037073
  4042bc:	3ba3198a 	.word	0x3ba3198a
  4042c0:	2e000000 	.word	0x2e000000
  4042c4:	3ba3198a 	.word	0x3ba3198a
  4042c8:	252049c1 	.word	0x252049c1
  4042cc:	397b839a 	.word	0x397b839a
  4042d0:	1a626331 	.word	0x1a626331
  4042d4:	3dd0b461 	.word	0x3dd0b461
  4042d8:	3ff921fb 	.word	0x3ff921fb

004042dc <__ieee754_sqrt>:
  4042dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4042e0:	4e53      	ldr	r6, [pc, #332]	; (404430 <__ieee754_sqrt+0x154>)
  4042e2:	460c      	mov	r4, r1
  4042e4:	4605      	mov	r5, r0
  4042e6:	460b      	mov	r3, r1
  4042e8:	46b6      	mov	lr, r6
  4042ea:	400e      	ands	r6, r1
  4042ec:	4576      	cmp	r6, lr
  4042ee:	f000 8085 	beq.w	4043fc <__ieee754_sqrt+0x120>
  4042f2:	2900      	cmp	r1, #0
  4042f4:	4602      	mov	r2, r0
  4042f6:	dd65      	ble.n	4043c4 <__ieee754_sqrt+0xe8>
  4042f8:	150f      	asrs	r7, r1, #20
  4042fa:	d070      	beq.n	4043de <__ieee754_sqrt+0x102>
  4042fc:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  404300:	f3c3 0313 	ubfx	r3, r3, #0, #20
  404304:	07f9      	lsls	r1, r7, #31
  404306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40430a:	d453      	bmi.n	4043b4 <__ieee754_sqrt+0xd8>
  40430c:	0fd1      	lsrs	r1, r2, #31
  40430e:	2600      	movs	r6, #0
  404310:	107f      	asrs	r7, r7, #1
  404312:	2016      	movs	r0, #22
  404314:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  404318:	46b6      	mov	lr, r6
  40431a:	0052      	lsls	r2, r2, #1
  40431c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  404320:	eb0e 0401 	add.w	r4, lr, r1
  404324:	0fd5      	lsrs	r5, r2, #31
  404326:	0052      	lsls	r2, r2, #1
  404328:	429c      	cmp	r4, r3
  40432a:	dc03      	bgt.n	404334 <__ieee754_sqrt+0x58>
  40432c:	1b1b      	subs	r3, r3, r4
  40432e:	eb04 0e01 	add.w	lr, r4, r1
  404332:	440e      	add	r6, r1
  404334:	3801      	subs	r0, #1
  404336:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40433a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40433e:	d1ef      	bne.n	404320 <__ieee754_sqrt+0x44>
  404340:	2520      	movs	r5, #32
  404342:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  404346:	4684      	mov	ip, r0
  404348:	4573      	cmp	r3, lr
  40434a:	eb01 040c 	add.w	r4, r1, ip
  40434e:	dc03      	bgt.n	404358 <__ieee754_sqrt+0x7c>
  404350:	4294      	cmp	r4, r2
  404352:	d80e      	bhi.n	404372 <__ieee754_sqrt+0x96>
  404354:	4573      	cmp	r3, lr
  404356:	d10c      	bne.n	404372 <__ieee754_sqrt+0x96>
  404358:	2c00      	cmp	r4, #0
  40435a:	eb04 0c01 	add.w	ip, r4, r1
  40435e:	db23      	blt.n	4043a8 <__ieee754_sqrt+0xcc>
  404360:	46f0      	mov	r8, lr
  404362:	4294      	cmp	r4, r2
  404364:	ebce 0303 	rsb	r3, lr, r3
  404368:	d900      	bls.n	40436c <__ieee754_sqrt+0x90>
  40436a:	3b01      	subs	r3, #1
  40436c:	1b12      	subs	r2, r2, r4
  40436e:	4408      	add	r0, r1
  404370:	46c6      	mov	lr, r8
  404372:	0fd4      	lsrs	r4, r2, #31
  404374:	3d01      	subs	r5, #1
  404376:	ea4f 0151 	mov.w	r1, r1, lsr #1
  40437a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  40437e:	ea4f 0242 	mov.w	r2, r2, lsl #1
  404382:	d1e1      	bne.n	404348 <__ieee754_sqrt+0x6c>
  404384:	4313      	orrs	r3, r2
  404386:	d004      	beq.n	404392 <__ieee754_sqrt+0xb6>
  404388:	1c42      	adds	r2, r0, #1
  40438a:	d041      	beq.n	404410 <__ieee754_sqrt+0x134>
  40438c:	f000 0301 	and.w	r3, r0, #1
  404390:	4418      	add	r0, r3
  404392:	0840      	lsrs	r0, r0, #1
  404394:	1073      	asrs	r3, r6, #1
  404396:	4927      	ldr	r1, [pc, #156]	; (404434 <__ieee754_sqrt+0x158>)
  404398:	4419      	add	r1, r3
  40439a:	07f3      	lsls	r3, r6, #31
  40439c:	d40f      	bmi.n	4043be <__ieee754_sqrt+0xe2>
  40439e:	eb01 5307 	add.w	r3, r1, r7, lsl #20
  4043a2:	4619      	mov	r1, r3
  4043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4043a8:	f1bc 0f00 	cmp.w	ip, #0
  4043ac:	dbd8      	blt.n	404360 <__ieee754_sqrt+0x84>
  4043ae:	f10e 0801 	add.w	r8, lr, #1
  4043b2:	e7d6      	b.n	404362 <__ieee754_sqrt+0x86>
  4043b4:	0fd1      	lsrs	r1, r2, #31
  4043b6:	0052      	lsls	r2, r2, #1
  4043b8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  4043bc:	e7a6      	b.n	40430c <__ieee754_sqrt+0x30>
  4043be:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  4043c2:	e7ec      	b.n	40439e <__ieee754_sqrt+0xc2>
  4043c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  4043c8:	4306      	orrs	r6, r0
  4043ca:	d0eb      	beq.n	4043a4 <__ieee754_sqrt+0xc8>
  4043cc:	bb39      	cbnz	r1, 40441e <__ieee754_sqrt+0x142>
  4043ce:	460f      	mov	r7, r1
  4043d0:	0ad3      	lsrs	r3, r2, #11
  4043d2:	3f15      	subs	r7, #21
  4043d4:	0552      	lsls	r2, r2, #21
  4043d6:	2b00      	cmp	r3, #0
  4043d8:	d0fa      	beq.n	4043d0 <__ieee754_sqrt+0xf4>
  4043da:	02dc      	lsls	r4, r3, #11
  4043dc:	d41b      	bmi.n	404416 <__ieee754_sqrt+0x13a>
  4043de:	2100      	movs	r1, #0
  4043e0:	005b      	lsls	r3, r3, #1
  4043e2:	3101      	adds	r1, #1
  4043e4:	02d8      	lsls	r0, r3, #11
  4043e6:	d5fb      	bpl.n	4043e0 <__ieee754_sqrt+0x104>
  4043e8:	f1c1 0401 	rsb	r4, r1, #1
  4043ec:	f1c1 0020 	rsb	r0, r1, #32
  4043f0:	fa22 f000 	lsr.w	r0, r2, r0
  4043f4:	4427      	add	r7, r4
  4043f6:	408a      	lsls	r2, r1
  4043f8:	4303      	orrs	r3, r0
  4043fa:	e77f      	b.n	4042fc <__ieee754_sqrt+0x20>
  4043fc:	4602      	mov	r2, r0
  4043fe:	460b      	mov	r3, r1
  404400:	f001 fa80 	bl	405904 <__aeabi_dmul>
  404404:	462a      	mov	r2, r5
  404406:	4623      	mov	r3, r4
  404408:	f001 f8ca 	bl	4055a0 <__adddf3>
  40440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404410:	3601      	adds	r6, #1
  404412:	4628      	mov	r0, r5
  404414:	e7be      	b.n	404394 <__ieee754_sqrt+0xb8>
  404416:	2020      	movs	r0, #32
  404418:	2401      	movs	r4, #1
  40441a:	2100      	movs	r1, #0
  40441c:	e7e8      	b.n	4043f0 <__ieee754_sqrt+0x114>
  40441e:	4602      	mov	r2, r0
  404420:	460b      	mov	r3, r1
  404422:	f001 f8bb 	bl	40559c <__aeabi_dsub>
  404426:	4602      	mov	r2, r0
  404428:	460b      	mov	r3, r1
  40442a:	f001 fb95 	bl	405b58 <__aeabi_ddiv>
  40442e:	e7b9      	b.n	4043a4 <__ieee754_sqrt+0xc8>
  404430:	7ff00000 	.word	0x7ff00000
  404434:	3fe00000 	.word	0x3fe00000

00404438 <__ieee754_atan2f>:
  404438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40443a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  40443e:	4603      	mov	r3, r0
  404440:	4606      	mov	r6, r0
  404442:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  404446:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  40444a:	dc2e      	bgt.n	4044aa <__ieee754_atan2f+0x72>
  40444c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  404450:	dc2b      	bgt.n	4044aa <__ieee754_atan2f+0x72>
  404452:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
  404456:	d030      	beq.n	4044ba <__ieee754_atan2f+0x82>
  404458:	178c      	asrs	r4, r1, #30
  40445a:	f004 0402 	and.w	r4, r4, #2
  40445e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
  404462:	b92d      	cbnz	r5, 404470 <__ieee754_atan2f+0x38>
  404464:	2c02      	cmp	r4, #2
  404466:	d025      	beq.n	4044b4 <__ieee754_atan2f+0x7c>
  404468:	2c03      	cmp	r4, #3
  40446a:	d125      	bne.n	4044b8 <__ieee754_atan2f+0x80>
  40446c:	4831      	ldr	r0, [pc, #196]	; (404534 <__ieee754_atan2f+0xfc>)
  40446e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404470:	b1bf      	cbz	r7, 4044a2 <__ieee754_atan2f+0x6a>
  404472:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  404476:	d02c      	beq.n	4044d2 <__ieee754_atan2f+0x9a>
  404478:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  40447c:	d011      	beq.n	4044a2 <__ieee754_atan2f+0x6a>
  40447e:	1bed      	subs	r5, r5, r7
  404480:	15ed      	asrs	r5, r5, #23
  404482:	2d3c      	cmp	r5, #60	; 0x3c
  404484:	dd1d      	ble.n	4044c2 <__ieee754_atan2f+0x8a>
  404486:	482c      	ldr	r0, [pc, #176]	; (404538 <__ieee754_atan2f+0x100>)
  404488:	2c01      	cmp	r4, #1
  40448a:	d035      	beq.n	4044f8 <__ieee754_atan2f+0xc0>
  40448c:	2c02      	cmp	r4, #2
  40448e:	d02b      	beq.n	4044e8 <__ieee754_atan2f+0xb0>
  404490:	2c00      	cmp	r4, #0
  404492:	d034      	beq.n	4044fe <__ieee754_atan2f+0xc6>
  404494:	4929      	ldr	r1, [pc, #164]	; (40453c <__ieee754_atan2f+0x104>)
  404496:	f001 fd4d 	bl	405f34 <__addsf3>
  40449a:	4929      	ldr	r1, [pc, #164]	; (404540 <__ieee754_atan2f+0x108>)
  40449c:	f001 fd48 	bl	405f30 <__aeabi_fsub>
  4044a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044a2:	2e00      	cmp	r6, #0
  4044a4:	db13      	blt.n	4044ce <__ieee754_atan2f+0x96>
  4044a6:	4824      	ldr	r0, [pc, #144]	; (404538 <__ieee754_atan2f+0x100>)
  4044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044aa:	4608      	mov	r0, r1
  4044ac:	4619      	mov	r1, r3
  4044ae:	f001 fd41 	bl	405f34 <__addsf3>
  4044b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044b4:	4822      	ldr	r0, [pc, #136]	; (404540 <__ieee754_atan2f+0x108>)
  4044b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  4044be:	f000 bf57 	b.w	405370 <atanf>
  4044c2:	353c      	adds	r5, #60	; 0x3c
  4044c4:	da1c      	bge.n	404500 <__ieee754_atan2f+0xc8>
  4044c6:	2900      	cmp	r1, #0
  4044c8:	da1a      	bge.n	404500 <__ieee754_atan2f+0xc8>
  4044ca:	2000      	movs	r0, #0
  4044cc:	e7dc      	b.n	404488 <__ieee754_atan2f+0x50>
  4044ce:	481d      	ldr	r0, [pc, #116]	; (404544 <__ieee754_atan2f+0x10c>)
  4044d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044d2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  4044d6:	d01b      	beq.n	404510 <__ieee754_atan2f+0xd8>
  4044d8:	2c02      	cmp	r4, #2
  4044da:	d0eb      	beq.n	4044b4 <__ieee754_atan2f+0x7c>
  4044dc:	2c03      	cmp	r4, #3
  4044de:	d0c5      	beq.n	40446c <__ieee754_atan2f+0x34>
  4044e0:	2c01      	cmp	r4, #1
  4044e2:	d01d      	beq.n	404520 <__ieee754_atan2f+0xe8>
  4044e4:	2000      	movs	r0, #0
  4044e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044e8:	4914      	ldr	r1, [pc, #80]	; (40453c <__ieee754_atan2f+0x104>)
  4044ea:	f001 fd23 	bl	405f34 <__addsf3>
  4044ee:	4601      	mov	r1, r0
  4044f0:	4813      	ldr	r0, [pc, #76]	; (404540 <__ieee754_atan2f+0x108>)
  4044f2:	f001 fd1d 	bl	405f30 <__aeabi_fsub>
  4044f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044f8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4044fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4044fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404500:	4618      	mov	r0, r3
  404502:	f001 fed3 	bl	4062ac <__aeabi_fdiv>
  404506:	f001 f839 	bl	40557c <fabsf>
  40450a:	f000 ff31 	bl	405370 <atanf>
  40450e:	e7bb      	b.n	404488 <__ieee754_atan2f+0x50>
  404510:	2c02      	cmp	r4, #2
  404512:	d00c      	beq.n	40452e <__ieee754_atan2f+0xf6>
  404514:	2c03      	cmp	r4, #3
  404516:	d008      	beq.n	40452a <__ieee754_atan2f+0xf2>
  404518:	2c01      	cmp	r4, #1
  40451a:	d004      	beq.n	404526 <__ieee754_atan2f+0xee>
  40451c:	480a      	ldr	r0, [pc, #40]	; (404548 <__ieee754_atan2f+0x110>)
  40451e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404520:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  404524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404526:	4809      	ldr	r0, [pc, #36]	; (40454c <__ieee754_atan2f+0x114>)
  404528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40452a:	4809      	ldr	r0, [pc, #36]	; (404550 <__ieee754_atan2f+0x118>)
  40452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40452e:	4809      	ldr	r0, [pc, #36]	; (404554 <__ieee754_atan2f+0x11c>)
  404530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404532:	bf00      	nop
  404534:	c0490fdb 	.word	0xc0490fdb
  404538:	3fc90fdb 	.word	0x3fc90fdb
  40453c:	33bbbd2e 	.word	0x33bbbd2e
  404540:	40490fdb 	.word	0x40490fdb
  404544:	bfc90fdb 	.word	0xbfc90fdb
  404548:	3f490fdb 	.word	0x3f490fdb
  40454c:	bf490fdb 	.word	0xbf490fdb
  404550:	c016cbe4 	.word	0xc016cbe4
  404554:	4016cbe4 	.word	0x4016cbe4

00404558 <__kernel_cos>:
  404558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40455c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404560:	b085      	sub	sp, #20
  404562:	460c      	mov	r4, r1
  404564:	4692      	mov	sl, r2
  404566:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
  40456a:	469b      	mov	fp, r3
  40456c:	4605      	mov	r5, r0
  40456e:	da6b      	bge.n	404648 <__kernel_cos+0xf0>
  404570:	f001 fc62 	bl	405e38 <__aeabi_d2iz>
  404574:	2800      	cmp	r0, #0
  404576:	f000 80e7 	beq.w	404748 <__kernel_cos+0x1f0>
  40457a:	462a      	mov	r2, r5
  40457c:	4623      	mov	r3, r4
  40457e:	4628      	mov	r0, r5
  404580:	4621      	mov	r1, r4
  404582:	f001 f9bf 	bl	405904 <__aeabi_dmul>
  404586:	4680      	mov	r8, r0
  404588:	4689      	mov	r9, r1
  40458a:	a373      	add	r3, pc, #460	; (adr r3, 404758 <__kernel_cos+0x200>)
  40458c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404590:	f001 f9b8 	bl	405904 <__aeabi_dmul>
  404594:	a372      	add	r3, pc, #456	; (adr r3, 404760 <__kernel_cos+0x208>)
  404596:	e9d3 2300 	ldrd	r2, r3, [r3]
  40459a:	f001 f801 	bl	4055a0 <__adddf3>
  40459e:	4642      	mov	r2, r8
  4045a0:	464b      	mov	r3, r9
  4045a2:	f001 f9af 	bl	405904 <__aeabi_dmul>
  4045a6:	a370      	add	r3, pc, #448	; (adr r3, 404768 <__kernel_cos+0x210>)
  4045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045ac:	f000 fff6 	bl	40559c <__aeabi_dsub>
  4045b0:	4642      	mov	r2, r8
  4045b2:	464b      	mov	r3, r9
  4045b4:	f001 f9a6 	bl	405904 <__aeabi_dmul>
  4045b8:	a36d      	add	r3, pc, #436	; (adr r3, 404770 <__kernel_cos+0x218>)
  4045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045be:	f000 ffef 	bl	4055a0 <__adddf3>
  4045c2:	4642      	mov	r2, r8
  4045c4:	464b      	mov	r3, r9
  4045c6:	f001 f99d 	bl	405904 <__aeabi_dmul>
  4045ca:	a36b      	add	r3, pc, #428	; (adr r3, 404778 <__kernel_cos+0x220>)
  4045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045d0:	f000 ffe4 	bl	40559c <__aeabi_dsub>
  4045d4:	4642      	mov	r2, r8
  4045d6:	464b      	mov	r3, r9
  4045d8:	f001 f994 	bl	405904 <__aeabi_dmul>
  4045dc:	a368      	add	r3, pc, #416	; (adr r3, 404780 <__kernel_cos+0x228>)
  4045de:	e9d3 2300 	ldrd	r2, r3, [r3]
  4045e2:	f000 ffdd 	bl	4055a0 <__adddf3>
  4045e6:	4642      	mov	r2, r8
  4045e8:	464b      	mov	r3, r9
  4045ea:	f001 f98b 	bl	405904 <__aeabi_dmul>
  4045ee:	e9cd 0100 	strd	r0, r1, [sp]
  4045f2:	4640      	mov	r0, r8
  4045f4:	4649      	mov	r1, r9
  4045f6:	2200      	movs	r2, #0
  4045f8:	4b63      	ldr	r3, [pc, #396]	; (404788 <__kernel_cos+0x230>)
  4045fa:	f001 f983 	bl	405904 <__aeabi_dmul>
  4045fe:	4606      	mov	r6, r0
  404600:	460f      	mov	r7, r1
  404602:	4640      	mov	r0, r8
  404604:	4649      	mov	r1, r9
  404606:	e9dd 2300 	ldrd	r2, r3, [sp]
  40460a:	f001 f97b 	bl	405904 <__aeabi_dmul>
  40460e:	4680      	mov	r8, r0
  404610:	4689      	mov	r9, r1
  404612:	4652      	mov	r2, sl
  404614:	465b      	mov	r3, fp
  404616:	4628      	mov	r0, r5
  404618:	4621      	mov	r1, r4
  40461a:	f001 f973 	bl	405904 <__aeabi_dmul>
  40461e:	4602      	mov	r2, r0
  404620:	460b      	mov	r3, r1
  404622:	4640      	mov	r0, r8
  404624:	4649      	mov	r1, r9
  404626:	f000 ffb9 	bl	40559c <__aeabi_dsub>
  40462a:	4602      	mov	r2, r0
  40462c:	460b      	mov	r3, r1
  40462e:	4630      	mov	r0, r6
  404630:	4639      	mov	r1, r7
  404632:	f000 ffb3 	bl	40559c <__aeabi_dsub>
  404636:	4602      	mov	r2, r0
  404638:	460b      	mov	r3, r1
  40463a:	2000      	movs	r0, #0
  40463c:	4953      	ldr	r1, [pc, #332]	; (40478c <__kernel_cos+0x234>)
  40463e:	f000 ffad 	bl	40559c <__aeabi_dsub>
  404642:	b005      	add	sp, #20
  404644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404648:	4602      	mov	r2, r0
  40464a:	460b      	mov	r3, r1
  40464c:	f001 f95a 	bl	405904 <__aeabi_dmul>
  404650:	4680      	mov	r8, r0
  404652:	4689      	mov	r9, r1
  404654:	a340      	add	r3, pc, #256	; (adr r3, 404758 <__kernel_cos+0x200>)
  404656:	e9d3 2300 	ldrd	r2, r3, [r3]
  40465a:	f001 f953 	bl	405904 <__aeabi_dmul>
  40465e:	a340      	add	r3, pc, #256	; (adr r3, 404760 <__kernel_cos+0x208>)
  404660:	e9d3 2300 	ldrd	r2, r3, [r3]
  404664:	f000 ff9c 	bl	4055a0 <__adddf3>
  404668:	4642      	mov	r2, r8
  40466a:	464b      	mov	r3, r9
  40466c:	f001 f94a 	bl	405904 <__aeabi_dmul>
  404670:	a33d      	add	r3, pc, #244	; (adr r3, 404768 <__kernel_cos+0x210>)
  404672:	e9d3 2300 	ldrd	r2, r3, [r3]
  404676:	f000 ff91 	bl	40559c <__aeabi_dsub>
  40467a:	4642      	mov	r2, r8
  40467c:	464b      	mov	r3, r9
  40467e:	f001 f941 	bl	405904 <__aeabi_dmul>
  404682:	a33b      	add	r3, pc, #236	; (adr r3, 404770 <__kernel_cos+0x218>)
  404684:	e9d3 2300 	ldrd	r2, r3, [r3]
  404688:	f000 ff8a 	bl	4055a0 <__adddf3>
  40468c:	4642      	mov	r2, r8
  40468e:	464b      	mov	r3, r9
  404690:	f001 f938 	bl	405904 <__aeabi_dmul>
  404694:	a338      	add	r3, pc, #224	; (adr r3, 404778 <__kernel_cos+0x220>)
  404696:	e9d3 2300 	ldrd	r2, r3, [r3]
  40469a:	f000 ff7f 	bl	40559c <__aeabi_dsub>
  40469e:	4642      	mov	r2, r8
  4046a0:	464b      	mov	r3, r9
  4046a2:	f001 f92f 	bl	405904 <__aeabi_dmul>
  4046a6:	a336      	add	r3, pc, #216	; (adr r3, 404780 <__kernel_cos+0x228>)
  4046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4046ac:	f000 ff78 	bl	4055a0 <__adddf3>
  4046b0:	464b      	mov	r3, r9
  4046b2:	4642      	mov	r2, r8
  4046b4:	f001 f926 	bl	405904 <__aeabi_dmul>
  4046b8:	4b35      	ldr	r3, [pc, #212]	; (404790 <__kernel_cos+0x238>)
  4046ba:	429f      	cmp	r7, r3
  4046bc:	e9cd 0100 	strd	r0, r1, [sp]
  4046c0:	dd97      	ble.n	4045f2 <__kernel_cos+0x9a>
  4046c2:	4b34      	ldr	r3, [pc, #208]	; (404794 <__kernel_cos+0x23c>)
  4046c4:	2200      	movs	r2, #0
  4046c6:	429f      	cmp	r7, r3
  4046c8:	dc38      	bgt.n	40473c <__kernel_cos+0x1e4>
  4046ca:	f5a7 1300 	sub.w	r3, r7, #2097152	; 0x200000
  4046ce:	2000      	movs	r0, #0
  4046d0:	492e      	ldr	r1, [pc, #184]	; (40478c <__kernel_cos+0x234>)
  4046d2:	4616      	mov	r6, r2
  4046d4:	461f      	mov	r7, r3
  4046d6:	f000 ff61 	bl	40559c <__aeabi_dsub>
  4046da:	e9cd 0102 	strd	r0, r1, [sp, #8]
  4046de:	4640      	mov	r0, r8
  4046e0:	4649      	mov	r1, r9
  4046e2:	2200      	movs	r2, #0
  4046e4:	4b28      	ldr	r3, [pc, #160]	; (404788 <__kernel_cos+0x230>)
  4046e6:	f001 f90d 	bl	405904 <__aeabi_dmul>
  4046ea:	4632      	mov	r2, r6
  4046ec:	463b      	mov	r3, r7
  4046ee:	f000 ff55 	bl	40559c <__aeabi_dsub>
  4046f2:	4606      	mov	r6, r0
  4046f4:	460f      	mov	r7, r1
  4046f6:	4640      	mov	r0, r8
  4046f8:	4649      	mov	r1, r9
  4046fa:	e9dd 2300 	ldrd	r2, r3, [sp]
  4046fe:	f001 f901 	bl	405904 <__aeabi_dmul>
  404702:	4680      	mov	r8, r0
  404704:	4689      	mov	r9, r1
  404706:	4652      	mov	r2, sl
  404708:	465b      	mov	r3, fp
  40470a:	4628      	mov	r0, r5
  40470c:	4621      	mov	r1, r4
  40470e:	f001 f8f9 	bl	405904 <__aeabi_dmul>
  404712:	4602      	mov	r2, r0
  404714:	460b      	mov	r3, r1
  404716:	4640      	mov	r0, r8
  404718:	4649      	mov	r1, r9
  40471a:	f000 ff3f 	bl	40559c <__aeabi_dsub>
  40471e:	4602      	mov	r2, r0
  404720:	460b      	mov	r3, r1
  404722:	4630      	mov	r0, r6
  404724:	4639      	mov	r1, r7
  404726:	f000 ff39 	bl	40559c <__aeabi_dsub>
  40472a:	4602      	mov	r2, r0
  40472c:	460b      	mov	r3, r1
  40472e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404732:	f000 ff33 	bl	40559c <__aeabi_dsub>
  404736:	b005      	add	sp, #20
  404738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40473c:	4b16      	ldr	r3, [pc, #88]	; (404798 <__kernel_cos+0x240>)
  40473e:	2600      	movs	r6, #0
  404740:	4f16      	ldr	r7, [pc, #88]	; (40479c <__kernel_cos+0x244>)
  404742:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404746:	e7ca      	b.n	4046de <__kernel_cos+0x186>
  404748:	2000      	movs	r0, #0
  40474a:	4910      	ldr	r1, [pc, #64]	; (40478c <__kernel_cos+0x234>)
  40474c:	b005      	add	sp, #20
  40474e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404752:	bf00      	nop
  404754:	f3af 8000 	nop.w
  404758:	be8838d4 	.word	0xbe8838d4
  40475c:	bda8fae9 	.word	0xbda8fae9
  404760:	bdb4b1c4 	.word	0xbdb4b1c4
  404764:	3e21ee9e 	.word	0x3e21ee9e
  404768:	809c52ad 	.word	0x809c52ad
  40476c:	3e927e4f 	.word	0x3e927e4f
  404770:	19cb1590 	.word	0x19cb1590
  404774:	3efa01a0 	.word	0x3efa01a0
  404778:	16c15177 	.word	0x16c15177
  40477c:	3f56c16c 	.word	0x3f56c16c
  404780:	5555554c 	.word	0x5555554c
  404784:	3fa55555 	.word	0x3fa55555
  404788:	3fe00000 	.word	0x3fe00000
  40478c:	3ff00000 	.word	0x3ff00000
  404790:	3fd33332 	.word	0x3fd33332
  404794:	3fe90000 	.word	0x3fe90000
  404798:	3fe70000 	.word	0x3fe70000
  40479c:	3fd20000 	.word	0x3fd20000

004047a0 <__kernel_rem_pio2>:
  4047a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4047a4:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  4047a8:	461e      	mov	r6, r3
  4047aa:	4c84      	ldr	r4, [pc, #528]	; (4049bc <__kernel_rem_pio2+0x21c>)
  4047ac:	930c      	str	r3, [sp, #48]	; 0x30
  4047ae:	1ed3      	subs	r3, r2, #3
  4047b0:	9004      	str	r0, [sp, #16]
  4047b2:	3e01      	subs	r6, #1
  4047b4:	fb84 0403 	smull	r0, r4, r4, r3
  4047b8:	17db      	asrs	r3, r3, #31
  4047ba:	4d81      	ldr	r5, [pc, #516]	; (4049c0 <__kernel_rem_pio2+0x220>)
  4047bc:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
  4047c0:	98a6      	ldr	r0, [sp, #664]	; 0x298
  4047c2:	910a      	str	r1, [sp, #40]	; 0x28
  4047c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4047c8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  4047cc:	9603      	str	r6, [sp, #12]
  4047ce:	4619      	mov	r1, r3
  4047d0:	930d      	str	r3, [sp, #52]	; 0x34
  4047d2:	43db      	mvns	r3, r3
  4047d4:	1834      	adds	r4, r6, r0
  4047d6:	9009      	str	r0, [sp, #36]	; 0x24
  4047d8:	eba1 0506 	sub.w	r5, r1, r6
  4047dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  4047e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4047e4:	9308      	str	r3, [sp, #32]
  4047e6:	d416      	bmi.n	404816 <__kernel_rem_pio2+0x76>
  4047e8:	442c      	add	r4, r5
  4047ea:	ae22      	add	r6, sp, #136	; 0x88
  4047ec:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  4047ee:	3401      	adds	r4, #1
  4047f0:	e008      	b.n	404804 <__kernel_rem_pio2+0x64>
  4047f2:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  4047f6:	3501      	adds	r5, #1
  4047f8:	f001 f81e 	bl	405838 <__aeabi_i2d>
  4047fc:	42a5      	cmp	r5, r4
  4047fe:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404802:	d008      	beq.n	404816 <__kernel_rem_pio2+0x76>
  404804:	2d00      	cmp	r5, #0
  404806:	daf4      	bge.n	4047f2 <__kernel_rem_pio2+0x52>
  404808:	3501      	adds	r5, #1
  40480a:	2000      	movs	r0, #0
  40480c:	2100      	movs	r1, #0
  40480e:	42a5      	cmp	r5, r4
  404810:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404814:	d1f6      	bne.n	404804 <__kernel_rem_pio2+0x64>
  404816:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404818:	2b00      	cmp	r3, #0
  40481a:	db31      	blt.n	404880 <__kernel_rem_pio2+0xe0>
  40481c:	a974      	add	r1, sp, #464	; 0x1d0
  40481e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404822:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
  404826:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  40482a:	a924      	add	r1, sp, #144	; 0x90
  40482c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  404830:	9a03      	ldr	r2, [sp, #12]
  404832:	00db      	lsls	r3, r3, #3
  404834:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
  404838:	9300      	str	r3, [sp, #0]
  40483a:	9b03      	ldr	r3, [sp, #12]
  40483c:	2b00      	cmp	r3, #0
  40483e:	f2c0 8195 	blt.w	404b6c <__kernel_rem_pio2+0x3cc>
  404842:	9b04      	ldr	r3, [sp, #16]
  404844:	4644      	mov	r4, r8
  404846:	2600      	movs	r6, #0
  404848:	2700      	movs	r7, #0
  40484a:	f1a3 0a08 	sub.w	sl, r3, #8
  40484e:	9b00      	ldr	r3, [sp, #0]
  404850:	eb08 0503 	add.w	r5, r8, r3
  404854:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  404858:	e874 0102 	ldrd	r0, r1, [r4], #-8
  40485c:	f001 f852 	bl	405904 <__aeabi_dmul>
  404860:	4602      	mov	r2, r0
  404862:	460b      	mov	r3, r1
  404864:	4630      	mov	r0, r6
  404866:	4639      	mov	r1, r7
  404868:	f000 fe9a 	bl	4055a0 <__adddf3>
  40486c:	42ac      	cmp	r4, r5
  40486e:	4606      	mov	r6, r0
  404870:	460f      	mov	r7, r1
  404872:	d1ef      	bne.n	404854 <__kernel_rem_pio2+0xb4>
  404874:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  404878:	45d9      	cmp	r9, fp
  40487a:	f108 0808 	add.w	r8, r8, #8
  40487e:	d1dc      	bne.n	40483a <__kernel_rem_pio2+0x9a>
  404880:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404882:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  404886:	a910      	add	r1, sp, #64	; 0x40
  404888:	4413      	add	r3, r2
  40488a:	4693      	mov	fp, r2
  40488c:	009b      	lsls	r3, r3, #2
  40488e:	1d1a      	adds	r2, r3, #4
  404890:	440b      	add	r3, r1
  404892:	930e      	str	r3, [sp, #56]	; 0x38
  404894:	460b      	mov	r3, r1
  404896:	4413      	add	r3, r2
  404898:	930f      	str	r3, [sp, #60]	; 0x3c
  40489a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  40489e:	a99c      	add	r1, sp, #624	; 0x270
  4048a0:	f1bb 0f00 	cmp.w	fp, #0
  4048a4:	461a      	mov	r2, r3
  4048a6:	9306      	str	r3, [sp, #24]
  4048a8:	440b      	add	r3, r1
  4048aa:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  4048ae:	dd28      	ble.n	404902 <__kernel_rem_pio2+0x162>
  4048b0:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
  4048b4:	af0f      	add	r7, sp, #60	; 0x3c
  4048b6:	eb0a 0602 	add.w	r6, sl, r2
  4048ba:	2200      	movs	r2, #0
  4048bc:	4b41      	ldr	r3, [pc, #260]	; (4049c4 <__kernel_rem_pio2+0x224>)
  4048be:	4620      	mov	r0, r4
  4048c0:	4629      	mov	r1, r5
  4048c2:	f001 f81f 	bl	405904 <__aeabi_dmul>
  4048c6:	f001 fab7 	bl	405e38 <__aeabi_d2iz>
  4048ca:	f000 ffb5 	bl	405838 <__aeabi_i2d>
  4048ce:	2200      	movs	r2, #0
  4048d0:	4b3d      	ldr	r3, [pc, #244]	; (4049c8 <__kernel_rem_pio2+0x228>)
  4048d2:	4680      	mov	r8, r0
  4048d4:	4689      	mov	r9, r1
  4048d6:	f001 f815 	bl	405904 <__aeabi_dmul>
  4048da:	4602      	mov	r2, r0
  4048dc:	460b      	mov	r3, r1
  4048de:	4620      	mov	r0, r4
  4048e0:	4629      	mov	r1, r5
  4048e2:	f000 fe5b 	bl	40559c <__aeabi_dsub>
  4048e6:	f001 faa7 	bl	405e38 <__aeabi_d2iz>
  4048ea:	4649      	mov	r1, r9
  4048ec:	f847 0f04 	str.w	r0, [r7, #4]!
  4048f0:	4640      	mov	r0, r8
  4048f2:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
  4048f6:	f000 fe53 	bl	4055a0 <__adddf3>
  4048fa:	4604      	mov	r4, r0
  4048fc:	4556      	cmp	r6, sl
  4048fe:	460d      	mov	r5, r1
  404900:	d1db      	bne.n	4048ba <__kernel_rem_pio2+0x11a>
  404902:	f8dd 9020 	ldr.w	r9, [sp, #32]
  404906:	4620      	mov	r0, r4
  404908:	4629      	mov	r1, r5
  40490a:	464a      	mov	r2, r9
  40490c:	f000 fcb0 	bl	405270 <scalbn>
  404910:	2200      	movs	r2, #0
  404912:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  404916:	4604      	mov	r4, r0
  404918:	460d      	mov	r5, r1
  40491a:	f000 fff3 	bl	405904 <__aeabi_dmul>
  40491e:	f000 fbfb 	bl	405118 <floor>
  404922:	2200      	movs	r2, #0
  404924:	4b29      	ldr	r3, [pc, #164]	; (4049cc <__kernel_rem_pio2+0x22c>)
  404926:	f000 ffed 	bl	405904 <__aeabi_dmul>
  40492a:	4602      	mov	r2, r0
  40492c:	460b      	mov	r3, r1
  40492e:	4620      	mov	r0, r4
  404930:	4629      	mov	r1, r5
  404932:	f000 fe33 	bl	40559c <__aeabi_dsub>
  404936:	460d      	mov	r5, r1
  404938:	4604      	mov	r4, r0
  40493a:	f001 fa7d 	bl	405e38 <__aeabi_d2iz>
  40493e:	4680      	mov	r8, r0
  404940:	f000 ff7a 	bl	405838 <__aeabi_i2d>
  404944:	460b      	mov	r3, r1
  404946:	4602      	mov	r2, r0
  404948:	4629      	mov	r1, r5
  40494a:	4620      	mov	r0, r4
  40494c:	f000 fe26 	bl	40559c <__aeabi_dsub>
  404950:	464b      	mov	r3, r9
  404952:	4606      	mov	r6, r0
  404954:	460f      	mov	r7, r1
  404956:	2b00      	cmp	r3, #0
  404958:	f340 80f4 	ble.w	404b44 <__kernel_rem_pio2+0x3a4>
  40495c:	f10b 30ff 	add.w	r0, fp, #4294967295
  404960:	ab10      	add	r3, sp, #64	; 0x40
  404962:	f1c9 0218 	rsb	r2, r9, #24
  404966:	f1c9 0117 	rsb	r1, r9, #23
  40496a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  40496e:	fa43 f402 	asr.w	r4, r3, r2
  404972:	fa04 f502 	lsl.w	r5, r4, r2
  404976:	44a0      	add	r8, r4
  404978:	1b5d      	subs	r5, r3, r5
  40497a:	ab10      	add	r3, sp, #64	; 0x40
  40497c:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  404980:	410d      	asrs	r5, r1
  404982:	2d00      	cmp	r5, #0
  404984:	dd2c      	ble.n	4049e0 <__kernel_rem_pio2+0x240>
  404986:	f1bb 0f00 	cmp.w	fp, #0
  40498a:	f108 0801 	add.w	r8, r8, #1
  40498e:	f340 80ab 	ble.w	404ae8 <__kernel_rem_pio2+0x348>
  404992:	2300      	movs	r3, #0
  404994:	aa0f      	add	r2, sp, #60	; 0x3c
  404996:	461c      	mov	r4, r3
  404998:	e008      	b.n	4049ac <__kernel_rem_pio2+0x20c>
  40499a:	f1c0 7180 	rsb	r1, r0, #16777216	; 0x1000000
  40499e:	b108      	cbz	r0, 4049a4 <__kernel_rem_pio2+0x204>
  4049a0:	2401      	movs	r4, #1
  4049a2:	6011      	str	r1, [r2, #0]
  4049a4:	3301      	adds	r3, #1
  4049a6:	459b      	cmp	fp, r3
  4049a8:	f340 809f 	ble.w	404aea <__kernel_rem_pio2+0x34a>
  4049ac:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  4049b0:	f852 0f04 	ldr.w	r0, [r2, #4]!
  4049b4:	2c00      	cmp	r4, #0
  4049b6:	d0f0      	beq.n	40499a <__kernel_rem_pio2+0x1fa>
  4049b8:	1a09      	subs	r1, r1, r0
  4049ba:	e7f1      	b.n	4049a0 <__kernel_rem_pio2+0x200>
  4049bc:	2aaaaaab 	.word	0x2aaaaaab
  4049c0:	0040ad08 	.word	0x0040ad08
  4049c4:	3e700000 	.word	0x3e700000
  4049c8:	41700000 	.word	0x41700000
  4049cc:	40200000 	.word	0x40200000
  4049d0:	2200      	movs	r2, #0
  4049d2:	4bb2      	ldr	r3, [pc, #712]	; (404c9c <__kernel_rem_pio2+0x4fc>)
  4049d4:	f001 fa1c 	bl	405e10 <__aeabi_dcmpge>
  4049d8:	2800      	cmp	r0, #0
  4049da:	f040 80d1 	bne.w	404b80 <__kernel_rem_pio2+0x3e0>
  4049de:	4605      	mov	r5, r0
  4049e0:	4630      	mov	r0, r6
  4049e2:	4639      	mov	r1, r7
  4049e4:	2200      	movs	r2, #0
  4049e6:	2300      	movs	r3, #0
  4049e8:	f001 f9f4 	bl	405dd4 <__aeabi_dcmpeq>
  4049ec:	2800      	cmp	r0, #0
  4049ee:	f000 80d9 	beq.w	404ba4 <__kernel_rem_pio2+0x404>
  4049f2:	f10b 3aff 	add.w	sl, fp, #4294967295
  4049f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4049f8:	4553      	cmp	r3, sl
  4049fa:	dc0d      	bgt.n	404a18 <__kernel_rem_pio2+0x278>
  4049fc:	ab10      	add	r3, sp, #64	; 0x40
  4049fe:	2200      	movs	r2, #0
  404a00:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404a02:	eb03 038b 	add.w	r3, r3, fp, lsl #2
  404a06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  404a0a:	4283      	cmp	r3, r0
  404a0c:	ea42 0201 	orr.w	r2, r2, r1
  404a10:	d1f9      	bne.n	404a06 <__kernel_rem_pio2+0x266>
  404a12:	2a00      	cmp	r2, #0
  404a14:	f040 8229 	bne.w	404e6a <__kernel_rem_pio2+0x6ca>
  404a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404a1a:	aa10      	add	r2, sp, #64	; 0x40
  404a1c:	3b01      	subs	r3, #1
  404a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404a22:	2b00      	cmp	r3, #0
  404a24:	f040 8239 	bne.w	404e9a <__kernel_rem_pio2+0x6fa>
  404a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404a2a:	2301      	movs	r3, #1
  404a2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  404a30:	3301      	adds	r3, #1
  404a32:	2900      	cmp	r1, #0
  404a34:	d0fa      	beq.n	404a2c <__kernel_rem_pio2+0x28c>
  404a36:	445b      	add	r3, fp
  404a38:	461a      	mov	r2, r3
  404a3a:	930b      	str	r3, [sp, #44]	; 0x2c
  404a3c:	f10b 0301 	add.w	r3, fp, #1
  404a40:	4293      	cmp	r3, r2
  404a42:	dc4b      	bgt.n	404adc <__kernel_rem_pio2+0x33c>
  404a44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404a46:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
  404a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404a4c:	f04f 0800 	mov.w	r8, #0
  404a50:	4413      	add	r3, r2
  404a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404a54:	445a      	add	r2, fp
  404a56:	4499      	add	r9, r3
  404a58:	ebcb 0b01 	rsb	fp, fp, r1
  404a5c:	00d3      	lsls	r3, r2, #3
  404a5e:	9aa7      	ldr	r2, [sp, #668]	; 0x29c
  404a60:	eb02 0289 	add.w	r2, r2, r9, lsl #2
  404a64:	9307      	str	r3, [sp, #28]
  404a66:	9200      	str	r2, [sp, #0]
  404a68:	ea4f 02cb 	mov.w	r2, fp, lsl #3
  404a6c:	9205      	str	r2, [sp, #20]
  404a6e:	aa24      	add	r2, sp, #144	; 0x90
  404a70:	eb02 0b03 	add.w	fp, r2, r3
  404a74:	aa74      	add	r2, sp, #464	; 0x1d0
  404a76:	9b06      	ldr	r3, [sp, #24]
  404a78:	eb02 0a03 	add.w	sl, r2, r3
  404a7c:	9b00      	ldr	r3, [sp, #0]
  404a7e:	f853 0f04 	ldr.w	r0, [r3, #4]!
  404a82:	9300      	str	r3, [sp, #0]
  404a84:	f000 fed8 	bl	405838 <__aeabi_i2d>
  404a88:	9b03      	ldr	r3, [sp, #12]
  404a8a:	2b00      	cmp	r3, #0
  404a8c:	e8eb 0102 	strd	r0, r1, [fp], #8
  404a90:	db27      	blt.n	404ae2 <__kernel_rem_pio2+0x342>
  404a92:	9b07      	ldr	r3, [sp, #28]
  404a94:	2600      	movs	r6, #0
  404a96:	2700      	movs	r7, #0
  404a98:	eb03 0408 	add.w	r4, r3, r8
  404a9c:	9b06      	ldr	r3, [sp, #24]
  404a9e:	eb08 0503 	add.w	r5, r8, r3
  404aa2:	9b04      	ldr	r3, [sp, #16]
  404aa4:	f1a3 0908 	sub.w	r9, r3, #8
  404aa8:	ab24      	add	r3, sp, #144	; 0x90
  404aaa:	441c      	add	r4, r3
  404aac:	441d      	add	r5, r3
  404aae:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  404ab2:	e874 0102 	ldrd	r0, r1, [r4], #-8
  404ab6:	f000 ff25 	bl	405904 <__aeabi_dmul>
  404aba:	4602      	mov	r2, r0
  404abc:	460b      	mov	r3, r1
  404abe:	4630      	mov	r0, r6
  404ac0:	4639      	mov	r1, r7
  404ac2:	f000 fd6d 	bl	4055a0 <__adddf3>
  404ac6:	42ac      	cmp	r4, r5
  404ac8:	4606      	mov	r6, r0
  404aca:	460f      	mov	r7, r1
  404acc:	d1ef      	bne.n	404aae <__kernel_rem_pio2+0x30e>
  404ace:	f108 0808 	add.w	r8, r8, #8
  404ad2:	9b05      	ldr	r3, [sp, #20]
  404ad4:	4598      	cmp	r8, r3
  404ad6:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  404ada:	d1cf      	bne.n	404a7c <__kernel_rem_pio2+0x2dc>
  404adc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404ae0:	e6db      	b.n	40489a <__kernel_rem_pio2+0xfa>
  404ae2:	2600      	movs	r6, #0
  404ae4:	2700      	movs	r7, #0
  404ae6:	e7f2      	b.n	404ace <__kernel_rem_pio2+0x32e>
  404ae8:	2400      	movs	r4, #0
  404aea:	9b08      	ldr	r3, [sp, #32]
  404aec:	2b00      	cmp	r3, #0
  404aee:	dd0d      	ble.n	404b0c <__kernel_rem_pio2+0x36c>
  404af0:	2b01      	cmp	r3, #1
  404af2:	d030      	beq.n	404b56 <__kernel_rem_pio2+0x3b6>
  404af4:	2b02      	cmp	r3, #2
  404af6:	d109      	bne.n	404b0c <__kernel_rem_pio2+0x36c>
  404af8:	f10b 32ff 	add.w	r2, fp, #4294967295
  404afc:	ab10      	add	r3, sp, #64	; 0x40
  404afe:	a910      	add	r1, sp, #64	; 0x40
  404b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404b04:	f3c3 0315 	ubfx	r3, r3, #0, #22
  404b08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  404b0c:	2d02      	cmp	r5, #2
  404b0e:	f47f af67 	bne.w	4049e0 <__kernel_rem_pio2+0x240>
  404b12:	4632      	mov	r2, r6
  404b14:	463b      	mov	r3, r7
  404b16:	2000      	movs	r0, #0
  404b18:	4961      	ldr	r1, [pc, #388]	; (404ca0 <__kernel_rem_pio2+0x500>)
  404b1a:	f000 fd3f 	bl	40559c <__aeabi_dsub>
  404b1e:	4606      	mov	r6, r0
  404b20:	460f      	mov	r7, r1
  404b22:	2c00      	cmp	r4, #0
  404b24:	f43f af5c 	beq.w	4049e0 <__kernel_rem_pio2+0x240>
  404b28:	9a08      	ldr	r2, [sp, #32]
  404b2a:	2000      	movs	r0, #0
  404b2c:	495c      	ldr	r1, [pc, #368]	; (404ca0 <__kernel_rem_pio2+0x500>)
  404b2e:	f000 fb9f 	bl	405270 <scalbn>
  404b32:	4602      	mov	r2, r0
  404b34:	460b      	mov	r3, r1
  404b36:	4630      	mov	r0, r6
  404b38:	4639      	mov	r1, r7
  404b3a:	f000 fd2f 	bl	40559c <__aeabi_dsub>
  404b3e:	4606      	mov	r6, r0
  404b40:	460f      	mov	r7, r1
  404b42:	e74d      	b.n	4049e0 <__kernel_rem_pio2+0x240>
  404b44:	f47f af44 	bne.w	4049d0 <__kernel_rem_pio2+0x230>
  404b48:	f10b 33ff 	add.w	r3, fp, #4294967295
  404b4c:	aa10      	add	r2, sp, #64	; 0x40
  404b4e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  404b52:	15ed      	asrs	r5, r5, #23
  404b54:	e715      	b.n	404982 <__kernel_rem_pio2+0x1e2>
  404b56:	f10b 32ff 	add.w	r2, fp, #4294967295
  404b5a:	ab10      	add	r3, sp, #64	; 0x40
  404b5c:	a910      	add	r1, sp, #64	; 0x40
  404b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404b62:	f3c3 0316 	ubfx	r3, r3, #0, #23
  404b66:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  404b6a:	e7cf      	b.n	404b0c <__kernel_rem_pio2+0x36c>
  404b6c:	2600      	movs	r6, #0
  404b6e:	2700      	movs	r7, #0
  404b70:	f108 0808 	add.w	r8, r8, #8
  404b74:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  404b78:	45d9      	cmp	r9, fp
  404b7a:	f47f ae5e 	bne.w	40483a <__kernel_rem_pio2+0x9a>
  404b7e:	e67f      	b.n	404880 <__kernel_rem_pio2+0xe0>
  404b80:	f1bb 0f00 	cmp.w	fp, #0
  404b84:	f108 0801 	add.w	r8, r8, #1
  404b88:	bfc8      	it	gt
  404b8a:	2502      	movgt	r5, #2
  404b8c:	f73f af01 	bgt.w	404992 <__kernel_rem_pio2+0x1f2>
  404b90:	4632      	mov	r2, r6
  404b92:	463b      	mov	r3, r7
  404b94:	2000      	movs	r0, #0
  404b96:	4942      	ldr	r1, [pc, #264]	; (404ca0 <__kernel_rem_pio2+0x500>)
  404b98:	f000 fd00 	bl	40559c <__aeabi_dsub>
  404b9c:	2502      	movs	r5, #2
  404b9e:	4606      	mov	r6, r0
  404ba0:	460f      	mov	r7, r1
  404ba2:	e71d      	b.n	4049e0 <__kernel_rem_pio2+0x240>
  404ba4:	9b08      	ldr	r3, [sp, #32]
  404ba6:	4630      	mov	r0, r6
  404ba8:	4639      	mov	r1, r7
  404baa:	9503      	str	r5, [sp, #12]
  404bac:	425a      	negs	r2, r3
  404bae:	f8cd 8014 	str.w	r8, [sp, #20]
  404bb2:	f000 fb5d 	bl	405270 <scalbn>
  404bb6:	2200      	movs	r2, #0
  404bb8:	4b3a      	ldr	r3, [pc, #232]	; (404ca4 <__kernel_rem_pio2+0x504>)
  404bba:	4604      	mov	r4, r0
  404bbc:	460d      	mov	r5, r1
  404bbe:	f001 f927 	bl	405e10 <__aeabi_dcmpge>
  404bc2:	2800      	cmp	r0, #0
  404bc4:	f000 81e2 	beq.w	404f8c <__kernel_rem_pio2+0x7ec>
  404bc8:	2200      	movs	r2, #0
  404bca:	4b37      	ldr	r3, [pc, #220]	; (404ca8 <__kernel_rem_pio2+0x508>)
  404bcc:	4620      	mov	r0, r4
  404bce:	4629      	mov	r1, r5
  404bd0:	f000 fe98 	bl	405904 <__aeabi_dmul>
  404bd4:	9b08      	ldr	r3, [sp, #32]
  404bd6:	f10b 0a01 	add.w	sl, fp, #1
  404bda:	3318      	adds	r3, #24
  404bdc:	9308      	str	r3, [sp, #32]
  404bde:	f001 f92b 	bl	405e38 <__aeabi_d2iz>
  404be2:	4606      	mov	r6, r0
  404be4:	f000 fe28 	bl	405838 <__aeabi_i2d>
  404be8:	2200      	movs	r2, #0
  404bea:	4b2e      	ldr	r3, [pc, #184]	; (404ca4 <__kernel_rem_pio2+0x504>)
  404bec:	f000 fe8a 	bl	405904 <__aeabi_dmul>
  404bf0:	460b      	mov	r3, r1
  404bf2:	4602      	mov	r2, r0
  404bf4:	4629      	mov	r1, r5
  404bf6:	4620      	mov	r0, r4
  404bf8:	f000 fcd0 	bl	40559c <__aeabi_dsub>
  404bfc:	f001 f91c 	bl	405e38 <__aeabi_d2iz>
  404c00:	ab10      	add	r3, sp, #64	; 0x40
  404c02:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  404c06:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
  404c0a:	9a08      	ldr	r2, [sp, #32]
  404c0c:	2000      	movs	r0, #0
  404c0e:	4924      	ldr	r1, [pc, #144]	; (404ca0 <__kernel_rem_pio2+0x500>)
  404c10:	f000 fb2e 	bl	405270 <scalbn>
  404c14:	f1ba 0f00 	cmp.w	sl, #0
  404c18:	4604      	mov	r4, r0
  404c1a:	460d      	mov	r5, r1
  404c1c:	f2c0 80d8 	blt.w	404dd0 <__kernel_rem_pio2+0x630>
  404c20:	f10a 0301 	add.w	r3, sl, #1
  404c24:	af74      	add	r7, sp, #464	; 0x1d0
  404c26:	aa10      	add	r2, sp, #64	; 0x40
  404c28:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  404c2c:	9300      	str	r3, [sp, #0]
  404c2e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
  404c32:	eb07 0608 	add.w	r6, r7, r8
  404c36:	f859 0d04 	ldr.w	r0, [r9, #-4]!
  404c3a:	f000 fdfd 	bl	405838 <__aeabi_i2d>
  404c3e:	4622      	mov	r2, r4
  404c40:	462b      	mov	r3, r5
  404c42:	f000 fe5f 	bl	405904 <__aeabi_dmul>
  404c46:	2200      	movs	r2, #0
  404c48:	4b17      	ldr	r3, [pc, #92]	; (404ca8 <__kernel_rem_pio2+0x508>)
  404c4a:	e966 0102 	strd	r0, r1, [r6, #-8]!
  404c4e:	4620      	mov	r0, r4
  404c50:	4629      	mov	r1, r5
  404c52:	f000 fe57 	bl	405904 <__aeabi_dmul>
  404c56:	42be      	cmp	r6, r7
  404c58:	4604      	mov	r4, r0
  404c5a:	460d      	mov	r5, r1
  404c5c:	d1eb      	bne.n	404c36 <__kernel_rem_pio2+0x496>
  404c5e:	f1a8 0b08 	sub.w	fp, r8, #8
  404c62:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  404c66:	f8cd a018 	str.w	sl, [sp, #24]
  404c6a:	f04f 0800 	mov.w	r8, #0
  404c6e:	eb06 030b 	add.w	r3, r6, fp
  404c72:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  404c76:	f8cd 9010 	str.w	r9, [sp, #16]
  404c7a:	469b      	mov	fp, r3
  404c7c:	f1ba 0f00 	cmp.w	sl, #0
  404c80:	f2c0 80a3 	blt.w	404dca <__kernel_rem_pio2+0x62a>
  404c84:	f1b8 0f00 	cmp.w	r8, #0
  404c88:	f2c0 809f 	blt.w	404dca <__kernel_rem_pio2+0x62a>
  404c8c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 404cac <__kernel_rem_pio2+0x50c>
  404c90:	465d      	mov	r5, fp
  404c92:	2600      	movs	r6, #0
  404c94:	2700      	movs	r7, #0
  404c96:	2400      	movs	r4, #0
  404c98:	e00c      	b.n	404cb4 <__kernel_rem_pio2+0x514>
  404c9a:	bf00      	nop
  404c9c:	3fe00000 	.word	0x3fe00000
  404ca0:	3ff00000 	.word	0x3ff00000
  404ca4:	41700000 	.word	0x41700000
  404ca8:	3e700000 	.word	0x3e700000
  404cac:	0040ad10 	.word	0x0040ad10
  404cb0:	4544      	cmp	r4, r8
  404cb2:	dc10      	bgt.n	404cd6 <__kernel_rem_pio2+0x536>
  404cb4:	3401      	adds	r4, #1
  404cb6:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  404cba:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  404cbe:	f000 fe21 	bl	405904 <__aeabi_dmul>
  404cc2:	4602      	mov	r2, r0
  404cc4:	460b      	mov	r3, r1
  404cc6:	4630      	mov	r0, r6
  404cc8:	4639      	mov	r1, r7
  404cca:	f000 fc69 	bl	4055a0 <__adddf3>
  404cce:	45a2      	cmp	sl, r4
  404cd0:	4606      	mov	r6, r0
  404cd2:	460f      	mov	r7, r1
  404cd4:	daec      	bge.n	404cb0 <__kernel_rem_pio2+0x510>
  404cd6:	9b04      	ldr	r3, [sp, #16]
  404cd8:	f1ab 0b08 	sub.w	fp, fp, #8
  404cdc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  404ce0:	f108 0801 	add.w	r8, r8, #1
  404ce4:	e9c3 6700 	strd	r6, r7, [r3]
  404ce8:	9b00      	ldr	r3, [sp, #0]
  404cea:	4598      	cmp	r8, r3
  404cec:	d1c6      	bne.n	404c7c <__kernel_rem_pio2+0x4dc>
  404cee:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  404cf0:	f8dd a018 	ldr.w	sl, [sp, #24]
  404cf4:	f8dd 9010 	ldr.w	r9, [sp, #16]
  404cf8:	2b03      	cmp	r3, #3
  404cfa:	d83d      	bhi.n	404d78 <__kernel_rem_pio2+0x5d8>
  404cfc:	e8df f013 	tbh	[pc, r3, lsl #1]
  404d00:	00040043 	.word	0x00040043
  404d04:	00cf0004 	.word	0x00cf0004
  404d08:	2400      	movs	r4, #0
  404d0a:	9b00      	ldr	r3, [sp, #0]
  404d0c:	4626      	mov	r6, r4
  404d0e:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
  404d12:	4620      	mov	r0, r4
  404d14:	4631      	mov	r1, r6
  404d16:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  404d1a:	f000 fc41 	bl	4055a0 <__adddf3>
  404d1e:	4604      	mov	r4, r0
  404d20:	454d      	cmp	r5, r9
  404d22:	460e      	mov	r6, r1
  404d24:	d1f5      	bne.n	404d12 <__kernel_rem_pio2+0x572>
  404d26:	9b03      	ldr	r3, [sp, #12]
  404d28:	2b00      	cmp	r3, #0
  404d2a:	f000 8084 	beq.w	404e36 <__kernel_rem_pio2+0x696>
  404d2e:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
  404d32:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404d34:	4622      	mov	r2, r4
  404d36:	4633      	mov	r3, r6
  404d38:	6069      	str	r1, [r5, #4]
  404d3a:	602c      	str	r4, [r5, #0]
  404d3c:	e9d9 0100 	ldrd	r0, r1, [r9]
  404d40:	f000 fc2c 	bl	40559c <__aeabi_dsub>
  404d44:	f1ba 0f00 	cmp.w	sl, #0
  404d48:	4602      	mov	r2, r0
  404d4a:	460b      	mov	r3, r1
  404d4c:	dd0d      	ble.n	404d6a <__kernel_rem_pio2+0x5ca>
  404d4e:	2401      	movs	r4, #1
  404d50:	3401      	adds	r4, #1
  404d52:	4610      	mov	r0, r2
  404d54:	4619      	mov	r1, r3
  404d56:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  404d5a:	f000 fc21 	bl	4055a0 <__adddf3>
  404d5e:	45a2      	cmp	sl, r4
  404d60:	4602      	mov	r2, r0
  404d62:	460b      	mov	r3, r1
  404d64:	daf4      	bge.n	404d50 <__kernel_rem_pio2+0x5b0>
  404d66:	9903      	ldr	r1, [sp, #12]
  404d68:	b109      	cbz	r1, 404d6e <__kernel_rem_pio2+0x5ce>
  404d6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404d6e:	4619      	mov	r1, r3
  404d70:	4610      	mov	r0, r2
  404d72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404d74:	e9c3 0102 	strd	r0, r1, [r3, #8]
  404d78:	9b05      	ldr	r3, [sp, #20]
  404d7a:	f003 0007 	and.w	r0, r3, #7
  404d7e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  404d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d86:	9b00      	ldr	r3, [sp, #0]
  404d88:	2200      	movs	r2, #0
  404d8a:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
  404d8e:	4613      	mov	r3, r2
  404d90:	f10a 3aff 	add.w	sl, sl, #4294967295
  404d94:	4610      	mov	r0, r2
  404d96:	4619      	mov	r1, r3
  404d98:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
  404d9c:	f000 fc00 	bl	4055a0 <__adddf3>
  404da0:	f1ba 3fff 	cmp.w	sl, #4294967295
  404da4:	4602      	mov	r2, r0
  404da6:	460b      	mov	r3, r1
  404da8:	d1f2      	bne.n	404d90 <__kernel_rem_pio2+0x5f0>
  404daa:	9903      	ldr	r1, [sp, #12]
  404dac:	b109      	cbz	r1, 404db2 <__kernel_rem_pio2+0x612>
  404dae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404db2:	4610      	mov	r0, r2
  404db4:	4619      	mov	r1, r3
  404db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404db8:	e9c3 0100 	strd	r0, r1, [r3]
  404dbc:	9b05      	ldr	r3, [sp, #20]
  404dbe:	f003 0007 	and.w	r0, r3, #7
  404dc2:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  404dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dca:	2600      	movs	r6, #0
  404dcc:	2700      	movs	r7, #0
  404dce:	e782      	b.n	404cd6 <__kernel_rem_pio2+0x536>
  404dd0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  404dd2:	2b03      	cmp	r3, #3
  404dd4:	d8d0      	bhi.n	404d78 <__kernel_rem_pio2+0x5d8>
  404dd6:	e8df f003 	tbb	[pc, r3]
  404dda:	2645      	.short	0x2645
  404ddc:	0226      	.short	0x0226
  404dde:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  404de2:	2300      	movs	r3, #0
  404de4:	9903      	ldr	r1, [sp, #12]
  404de6:	461a      	mov	r2, r3
  404de8:	2900      	cmp	r1, #0
  404dea:	f000 80b9 	beq.w	404f60 <__kernel_rem_pio2+0x7c0>
  404dee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404df0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404df4:	f8d9 0004 	ldr.w	r0, [r9, #4]
  404df8:	f8d9 100c 	ldr.w	r1, [r9, #12]
  404dfc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404e00:	613b      	str	r3, [r7, #16]
  404e02:	9b05      	ldr	r3, [sp, #20]
  404e04:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404e08:	f8d9 4000 	ldr.w	r4, [r9]
  404e0c:	f8d9 5008 	ldr.w	r5, [r9, #8]
  404e10:	6078      	str	r0, [r7, #4]
  404e12:	f003 0007 	and.w	r0, r3, #7
  404e16:	617a      	str	r2, [r7, #20]
  404e18:	60f9      	str	r1, [r7, #12]
  404e1a:	603c      	str	r4, [r7, #0]
  404e1c:	60bd      	str	r5, [r7, #8]
  404e1e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  404e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e26:	2400      	movs	r4, #0
  404e28:	9b03      	ldr	r3, [sp, #12]
  404e2a:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  404e2e:	4626      	mov	r6, r4
  404e30:	2b00      	cmp	r3, #0
  404e32:	f47f af7c 	bne.w	404d2e <__kernel_rem_pio2+0x58e>
  404e36:	4620      	mov	r0, r4
  404e38:	4622      	mov	r2, r4
  404e3a:	4631      	mov	r1, r6
  404e3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404e3e:	4633      	mov	r3, r6
  404e40:	e9c4 0100 	strd	r0, r1, [r4]
  404e44:	e9d9 0100 	ldrd	r0, r1, [r9]
  404e48:	f000 fba8 	bl	40559c <__aeabi_dsub>
  404e4c:	f1ba 0f00 	cmp.w	sl, #0
  404e50:	4602      	mov	r2, r0
  404e52:	460b      	mov	r3, r1
  404e54:	f73f af7b 	bgt.w	404d4e <__kernel_rem_pio2+0x5ae>
  404e58:	4619      	mov	r1, r3
  404e5a:	4610      	mov	r0, r2
  404e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e5e:	e9c3 0102 	strd	r0, r1, [r3, #8]
  404e62:	e789      	b.n	404d78 <__kernel_rem_pio2+0x5d8>
  404e64:	2200      	movs	r2, #0
  404e66:	4613      	mov	r3, r2
  404e68:	e79f      	b.n	404daa <__kernel_rem_pio2+0x60a>
  404e6a:	9a08      	ldr	r2, [sp, #32]
  404e6c:	ab10      	add	r3, sp, #64	; 0x40
  404e6e:	9503      	str	r5, [sp, #12]
  404e70:	3a18      	subs	r2, #24
  404e72:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  404e76:	f8cd 8014 	str.w	r8, [sp, #20]
  404e7a:	9208      	str	r2, [sp, #32]
  404e7c:	2b00      	cmp	r3, #0
  404e7e:	f47f aec4 	bne.w	404c0a <__kernel_rem_pio2+0x46a>
  404e82:	ab10      	add	r3, sp, #64	; 0x40
  404e84:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404e88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  404e8c:	f10a 3aff 	add.w	sl, sl, #4294967295
  404e90:	3a18      	subs	r2, #24
  404e92:	2900      	cmp	r1, #0
  404e94:	d0f8      	beq.n	404e88 <__kernel_rem_pio2+0x6e8>
  404e96:	9208      	str	r2, [sp, #32]
  404e98:	e6b7      	b.n	404c0a <__kernel_rem_pio2+0x46a>
  404e9a:	2301      	movs	r3, #1
  404e9c:	e5cb      	b.n	404a36 <__kernel_rem_pio2+0x296>
  404e9e:	f1ba 0f00 	cmp.w	sl, #0
  404ea2:	dd9e      	ble.n	404de2 <__kernel_rem_pio2+0x642>
  404ea4:	ea4f 08ca 	mov.w	r8, sl, lsl #3
  404ea8:	eb09 0b08 	add.w	fp, r9, r8
  404eac:	e9db 6700 	ldrd	r6, r7, [fp]
  404eb0:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
  404eb4:	4630      	mov	r0, r6
  404eb6:	4639      	mov	r1, r7
  404eb8:	e9cd 2300 	strd	r2, r3, [sp]
  404ebc:	f000 fb70 	bl	4055a0 <__adddf3>
  404ec0:	4604      	mov	r4, r0
  404ec2:	460d      	mov	r5, r1
  404ec4:	4622      	mov	r2, r4
  404ec6:	462b      	mov	r3, r5
  404ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
  404ecc:	f000 fb66 	bl	40559c <__aeabi_dsub>
  404ed0:	4602      	mov	r2, r0
  404ed2:	460b      	mov	r3, r1
  404ed4:	4630      	mov	r0, r6
  404ed6:	4639      	mov	r1, r7
  404ed8:	4626      	mov	r6, r4
  404eda:	f000 fb61 	bl	4055a0 <__adddf3>
  404ede:	45cb      	cmp	fp, r9
  404ee0:	462f      	mov	r7, r5
  404ee2:	e9cb 0102 	strd	r0, r1, [fp, #8]
  404ee6:	e9cb 4500 	strd	r4, r5, [fp]
  404eea:	d1e1      	bne.n	404eb0 <__kernel_rem_pio2+0x710>
  404eec:	f1ba 0f01 	cmp.w	sl, #1
  404ef0:	f77f af77 	ble.w	404de2 <__kernel_rem_pio2+0x642>
  404ef4:	eb09 0a08 	add.w	sl, r9, r8
  404ef8:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  404efc:	e9da 6700 	ldrd	r6, r7, [sl]
  404f00:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
  404f04:	4632      	mov	r2, r6
  404f06:	463b      	mov	r3, r7
  404f08:	e9cd 0100 	strd	r0, r1, [sp]
  404f0c:	f000 fb48 	bl	4055a0 <__adddf3>
  404f10:	4604      	mov	r4, r0
  404f12:	460d      	mov	r5, r1
  404f14:	4622      	mov	r2, r4
  404f16:	462b      	mov	r3, r5
  404f18:	e9dd 0100 	ldrd	r0, r1, [sp]
  404f1c:	f000 fb3e 	bl	40559c <__aeabi_dsub>
  404f20:	4632      	mov	r2, r6
  404f22:	463b      	mov	r3, r7
  404f24:	4626      	mov	r6, r4
  404f26:	f000 fb3b 	bl	4055a0 <__adddf3>
  404f2a:	45da      	cmp	sl, fp
  404f2c:	462f      	mov	r7, r5
  404f2e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404f32:	e9ca 4500 	strd	r4, r5, [sl]
  404f36:	d1e3      	bne.n	404f00 <__kernel_rem_pio2+0x760>
  404f38:	f108 0408 	add.w	r4, r8, #8
  404f3c:	2300      	movs	r3, #0
  404f3e:	ad50      	add	r5, sp, #320	; 0x140
  404f40:	444c      	add	r4, r9
  404f42:	461a      	mov	r2, r3
  404f44:	4618      	mov	r0, r3
  404f46:	4611      	mov	r1, r2
  404f48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  404f4c:	f000 fb28 	bl	4055a0 <__adddf3>
  404f50:	4603      	mov	r3, r0
  404f52:	42ac      	cmp	r4, r5
  404f54:	460a      	mov	r2, r1
  404f56:	d1f5      	bne.n	404f44 <__kernel_rem_pio2+0x7a4>
  404f58:	9903      	ldr	r1, [sp, #12]
  404f5a:	2900      	cmp	r1, #0
  404f5c:	f47f af47 	bne.w	404dee <__kernel_rem_pio2+0x64e>
  404f60:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404f62:	4618      	mov	r0, r3
  404f64:	4611      	mov	r1, r2
  404f66:	4604      	mov	r4, r0
  404f68:	460d      	mov	r5, r1
  404f6a:	e9d9 2300 	ldrd	r2, r3, [r9]
  404f6e:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
  404f72:	e9c7 2300 	strd	r2, r3, [r7]
  404f76:	9b05      	ldr	r3, [sp, #20]
  404f78:	e9c7 0102 	strd	r0, r1, [r7, #8]
  404f7c:	f003 0007 	and.w	r0, r3, #7
  404f80:	e9c7 4504 	strd	r4, r5, [r7, #16]
  404f84:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  404f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f8c:	4620      	mov	r0, r4
  404f8e:	4629      	mov	r1, r5
  404f90:	f000 ff52 	bl	405e38 <__aeabi_d2iz>
  404f94:	ab10      	add	r3, sp, #64	; 0x40
  404f96:	46da      	mov	sl, fp
  404f98:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  404f9c:	e635      	b.n	404c0a <__kernel_rem_pio2+0x46a>
  404f9e:	bf00      	nop

00404fa0 <__kernel_sin>:
  404fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404fa4:	4699      	mov	r9, r3
  404fa6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404faa:	b085      	sub	sp, #20
  404fac:	460c      	mov	r4, r1
  404fae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
  404fb2:	4690      	mov	r8, r2
  404fb4:	4605      	mov	r5, r0
  404fb6:	da04      	bge.n	404fc2 <__kernel_sin+0x22>
  404fb8:	f000 ff3e 	bl	405e38 <__aeabi_d2iz>
  404fbc:	2800      	cmp	r0, #0
  404fbe:	f000 8083 	beq.w	4050c8 <__kernel_sin+0x128>
  404fc2:	462a      	mov	r2, r5
  404fc4:	4623      	mov	r3, r4
  404fc6:	4628      	mov	r0, r5
  404fc8:	4621      	mov	r1, r4
  404fca:	f000 fc9b 	bl	405904 <__aeabi_dmul>
  404fce:	4606      	mov	r6, r0
  404fd0:	460f      	mov	r7, r1
  404fd2:	462a      	mov	r2, r5
  404fd4:	4623      	mov	r3, r4
  404fd6:	f000 fc95 	bl	405904 <__aeabi_dmul>
  404fda:	4682      	mov	sl, r0
  404fdc:	468b      	mov	fp, r1
  404fde:	4630      	mov	r0, r6
  404fe0:	4639      	mov	r1, r7
  404fe2:	a33d      	add	r3, pc, #244	; (adr r3, 4050d8 <__kernel_sin+0x138>)
  404fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
  404fe8:	f000 fc8c 	bl	405904 <__aeabi_dmul>
  404fec:	a33c      	add	r3, pc, #240	; (adr r3, 4050e0 <__kernel_sin+0x140>)
  404fee:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ff2:	f000 fad3 	bl	40559c <__aeabi_dsub>
  404ff6:	4632      	mov	r2, r6
  404ff8:	463b      	mov	r3, r7
  404ffa:	f000 fc83 	bl	405904 <__aeabi_dmul>
  404ffe:	a33a      	add	r3, pc, #232	; (adr r3, 4050e8 <__kernel_sin+0x148>)
  405000:	e9d3 2300 	ldrd	r2, r3, [r3]
  405004:	f000 facc 	bl	4055a0 <__adddf3>
  405008:	4632      	mov	r2, r6
  40500a:	463b      	mov	r3, r7
  40500c:	f000 fc7a 	bl	405904 <__aeabi_dmul>
  405010:	a337      	add	r3, pc, #220	; (adr r3, 4050f0 <__kernel_sin+0x150>)
  405012:	e9d3 2300 	ldrd	r2, r3, [r3]
  405016:	f000 fac1 	bl	40559c <__aeabi_dsub>
  40501a:	4632      	mov	r2, r6
  40501c:	463b      	mov	r3, r7
  40501e:	f000 fc71 	bl	405904 <__aeabi_dmul>
  405022:	a335      	add	r3, pc, #212	; (adr r3, 4050f8 <__kernel_sin+0x158>)
  405024:	e9d3 2300 	ldrd	r2, r3, [r3]
  405028:	f000 faba 	bl	4055a0 <__adddf3>
  40502c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40502e:	e9cd 0100 	strd	r0, r1, [sp]
  405032:	b39b      	cbz	r3, 40509c <__kernel_sin+0xfc>
  405034:	4640      	mov	r0, r8
  405036:	4649      	mov	r1, r9
  405038:	2200      	movs	r2, #0
  40503a:	4b33      	ldr	r3, [pc, #204]	; (405108 <__kernel_sin+0x168>)
  40503c:	f000 fc62 	bl	405904 <__aeabi_dmul>
  405040:	e9dd 2300 	ldrd	r2, r3, [sp]
  405044:	e9cd 0102 	strd	r0, r1, [sp, #8]
  405048:	4650      	mov	r0, sl
  40504a:	4659      	mov	r1, fp
  40504c:	f000 fc5a 	bl	405904 <__aeabi_dmul>
  405050:	4602      	mov	r2, r0
  405052:	460b      	mov	r3, r1
  405054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405058:	f000 faa0 	bl	40559c <__aeabi_dsub>
  40505c:	4632      	mov	r2, r6
  40505e:	463b      	mov	r3, r7
  405060:	f000 fc50 	bl	405904 <__aeabi_dmul>
  405064:	4642      	mov	r2, r8
  405066:	464b      	mov	r3, r9
  405068:	f000 fa98 	bl	40559c <__aeabi_dsub>
  40506c:	4606      	mov	r6, r0
  40506e:	460f      	mov	r7, r1
  405070:	4650      	mov	r0, sl
  405072:	4659      	mov	r1, fp
  405074:	a322      	add	r3, pc, #136	; (adr r3, 405100 <__kernel_sin+0x160>)
  405076:	e9d3 2300 	ldrd	r2, r3, [r3]
  40507a:	f000 fc43 	bl	405904 <__aeabi_dmul>
  40507e:	4602      	mov	r2, r0
  405080:	460b      	mov	r3, r1
  405082:	4630      	mov	r0, r6
  405084:	4639      	mov	r1, r7
  405086:	f000 fa8b 	bl	4055a0 <__adddf3>
  40508a:	4602      	mov	r2, r0
  40508c:	460b      	mov	r3, r1
  40508e:	4628      	mov	r0, r5
  405090:	4621      	mov	r1, r4
  405092:	f000 fa83 	bl	40559c <__aeabi_dsub>
  405096:	b005      	add	sp, #20
  405098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40509c:	e9dd 2300 	ldrd	r2, r3, [sp]
  4050a0:	4630      	mov	r0, r6
  4050a2:	4639      	mov	r1, r7
  4050a4:	f000 fc2e 	bl	405904 <__aeabi_dmul>
  4050a8:	a315      	add	r3, pc, #84	; (adr r3, 405100 <__kernel_sin+0x160>)
  4050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
  4050ae:	f000 fa75 	bl	40559c <__aeabi_dsub>
  4050b2:	4652      	mov	r2, sl
  4050b4:	465b      	mov	r3, fp
  4050b6:	f000 fc25 	bl	405904 <__aeabi_dmul>
  4050ba:	462a      	mov	r2, r5
  4050bc:	4623      	mov	r3, r4
  4050be:	f000 fa6f 	bl	4055a0 <__adddf3>
  4050c2:	b005      	add	sp, #20
  4050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050c8:	4628      	mov	r0, r5
  4050ca:	4621      	mov	r1, r4
  4050cc:	b005      	add	sp, #20
  4050ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4050d2:	bf00      	nop
  4050d4:	f3af 8000 	nop.w
  4050d8:	5acfd57c 	.word	0x5acfd57c
  4050dc:	3de5d93a 	.word	0x3de5d93a
  4050e0:	8a2b9ceb 	.word	0x8a2b9ceb
  4050e4:	3e5ae5e6 	.word	0x3e5ae5e6
  4050e8:	57b1fe7d 	.word	0x57b1fe7d
  4050ec:	3ec71de3 	.word	0x3ec71de3
  4050f0:	19c161d5 	.word	0x19c161d5
  4050f4:	3f2a01a0 	.word	0x3f2a01a0
  4050f8:	1110f8a6 	.word	0x1110f8a6
  4050fc:	3f811111 	.word	0x3f811111
  405100:	55555549 	.word	0x55555549
  405104:	3fc55555 	.word	0x3fc55555
  405108:	3fe00000 	.word	0x3fe00000

0040510c <fabs>:
  40510c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405110:	4770      	bx	lr
  405112:	bf00      	nop
  405114:	0000      	movs	r0, r0
	...

00405118 <floor>:
  405118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40511c:	f3c1 580a 	ubfx	r8, r1, #20, #11
  405120:	460b      	mov	r3, r1
  405122:	4604      	mov	r4, r0
  405124:	460d      	mov	r5, r1
  405126:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
  40512a:	4602      	mov	r2, r0
  40512c:	4689      	mov	r9, r1
  40512e:	4607      	mov	r7, r0
  405130:	2e13      	cmp	r6, #19
  405132:	dc1d      	bgt.n	405170 <floor+0x58>
  405134:	2e00      	cmp	r6, #0
  405136:	db40      	blt.n	4051ba <floor+0xa2>
  405138:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 405224 <floor+0x10c>
  40513c:	fa48 f806 	asr.w	r8, r8, r6
  405140:	ea08 0e01 	and.w	lr, r8, r1
  405144:	ea5e 0202 	orrs.w	r2, lr, r2
  405148:	d017      	beq.n	40517a <floor+0x62>
  40514a:	a333      	add	r3, pc, #204	; (adr r3, 405218 <floor+0x100>)
  40514c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405150:	f000 fa26 	bl	4055a0 <__adddf3>
  405154:	2200      	movs	r2, #0
  405156:	2300      	movs	r3, #0
  405158:	f000 fe64 	bl	405e24 <__aeabi_dcmpgt>
  40515c:	b120      	cbz	r0, 405168 <floor+0x50>
  40515e:	2d00      	cmp	r5, #0
  405160:	db40      	blt.n	4051e4 <floor+0xcc>
  405162:	ea29 0508 	bic.w	r5, r9, r8
  405166:	2700      	movs	r7, #0
  405168:	4638      	mov	r0, r7
  40516a:	4629      	mov	r1, r5
  40516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405170:	2e33      	cmp	r6, #51	; 0x33
  405172:	dd06      	ble.n	405182 <floor+0x6a>
  405174:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  405178:	d02f      	beq.n	4051da <floor+0xc2>
  40517a:	4620      	mov	r0, r4
  40517c:	4619      	mov	r1, r3
  40517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405182:	f2a8 4213 	subw	r2, r8, #1043	; 0x413
  405186:	f04f 3aff 	mov.w	sl, #4294967295
  40518a:	fa2a fa02 	lsr.w	sl, sl, r2
  40518e:	ea1a 0f00 	tst.w	sl, r0
  405192:	d0f2      	beq.n	40517a <floor+0x62>
  405194:	a320      	add	r3, pc, #128	; (adr r3, 405218 <floor+0x100>)
  405196:	e9d3 2300 	ldrd	r2, r3, [r3]
  40519a:	f000 fa01 	bl	4055a0 <__adddf3>
  40519e:	2200      	movs	r2, #0
  4051a0:	2300      	movs	r3, #0
  4051a2:	f000 fe3f 	bl	405e24 <__aeabi_dcmpgt>
  4051a6:	2800      	cmp	r0, #0
  4051a8:	d0de      	beq.n	405168 <floor+0x50>
  4051aa:	2d00      	cmp	r5, #0
  4051ac:	db1f      	blt.n	4051ee <floor+0xd6>
  4051ae:	464d      	mov	r5, r9
  4051b0:	ea27 070a 	bic.w	r7, r7, sl
  4051b4:	4629      	mov	r1, r5
  4051b6:	4638      	mov	r0, r7
  4051b8:	e7d8      	b.n	40516c <floor+0x54>
  4051ba:	a317      	add	r3, pc, #92	; (adr r3, 405218 <floor+0x100>)
  4051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4051c0:	f000 f9ee 	bl	4055a0 <__adddf3>
  4051c4:	2200      	movs	r2, #0
  4051c6:	2300      	movs	r3, #0
  4051c8:	f000 fe2c 	bl	405e24 <__aeabi_dcmpgt>
  4051cc:	2800      	cmp	r0, #0
  4051ce:	d0cb      	beq.n	405168 <floor+0x50>
  4051d0:	2d00      	cmp	r5, #0
  4051d2:	db19      	blt.n	405208 <floor+0xf0>
  4051d4:	2700      	movs	r7, #0
  4051d6:	463d      	mov	r5, r7
  4051d8:	e7c6      	b.n	405168 <floor+0x50>
  4051da:	4602      	mov	r2, r0
  4051dc:	460b      	mov	r3, r1
  4051de:	f000 f9df 	bl	4055a0 <__adddf3>
  4051e2:	e7cc      	b.n	40517e <floor+0x66>
  4051e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  4051e8:	4133      	asrs	r3, r6
  4051ea:	4499      	add	r9, r3
  4051ec:	e7b9      	b.n	405162 <floor+0x4a>
  4051ee:	2e14      	cmp	r6, #20
  4051f0:	d007      	beq.n	405202 <floor+0xea>
  4051f2:	f240 4233 	movw	r2, #1075	; 0x433
  4051f6:	2301      	movs	r3, #1
  4051f8:	ebc8 0202 	rsb	r2, r8, r2
  4051fc:	4093      	lsls	r3, r2
  4051fe:	191f      	adds	r7, r3, r4
  405200:	d3d5      	bcc.n	4051ae <floor+0x96>
  405202:	f109 0901 	add.w	r9, r9, #1
  405206:	e7d2      	b.n	4051ae <floor+0x96>
  405208:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  40520c:	ea53 0704 	orrs.w	r7, r3, r4
  405210:	d0aa      	beq.n	405168 <floor+0x50>
  405212:	2700      	movs	r7, #0
  405214:	4d02      	ldr	r5, [pc, #8]	; (405220 <floor+0x108>)
  405216:	e7a7      	b.n	405168 <floor+0x50>
  405218:	8800759c 	.word	0x8800759c
  40521c:	7e37e43c 	.word	0x7e37e43c
  405220:	bff00000 	.word	0xbff00000
  405224:	000fffff 	.word	0x000fffff

00405228 <__fpclassifyd>:
  405228:	fab0 f080 	clz	r0, r0
  40522c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  405230:	ea4f 1050 	mov.w	r0, r0, lsr #5
  405234:	d102      	bne.n	40523c <__fpclassifyd+0x14>
  405236:	b108      	cbz	r0, 40523c <__fpclassifyd+0x14>
  405238:	2002      	movs	r0, #2
  40523a:	4770      	bx	lr
  40523c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  405240:	4b08      	ldr	r3, [pc, #32]	; (405264 <__fpclassifyd+0x3c>)
  405242:	429a      	cmp	r2, r3
  405244:	d801      	bhi.n	40524a <__fpclassifyd+0x22>
  405246:	2004      	movs	r0, #4
  405248:	4770      	bx	lr
  40524a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40524e:	d201      	bcs.n	405254 <__fpclassifyd+0x2c>
  405250:	2003      	movs	r0, #3
  405252:	4770      	bx	lr
  405254:	4b04      	ldr	r3, [pc, #16]	; (405268 <__fpclassifyd+0x40>)
  405256:	4299      	cmp	r1, r3
  405258:	bf14      	ite	ne
  40525a:	2000      	movne	r0, #0
  40525c:	f000 0001 	andeq.w	r0, r0, #1
  405260:	4770      	bx	lr
  405262:	bf00      	nop
  405264:	7fdfffff 	.word	0x7fdfffff
  405268:	7ff00000 	.word	0x7ff00000

0040526c <matherr>:
  40526c:	2000      	movs	r0, #0
  40526e:	4770      	bx	lr

00405270 <scalbn>:
  405270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405272:	f3c1 530a 	ubfx	r3, r1, #20, #11
  405276:	4604      	mov	r4, r0
  405278:	460d      	mov	r5, r1
  40527a:	4617      	mov	r7, r2
  40527c:	460e      	mov	r6, r1
  40527e:	bb1b      	cbnz	r3, 4052c8 <scalbn+0x58>
  405280:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  405284:	ea56 0300 	orrs.w	r3, r6, r0
  405288:	d030      	beq.n	4052ec <scalbn+0x7c>
  40528a:	4b35      	ldr	r3, [pc, #212]	; (405360 <scalbn+0xf0>)
  40528c:	2200      	movs	r2, #0
  40528e:	f000 fb39 	bl	405904 <__aeabi_dmul>
  405292:	4b34      	ldr	r3, [pc, #208]	; (405364 <scalbn+0xf4>)
  405294:	4604      	mov	r4, r0
  405296:	460d      	mov	r5, r1
  405298:	429f      	cmp	r7, r3
  40529a:	460e      	mov	r6, r1
  40529c:	db35      	blt.n	40530a <scalbn+0x9a>
  40529e:	f3c1 530a 	ubfx	r3, r1, #20, #11
  4052a2:	f240 72fe 	movw	r2, #2046	; 0x7fe
  4052a6:	3b36      	subs	r3, #54	; 0x36
  4052a8:	443b      	add	r3, r7
  4052aa:	4293      	cmp	r3, r2
  4052ac:	dd15      	ble.n	4052da <scalbn+0x6a>
  4052ae:	4622      	mov	r2, r4
  4052b0:	462b      	mov	r3, r5
  4052b2:	a127      	add	r1, pc, #156	; (adr r1, 405350 <scalbn+0xe0>)
  4052b4:	e9d1 0100 	ldrd	r0, r1, [r1]
  4052b8:	f000 f964 	bl	405584 <copysign>
  4052bc:	a324      	add	r3, pc, #144	; (adr r3, 405350 <scalbn+0xe0>)
  4052be:	e9d3 2300 	ldrd	r2, r3, [r3]
  4052c2:	f000 fb1f 	bl	405904 <__aeabi_dmul>
  4052c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
  4052cc:	4293      	cmp	r3, r2
  4052ce:	d022      	beq.n	405316 <scalbn+0xa6>
  4052d0:	443b      	add	r3, r7
  4052d2:	f240 72fe 	movw	r2, #2046	; 0x7fe
  4052d6:	4293      	cmp	r3, r2
  4052d8:	dce9      	bgt.n	4052ae <scalbn+0x3e>
  4052da:	2b00      	cmp	r3, #0
  4052dc:	dd07      	ble.n	4052ee <scalbn+0x7e>
  4052de:	4a22      	ldr	r2, [pc, #136]	; (405368 <scalbn+0xf8>)
  4052e0:	4620      	mov	r0, r4
  4052e2:	4032      	ands	r2, r6
  4052e4:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
  4052e8:	4629      	mov	r1, r5
  4052ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4052ee:	f113 0f35 	cmn.w	r3, #53	; 0x35
  4052f2:	da15      	bge.n	405320 <scalbn+0xb0>
  4052f4:	f24c 3350 	movw	r3, #50000	; 0xc350
  4052f8:	4622      	mov	r2, r4
  4052fa:	429f      	cmp	r7, r3
  4052fc:	462b      	mov	r3, r5
  4052fe:	dc1c      	bgt.n	40533a <scalbn+0xca>
  405300:	a115      	add	r1, pc, #84	; (adr r1, 405358 <scalbn+0xe8>)
  405302:	e9d1 0100 	ldrd	r0, r1, [r1]
  405306:	f000 f93d 	bl	405584 <copysign>
  40530a:	a313      	add	r3, pc, #76	; (adr r3, 405358 <scalbn+0xe8>)
  40530c:	e9d3 2300 	ldrd	r2, r3, [r3]
  405310:	f000 faf8 	bl	405904 <__aeabi_dmul>
  405314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405316:	4602      	mov	r2, r0
  405318:	460b      	mov	r3, r1
  40531a:	f000 f941 	bl	4055a0 <__adddf3>
  40531e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405320:	4811      	ldr	r0, [pc, #68]	; (405368 <scalbn+0xf8>)
  405322:	f103 0136 	add.w	r1, r3, #54	; 0x36
  405326:	2200      	movs	r2, #0
  405328:	4b10      	ldr	r3, [pc, #64]	; (40536c <scalbn+0xfc>)
  40532a:	4030      	ands	r0, r6
  40532c:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
  405330:	4620      	mov	r0, r4
  405332:	4629      	mov	r1, r5
  405334:	f000 fae6 	bl	405904 <__aeabi_dmul>
  405338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40533a:	a105      	add	r1, pc, #20	; (adr r1, 405350 <scalbn+0xe0>)
  40533c:	e9d1 0100 	ldrd	r0, r1, [r1]
  405340:	f000 f920 	bl	405584 <copysign>
  405344:	a302      	add	r3, pc, #8	; (adr r3, 405350 <scalbn+0xe0>)
  405346:	e9d3 2300 	ldrd	r2, r3, [r3]
  40534a:	f000 fadb 	bl	405904 <__aeabi_dmul>
  40534e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405350:	8800759c 	.word	0x8800759c
  405354:	7e37e43c 	.word	0x7e37e43c
  405358:	c2f8f359 	.word	0xc2f8f359
  40535c:	01a56e1f 	.word	0x01a56e1f
  405360:	43500000 	.word	0x43500000
  405364:	ffff3cb0 	.word	0xffff3cb0
  405368:	800fffff 	.word	0x800fffff
  40536c:	3c900000 	.word	0x3c900000

00405370 <atanf>:
  405370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405374:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  405378:	4604      	mov	r4, r0
  40537a:	4606      	mov	r6, r0
  40537c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
  405380:	db08      	blt.n	405394 <atanf+0x24>
  405382:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  405386:	dc6f      	bgt.n	405468 <atanf+0xf8>
  405388:	2800      	cmp	r0, #0
  40538a:	f340 8099 	ble.w	4054c0 <atanf+0x150>
  40538e:	4867      	ldr	r0, [pc, #412]	; (40552c <atanf+0x1bc>)
  405390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405394:	4b66      	ldr	r3, [pc, #408]	; (405530 <atanf+0x1c0>)
  405396:	429d      	cmp	r5, r3
  405398:	dc77      	bgt.n	40548a <atanf+0x11a>
  40539a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
  40539e:	db68      	blt.n	405472 <atanf+0x102>
  4053a0:	f04f 37ff 	mov.w	r7, #4294967295
  4053a4:	4621      	mov	r1, r4
  4053a6:	4620      	mov	r0, r4
  4053a8:	f000 fecc 	bl	406144 <__aeabi_fmul>
  4053ac:	4601      	mov	r1, r0
  4053ae:	4680      	mov	r8, r0
  4053b0:	f000 fec8 	bl	406144 <__aeabi_fmul>
  4053b4:	495f      	ldr	r1, [pc, #380]	; (405534 <atanf+0x1c4>)
  4053b6:	4605      	mov	r5, r0
  4053b8:	f000 fec4 	bl	406144 <__aeabi_fmul>
  4053bc:	495e      	ldr	r1, [pc, #376]	; (405538 <atanf+0x1c8>)
  4053be:	f000 fdb9 	bl	405f34 <__addsf3>
  4053c2:	4629      	mov	r1, r5
  4053c4:	f000 febe 	bl	406144 <__aeabi_fmul>
  4053c8:	495c      	ldr	r1, [pc, #368]	; (40553c <atanf+0x1cc>)
  4053ca:	f000 fdb3 	bl	405f34 <__addsf3>
  4053ce:	4629      	mov	r1, r5
  4053d0:	f000 feb8 	bl	406144 <__aeabi_fmul>
  4053d4:	495a      	ldr	r1, [pc, #360]	; (405540 <atanf+0x1d0>)
  4053d6:	f000 fdad 	bl	405f34 <__addsf3>
  4053da:	4629      	mov	r1, r5
  4053dc:	f000 feb2 	bl	406144 <__aeabi_fmul>
  4053e0:	4958      	ldr	r1, [pc, #352]	; (405544 <atanf+0x1d4>)
  4053e2:	f000 fda7 	bl	405f34 <__addsf3>
  4053e6:	4629      	mov	r1, r5
  4053e8:	f000 feac 	bl	406144 <__aeabi_fmul>
  4053ec:	4956      	ldr	r1, [pc, #344]	; (405548 <atanf+0x1d8>)
  4053ee:	f000 fda1 	bl	405f34 <__addsf3>
  4053f2:	4641      	mov	r1, r8
  4053f4:	f000 fea6 	bl	406144 <__aeabi_fmul>
  4053f8:	4954      	ldr	r1, [pc, #336]	; (40554c <atanf+0x1dc>)
  4053fa:	4680      	mov	r8, r0
  4053fc:	4628      	mov	r0, r5
  4053fe:	f000 fea1 	bl	406144 <__aeabi_fmul>
  405402:	4953      	ldr	r1, [pc, #332]	; (405550 <atanf+0x1e0>)
  405404:	f000 fd94 	bl	405f30 <__aeabi_fsub>
  405408:	4629      	mov	r1, r5
  40540a:	f000 fe9b 	bl	406144 <__aeabi_fmul>
  40540e:	4951      	ldr	r1, [pc, #324]	; (405554 <atanf+0x1e4>)
  405410:	f000 fd8e 	bl	405f30 <__aeabi_fsub>
  405414:	4629      	mov	r1, r5
  405416:	f000 fe95 	bl	406144 <__aeabi_fmul>
  40541a:	494f      	ldr	r1, [pc, #316]	; (405558 <atanf+0x1e8>)
  40541c:	f000 fd88 	bl	405f30 <__aeabi_fsub>
  405420:	4629      	mov	r1, r5
  405422:	f000 fe8f 	bl	406144 <__aeabi_fmul>
  405426:	494d      	ldr	r1, [pc, #308]	; (40555c <atanf+0x1ec>)
  405428:	f000 fd82 	bl	405f30 <__aeabi_fsub>
  40542c:	4629      	mov	r1, r5
  40542e:	f000 fe89 	bl	406144 <__aeabi_fmul>
  405432:	1c7b      	adds	r3, r7, #1
  405434:	4601      	mov	r1, r0
  405436:	4640      	mov	r0, r8
  405438:	d045      	beq.n	4054c6 <atanf+0x156>
  40543a:	f000 fd7b 	bl	405f34 <__addsf3>
  40543e:	4621      	mov	r1, r4
  405440:	f000 fe80 	bl	406144 <__aeabi_fmul>
  405444:	4b46      	ldr	r3, [pc, #280]	; (405560 <atanf+0x1f0>)
  405446:	4d47      	ldr	r5, [pc, #284]	; (405564 <atanf+0x1f4>)
  405448:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
  40544c:	f000 fd70 	bl	405f30 <__aeabi_fsub>
  405450:	4621      	mov	r1, r4
  405452:	f000 fd6d 	bl	405f30 <__aeabi_fsub>
  405456:	4601      	mov	r1, r0
  405458:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
  40545c:	f000 fd68 	bl	405f30 <__aeabi_fsub>
  405460:	2e00      	cmp	r6, #0
  405462:	db29      	blt.n	4054b8 <atanf+0x148>
  405464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405468:	4601      	mov	r1, r0
  40546a:	f000 fd63 	bl	405f34 <__addsf3>
  40546e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405472:	493d      	ldr	r1, [pc, #244]	; (405568 <atanf+0x1f8>)
  405474:	f000 fd5e 	bl	405f34 <__addsf3>
  405478:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  40547c:	f001 f81e 	bl	4064bc <__aeabi_fcmpgt>
  405480:	2800      	cmp	r0, #0
  405482:	d08d      	beq.n	4053a0 <atanf+0x30>
  405484:	4620      	mov	r0, r4
  405486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40548a:	f000 f877 	bl	40557c <fabsf>
  40548e:	4b37      	ldr	r3, [pc, #220]	; (40556c <atanf+0x1fc>)
  405490:	4604      	mov	r4, r0
  405492:	429d      	cmp	r5, r3
  405494:	dc22      	bgt.n	4054dc <atanf+0x16c>
  405496:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  40549a:	429d      	cmp	r5, r3
  40549c:	dc3d      	bgt.n	40551a <atanf+0x1aa>
  40549e:	4601      	mov	r1, r0
  4054a0:	2700      	movs	r7, #0
  4054a2:	f000 fd47 	bl	405f34 <__addsf3>
  4054a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4054aa:	f000 fd41 	bl	405f30 <__aeabi_fsub>
  4054ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4054b2:	4605      	mov	r5, r0
  4054b4:	4620      	mov	r0, r4
  4054b6:	e021      	b.n	4054fc <atanf+0x18c>
  4054b8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054c0:	482b      	ldr	r0, [pc, #172]	; (405570 <atanf+0x200>)
  4054c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054c6:	f000 fd35 	bl	405f34 <__addsf3>
  4054ca:	4621      	mov	r1, r4
  4054cc:	f000 fe3a 	bl	406144 <__aeabi_fmul>
  4054d0:	4601      	mov	r1, r0
  4054d2:	4620      	mov	r0, r4
  4054d4:	f000 fd2c 	bl	405f30 <__aeabi_fsub>
  4054d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4054dc:	4b25      	ldr	r3, [pc, #148]	; (405574 <atanf+0x204>)
  4054de:	429d      	cmp	r5, r3
  4054e0:	dc14      	bgt.n	40550c <atanf+0x19c>
  4054e2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  4054e6:	2702      	movs	r7, #2
  4054e8:	f000 fd22 	bl	405f30 <__aeabi_fsub>
  4054ec:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  4054f0:	4605      	mov	r5, r0
  4054f2:	4620      	mov	r0, r4
  4054f4:	f000 fe26 	bl	406144 <__aeabi_fmul>
  4054f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4054fc:	f000 fd1a 	bl	405f34 <__addsf3>
  405500:	4601      	mov	r1, r0
  405502:	4628      	mov	r0, r5
  405504:	f000 fed2 	bl	4062ac <__aeabi_fdiv>
  405508:	4604      	mov	r4, r0
  40550a:	e74b      	b.n	4053a4 <atanf+0x34>
  40550c:	4601      	mov	r1, r0
  40550e:	481a      	ldr	r0, [pc, #104]	; (405578 <atanf+0x208>)
  405510:	f000 fecc 	bl	4062ac <__aeabi_fdiv>
  405514:	2703      	movs	r7, #3
  405516:	4604      	mov	r4, r0
  405518:	e744      	b.n	4053a4 <atanf+0x34>
  40551a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  40551e:	2701      	movs	r7, #1
  405520:	f000 fd06 	bl	405f30 <__aeabi_fsub>
  405524:	4605      	mov	r5, r0
  405526:	4620      	mov	r0, r4
  405528:	e7e6      	b.n	4054f8 <atanf+0x188>
  40552a:	bf00      	nop
  40552c:	3fc90fdb 	.word	0x3fc90fdb
  405530:	3edfffff 	.word	0x3edfffff
  405534:	3c8569d7 	.word	0x3c8569d7
  405538:	3d4bda59 	.word	0x3d4bda59
  40553c:	3d886b35 	.word	0x3d886b35
  405540:	3dba2e6e 	.word	0x3dba2e6e
  405544:	3e124925 	.word	0x3e124925
  405548:	3eaaaaab 	.word	0x3eaaaaab
  40554c:	bd15a221 	.word	0xbd15a221
  405550:	3d6ef16b 	.word	0x3d6ef16b
  405554:	3d9d8795 	.word	0x3d9d8795
  405558:	3de38e38 	.word	0x3de38e38
  40555c:	3e4ccccd 	.word	0x3e4ccccd
  405560:	0040ad58 	.word	0x0040ad58
  405564:	0040ad68 	.word	0x0040ad68
  405568:	7149f2ca 	.word	0x7149f2ca
  40556c:	3f97ffff 	.word	0x3f97ffff
  405570:	bfc90fdb 	.word	0xbfc90fdb
  405574:	401bffff 	.word	0x401bffff
  405578:	bf800000 	.word	0xbf800000

0040557c <fabsf>:
  40557c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405580:	4770      	bx	lr
  405582:	bf00      	nop

00405584 <copysign>:
  405584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  405588:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  40558c:	ea43 0102 	orr.w	r1, r3, r2
  405590:	4770      	bx	lr
  405592:	bf00      	nop

00405594 <__aeabi_drsub>:
  405594:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405598:	e002      	b.n	4055a0 <__adddf3>
  40559a:	bf00      	nop

0040559c <__aeabi_dsub>:
  40559c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004055a0 <__adddf3>:
  4055a0:	b530      	push	{r4, r5, lr}
  4055a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4055a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4055aa:	ea94 0f05 	teq	r4, r5
  4055ae:	bf08      	it	eq
  4055b0:	ea90 0f02 	teqeq	r0, r2
  4055b4:	bf1f      	itttt	ne
  4055b6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4055ba:	ea55 0c02 	orrsne.w	ip, r5, r2
  4055be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4055c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4055c6:	f000 80e2 	beq.w	40578e <__adddf3+0x1ee>
  4055ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4055ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4055d2:	bfb8      	it	lt
  4055d4:	426d      	neglt	r5, r5
  4055d6:	dd0c      	ble.n	4055f2 <__adddf3+0x52>
  4055d8:	442c      	add	r4, r5
  4055da:	ea80 0202 	eor.w	r2, r0, r2
  4055de:	ea81 0303 	eor.w	r3, r1, r3
  4055e2:	ea82 0000 	eor.w	r0, r2, r0
  4055e6:	ea83 0101 	eor.w	r1, r3, r1
  4055ea:	ea80 0202 	eor.w	r2, r0, r2
  4055ee:	ea81 0303 	eor.w	r3, r1, r3
  4055f2:	2d36      	cmp	r5, #54	; 0x36
  4055f4:	bf88      	it	hi
  4055f6:	bd30      	pophi	{r4, r5, pc}
  4055f8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4055fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405600:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405604:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405608:	d002      	beq.n	405610 <__adddf3+0x70>
  40560a:	4240      	negs	r0, r0
  40560c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405610:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405614:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405618:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40561c:	d002      	beq.n	405624 <__adddf3+0x84>
  40561e:	4252      	negs	r2, r2
  405620:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405624:	ea94 0f05 	teq	r4, r5
  405628:	f000 80a7 	beq.w	40577a <__adddf3+0x1da>
  40562c:	f1a4 0401 	sub.w	r4, r4, #1
  405630:	f1d5 0e20 	rsbs	lr, r5, #32
  405634:	db0d      	blt.n	405652 <__adddf3+0xb2>
  405636:	fa02 fc0e 	lsl.w	ip, r2, lr
  40563a:	fa22 f205 	lsr.w	r2, r2, r5
  40563e:	1880      	adds	r0, r0, r2
  405640:	f141 0100 	adc.w	r1, r1, #0
  405644:	fa03 f20e 	lsl.w	r2, r3, lr
  405648:	1880      	adds	r0, r0, r2
  40564a:	fa43 f305 	asr.w	r3, r3, r5
  40564e:	4159      	adcs	r1, r3
  405650:	e00e      	b.n	405670 <__adddf3+0xd0>
  405652:	f1a5 0520 	sub.w	r5, r5, #32
  405656:	f10e 0e20 	add.w	lr, lr, #32
  40565a:	2a01      	cmp	r2, #1
  40565c:	fa03 fc0e 	lsl.w	ip, r3, lr
  405660:	bf28      	it	cs
  405662:	f04c 0c02 	orrcs.w	ip, ip, #2
  405666:	fa43 f305 	asr.w	r3, r3, r5
  40566a:	18c0      	adds	r0, r0, r3
  40566c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405674:	d507      	bpl.n	405686 <__adddf3+0xe6>
  405676:	f04f 0e00 	mov.w	lr, #0
  40567a:	f1dc 0c00 	rsbs	ip, ip, #0
  40567e:	eb7e 0000 	sbcs.w	r0, lr, r0
  405682:	eb6e 0101 	sbc.w	r1, lr, r1
  405686:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40568a:	d31b      	bcc.n	4056c4 <__adddf3+0x124>
  40568c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405690:	d30c      	bcc.n	4056ac <__adddf3+0x10c>
  405692:	0849      	lsrs	r1, r1, #1
  405694:	ea5f 0030 	movs.w	r0, r0, rrx
  405698:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40569c:	f104 0401 	add.w	r4, r4, #1
  4056a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4056a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4056a8:	f080 809a 	bcs.w	4057e0 <__adddf3+0x240>
  4056ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4056b0:	bf08      	it	eq
  4056b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4056b6:	f150 0000 	adcs.w	r0, r0, #0
  4056ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4056be:	ea41 0105 	orr.w	r1, r1, r5
  4056c2:	bd30      	pop	{r4, r5, pc}
  4056c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4056c8:	4140      	adcs	r0, r0
  4056ca:	eb41 0101 	adc.w	r1, r1, r1
  4056ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4056d2:	f1a4 0401 	sub.w	r4, r4, #1
  4056d6:	d1e9      	bne.n	4056ac <__adddf3+0x10c>
  4056d8:	f091 0f00 	teq	r1, #0
  4056dc:	bf04      	itt	eq
  4056de:	4601      	moveq	r1, r0
  4056e0:	2000      	moveq	r0, #0
  4056e2:	fab1 f381 	clz	r3, r1
  4056e6:	bf08      	it	eq
  4056e8:	3320      	addeq	r3, #32
  4056ea:	f1a3 030b 	sub.w	r3, r3, #11
  4056ee:	f1b3 0220 	subs.w	r2, r3, #32
  4056f2:	da0c      	bge.n	40570e <__adddf3+0x16e>
  4056f4:	320c      	adds	r2, #12
  4056f6:	dd08      	ble.n	40570a <__adddf3+0x16a>
  4056f8:	f102 0c14 	add.w	ip, r2, #20
  4056fc:	f1c2 020c 	rsb	r2, r2, #12
  405700:	fa01 f00c 	lsl.w	r0, r1, ip
  405704:	fa21 f102 	lsr.w	r1, r1, r2
  405708:	e00c      	b.n	405724 <__adddf3+0x184>
  40570a:	f102 0214 	add.w	r2, r2, #20
  40570e:	bfd8      	it	le
  405710:	f1c2 0c20 	rsble	ip, r2, #32
  405714:	fa01 f102 	lsl.w	r1, r1, r2
  405718:	fa20 fc0c 	lsr.w	ip, r0, ip
  40571c:	bfdc      	itt	le
  40571e:	ea41 010c 	orrle.w	r1, r1, ip
  405722:	4090      	lslle	r0, r2
  405724:	1ae4      	subs	r4, r4, r3
  405726:	bfa2      	ittt	ge
  405728:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40572c:	4329      	orrge	r1, r5
  40572e:	bd30      	popge	{r4, r5, pc}
  405730:	ea6f 0404 	mvn.w	r4, r4
  405734:	3c1f      	subs	r4, #31
  405736:	da1c      	bge.n	405772 <__adddf3+0x1d2>
  405738:	340c      	adds	r4, #12
  40573a:	dc0e      	bgt.n	40575a <__adddf3+0x1ba>
  40573c:	f104 0414 	add.w	r4, r4, #20
  405740:	f1c4 0220 	rsb	r2, r4, #32
  405744:	fa20 f004 	lsr.w	r0, r0, r4
  405748:	fa01 f302 	lsl.w	r3, r1, r2
  40574c:	ea40 0003 	orr.w	r0, r0, r3
  405750:	fa21 f304 	lsr.w	r3, r1, r4
  405754:	ea45 0103 	orr.w	r1, r5, r3
  405758:	bd30      	pop	{r4, r5, pc}
  40575a:	f1c4 040c 	rsb	r4, r4, #12
  40575e:	f1c4 0220 	rsb	r2, r4, #32
  405762:	fa20 f002 	lsr.w	r0, r0, r2
  405766:	fa01 f304 	lsl.w	r3, r1, r4
  40576a:	ea40 0003 	orr.w	r0, r0, r3
  40576e:	4629      	mov	r1, r5
  405770:	bd30      	pop	{r4, r5, pc}
  405772:	fa21 f004 	lsr.w	r0, r1, r4
  405776:	4629      	mov	r1, r5
  405778:	bd30      	pop	{r4, r5, pc}
  40577a:	f094 0f00 	teq	r4, #0
  40577e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405782:	bf06      	itte	eq
  405784:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405788:	3401      	addeq	r4, #1
  40578a:	3d01      	subne	r5, #1
  40578c:	e74e      	b.n	40562c <__adddf3+0x8c>
  40578e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405792:	bf18      	it	ne
  405794:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405798:	d029      	beq.n	4057ee <__adddf3+0x24e>
  40579a:	ea94 0f05 	teq	r4, r5
  40579e:	bf08      	it	eq
  4057a0:	ea90 0f02 	teqeq	r0, r2
  4057a4:	d005      	beq.n	4057b2 <__adddf3+0x212>
  4057a6:	ea54 0c00 	orrs.w	ip, r4, r0
  4057aa:	bf04      	itt	eq
  4057ac:	4619      	moveq	r1, r3
  4057ae:	4610      	moveq	r0, r2
  4057b0:	bd30      	pop	{r4, r5, pc}
  4057b2:	ea91 0f03 	teq	r1, r3
  4057b6:	bf1e      	ittt	ne
  4057b8:	2100      	movne	r1, #0
  4057ba:	2000      	movne	r0, #0
  4057bc:	bd30      	popne	{r4, r5, pc}
  4057be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4057c2:	d105      	bne.n	4057d0 <__adddf3+0x230>
  4057c4:	0040      	lsls	r0, r0, #1
  4057c6:	4149      	adcs	r1, r1
  4057c8:	bf28      	it	cs
  4057ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4057ce:	bd30      	pop	{r4, r5, pc}
  4057d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4057d4:	bf3c      	itt	cc
  4057d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4057da:	bd30      	popcc	{r4, r5, pc}
  4057dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4057e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4057e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4057e8:	f04f 0000 	mov.w	r0, #0
  4057ec:	bd30      	pop	{r4, r5, pc}
  4057ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4057f2:	bf1a      	itte	ne
  4057f4:	4619      	movne	r1, r3
  4057f6:	4610      	movne	r0, r2
  4057f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4057fc:	bf1c      	itt	ne
  4057fe:	460b      	movne	r3, r1
  405800:	4602      	movne	r2, r0
  405802:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405806:	bf06      	itte	eq
  405808:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40580c:	ea91 0f03 	teqeq	r1, r3
  405810:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405814:	bd30      	pop	{r4, r5, pc}
  405816:	bf00      	nop

00405818 <__aeabi_ui2d>:
  405818:	f090 0f00 	teq	r0, #0
  40581c:	bf04      	itt	eq
  40581e:	2100      	moveq	r1, #0
  405820:	4770      	bxeq	lr
  405822:	b530      	push	{r4, r5, lr}
  405824:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405828:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40582c:	f04f 0500 	mov.w	r5, #0
  405830:	f04f 0100 	mov.w	r1, #0
  405834:	e750      	b.n	4056d8 <__adddf3+0x138>
  405836:	bf00      	nop

00405838 <__aeabi_i2d>:
  405838:	f090 0f00 	teq	r0, #0
  40583c:	bf04      	itt	eq
  40583e:	2100      	moveq	r1, #0
  405840:	4770      	bxeq	lr
  405842:	b530      	push	{r4, r5, lr}
  405844:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405848:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40584c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405850:	bf48      	it	mi
  405852:	4240      	negmi	r0, r0
  405854:	f04f 0100 	mov.w	r1, #0
  405858:	e73e      	b.n	4056d8 <__adddf3+0x138>
  40585a:	bf00      	nop

0040585c <__aeabi_f2d>:
  40585c:	0042      	lsls	r2, r0, #1
  40585e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405862:	ea4f 0131 	mov.w	r1, r1, rrx
  405866:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40586a:	bf1f      	itttt	ne
  40586c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405870:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405874:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405878:	4770      	bxne	lr
  40587a:	f092 0f00 	teq	r2, #0
  40587e:	bf14      	ite	ne
  405880:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405884:	4770      	bxeq	lr
  405886:	b530      	push	{r4, r5, lr}
  405888:	f44f 7460 	mov.w	r4, #896	; 0x380
  40588c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405894:	e720      	b.n	4056d8 <__adddf3+0x138>
  405896:	bf00      	nop

00405898 <__aeabi_ul2d>:
  405898:	ea50 0201 	orrs.w	r2, r0, r1
  40589c:	bf08      	it	eq
  40589e:	4770      	bxeq	lr
  4058a0:	b530      	push	{r4, r5, lr}
  4058a2:	f04f 0500 	mov.w	r5, #0
  4058a6:	e00a      	b.n	4058be <__aeabi_l2d+0x16>

004058a8 <__aeabi_l2d>:
  4058a8:	ea50 0201 	orrs.w	r2, r0, r1
  4058ac:	bf08      	it	eq
  4058ae:	4770      	bxeq	lr
  4058b0:	b530      	push	{r4, r5, lr}
  4058b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4058b6:	d502      	bpl.n	4058be <__aeabi_l2d+0x16>
  4058b8:	4240      	negs	r0, r0
  4058ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4058be:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4058c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4058c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4058ca:	f43f aedc 	beq.w	405686 <__adddf3+0xe6>
  4058ce:	f04f 0203 	mov.w	r2, #3
  4058d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4058d6:	bf18      	it	ne
  4058d8:	3203      	addne	r2, #3
  4058da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4058de:	bf18      	it	ne
  4058e0:	3203      	addne	r2, #3
  4058e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4058e6:	f1c2 0320 	rsb	r3, r2, #32
  4058ea:	fa00 fc03 	lsl.w	ip, r0, r3
  4058ee:	fa20 f002 	lsr.w	r0, r0, r2
  4058f2:	fa01 fe03 	lsl.w	lr, r1, r3
  4058f6:	ea40 000e 	orr.w	r0, r0, lr
  4058fa:	fa21 f102 	lsr.w	r1, r1, r2
  4058fe:	4414      	add	r4, r2
  405900:	e6c1      	b.n	405686 <__adddf3+0xe6>
  405902:	bf00      	nop

00405904 <__aeabi_dmul>:
  405904:	b570      	push	{r4, r5, r6, lr}
  405906:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40590a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40590e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405912:	bf1d      	ittte	ne
  405914:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405918:	ea94 0f0c 	teqne	r4, ip
  40591c:	ea95 0f0c 	teqne	r5, ip
  405920:	f000 f8de 	bleq	405ae0 <__aeabi_dmul+0x1dc>
  405924:	442c      	add	r4, r5
  405926:	ea81 0603 	eor.w	r6, r1, r3
  40592a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40592e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405932:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405936:	bf18      	it	ne
  405938:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40593c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405944:	d038      	beq.n	4059b8 <__aeabi_dmul+0xb4>
  405946:	fba0 ce02 	umull	ip, lr, r0, r2
  40594a:	f04f 0500 	mov.w	r5, #0
  40594e:	fbe1 e502 	umlal	lr, r5, r1, r2
  405952:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405956:	fbe0 e503 	umlal	lr, r5, r0, r3
  40595a:	f04f 0600 	mov.w	r6, #0
  40595e:	fbe1 5603 	umlal	r5, r6, r1, r3
  405962:	f09c 0f00 	teq	ip, #0
  405966:	bf18      	it	ne
  405968:	f04e 0e01 	orrne.w	lr, lr, #1
  40596c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405970:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405974:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405978:	d204      	bcs.n	405984 <__aeabi_dmul+0x80>
  40597a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40597e:	416d      	adcs	r5, r5
  405980:	eb46 0606 	adc.w	r6, r6, r6
  405984:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405988:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40598c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405990:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405994:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405998:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40599c:	bf88      	it	hi
  40599e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4059a2:	d81e      	bhi.n	4059e2 <__aeabi_dmul+0xde>
  4059a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4059a8:	bf08      	it	eq
  4059aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4059ae:	f150 0000 	adcs.w	r0, r0, #0
  4059b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4059b6:	bd70      	pop	{r4, r5, r6, pc}
  4059b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4059bc:	ea46 0101 	orr.w	r1, r6, r1
  4059c0:	ea40 0002 	orr.w	r0, r0, r2
  4059c4:	ea81 0103 	eor.w	r1, r1, r3
  4059c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4059cc:	bfc2      	ittt	gt
  4059ce:	ebd4 050c 	rsbsgt	r5, r4, ip
  4059d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4059d6:	bd70      	popgt	{r4, r5, r6, pc}
  4059d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4059dc:	f04f 0e00 	mov.w	lr, #0
  4059e0:	3c01      	subs	r4, #1
  4059e2:	f300 80ab 	bgt.w	405b3c <__aeabi_dmul+0x238>
  4059e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4059ea:	bfde      	ittt	le
  4059ec:	2000      	movle	r0, #0
  4059ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4059f2:	bd70      	pople	{r4, r5, r6, pc}
  4059f4:	f1c4 0400 	rsb	r4, r4, #0
  4059f8:	3c20      	subs	r4, #32
  4059fa:	da35      	bge.n	405a68 <__aeabi_dmul+0x164>
  4059fc:	340c      	adds	r4, #12
  4059fe:	dc1b      	bgt.n	405a38 <__aeabi_dmul+0x134>
  405a00:	f104 0414 	add.w	r4, r4, #20
  405a04:	f1c4 0520 	rsb	r5, r4, #32
  405a08:	fa00 f305 	lsl.w	r3, r0, r5
  405a0c:	fa20 f004 	lsr.w	r0, r0, r4
  405a10:	fa01 f205 	lsl.w	r2, r1, r5
  405a14:	ea40 0002 	orr.w	r0, r0, r2
  405a18:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405a1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405a20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405a24:	fa21 f604 	lsr.w	r6, r1, r4
  405a28:	eb42 0106 	adc.w	r1, r2, r6
  405a2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405a30:	bf08      	it	eq
  405a32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405a36:	bd70      	pop	{r4, r5, r6, pc}
  405a38:	f1c4 040c 	rsb	r4, r4, #12
  405a3c:	f1c4 0520 	rsb	r5, r4, #32
  405a40:	fa00 f304 	lsl.w	r3, r0, r4
  405a44:	fa20 f005 	lsr.w	r0, r0, r5
  405a48:	fa01 f204 	lsl.w	r2, r1, r4
  405a4c:	ea40 0002 	orr.w	r0, r0, r2
  405a50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405a54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405a58:	f141 0100 	adc.w	r1, r1, #0
  405a5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405a60:	bf08      	it	eq
  405a62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405a66:	bd70      	pop	{r4, r5, r6, pc}
  405a68:	f1c4 0520 	rsb	r5, r4, #32
  405a6c:	fa00 f205 	lsl.w	r2, r0, r5
  405a70:	ea4e 0e02 	orr.w	lr, lr, r2
  405a74:	fa20 f304 	lsr.w	r3, r0, r4
  405a78:	fa01 f205 	lsl.w	r2, r1, r5
  405a7c:	ea43 0302 	orr.w	r3, r3, r2
  405a80:	fa21 f004 	lsr.w	r0, r1, r4
  405a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405a88:	fa21 f204 	lsr.w	r2, r1, r4
  405a8c:	ea20 0002 	bic.w	r0, r0, r2
  405a90:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  405a94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405a98:	bf08      	it	eq
  405a9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405a9e:	bd70      	pop	{r4, r5, r6, pc}
  405aa0:	f094 0f00 	teq	r4, #0
  405aa4:	d10f      	bne.n	405ac6 <__aeabi_dmul+0x1c2>
  405aa6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  405aaa:	0040      	lsls	r0, r0, #1
  405aac:	eb41 0101 	adc.w	r1, r1, r1
  405ab0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405ab4:	bf08      	it	eq
  405ab6:	3c01      	subeq	r4, #1
  405ab8:	d0f7      	beq.n	405aaa <__aeabi_dmul+0x1a6>
  405aba:	ea41 0106 	orr.w	r1, r1, r6
  405abe:	f095 0f00 	teq	r5, #0
  405ac2:	bf18      	it	ne
  405ac4:	4770      	bxne	lr
  405ac6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  405aca:	0052      	lsls	r2, r2, #1
  405acc:	eb43 0303 	adc.w	r3, r3, r3
  405ad0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405ad4:	bf08      	it	eq
  405ad6:	3d01      	subeq	r5, #1
  405ad8:	d0f7      	beq.n	405aca <__aeabi_dmul+0x1c6>
  405ada:	ea43 0306 	orr.w	r3, r3, r6
  405ade:	4770      	bx	lr
  405ae0:	ea94 0f0c 	teq	r4, ip
  405ae4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405ae8:	bf18      	it	ne
  405aea:	ea95 0f0c 	teqne	r5, ip
  405aee:	d00c      	beq.n	405b0a <__aeabi_dmul+0x206>
  405af0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405af4:	bf18      	it	ne
  405af6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405afa:	d1d1      	bne.n	405aa0 <__aeabi_dmul+0x19c>
  405afc:	ea81 0103 	eor.w	r1, r1, r3
  405b00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405b04:	f04f 0000 	mov.w	r0, #0
  405b08:	bd70      	pop	{r4, r5, r6, pc}
  405b0a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405b0e:	bf06      	itte	eq
  405b10:	4610      	moveq	r0, r2
  405b12:	4619      	moveq	r1, r3
  405b14:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405b18:	d019      	beq.n	405b4e <__aeabi_dmul+0x24a>
  405b1a:	ea94 0f0c 	teq	r4, ip
  405b1e:	d102      	bne.n	405b26 <__aeabi_dmul+0x222>
  405b20:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405b24:	d113      	bne.n	405b4e <__aeabi_dmul+0x24a>
  405b26:	ea95 0f0c 	teq	r5, ip
  405b2a:	d105      	bne.n	405b38 <__aeabi_dmul+0x234>
  405b2c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405b30:	bf1c      	itt	ne
  405b32:	4610      	movne	r0, r2
  405b34:	4619      	movne	r1, r3
  405b36:	d10a      	bne.n	405b4e <__aeabi_dmul+0x24a>
  405b38:	ea81 0103 	eor.w	r1, r1, r3
  405b3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405b40:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405b44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405b48:	f04f 0000 	mov.w	r0, #0
  405b4c:	bd70      	pop	{r4, r5, r6, pc}
  405b4e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405b52:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405b56:	bd70      	pop	{r4, r5, r6, pc}

00405b58 <__aeabi_ddiv>:
  405b58:	b570      	push	{r4, r5, r6, lr}
  405b5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405b5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405b62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405b66:	bf1d      	ittte	ne
  405b68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405b6c:	ea94 0f0c 	teqne	r4, ip
  405b70:	ea95 0f0c 	teqne	r5, ip
  405b74:	f000 f8a7 	bleq	405cc6 <__aeabi_ddiv+0x16e>
  405b78:	eba4 0405 	sub.w	r4, r4, r5
  405b7c:	ea81 0e03 	eor.w	lr, r1, r3
  405b80:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405b84:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405b88:	f000 8088 	beq.w	405c9c <__aeabi_ddiv+0x144>
  405b8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405b90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  405b94:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  405b98:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  405b9c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  405ba0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  405ba4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  405ba8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  405bac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  405bb0:	429d      	cmp	r5, r3
  405bb2:	bf08      	it	eq
  405bb4:	4296      	cmpeq	r6, r2
  405bb6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  405bba:	f504 7440 	add.w	r4, r4, #768	; 0x300
  405bbe:	d202      	bcs.n	405bc6 <__aeabi_ddiv+0x6e>
  405bc0:	085b      	lsrs	r3, r3, #1
  405bc2:	ea4f 0232 	mov.w	r2, r2, rrx
  405bc6:	1ab6      	subs	r6, r6, r2
  405bc8:	eb65 0503 	sbc.w	r5, r5, r3
  405bcc:	085b      	lsrs	r3, r3, #1
  405bce:	ea4f 0232 	mov.w	r2, r2, rrx
  405bd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405bd6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  405bda:	ebb6 0e02 	subs.w	lr, r6, r2
  405bde:	eb75 0e03 	sbcs.w	lr, r5, r3
  405be2:	bf22      	ittt	cs
  405be4:	1ab6      	subcs	r6, r6, r2
  405be6:	4675      	movcs	r5, lr
  405be8:	ea40 000c 	orrcs.w	r0, r0, ip
  405bec:	085b      	lsrs	r3, r3, #1
  405bee:	ea4f 0232 	mov.w	r2, r2, rrx
  405bf2:	ebb6 0e02 	subs.w	lr, r6, r2
  405bf6:	eb75 0e03 	sbcs.w	lr, r5, r3
  405bfa:	bf22      	ittt	cs
  405bfc:	1ab6      	subcs	r6, r6, r2
  405bfe:	4675      	movcs	r5, lr
  405c00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405c04:	085b      	lsrs	r3, r3, #1
  405c06:	ea4f 0232 	mov.w	r2, r2, rrx
  405c0a:	ebb6 0e02 	subs.w	lr, r6, r2
  405c0e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405c12:	bf22      	ittt	cs
  405c14:	1ab6      	subcs	r6, r6, r2
  405c16:	4675      	movcs	r5, lr
  405c18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405c1c:	085b      	lsrs	r3, r3, #1
  405c1e:	ea4f 0232 	mov.w	r2, r2, rrx
  405c22:	ebb6 0e02 	subs.w	lr, r6, r2
  405c26:	eb75 0e03 	sbcs.w	lr, r5, r3
  405c2a:	bf22      	ittt	cs
  405c2c:	1ab6      	subcs	r6, r6, r2
  405c2e:	4675      	movcs	r5, lr
  405c30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405c34:	ea55 0e06 	orrs.w	lr, r5, r6
  405c38:	d018      	beq.n	405c6c <__aeabi_ddiv+0x114>
  405c3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  405c3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405c42:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405c46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  405c4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  405c4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405c52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405c56:	d1c0      	bne.n	405bda <__aeabi_ddiv+0x82>
  405c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405c5c:	d10b      	bne.n	405c76 <__aeabi_ddiv+0x11e>
  405c5e:	ea41 0100 	orr.w	r1, r1, r0
  405c62:	f04f 0000 	mov.w	r0, #0
  405c66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  405c6a:	e7b6      	b.n	405bda <__aeabi_ddiv+0x82>
  405c6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405c70:	bf04      	itt	eq
  405c72:	4301      	orreq	r1, r0
  405c74:	2000      	moveq	r0, #0
  405c76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405c7a:	bf88      	it	hi
  405c7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405c80:	f63f aeaf 	bhi.w	4059e2 <__aeabi_dmul+0xde>
  405c84:	ebb5 0c03 	subs.w	ip, r5, r3
  405c88:	bf04      	itt	eq
  405c8a:	ebb6 0c02 	subseq.w	ip, r6, r2
  405c8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405c92:	f150 0000 	adcs.w	r0, r0, #0
  405c96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405c9a:	bd70      	pop	{r4, r5, r6, pc}
  405c9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  405ca0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  405ca4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  405ca8:	bfc2      	ittt	gt
  405caa:	ebd4 050c 	rsbsgt	r5, r4, ip
  405cae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405cb2:	bd70      	popgt	{r4, r5, r6, pc}
  405cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405cb8:	f04f 0e00 	mov.w	lr, #0
  405cbc:	3c01      	subs	r4, #1
  405cbe:	e690      	b.n	4059e2 <__aeabi_dmul+0xde>
  405cc0:	ea45 0e06 	orr.w	lr, r5, r6
  405cc4:	e68d      	b.n	4059e2 <__aeabi_dmul+0xde>
  405cc6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405cca:	ea94 0f0c 	teq	r4, ip
  405cce:	bf08      	it	eq
  405cd0:	ea95 0f0c 	teqeq	r5, ip
  405cd4:	f43f af3b 	beq.w	405b4e <__aeabi_dmul+0x24a>
  405cd8:	ea94 0f0c 	teq	r4, ip
  405cdc:	d10a      	bne.n	405cf4 <__aeabi_ddiv+0x19c>
  405cde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405ce2:	f47f af34 	bne.w	405b4e <__aeabi_dmul+0x24a>
  405ce6:	ea95 0f0c 	teq	r5, ip
  405cea:	f47f af25 	bne.w	405b38 <__aeabi_dmul+0x234>
  405cee:	4610      	mov	r0, r2
  405cf0:	4619      	mov	r1, r3
  405cf2:	e72c      	b.n	405b4e <__aeabi_dmul+0x24a>
  405cf4:	ea95 0f0c 	teq	r5, ip
  405cf8:	d106      	bne.n	405d08 <__aeabi_ddiv+0x1b0>
  405cfa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  405cfe:	f43f aefd 	beq.w	405afc <__aeabi_dmul+0x1f8>
  405d02:	4610      	mov	r0, r2
  405d04:	4619      	mov	r1, r3
  405d06:	e722      	b.n	405b4e <__aeabi_dmul+0x24a>
  405d08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405d0c:	bf18      	it	ne
  405d0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405d12:	f47f aec5 	bne.w	405aa0 <__aeabi_dmul+0x19c>
  405d16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  405d1a:	f47f af0d 	bne.w	405b38 <__aeabi_dmul+0x234>
  405d1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405d22:	f47f aeeb 	bne.w	405afc <__aeabi_dmul+0x1f8>
  405d26:	e712      	b.n	405b4e <__aeabi_dmul+0x24a>

00405d28 <__gedf2>:
  405d28:	f04f 3cff 	mov.w	ip, #4294967295
  405d2c:	e006      	b.n	405d3c <__cmpdf2+0x4>
  405d2e:	bf00      	nop

00405d30 <__ledf2>:
  405d30:	f04f 0c01 	mov.w	ip, #1
  405d34:	e002      	b.n	405d3c <__cmpdf2+0x4>
  405d36:	bf00      	nop

00405d38 <__cmpdf2>:
  405d38:	f04f 0c01 	mov.w	ip, #1
  405d3c:	f84d cd04 	str.w	ip, [sp, #-4]!
  405d40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405d44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405d48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405d4c:	bf18      	it	ne
  405d4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  405d52:	d01b      	beq.n	405d8c <__cmpdf2+0x54>
  405d54:	b001      	add	sp, #4
  405d56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  405d5a:	bf0c      	ite	eq
  405d5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405d60:	ea91 0f03 	teqne	r1, r3
  405d64:	bf02      	ittt	eq
  405d66:	ea90 0f02 	teqeq	r0, r2
  405d6a:	2000      	moveq	r0, #0
  405d6c:	4770      	bxeq	lr
  405d6e:	f110 0f00 	cmn.w	r0, #0
  405d72:	ea91 0f03 	teq	r1, r3
  405d76:	bf58      	it	pl
  405d78:	4299      	cmppl	r1, r3
  405d7a:	bf08      	it	eq
  405d7c:	4290      	cmpeq	r0, r2
  405d7e:	bf2c      	ite	cs
  405d80:	17d8      	asrcs	r0, r3, #31
  405d82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  405d86:	f040 0001 	orr.w	r0, r0, #1
  405d8a:	4770      	bx	lr
  405d8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405d90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405d94:	d102      	bne.n	405d9c <__cmpdf2+0x64>
  405d96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  405d9a:	d107      	bne.n	405dac <__cmpdf2+0x74>
  405d9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  405da0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405da4:	d1d6      	bne.n	405d54 <__cmpdf2+0x1c>
  405da6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  405daa:	d0d3      	beq.n	405d54 <__cmpdf2+0x1c>
  405dac:	f85d 0b04 	ldr.w	r0, [sp], #4
  405db0:	4770      	bx	lr
  405db2:	bf00      	nop

00405db4 <__aeabi_cdrcmple>:
  405db4:	4684      	mov	ip, r0
  405db6:	4610      	mov	r0, r2
  405db8:	4662      	mov	r2, ip
  405dba:	468c      	mov	ip, r1
  405dbc:	4619      	mov	r1, r3
  405dbe:	4663      	mov	r3, ip
  405dc0:	e000      	b.n	405dc4 <__aeabi_cdcmpeq>
  405dc2:	bf00      	nop

00405dc4 <__aeabi_cdcmpeq>:
  405dc4:	b501      	push	{r0, lr}
  405dc6:	f7ff ffb7 	bl	405d38 <__cmpdf2>
  405dca:	2800      	cmp	r0, #0
  405dcc:	bf48      	it	mi
  405dce:	f110 0f00 	cmnmi.w	r0, #0
  405dd2:	bd01      	pop	{r0, pc}

00405dd4 <__aeabi_dcmpeq>:
  405dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  405dd8:	f7ff fff4 	bl	405dc4 <__aeabi_cdcmpeq>
  405ddc:	bf0c      	ite	eq
  405dde:	2001      	moveq	r0, #1
  405de0:	2000      	movne	r0, #0
  405de2:	f85d fb08 	ldr.w	pc, [sp], #8
  405de6:	bf00      	nop

00405de8 <__aeabi_dcmplt>:
  405de8:	f84d ed08 	str.w	lr, [sp, #-8]!
  405dec:	f7ff ffea 	bl	405dc4 <__aeabi_cdcmpeq>
  405df0:	bf34      	ite	cc
  405df2:	2001      	movcc	r0, #1
  405df4:	2000      	movcs	r0, #0
  405df6:	f85d fb08 	ldr.w	pc, [sp], #8
  405dfa:	bf00      	nop

00405dfc <__aeabi_dcmple>:
  405dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e00:	f7ff ffe0 	bl	405dc4 <__aeabi_cdcmpeq>
  405e04:	bf94      	ite	ls
  405e06:	2001      	movls	r0, #1
  405e08:	2000      	movhi	r0, #0
  405e0a:	f85d fb08 	ldr.w	pc, [sp], #8
  405e0e:	bf00      	nop

00405e10 <__aeabi_dcmpge>:
  405e10:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e14:	f7ff ffce 	bl	405db4 <__aeabi_cdrcmple>
  405e18:	bf94      	ite	ls
  405e1a:	2001      	movls	r0, #1
  405e1c:	2000      	movhi	r0, #0
  405e1e:	f85d fb08 	ldr.w	pc, [sp], #8
  405e22:	bf00      	nop

00405e24 <__aeabi_dcmpgt>:
  405e24:	f84d ed08 	str.w	lr, [sp, #-8]!
  405e28:	f7ff ffc4 	bl	405db4 <__aeabi_cdrcmple>
  405e2c:	bf34      	ite	cc
  405e2e:	2001      	movcc	r0, #1
  405e30:	2000      	movcs	r0, #0
  405e32:	f85d fb08 	ldr.w	pc, [sp], #8
  405e36:	bf00      	nop

00405e38 <__aeabi_d2iz>:
  405e38:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405e3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405e40:	d215      	bcs.n	405e6e <__aeabi_d2iz+0x36>
  405e42:	d511      	bpl.n	405e68 <__aeabi_d2iz+0x30>
  405e44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405e48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405e4c:	d912      	bls.n	405e74 <__aeabi_d2iz+0x3c>
  405e4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405e52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405e56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405e5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405e5e:	fa23 f002 	lsr.w	r0, r3, r2
  405e62:	bf18      	it	ne
  405e64:	4240      	negne	r0, r0
  405e66:	4770      	bx	lr
  405e68:	f04f 0000 	mov.w	r0, #0
  405e6c:	4770      	bx	lr
  405e6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405e72:	d105      	bne.n	405e80 <__aeabi_d2iz+0x48>
  405e74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405e78:	bf08      	it	eq
  405e7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405e7e:	4770      	bx	lr
  405e80:	f04f 0000 	mov.w	r0, #0
  405e84:	4770      	bx	lr
  405e86:	bf00      	nop

00405e88 <__aeabi_d2f>:
  405e88:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405e8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405e90:	bf24      	itt	cs
  405e92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  405e96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  405e9a:	d90d      	bls.n	405eb8 <__aeabi_d2f+0x30>
  405e9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405ea0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405ea4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  405ea8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405eac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405eb0:	bf08      	it	eq
  405eb2:	f020 0001 	biceq.w	r0, r0, #1
  405eb6:	4770      	bx	lr
  405eb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405ebc:	d121      	bne.n	405f02 <__aeabi_d2f+0x7a>
  405ebe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405ec2:	bfbc      	itt	lt
  405ec4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405ec8:	4770      	bxlt	lr
  405eca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405ece:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405ed2:	f1c2 0218 	rsb	r2, r2, #24
  405ed6:	f1c2 0c20 	rsb	ip, r2, #32
  405eda:	fa10 f30c 	lsls.w	r3, r0, ip
  405ede:	fa20 f002 	lsr.w	r0, r0, r2
  405ee2:	bf18      	it	ne
  405ee4:	f040 0001 	orrne.w	r0, r0, #1
  405ee8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405eec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405ef0:	fa03 fc0c 	lsl.w	ip, r3, ip
  405ef4:	ea40 000c 	orr.w	r0, r0, ip
  405ef8:	fa23 f302 	lsr.w	r3, r3, r2
  405efc:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405f00:	e7cc      	b.n	405e9c <__aeabi_d2f+0x14>
  405f02:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405f06:	d107      	bne.n	405f18 <__aeabi_d2f+0x90>
  405f08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405f0c:	bf1e      	ittt	ne
  405f0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405f12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405f16:	4770      	bxne	lr
  405f18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405f24:	4770      	bx	lr
  405f26:	bf00      	nop

00405f28 <__aeabi_frsub>:
  405f28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  405f2c:	e002      	b.n	405f34 <__addsf3>
  405f2e:	bf00      	nop

00405f30 <__aeabi_fsub>:
  405f30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405f34 <__addsf3>:
  405f34:	0042      	lsls	r2, r0, #1
  405f36:	bf1f      	itttt	ne
  405f38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  405f3c:	ea92 0f03 	teqne	r2, r3
  405f40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405f44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405f48:	d06a      	beq.n	406020 <__addsf3+0xec>
  405f4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  405f4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405f52:	bfc1      	itttt	gt
  405f54:	18d2      	addgt	r2, r2, r3
  405f56:	4041      	eorgt	r1, r0
  405f58:	4048      	eorgt	r0, r1
  405f5a:	4041      	eorgt	r1, r0
  405f5c:	bfb8      	it	lt
  405f5e:	425b      	neglt	r3, r3
  405f60:	2b19      	cmp	r3, #25
  405f62:	bf88      	it	hi
  405f64:	4770      	bxhi	lr
  405f66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405f6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405f72:	bf18      	it	ne
  405f74:	4240      	negne	r0, r0
  405f76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405f7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405f7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405f82:	bf18      	it	ne
  405f84:	4249      	negne	r1, r1
  405f86:	ea92 0f03 	teq	r2, r3
  405f8a:	d03f      	beq.n	40600c <__addsf3+0xd8>
  405f8c:	f1a2 0201 	sub.w	r2, r2, #1
  405f90:	fa41 fc03 	asr.w	ip, r1, r3
  405f94:	eb10 000c 	adds.w	r0, r0, ip
  405f98:	f1c3 0320 	rsb	r3, r3, #32
  405f9c:	fa01 f103 	lsl.w	r1, r1, r3
  405fa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405fa4:	d502      	bpl.n	405fac <__addsf3+0x78>
  405fa6:	4249      	negs	r1, r1
  405fa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405fac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405fb0:	d313      	bcc.n	405fda <__addsf3+0xa6>
  405fb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  405fb6:	d306      	bcc.n	405fc6 <__addsf3+0x92>
  405fb8:	0840      	lsrs	r0, r0, #1
  405fba:	ea4f 0131 	mov.w	r1, r1, rrx
  405fbe:	f102 0201 	add.w	r2, r2, #1
  405fc2:	2afe      	cmp	r2, #254	; 0xfe
  405fc4:	d251      	bcs.n	40606a <__addsf3+0x136>
  405fc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  405fca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405fce:	bf08      	it	eq
  405fd0:	f020 0001 	biceq.w	r0, r0, #1
  405fd4:	ea40 0003 	orr.w	r0, r0, r3
  405fd8:	4770      	bx	lr
  405fda:	0049      	lsls	r1, r1, #1
  405fdc:	eb40 0000 	adc.w	r0, r0, r0
  405fe0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405fe4:	f1a2 0201 	sub.w	r2, r2, #1
  405fe8:	d1ed      	bne.n	405fc6 <__addsf3+0x92>
  405fea:	fab0 fc80 	clz	ip, r0
  405fee:	f1ac 0c08 	sub.w	ip, ip, #8
  405ff2:	ebb2 020c 	subs.w	r2, r2, ip
  405ff6:	fa00 f00c 	lsl.w	r0, r0, ip
  405ffa:	bfaa      	itet	ge
  405ffc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  406000:	4252      	neglt	r2, r2
  406002:	4318      	orrge	r0, r3
  406004:	bfbc      	itt	lt
  406006:	40d0      	lsrlt	r0, r2
  406008:	4318      	orrlt	r0, r3
  40600a:	4770      	bx	lr
  40600c:	f092 0f00 	teq	r2, #0
  406010:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  406014:	bf06      	itte	eq
  406016:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40601a:	3201      	addeq	r2, #1
  40601c:	3b01      	subne	r3, #1
  40601e:	e7b5      	b.n	405f8c <__addsf3+0x58>
  406020:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406028:	bf18      	it	ne
  40602a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40602e:	d021      	beq.n	406074 <__addsf3+0x140>
  406030:	ea92 0f03 	teq	r2, r3
  406034:	d004      	beq.n	406040 <__addsf3+0x10c>
  406036:	f092 0f00 	teq	r2, #0
  40603a:	bf08      	it	eq
  40603c:	4608      	moveq	r0, r1
  40603e:	4770      	bx	lr
  406040:	ea90 0f01 	teq	r0, r1
  406044:	bf1c      	itt	ne
  406046:	2000      	movne	r0, #0
  406048:	4770      	bxne	lr
  40604a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  40604e:	d104      	bne.n	40605a <__addsf3+0x126>
  406050:	0040      	lsls	r0, r0, #1
  406052:	bf28      	it	cs
  406054:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  406058:	4770      	bx	lr
  40605a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  40605e:	bf3c      	itt	cc
  406060:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  406064:	4770      	bxcc	lr
  406066:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  40606a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  40606e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  406072:	4770      	bx	lr
  406074:	ea7f 6222 	mvns.w	r2, r2, asr #24
  406078:	bf16      	itet	ne
  40607a:	4608      	movne	r0, r1
  40607c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  406080:	4601      	movne	r1, r0
  406082:	0242      	lsls	r2, r0, #9
  406084:	bf06      	itte	eq
  406086:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  40608a:	ea90 0f01 	teqeq	r0, r1
  40608e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  406092:	4770      	bx	lr

00406094 <__aeabi_ui2f>:
  406094:	f04f 0300 	mov.w	r3, #0
  406098:	e004      	b.n	4060a4 <__aeabi_i2f+0x8>
  40609a:	bf00      	nop

0040609c <__aeabi_i2f>:
  40609c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  4060a0:	bf48      	it	mi
  4060a2:	4240      	negmi	r0, r0
  4060a4:	ea5f 0c00 	movs.w	ip, r0
  4060a8:	bf08      	it	eq
  4060aa:	4770      	bxeq	lr
  4060ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  4060b0:	4601      	mov	r1, r0
  4060b2:	f04f 0000 	mov.w	r0, #0
  4060b6:	e01c      	b.n	4060f2 <__aeabi_l2f+0x2a>

004060b8 <__aeabi_ul2f>:
  4060b8:	ea50 0201 	orrs.w	r2, r0, r1
  4060bc:	bf08      	it	eq
  4060be:	4770      	bxeq	lr
  4060c0:	f04f 0300 	mov.w	r3, #0
  4060c4:	e00a      	b.n	4060dc <__aeabi_l2f+0x14>
  4060c6:	bf00      	nop

004060c8 <__aeabi_l2f>:
  4060c8:	ea50 0201 	orrs.w	r2, r0, r1
  4060cc:	bf08      	it	eq
  4060ce:	4770      	bxeq	lr
  4060d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  4060d4:	d502      	bpl.n	4060dc <__aeabi_l2f+0x14>
  4060d6:	4240      	negs	r0, r0
  4060d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4060dc:	ea5f 0c01 	movs.w	ip, r1
  4060e0:	bf02      	ittt	eq
  4060e2:	4684      	moveq	ip, r0
  4060e4:	4601      	moveq	r1, r0
  4060e6:	2000      	moveq	r0, #0
  4060e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  4060ec:	bf08      	it	eq
  4060ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  4060f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  4060f6:	fabc f28c 	clz	r2, ip
  4060fa:	3a08      	subs	r2, #8
  4060fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  406100:	db10      	blt.n	406124 <__aeabi_l2f+0x5c>
  406102:	fa01 fc02 	lsl.w	ip, r1, r2
  406106:	4463      	add	r3, ip
  406108:	fa00 fc02 	lsl.w	ip, r0, r2
  40610c:	f1c2 0220 	rsb	r2, r2, #32
  406110:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  406114:	fa20 f202 	lsr.w	r2, r0, r2
  406118:	eb43 0002 	adc.w	r0, r3, r2
  40611c:	bf08      	it	eq
  40611e:	f020 0001 	biceq.w	r0, r0, #1
  406122:	4770      	bx	lr
  406124:	f102 0220 	add.w	r2, r2, #32
  406128:	fa01 fc02 	lsl.w	ip, r1, r2
  40612c:	f1c2 0220 	rsb	r2, r2, #32
  406130:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  406134:	fa21 f202 	lsr.w	r2, r1, r2
  406138:	eb43 0002 	adc.w	r0, r3, r2
  40613c:	bf08      	it	eq
  40613e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406142:	4770      	bx	lr

00406144 <__aeabi_fmul>:
  406144:	f04f 0cff 	mov.w	ip, #255	; 0xff
  406148:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  40614c:	bf1e      	ittt	ne
  40614e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  406152:	ea92 0f0c 	teqne	r2, ip
  406156:	ea93 0f0c 	teqne	r3, ip
  40615a:	d06f      	beq.n	40623c <__aeabi_fmul+0xf8>
  40615c:	441a      	add	r2, r3
  40615e:	ea80 0c01 	eor.w	ip, r0, r1
  406162:	0240      	lsls	r0, r0, #9
  406164:	bf18      	it	ne
  406166:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  40616a:	d01e      	beq.n	4061aa <__aeabi_fmul+0x66>
  40616c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  406170:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  406174:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  406178:	fba0 3101 	umull	r3, r1, r0, r1
  40617c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  406180:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  406184:	bf3e      	ittt	cc
  406186:	0049      	lslcc	r1, r1, #1
  406188:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  40618c:	005b      	lslcc	r3, r3, #1
  40618e:	ea40 0001 	orr.w	r0, r0, r1
  406192:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  406196:	2afd      	cmp	r2, #253	; 0xfd
  406198:	d81d      	bhi.n	4061d6 <__aeabi_fmul+0x92>
  40619a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  40619e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  4061a2:	bf08      	it	eq
  4061a4:	f020 0001 	biceq.w	r0, r0, #1
  4061a8:	4770      	bx	lr
  4061aa:	f090 0f00 	teq	r0, #0
  4061ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  4061b2:	bf08      	it	eq
  4061b4:	0249      	lsleq	r1, r1, #9
  4061b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  4061ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  4061be:	3a7f      	subs	r2, #127	; 0x7f
  4061c0:	bfc2      	ittt	gt
  4061c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  4061c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  4061ca:	4770      	bxgt	lr
  4061cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4061d0:	f04f 0300 	mov.w	r3, #0
  4061d4:	3a01      	subs	r2, #1
  4061d6:	dc5d      	bgt.n	406294 <__aeabi_fmul+0x150>
  4061d8:	f112 0f19 	cmn.w	r2, #25
  4061dc:	bfdc      	itt	le
  4061de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  4061e2:	4770      	bxle	lr
  4061e4:	f1c2 0200 	rsb	r2, r2, #0
  4061e8:	0041      	lsls	r1, r0, #1
  4061ea:	fa21 f102 	lsr.w	r1, r1, r2
  4061ee:	f1c2 0220 	rsb	r2, r2, #32
  4061f2:	fa00 fc02 	lsl.w	ip, r0, r2
  4061f6:	ea5f 0031 	movs.w	r0, r1, rrx
  4061fa:	f140 0000 	adc.w	r0, r0, #0
  4061fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  406202:	bf08      	it	eq
  406204:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  406208:	4770      	bx	lr
  40620a:	f092 0f00 	teq	r2, #0
  40620e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  406212:	bf02      	ittt	eq
  406214:	0040      	lsleq	r0, r0, #1
  406216:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  40621a:	3a01      	subeq	r2, #1
  40621c:	d0f9      	beq.n	406212 <__aeabi_fmul+0xce>
  40621e:	ea40 000c 	orr.w	r0, r0, ip
  406222:	f093 0f00 	teq	r3, #0
  406226:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  40622a:	bf02      	ittt	eq
  40622c:	0049      	lsleq	r1, r1, #1
  40622e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  406232:	3b01      	subeq	r3, #1
  406234:	d0f9      	beq.n	40622a <__aeabi_fmul+0xe6>
  406236:	ea41 010c 	orr.w	r1, r1, ip
  40623a:	e78f      	b.n	40615c <__aeabi_fmul+0x18>
  40623c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  406240:	ea92 0f0c 	teq	r2, ip
  406244:	bf18      	it	ne
  406246:	ea93 0f0c 	teqne	r3, ip
  40624a:	d00a      	beq.n	406262 <__aeabi_fmul+0x11e>
  40624c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  406250:	bf18      	it	ne
  406252:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  406256:	d1d8      	bne.n	40620a <__aeabi_fmul+0xc6>
  406258:	ea80 0001 	eor.w	r0, r0, r1
  40625c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406260:	4770      	bx	lr
  406262:	f090 0f00 	teq	r0, #0
  406266:	bf17      	itett	ne
  406268:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  40626c:	4608      	moveq	r0, r1
  40626e:	f091 0f00 	teqne	r1, #0
  406272:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  406276:	d014      	beq.n	4062a2 <__aeabi_fmul+0x15e>
  406278:	ea92 0f0c 	teq	r2, ip
  40627c:	d101      	bne.n	406282 <__aeabi_fmul+0x13e>
  40627e:	0242      	lsls	r2, r0, #9
  406280:	d10f      	bne.n	4062a2 <__aeabi_fmul+0x15e>
  406282:	ea93 0f0c 	teq	r3, ip
  406286:	d103      	bne.n	406290 <__aeabi_fmul+0x14c>
  406288:	024b      	lsls	r3, r1, #9
  40628a:	bf18      	it	ne
  40628c:	4608      	movne	r0, r1
  40628e:	d108      	bne.n	4062a2 <__aeabi_fmul+0x15e>
  406290:	ea80 0001 	eor.w	r0, r0, r1
  406294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  406298:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  40629c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4062a0:	4770      	bx	lr
  4062a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  4062a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  4062aa:	4770      	bx	lr

004062ac <__aeabi_fdiv>:
  4062ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4062b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4062b4:	bf1e      	ittt	ne
  4062b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4062ba:	ea92 0f0c 	teqne	r2, ip
  4062be:	ea93 0f0c 	teqne	r3, ip
  4062c2:	d069      	beq.n	406398 <__aeabi_fdiv+0xec>
  4062c4:	eba2 0203 	sub.w	r2, r2, r3
  4062c8:	ea80 0c01 	eor.w	ip, r0, r1
  4062cc:	0249      	lsls	r1, r1, #9
  4062ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
  4062d2:	d037      	beq.n	406344 <__aeabi_fdiv+0x98>
  4062d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4062d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  4062dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  4062e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4062e4:	428b      	cmp	r3, r1
  4062e6:	bf38      	it	cc
  4062e8:	005b      	lslcc	r3, r3, #1
  4062ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  4062ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  4062f2:	428b      	cmp	r3, r1
  4062f4:	bf24      	itt	cs
  4062f6:	1a5b      	subcs	r3, r3, r1
  4062f8:	ea40 000c 	orrcs.w	r0, r0, ip
  4062fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  406300:	bf24      	itt	cs
  406302:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  406306:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  40630a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  40630e:	bf24      	itt	cs
  406310:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  406314:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  406318:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  40631c:	bf24      	itt	cs
  40631e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  406322:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406326:	011b      	lsls	r3, r3, #4
  406328:	bf18      	it	ne
  40632a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  40632e:	d1e0      	bne.n	4062f2 <__aeabi_fdiv+0x46>
  406330:	2afd      	cmp	r2, #253	; 0xfd
  406332:	f63f af50 	bhi.w	4061d6 <__aeabi_fmul+0x92>
  406336:	428b      	cmp	r3, r1
  406338:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40633c:	bf08      	it	eq
  40633e:	f020 0001 	biceq.w	r0, r0, #1
  406342:	4770      	bx	lr
  406344:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  406348:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  40634c:	327f      	adds	r2, #127	; 0x7f
  40634e:	bfc2      	ittt	gt
  406350:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  406354:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  406358:	4770      	bxgt	lr
  40635a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  40635e:	f04f 0300 	mov.w	r3, #0
  406362:	3a01      	subs	r2, #1
  406364:	e737      	b.n	4061d6 <__aeabi_fmul+0x92>
  406366:	f092 0f00 	teq	r2, #0
  40636a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  40636e:	bf02      	ittt	eq
  406370:	0040      	lsleq	r0, r0, #1
  406372:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  406376:	3a01      	subeq	r2, #1
  406378:	d0f9      	beq.n	40636e <__aeabi_fdiv+0xc2>
  40637a:	ea40 000c 	orr.w	r0, r0, ip
  40637e:	f093 0f00 	teq	r3, #0
  406382:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  406386:	bf02      	ittt	eq
  406388:	0049      	lsleq	r1, r1, #1
  40638a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  40638e:	3b01      	subeq	r3, #1
  406390:	d0f9      	beq.n	406386 <__aeabi_fdiv+0xda>
  406392:	ea41 010c 	orr.w	r1, r1, ip
  406396:	e795      	b.n	4062c4 <__aeabi_fdiv+0x18>
  406398:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  40639c:	ea92 0f0c 	teq	r2, ip
  4063a0:	d108      	bne.n	4063b4 <__aeabi_fdiv+0x108>
  4063a2:	0242      	lsls	r2, r0, #9
  4063a4:	f47f af7d 	bne.w	4062a2 <__aeabi_fmul+0x15e>
  4063a8:	ea93 0f0c 	teq	r3, ip
  4063ac:	f47f af70 	bne.w	406290 <__aeabi_fmul+0x14c>
  4063b0:	4608      	mov	r0, r1
  4063b2:	e776      	b.n	4062a2 <__aeabi_fmul+0x15e>
  4063b4:	ea93 0f0c 	teq	r3, ip
  4063b8:	d104      	bne.n	4063c4 <__aeabi_fdiv+0x118>
  4063ba:	024b      	lsls	r3, r1, #9
  4063bc:	f43f af4c 	beq.w	406258 <__aeabi_fmul+0x114>
  4063c0:	4608      	mov	r0, r1
  4063c2:	e76e      	b.n	4062a2 <__aeabi_fmul+0x15e>
  4063c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  4063c8:	bf18      	it	ne
  4063ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  4063ce:	d1ca      	bne.n	406366 <__aeabi_fdiv+0xba>
  4063d0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4063d4:	f47f af5c 	bne.w	406290 <__aeabi_fmul+0x14c>
  4063d8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  4063dc:	f47f af3c 	bne.w	406258 <__aeabi_fmul+0x114>
  4063e0:	e75f      	b.n	4062a2 <__aeabi_fmul+0x15e>
  4063e2:	bf00      	nop

004063e4 <__gesf2>:
  4063e4:	f04f 3cff 	mov.w	ip, #4294967295
  4063e8:	e006      	b.n	4063f8 <__cmpsf2+0x4>
  4063ea:	bf00      	nop

004063ec <__lesf2>:
  4063ec:	f04f 0c01 	mov.w	ip, #1
  4063f0:	e002      	b.n	4063f8 <__cmpsf2+0x4>
  4063f2:	bf00      	nop

004063f4 <__cmpsf2>:
  4063f4:	f04f 0c01 	mov.w	ip, #1
  4063f8:	f84d cd04 	str.w	ip, [sp, #-4]!
  4063fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406400:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406404:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406408:	bf18      	it	ne
  40640a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40640e:	d011      	beq.n	406434 <__cmpsf2+0x40>
  406410:	b001      	add	sp, #4
  406412:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  406416:	bf18      	it	ne
  406418:	ea90 0f01 	teqne	r0, r1
  40641c:	bf58      	it	pl
  40641e:	ebb2 0003 	subspl.w	r0, r2, r3
  406422:	bf88      	it	hi
  406424:	17c8      	asrhi	r0, r1, #31
  406426:	bf38      	it	cc
  406428:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40642c:	bf18      	it	ne
  40642e:	f040 0001 	orrne.w	r0, r0, #1
  406432:	4770      	bx	lr
  406434:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406438:	d102      	bne.n	406440 <__cmpsf2+0x4c>
  40643a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40643e:	d105      	bne.n	40644c <__cmpsf2+0x58>
  406440:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406444:	d1e4      	bne.n	406410 <__cmpsf2+0x1c>
  406446:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40644a:	d0e1      	beq.n	406410 <__cmpsf2+0x1c>
  40644c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406450:	4770      	bx	lr
  406452:	bf00      	nop

00406454 <__aeabi_cfrcmple>:
  406454:	4684      	mov	ip, r0
  406456:	4608      	mov	r0, r1
  406458:	4661      	mov	r1, ip
  40645a:	e7ff      	b.n	40645c <__aeabi_cfcmpeq>

0040645c <__aeabi_cfcmpeq>:
  40645c:	b50f      	push	{r0, r1, r2, r3, lr}
  40645e:	f7ff ffc9 	bl	4063f4 <__cmpsf2>
  406462:	2800      	cmp	r0, #0
  406464:	bf48      	it	mi
  406466:	f110 0f00 	cmnmi.w	r0, #0
  40646a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040646c <__aeabi_fcmpeq>:
  40646c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406470:	f7ff fff4 	bl	40645c <__aeabi_cfcmpeq>
  406474:	bf0c      	ite	eq
  406476:	2001      	moveq	r0, #1
  406478:	2000      	movne	r0, #0
  40647a:	f85d fb08 	ldr.w	pc, [sp], #8
  40647e:	bf00      	nop

00406480 <__aeabi_fcmplt>:
  406480:	f84d ed08 	str.w	lr, [sp, #-8]!
  406484:	f7ff ffea 	bl	40645c <__aeabi_cfcmpeq>
  406488:	bf34      	ite	cc
  40648a:	2001      	movcc	r0, #1
  40648c:	2000      	movcs	r0, #0
  40648e:	f85d fb08 	ldr.w	pc, [sp], #8
  406492:	bf00      	nop

00406494 <__aeabi_fcmple>:
  406494:	f84d ed08 	str.w	lr, [sp, #-8]!
  406498:	f7ff ffe0 	bl	40645c <__aeabi_cfcmpeq>
  40649c:	bf94      	ite	ls
  40649e:	2001      	movls	r0, #1
  4064a0:	2000      	movhi	r0, #0
  4064a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4064a6:	bf00      	nop

004064a8 <__aeabi_fcmpge>:
  4064a8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4064ac:	f7ff ffd2 	bl	406454 <__aeabi_cfrcmple>
  4064b0:	bf94      	ite	ls
  4064b2:	2001      	movls	r0, #1
  4064b4:	2000      	movhi	r0, #0
  4064b6:	f85d fb08 	ldr.w	pc, [sp], #8
  4064ba:	bf00      	nop

004064bc <__aeabi_fcmpgt>:
  4064bc:	f84d ed08 	str.w	lr, [sp, #-8]!
  4064c0:	f7ff ffc8 	bl	406454 <__aeabi_cfrcmple>
  4064c4:	bf34      	ite	cc
  4064c6:	2001      	movcc	r0, #1
  4064c8:	2000      	movcs	r0, #0
  4064ca:	f85d fb08 	ldr.w	pc, [sp], #8
  4064ce:	bf00      	nop

004064d0 <__errno>:
  4064d0:	4b01      	ldr	r3, [pc, #4]	; (4064d8 <__errno+0x8>)
  4064d2:	6818      	ldr	r0, [r3, #0]
  4064d4:	4770      	bx	lr
  4064d6:	bf00      	nop
  4064d8:	20400448 	.word	0x20400448

004064dc <__libc_init_array>:
  4064dc:	b570      	push	{r4, r5, r6, lr}
  4064de:	4e0f      	ldr	r6, [pc, #60]	; (40651c <__libc_init_array+0x40>)
  4064e0:	4d0f      	ldr	r5, [pc, #60]	; (406520 <__libc_init_array+0x44>)
  4064e2:	1b76      	subs	r6, r6, r5
  4064e4:	10b6      	asrs	r6, r6, #2
  4064e6:	bf18      	it	ne
  4064e8:	2400      	movne	r4, #0
  4064ea:	d005      	beq.n	4064f8 <__libc_init_array+0x1c>
  4064ec:	3401      	adds	r4, #1
  4064ee:	f855 3b04 	ldr.w	r3, [r5], #4
  4064f2:	4798      	blx	r3
  4064f4:	42a6      	cmp	r6, r4
  4064f6:	d1f9      	bne.n	4064ec <__libc_init_array+0x10>
  4064f8:	4e0a      	ldr	r6, [pc, #40]	; (406524 <__libc_init_array+0x48>)
  4064fa:	f004 fd01 	bl	40af00 <_init>
  4064fe:	4d0a      	ldr	r5, [pc, #40]	; (406528 <__libc_init_array+0x4c>)
  406500:	1b76      	subs	r6, r6, r5
  406502:	10b6      	asrs	r6, r6, #2
  406504:	bf18      	it	ne
  406506:	2400      	movne	r4, #0
  406508:	d006      	beq.n	406518 <__libc_init_array+0x3c>
  40650a:	3401      	adds	r4, #1
  40650c:	f855 3b04 	ldr.w	r3, [r5], #4
  406510:	4798      	blx	r3
  406512:	42a6      	cmp	r6, r4
  406514:	d1f9      	bne.n	40650a <__libc_init_array+0x2e>
  406516:	bd70      	pop	{r4, r5, r6, pc}
  406518:	bd70      	pop	{r4, r5, r6, pc}
  40651a:	bf00      	nop
  40651c:	0040af0c 	.word	0x0040af0c
  406520:	0040af0c 	.word	0x0040af0c
  406524:	0040af14 	.word	0x0040af14
  406528:	0040af0c 	.word	0x0040af0c

0040652c <memcpy>:
  40652c:	4684      	mov	ip, r0
  40652e:	ea41 0300 	orr.w	r3, r1, r0
  406532:	f013 0303 	ands.w	r3, r3, #3
  406536:	d16d      	bne.n	406614 <memcpy+0xe8>
  406538:	3a40      	subs	r2, #64	; 0x40
  40653a:	d341      	bcc.n	4065c0 <memcpy+0x94>
  40653c:	f851 3b04 	ldr.w	r3, [r1], #4
  406540:	f840 3b04 	str.w	r3, [r0], #4
  406544:	f851 3b04 	ldr.w	r3, [r1], #4
  406548:	f840 3b04 	str.w	r3, [r0], #4
  40654c:	f851 3b04 	ldr.w	r3, [r1], #4
  406550:	f840 3b04 	str.w	r3, [r0], #4
  406554:	f851 3b04 	ldr.w	r3, [r1], #4
  406558:	f840 3b04 	str.w	r3, [r0], #4
  40655c:	f851 3b04 	ldr.w	r3, [r1], #4
  406560:	f840 3b04 	str.w	r3, [r0], #4
  406564:	f851 3b04 	ldr.w	r3, [r1], #4
  406568:	f840 3b04 	str.w	r3, [r0], #4
  40656c:	f851 3b04 	ldr.w	r3, [r1], #4
  406570:	f840 3b04 	str.w	r3, [r0], #4
  406574:	f851 3b04 	ldr.w	r3, [r1], #4
  406578:	f840 3b04 	str.w	r3, [r0], #4
  40657c:	f851 3b04 	ldr.w	r3, [r1], #4
  406580:	f840 3b04 	str.w	r3, [r0], #4
  406584:	f851 3b04 	ldr.w	r3, [r1], #4
  406588:	f840 3b04 	str.w	r3, [r0], #4
  40658c:	f851 3b04 	ldr.w	r3, [r1], #4
  406590:	f840 3b04 	str.w	r3, [r0], #4
  406594:	f851 3b04 	ldr.w	r3, [r1], #4
  406598:	f840 3b04 	str.w	r3, [r0], #4
  40659c:	f851 3b04 	ldr.w	r3, [r1], #4
  4065a0:	f840 3b04 	str.w	r3, [r0], #4
  4065a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065a8:	f840 3b04 	str.w	r3, [r0], #4
  4065ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4065b0:	f840 3b04 	str.w	r3, [r0], #4
  4065b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065b8:	f840 3b04 	str.w	r3, [r0], #4
  4065bc:	3a40      	subs	r2, #64	; 0x40
  4065be:	d2bd      	bcs.n	40653c <memcpy+0x10>
  4065c0:	3230      	adds	r2, #48	; 0x30
  4065c2:	d311      	bcc.n	4065e8 <memcpy+0xbc>
  4065c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065c8:	f840 3b04 	str.w	r3, [r0], #4
  4065cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4065d0:	f840 3b04 	str.w	r3, [r0], #4
  4065d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4065d8:	f840 3b04 	str.w	r3, [r0], #4
  4065dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4065e0:	f840 3b04 	str.w	r3, [r0], #4
  4065e4:	3a10      	subs	r2, #16
  4065e6:	d2ed      	bcs.n	4065c4 <memcpy+0x98>
  4065e8:	320c      	adds	r2, #12
  4065ea:	d305      	bcc.n	4065f8 <memcpy+0xcc>
  4065ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4065f0:	f840 3b04 	str.w	r3, [r0], #4
  4065f4:	3a04      	subs	r2, #4
  4065f6:	d2f9      	bcs.n	4065ec <memcpy+0xc0>
  4065f8:	3204      	adds	r2, #4
  4065fa:	d008      	beq.n	40660e <memcpy+0xe2>
  4065fc:	07d2      	lsls	r2, r2, #31
  4065fe:	bf1c      	itt	ne
  406600:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406604:	f800 3b01 	strbne.w	r3, [r0], #1
  406608:	d301      	bcc.n	40660e <memcpy+0xe2>
  40660a:	880b      	ldrh	r3, [r1, #0]
  40660c:	8003      	strh	r3, [r0, #0]
  40660e:	4660      	mov	r0, ip
  406610:	4770      	bx	lr
  406612:	bf00      	nop
  406614:	2a08      	cmp	r2, #8
  406616:	d313      	bcc.n	406640 <memcpy+0x114>
  406618:	078b      	lsls	r3, r1, #30
  40661a:	d08d      	beq.n	406538 <memcpy+0xc>
  40661c:	f010 0303 	ands.w	r3, r0, #3
  406620:	d08a      	beq.n	406538 <memcpy+0xc>
  406622:	f1c3 0304 	rsb	r3, r3, #4
  406626:	1ad2      	subs	r2, r2, r3
  406628:	07db      	lsls	r3, r3, #31
  40662a:	bf1c      	itt	ne
  40662c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406630:	f800 3b01 	strbne.w	r3, [r0], #1
  406634:	d380      	bcc.n	406538 <memcpy+0xc>
  406636:	f831 3b02 	ldrh.w	r3, [r1], #2
  40663a:	f820 3b02 	strh.w	r3, [r0], #2
  40663e:	e77b      	b.n	406538 <memcpy+0xc>
  406640:	3a04      	subs	r2, #4
  406642:	d3d9      	bcc.n	4065f8 <memcpy+0xcc>
  406644:	3a01      	subs	r2, #1
  406646:	f811 3b01 	ldrb.w	r3, [r1], #1
  40664a:	f800 3b01 	strb.w	r3, [r0], #1
  40664e:	d2f9      	bcs.n	406644 <memcpy+0x118>
  406650:	780b      	ldrb	r3, [r1, #0]
  406652:	7003      	strb	r3, [r0, #0]
  406654:	784b      	ldrb	r3, [r1, #1]
  406656:	7043      	strb	r3, [r0, #1]
  406658:	788b      	ldrb	r3, [r1, #2]
  40665a:	7083      	strb	r3, [r0, #2]
  40665c:	4660      	mov	r0, ip
  40665e:	4770      	bx	lr

00406660 <memset>:
  406660:	0783      	lsls	r3, r0, #30
  406662:	b470      	push	{r4, r5, r6}
  406664:	d049      	beq.n	4066fa <memset+0x9a>
  406666:	1e54      	subs	r4, r2, #1
  406668:	2a00      	cmp	r2, #0
  40666a:	d044      	beq.n	4066f6 <memset+0x96>
  40666c:	b2cd      	uxtb	r5, r1
  40666e:	4603      	mov	r3, r0
  406670:	e002      	b.n	406678 <memset+0x18>
  406672:	2c00      	cmp	r4, #0
  406674:	d03f      	beq.n	4066f6 <memset+0x96>
  406676:	4614      	mov	r4, r2
  406678:	f803 5b01 	strb.w	r5, [r3], #1
  40667c:	f013 0f03 	tst.w	r3, #3
  406680:	f104 32ff 	add.w	r2, r4, #4294967295
  406684:	d1f5      	bne.n	406672 <memset+0x12>
  406686:	2c03      	cmp	r4, #3
  406688:	d92e      	bls.n	4066e8 <memset+0x88>
  40668a:	b2cd      	uxtb	r5, r1
  40668c:	2c0f      	cmp	r4, #15
  40668e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406692:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406696:	d919      	bls.n	4066cc <memset+0x6c>
  406698:	f103 0210 	add.w	r2, r3, #16
  40669c:	4626      	mov	r6, r4
  40669e:	3e10      	subs	r6, #16
  4066a0:	f842 5c10 	str.w	r5, [r2, #-16]
  4066a4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4066a8:	3210      	adds	r2, #16
  4066aa:	2e0f      	cmp	r6, #15
  4066ac:	f842 5c18 	str.w	r5, [r2, #-24]
  4066b0:	f842 5c14 	str.w	r5, [r2, #-20]
  4066b4:	d8f3      	bhi.n	40669e <memset+0x3e>
  4066b6:	f1a4 0210 	sub.w	r2, r4, #16
  4066ba:	f004 040f 	and.w	r4, r4, #15
  4066be:	f022 020f 	bic.w	r2, r2, #15
  4066c2:	2c03      	cmp	r4, #3
  4066c4:	f102 0210 	add.w	r2, r2, #16
  4066c8:	4413      	add	r3, r2
  4066ca:	d90d      	bls.n	4066e8 <memset+0x88>
  4066cc:	461e      	mov	r6, r3
  4066ce:	4622      	mov	r2, r4
  4066d0:	3a04      	subs	r2, #4
  4066d2:	f846 5b04 	str.w	r5, [r6], #4
  4066d6:	2a03      	cmp	r2, #3
  4066d8:	d8fa      	bhi.n	4066d0 <memset+0x70>
  4066da:	1f22      	subs	r2, r4, #4
  4066dc:	f004 0403 	and.w	r4, r4, #3
  4066e0:	f022 0203 	bic.w	r2, r2, #3
  4066e4:	3204      	adds	r2, #4
  4066e6:	4413      	add	r3, r2
  4066e8:	b12c      	cbz	r4, 4066f6 <memset+0x96>
  4066ea:	b2c9      	uxtb	r1, r1
  4066ec:	441c      	add	r4, r3
  4066ee:	f803 1b01 	strb.w	r1, [r3], #1
  4066f2:	42a3      	cmp	r3, r4
  4066f4:	d1fb      	bne.n	4066ee <memset+0x8e>
  4066f6:	bc70      	pop	{r4, r5, r6}
  4066f8:	4770      	bx	lr
  4066fa:	4614      	mov	r4, r2
  4066fc:	4603      	mov	r3, r0
  4066fe:	e7c2      	b.n	406686 <memset+0x26>

00406700 <sprintf>:
  406700:	b40e      	push	{r1, r2, r3}
  406702:	b5f0      	push	{r4, r5, r6, r7, lr}
  406704:	b09c      	sub	sp, #112	; 0x70
  406706:	4b10      	ldr	r3, [pc, #64]	; (406748 <sprintf+0x48>)
  406708:	4606      	mov	r6, r0
  40670a:	f44f 7e02 	mov.w	lr, #520	; 0x208
  40670e:	ac21      	add	r4, sp, #132	; 0x84
  406710:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  406714:	f64f 77ff 	movw	r7, #65535	; 0xffff
  406718:	6818      	ldr	r0, [r3, #0]
  40671a:	f854 2b04 	ldr.w	r2, [r4], #4
  40671e:	a902      	add	r1, sp, #8
  406720:	9602      	str	r6, [sp, #8]
  406722:	4623      	mov	r3, r4
  406724:	9606      	str	r6, [sp, #24]
  406726:	9401      	str	r4, [sp, #4]
  406728:	f8ad e014 	strh.w	lr, [sp, #20]
  40672c:	9504      	str	r5, [sp, #16]
  40672e:	9507      	str	r5, [sp, #28]
  406730:	f8ad 7016 	strh.w	r7, [sp, #22]
  406734:	f000 f838 	bl	4067a8 <_svfprintf_r>
  406738:	9b02      	ldr	r3, [sp, #8]
  40673a:	2200      	movs	r2, #0
  40673c:	701a      	strb	r2, [r3, #0]
  40673e:	b01c      	add	sp, #112	; 0x70
  406740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  406744:	b003      	add	sp, #12
  406746:	4770      	bx	lr
  406748:	20400448 	.word	0x20400448

0040674c <strlen>:
  40674c:	f020 0103 	bic.w	r1, r0, #3
  406750:	f010 0003 	ands.w	r0, r0, #3
  406754:	f1c0 0000 	rsb	r0, r0, #0
  406758:	f851 3b04 	ldr.w	r3, [r1], #4
  40675c:	f100 0c04 	add.w	ip, r0, #4
  406760:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  406764:	f06f 0200 	mvn.w	r2, #0
  406768:	bf1c      	itt	ne
  40676a:	fa22 f20c 	lsrne.w	r2, r2, ip
  40676e:	4313      	orrne	r3, r2
  406770:	f04f 0c01 	mov.w	ip, #1
  406774:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  406778:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  40677c:	eba3 020c 	sub.w	r2, r3, ip
  406780:	ea22 0203 	bic.w	r2, r2, r3
  406784:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  406788:	bf04      	itt	eq
  40678a:	f851 3b04 	ldreq.w	r3, [r1], #4
  40678e:	3004      	addeq	r0, #4
  406790:	d0f4      	beq.n	40677c <strlen+0x30>
  406792:	f1c2 0100 	rsb	r1, r2, #0
  406796:	ea02 0201 	and.w	r2, r2, r1
  40679a:	fab2 f282 	clz	r2, r2
  40679e:	f1c2 021f 	rsb	r2, r2, #31
  4067a2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4067a6:	4770      	bx	lr

004067a8 <_svfprintf_r>:
  4067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4067ac:	b0c1      	sub	sp, #260	; 0x104
  4067ae:	4689      	mov	r9, r1
  4067b0:	9208      	str	r2, [sp, #32]
  4067b2:	930c      	str	r3, [sp, #48]	; 0x30
  4067b4:	9009      	str	r0, [sp, #36]	; 0x24
  4067b6:	f002 fbdf 	bl	408f78 <_localeconv_r>
  4067ba:	6803      	ldr	r3, [r0, #0]
  4067bc:	4618      	mov	r0, r3
  4067be:	9316      	str	r3, [sp, #88]	; 0x58
  4067c0:	f7ff ffc4 	bl	40674c <strlen>
  4067c4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  4067c8:	9017      	str	r0, [sp, #92]	; 0x5c
  4067ca:	061d      	lsls	r5, r3, #24
  4067cc:	d504      	bpl.n	4067d8 <_svfprintf_r+0x30>
  4067ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
  4067d2:	2b00      	cmp	r3, #0
  4067d4:	f001 8080 	beq.w	4078d8 <_svfprintf_r+0x1130>
  4067d8:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
  4067dc:	2300      	movs	r3, #0
  4067de:	46c3      	mov	fp, r8
  4067e0:	9313      	str	r3, [sp, #76]	; 0x4c
  4067e2:	9314      	str	r3, [sp, #80]	; 0x50
  4067e4:	9312      	str	r3, [sp, #72]	; 0x48
  4067e6:	9315      	str	r3, [sp, #84]	; 0x54
  4067e8:	9319      	str	r3, [sp, #100]	; 0x64
  4067ea:	930a      	str	r3, [sp, #40]	; 0x28
  4067ec:	9325      	str	r3, [sp, #148]	; 0x94
  4067ee:	9324      	str	r3, [sp, #144]	; 0x90
  4067f0:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  4067f4:	9a08      	ldr	r2, [sp, #32]
  4067f6:	7813      	ldrb	r3, [r2, #0]
  4067f8:	2b25      	cmp	r3, #37	; 0x25
  4067fa:	f000 80a6 	beq.w	40694a <_svfprintf_r+0x1a2>
  4067fe:	b90b      	cbnz	r3, 406804 <_svfprintf_r+0x5c>
  406800:	e0a3      	b.n	40694a <_svfprintf_r+0x1a2>
  406802:	b11b      	cbz	r3, 40680c <_svfprintf_r+0x64>
  406804:	f812 3f01 	ldrb.w	r3, [r2, #1]!
  406808:	2b25      	cmp	r3, #37	; 0x25
  40680a:	d1fa      	bne.n	406802 <_svfprintf_r+0x5a>
  40680c:	9908      	ldr	r1, [sp, #32]
  40680e:	4614      	mov	r4, r2
  406810:	1a55      	subs	r5, r2, r1
  406812:	d010      	beq.n	406836 <_svfprintf_r+0x8e>
  406814:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406816:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406818:	3301      	adds	r3, #1
  40681a:	f8cb 1000 	str.w	r1, [fp]
  40681e:	442a      	add	r2, r5
  406820:	f8cb 5004 	str.w	r5, [fp, #4]
  406824:	2b07      	cmp	r3, #7
  406826:	9324      	str	r3, [sp, #144]	; 0x90
  406828:	9225      	str	r2, [sp, #148]	; 0x94
  40682a:	dc73      	bgt.n	406914 <_svfprintf_r+0x16c>
  40682c:	f10b 0b08 	add.w	fp, fp, #8
  406830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406832:	442b      	add	r3, r5
  406834:	930a      	str	r3, [sp, #40]	; 0x28
  406836:	7823      	ldrb	r3, [r4, #0]
  406838:	2b00      	cmp	r3, #0
  40683a:	d073      	beq.n	406924 <_svfprintf_r+0x17c>
  40683c:	2300      	movs	r3, #0
  40683e:	f04f 3cff 	mov.w	ip, #4294967295
  406842:	1c61      	adds	r1, r4, #1
  406844:	7866      	ldrb	r6, [r4, #1]
  406846:	461a      	mov	r2, r3
  406848:	4664      	mov	r4, ip
  40684a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40684e:	930b      	str	r3, [sp, #44]	; 0x2c
  406850:	9306      	str	r3, [sp, #24]
  406852:	1c4b      	adds	r3, r1, #1
  406854:	f1a6 0120 	sub.w	r1, r6, #32
  406858:	2958      	cmp	r1, #88	; 0x58
  40685a:	f200 83b2 	bhi.w	406fc2 <_svfprintf_r+0x81a>
  40685e:	e8df f011 	tbh	[pc, r1, lsl #1]
  406862:	0319      	.short	0x0319
  406864:	03b003b0 	.word	0x03b003b0
  406868:	03b00320 	.word	0x03b00320
  40686c:	03b003b0 	.word	0x03b003b0
  406870:	03b003b0 	.word	0x03b003b0
  406874:	024003b0 	.word	0x024003b0
  406878:	03b001fb 	.word	0x03b001fb
  40687c:	01ff01e2 	.word	0x01ff01e2
  406880:	032703b0 	.word	0x032703b0
  406884:	032e032e 	.word	0x032e032e
  406888:	032e032e 	.word	0x032e032e
  40688c:	032e032e 	.word	0x032e032e
  406890:	032e032e 	.word	0x032e032e
  406894:	03b0032e 	.word	0x03b0032e
  406898:	03b003b0 	.word	0x03b003b0
  40689c:	03b003b0 	.word	0x03b003b0
  4068a0:	03b003b0 	.word	0x03b003b0
  4068a4:	03b003b0 	.word	0x03b003b0
  4068a8:	033d03b0 	.word	0x033d03b0
  4068ac:	03b00365 	.word	0x03b00365
  4068b0:	03b00365 	.word	0x03b00365
  4068b4:	03b003b0 	.word	0x03b003b0
  4068b8:	02fe03b0 	.word	0x02fe03b0
  4068bc:	03b003b0 	.word	0x03b003b0
  4068c0:	03b00293 	.word	0x03b00293
  4068c4:	03b003b0 	.word	0x03b003b0
  4068c8:	03b003b0 	.word	0x03b003b0
  4068cc:	03b002b0 	.word	0x03b002b0
  4068d0:	02c603b0 	.word	0x02c603b0
  4068d4:	03b003b0 	.word	0x03b003b0
  4068d8:	03b003b0 	.word	0x03b003b0
  4068dc:	03b003b0 	.word	0x03b003b0
  4068e0:	03b003b0 	.word	0x03b003b0
  4068e4:	03b003b0 	.word	0x03b003b0
  4068e8:	021802eb 	.word	0x021802eb
  4068ec:	03650365 	.word	0x03650365
  4068f0:	024e0365 	.word	0x024e0365
  4068f4:	03b00218 	.word	0x03b00218
  4068f8:	023603b0 	.word	0x023603b0
  4068fc:	026003b0 	.word	0x026003b0
  406900:	039901e9 	.word	0x039901e9
  406904:	03b00259 	.word	0x03b00259
  406908:	03b00272 	.word	0x03b00272
  40690c:	03b00076 	.word	0x03b00076
  406910:	030503b0 	.word	0x030503b0
  406914:	9809      	ldr	r0, [sp, #36]	; 0x24
  406916:	4649      	mov	r1, r9
  406918:	aa23      	add	r2, sp, #140	; 0x8c
  40691a:	f003 fba1 	bl	40a060 <__ssprint_r>
  40691e:	b940      	cbnz	r0, 406932 <_svfprintf_r+0x18a>
  406920:	46c3      	mov	fp, r8
  406922:	e785      	b.n	406830 <_svfprintf_r+0x88>
  406924:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406926:	b123      	cbz	r3, 406932 <_svfprintf_r+0x18a>
  406928:	9809      	ldr	r0, [sp, #36]	; 0x24
  40692a:	4649      	mov	r1, r9
  40692c:	aa23      	add	r2, sp, #140	; 0x8c
  40692e:	f003 fb97 	bl	40a060 <__ssprint_r>
  406932:	f8b9 300c 	ldrh.w	r3, [r9, #12]
  406936:	f013 0f40 	tst.w	r3, #64	; 0x40
  40693a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40693c:	bf18      	it	ne
  40693e:	f04f 33ff 	movne.w	r3, #4294967295
  406942:	4618      	mov	r0, r3
  406944:	b041      	add	sp, #260	; 0x104
  406946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40694a:	9c08      	ldr	r4, [sp, #32]
  40694c:	e773      	b.n	406836 <_svfprintf_r+0x8e>
  40694e:	9308      	str	r3, [sp, #32]
  406950:	46a4      	mov	ip, r4
  406952:	9b06      	ldr	r3, [sp, #24]
  406954:	0698      	lsls	r0, r3, #26
  406956:	f140 823e 	bpl.w	406dd6 <_svfprintf_r+0x62e>
  40695a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40695c:	2301      	movs	r3, #1
  40695e:	3707      	adds	r7, #7
  406960:	f027 0207 	bic.w	r2, r7, #7
  406964:	f102 0108 	add.w	r1, r2, #8
  406968:	e9d2 4500 	ldrd	r4, r5, [r2]
  40696c:	910c      	str	r1, [sp, #48]	; 0x30
  40696e:	2200      	movs	r2, #0
  406970:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  406974:	4617      	mov	r7, r2
  406976:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40697a:	f1bc 0f00 	cmp.w	ip, #0
  40697e:	db03      	blt.n	406988 <_svfprintf_r+0x1e0>
  406980:	9a06      	ldr	r2, [sp, #24]
  406982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  406986:	9206      	str	r2, [sp, #24]
  406988:	f1bc 0f00 	cmp.w	ip, #0
  40698c:	f040 83ac 	bne.w	4070e8 <_svfprintf_r+0x940>
  406990:	ea54 0205 	orrs.w	r2, r4, r5
  406994:	bf14      	ite	ne
  406996:	2201      	movne	r2, #1
  406998:	2200      	moveq	r2, #0
  40699a:	2a00      	cmp	r2, #0
  40699c:	f040 83a4 	bne.w	4070e8 <_svfprintf_r+0x940>
  4069a0:	2b00      	cmp	r3, #0
  4069a2:	f040 8460 	bne.w	407266 <_svfprintf_r+0xabe>
  4069a6:	9a06      	ldr	r2, [sp, #24]
  4069a8:	07d2      	lsls	r2, r2, #31
  4069aa:	f140 84fd 	bpl.w	4073a8 <_svfprintf_r+0xc00>
  4069ae:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  4069b2:	2330      	movs	r3, #48	; 0x30
  4069b4:	f80a 3d41 	strb.w	r3, [sl, #-65]!
  4069b8:	ebca 0408 	rsb	r4, sl, r8
  4069bc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  4069c0:	45a4      	cmp	ip, r4
  4069c2:	4663      	mov	r3, ip
  4069c4:	bfb8      	it	lt
  4069c6:	4623      	movlt	r3, r4
  4069c8:	9307      	str	r3, [sp, #28]
  4069ca:	2300      	movs	r3, #0
  4069cc:	9311      	str	r3, [sp, #68]	; 0x44
  4069ce:	b117      	cbz	r7, 4069d6 <_svfprintf_r+0x22e>
  4069d0:	9b07      	ldr	r3, [sp, #28]
  4069d2:	3301      	adds	r3, #1
  4069d4:	9307      	str	r3, [sp, #28]
  4069d6:	9b06      	ldr	r3, [sp, #24]
  4069d8:	f013 0302 	ands.w	r3, r3, #2
  4069dc:	930d      	str	r3, [sp, #52]	; 0x34
  4069de:	d002      	beq.n	4069e6 <_svfprintf_r+0x23e>
  4069e0:	9b07      	ldr	r3, [sp, #28]
  4069e2:	3302      	adds	r3, #2
  4069e4:	9307      	str	r3, [sp, #28]
  4069e6:	9b06      	ldr	r3, [sp, #24]
  4069e8:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  4069ec:	930e      	str	r3, [sp, #56]	; 0x38
  4069ee:	f040 8307 	bne.w	407000 <_svfprintf_r+0x858>
  4069f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4069f4:	9a07      	ldr	r2, [sp, #28]
  4069f6:	ebc2 0a03 	rsb	sl, r2, r3
  4069fa:	f1ba 0f00 	cmp.w	sl, #0
  4069fe:	f340 82ff 	ble.w	407000 <_svfprintf_r+0x858>
  406a02:	f1ba 0f10 	cmp.w	sl, #16
  406a06:	9925      	ldr	r1, [sp, #148]	; 0x94
  406a08:	f340 87dd 	ble.w	4079c6 <_svfprintf_r+0x121e>
  406a0c:	4fbf      	ldr	r7, [pc, #764]	; (406d0c <_svfprintf_r+0x564>)
  406a0e:	2510      	movs	r5, #16
  406a10:	9618      	str	r6, [sp, #96]	; 0x60
  406a12:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406a14:	463e      	mov	r6, r7
  406a16:	4627      	mov	r7, r4
  406a18:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406a1a:	e004      	b.n	406a26 <_svfprintf_r+0x27e>
  406a1c:	f1aa 0a10 	sub.w	sl, sl, #16
  406a20:	f1ba 0f10 	cmp.w	sl, #16
  406a24:	dd1b      	ble.n	406a5e <_svfprintf_r+0x2b6>
  406a26:	3201      	adds	r2, #1
  406a28:	3110      	adds	r1, #16
  406a2a:	f8cb 6000 	str.w	r6, [fp]
  406a2e:	f10b 0b08 	add.w	fp, fp, #8
  406a32:	2a07      	cmp	r2, #7
  406a34:	f84b 5c04 	str.w	r5, [fp, #-4]
  406a38:	9125      	str	r1, [sp, #148]	; 0x94
  406a3a:	9224      	str	r2, [sp, #144]	; 0x90
  406a3c:	ddee      	ble.n	406a1c <_svfprintf_r+0x274>
  406a3e:	4620      	mov	r0, r4
  406a40:	4649      	mov	r1, r9
  406a42:	aa23      	add	r2, sp, #140	; 0x8c
  406a44:	46c3      	mov	fp, r8
  406a46:	f003 fb0b 	bl	40a060 <__ssprint_r>
  406a4a:	2800      	cmp	r0, #0
  406a4c:	f47f af71 	bne.w	406932 <_svfprintf_r+0x18a>
  406a50:	f1aa 0a10 	sub.w	sl, sl, #16
  406a54:	9925      	ldr	r1, [sp, #148]	; 0x94
  406a56:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406a58:	f1ba 0f10 	cmp.w	sl, #16
  406a5c:	dce3      	bgt.n	406a26 <_svfprintf_r+0x27e>
  406a5e:	463c      	mov	r4, r7
  406a60:	4637      	mov	r7, r6
  406a62:	9e18      	ldr	r6, [sp, #96]	; 0x60
  406a64:	3201      	adds	r2, #1
  406a66:	eb0a 0c01 	add.w	ip, sl, r1
  406a6a:	f8cb 7000 	str.w	r7, [fp]
  406a6e:	2a07      	cmp	r2, #7
  406a70:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406a74:	9224      	str	r2, [sp, #144]	; 0x90
  406a76:	f8cb a004 	str.w	sl, [fp, #4]
  406a7a:	f300 82b6 	bgt.w	406fea <_svfprintf_r+0x842>
  406a7e:	f10b 0b08 	add.w	fp, fp, #8
  406a82:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406a86:	b197      	cbz	r7, 406aae <_svfprintf_r+0x306>
  406a88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406a8a:	2201      	movs	r2, #1
  406a8c:	f10c 0c01 	add.w	ip, ip, #1
  406a90:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  406a94:	4413      	add	r3, r2
  406a96:	f8cb 2004 	str.w	r2, [fp, #4]
  406a9a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406a9e:	2b07      	cmp	r3, #7
  406aa0:	f8cb 1000 	str.w	r1, [fp]
  406aa4:	9324      	str	r3, [sp, #144]	; 0x90
  406aa6:	f300 83fb 	bgt.w	4072a0 <_svfprintf_r+0xaf8>
  406aaa:	f10b 0b08 	add.w	fp, fp, #8
  406aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406ab0:	b18b      	cbz	r3, 406ad6 <_svfprintf_r+0x32e>
  406ab2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406ab4:	f10c 0c02 	add.w	ip, ip, #2
  406ab8:	a91c      	add	r1, sp, #112	; 0x70
  406aba:	2202      	movs	r2, #2
  406abc:	3301      	adds	r3, #1
  406abe:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406ac2:	f8cb 1000 	str.w	r1, [fp]
  406ac6:	2b07      	cmp	r3, #7
  406ac8:	9324      	str	r3, [sp, #144]	; 0x90
  406aca:	f8cb 2004 	str.w	r2, [fp, #4]
  406ace:	f300 83db 	bgt.w	407288 <_svfprintf_r+0xae0>
  406ad2:	f10b 0b08 	add.w	fp, fp, #8
  406ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  406ad8:	2b80      	cmp	r3, #128	; 0x80
  406ada:	f000 8321 	beq.w	407120 <_svfprintf_r+0x978>
  406ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406ae0:	1b1f      	subs	r7, r3, r4
  406ae2:	2f00      	cmp	r7, #0
  406ae4:	dd37      	ble.n	406b56 <_svfprintf_r+0x3ae>
  406ae6:	2f10      	cmp	r7, #16
  406ae8:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406aea:	f340 85ec 	ble.w	4076c6 <_svfprintf_r+0xf1e>
  406aee:	940d      	str	r4, [sp, #52]	; 0x34
  406af0:	f04f 0a10 	mov.w	sl, #16
  406af4:	4d86      	ldr	r5, [pc, #536]	; (406d10 <_svfprintf_r+0x568>)
  406af6:	4662      	mov	r2, ip
  406af8:	9c09      	ldr	r4, [sp, #36]	; 0x24
  406afa:	e002      	b.n	406b02 <_svfprintf_r+0x35a>
  406afc:	3f10      	subs	r7, #16
  406afe:	2f10      	cmp	r7, #16
  406b00:	dd19      	ble.n	406b36 <_svfprintf_r+0x38e>
  406b02:	3301      	adds	r3, #1
  406b04:	3210      	adds	r2, #16
  406b06:	f8cb 5000 	str.w	r5, [fp]
  406b0a:	f10b 0b08 	add.w	fp, fp, #8
  406b0e:	2b07      	cmp	r3, #7
  406b10:	f84b ac04 	str.w	sl, [fp, #-4]
  406b14:	9225      	str	r2, [sp, #148]	; 0x94
  406b16:	9324      	str	r3, [sp, #144]	; 0x90
  406b18:	ddf0      	ble.n	406afc <_svfprintf_r+0x354>
  406b1a:	4620      	mov	r0, r4
  406b1c:	4649      	mov	r1, r9
  406b1e:	aa23      	add	r2, sp, #140	; 0x8c
  406b20:	46c3      	mov	fp, r8
  406b22:	f003 fa9d 	bl	40a060 <__ssprint_r>
  406b26:	2800      	cmp	r0, #0
  406b28:	f47f af03 	bne.w	406932 <_svfprintf_r+0x18a>
  406b2c:	3f10      	subs	r7, #16
  406b2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406b30:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b32:	2f10      	cmp	r7, #16
  406b34:	dce5      	bgt.n	406b02 <_svfprintf_r+0x35a>
  406b36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  406b38:	4694      	mov	ip, r2
  406b3a:	3301      	adds	r3, #1
  406b3c:	44bc      	add	ip, r7
  406b3e:	f8cb 5000 	str.w	r5, [fp]
  406b42:	2b07      	cmp	r3, #7
  406b44:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406b48:	9324      	str	r3, [sp, #144]	; 0x90
  406b4a:	f8cb 7004 	str.w	r7, [fp, #4]
  406b4e:	f300 838f 	bgt.w	407270 <_svfprintf_r+0xac8>
  406b52:	f10b 0b08 	add.w	fp, fp, #8
  406b56:	9b06      	ldr	r3, [sp, #24]
  406b58:	05df      	lsls	r7, r3, #23
  406b5a:	f100 8254 	bmi.w	407006 <_svfprintf_r+0x85e>
  406b5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b60:	44a4      	add	ip, r4
  406b62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  406b64:	3301      	adds	r3, #1
  406b66:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406b6a:	f8cb 2000 	str.w	r2, [fp]
  406b6e:	2b07      	cmp	r3, #7
  406b70:	f8cb 4004 	str.w	r4, [fp, #4]
  406b74:	9324      	str	r3, [sp, #144]	; 0x90
  406b76:	f300 8360 	bgt.w	40723a <_svfprintf_r+0xa92>
  406b7a:	f10b 0b08 	add.w	fp, fp, #8
  406b7e:	9b06      	ldr	r3, [sp, #24]
  406b80:	075a      	lsls	r2, r3, #29
  406b82:	d540      	bpl.n	406c06 <_svfprintf_r+0x45e>
  406b84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406b86:	9a07      	ldr	r2, [sp, #28]
  406b88:	1a9c      	subs	r4, r3, r2
  406b8a:	2c00      	cmp	r4, #0
  406b8c:	dd3b      	ble.n	406c06 <_svfprintf_r+0x45e>
  406b8e:	2c10      	cmp	r4, #16
  406b90:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406b92:	f340 876b 	ble.w	407a6c <_svfprintf_r+0x12c4>
  406b96:	2510      	movs	r5, #16
  406b98:	4f5c      	ldr	r7, [pc, #368]	; (406d0c <_svfprintf_r+0x564>)
  406b9a:	4662      	mov	r2, ip
  406b9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
  406b9e:	e002      	b.n	406ba6 <_svfprintf_r+0x3fe>
  406ba0:	3c10      	subs	r4, #16
  406ba2:	2c10      	cmp	r4, #16
  406ba4:	dd19      	ble.n	406bda <_svfprintf_r+0x432>
  406ba6:	3301      	adds	r3, #1
  406ba8:	3210      	adds	r2, #16
  406baa:	f8cb 7000 	str.w	r7, [fp]
  406bae:	f10b 0b08 	add.w	fp, fp, #8
  406bb2:	2b07      	cmp	r3, #7
  406bb4:	f84b 5c04 	str.w	r5, [fp, #-4]
  406bb8:	9225      	str	r2, [sp, #148]	; 0x94
  406bba:	9324      	str	r3, [sp, #144]	; 0x90
  406bbc:	ddf0      	ble.n	406ba0 <_svfprintf_r+0x3f8>
  406bbe:	4630      	mov	r0, r6
  406bc0:	4649      	mov	r1, r9
  406bc2:	aa23      	add	r2, sp, #140	; 0x8c
  406bc4:	46c3      	mov	fp, r8
  406bc6:	f003 fa4b 	bl	40a060 <__ssprint_r>
  406bca:	2800      	cmp	r0, #0
  406bcc:	f47f aeb1 	bne.w	406932 <_svfprintf_r+0x18a>
  406bd0:	3c10      	subs	r4, #16
  406bd2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406bd4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406bd6:	2c10      	cmp	r4, #16
  406bd8:	dce5      	bgt.n	406ba6 <_svfprintf_r+0x3fe>
  406bda:	4694      	mov	ip, r2
  406bdc:	3301      	adds	r3, #1
  406bde:	44a4      	add	ip, r4
  406be0:	f8cb 7000 	str.w	r7, [fp]
  406be4:	2b07      	cmp	r3, #7
  406be6:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  406bea:	9324      	str	r3, [sp, #144]	; 0x90
  406bec:	f8cb 4004 	str.w	r4, [fp, #4]
  406bf0:	dd09      	ble.n	406c06 <_svfprintf_r+0x45e>
  406bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
  406bf4:	4649      	mov	r1, r9
  406bf6:	aa23      	add	r2, sp, #140	; 0x8c
  406bf8:	f003 fa32 	bl	40a060 <__ssprint_r>
  406bfc:	2800      	cmp	r0, #0
  406bfe:	f47f ae98 	bne.w	406932 <_svfprintf_r+0x18a>
  406c02:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  406c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c08:	9a07      	ldr	r2, [sp, #28]
  406c0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  406c0c:	428a      	cmp	r2, r1
  406c0e:	bfac      	ite	ge
  406c10:	189b      	addge	r3, r3, r2
  406c12:	185b      	addlt	r3, r3, r1
  406c14:	930a      	str	r3, [sp, #40]	; 0x28
  406c16:	f1bc 0f00 	cmp.w	ip, #0
  406c1a:	f040 831a 	bne.w	407252 <_svfprintf_r+0xaaa>
  406c1e:	2300      	movs	r3, #0
  406c20:	46c3      	mov	fp, r8
  406c22:	9324      	str	r3, [sp, #144]	; 0x90
  406c24:	e5e6      	b.n	4067f4 <_svfprintf_r+0x4c>
  406c26:	4619      	mov	r1, r3
  406c28:	9806      	ldr	r0, [sp, #24]
  406c2a:	781e      	ldrb	r6, [r3, #0]
  406c2c:	f040 0004 	orr.w	r0, r0, #4
  406c30:	9006      	str	r0, [sp, #24]
  406c32:	e60e      	b.n	406852 <_svfprintf_r+0xaa>
  406c34:	9308      	str	r3, [sp, #32]
  406c36:	46a4      	mov	ip, r4
  406c38:	9b06      	ldr	r3, [sp, #24]
  406c3a:	f013 0320 	ands.w	r3, r3, #32
  406c3e:	f000 80ae 	beq.w	406d9e <_svfprintf_r+0x5f6>
  406c42:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406c44:	2300      	movs	r3, #0
  406c46:	3707      	adds	r7, #7
  406c48:	f027 0207 	bic.w	r2, r7, #7
  406c4c:	f102 0108 	add.w	r1, r2, #8
  406c50:	e9d2 4500 	ldrd	r4, r5, [r2]
  406c54:	910c      	str	r1, [sp, #48]	; 0x30
  406c56:	e68a      	b.n	40696e <_svfprintf_r+0x1c6>
  406c58:	781e      	ldrb	r6, [r3, #0]
  406c5a:	4619      	mov	r1, r3
  406c5c:	222b      	movs	r2, #43	; 0x2b
  406c5e:	e5f8      	b.n	406852 <_svfprintf_r+0xaa>
  406c60:	781e      	ldrb	r6, [r3, #0]
  406c62:	1c59      	adds	r1, r3, #1
  406c64:	2e2a      	cmp	r6, #42	; 0x2a
  406c66:	f001 8006 	beq.w	407c76 <_svfprintf_r+0x14ce>
  406c6a:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  406c6e:	460b      	mov	r3, r1
  406c70:	2400      	movs	r4, #0
  406c72:	2809      	cmp	r0, #9
  406c74:	f63f adee 	bhi.w	406854 <_svfprintf_r+0xac>
  406c78:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406c7c:	f813 6b01 	ldrb.w	r6, [r3], #1
  406c80:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  406c84:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  406c88:	2809      	cmp	r0, #9
  406c8a:	d9f5      	bls.n	406c78 <_svfprintf_r+0x4d0>
  406c8c:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406c90:	e5e0      	b.n	406854 <_svfprintf_r+0xac>
  406c92:	9308      	str	r3, [sp, #32]
  406c94:	46a4      	mov	ip, r4
  406c96:	9b06      	ldr	r3, [sp, #24]
  406c98:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  406c9c:	069c      	lsls	r4, r3, #26
  406c9e:	f140 8129 	bpl.w	406ef4 <_svfprintf_r+0x74c>
  406ca2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406ca4:	3707      	adds	r7, #7
  406ca6:	f027 0707 	bic.w	r7, r7, #7
  406caa:	e9d7 2300 	ldrd	r2, r3, [r7]
  406cae:	f107 0108 	add.w	r1, r7, #8
  406cb2:	4614      	mov	r4, r2
  406cb4:	461d      	mov	r5, r3
  406cb6:	910c      	str	r1, [sp, #48]	; 0x30
  406cb8:	2a00      	cmp	r2, #0
  406cba:	f173 0300 	sbcs.w	r3, r3, #0
  406cbe:	f2c0 812a 	blt.w	406f16 <_svfprintf_r+0x76e>
  406cc2:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406cc6:	2301      	movs	r3, #1
  406cc8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  406ccc:	e655      	b.n	40697a <_svfprintf_r+0x1d2>
  406cce:	781e      	ldrb	r6, [r3, #0]
  406cd0:	9906      	ldr	r1, [sp, #24]
  406cd2:	2e6c      	cmp	r6, #108	; 0x6c
  406cd4:	f000 8557 	beq.w	407786 <_svfprintf_r+0xfde>
  406cd8:	f041 0110 	orr.w	r1, r1, #16
  406cdc:	9106      	str	r1, [sp, #24]
  406cde:	4619      	mov	r1, r3
  406ce0:	e5b7      	b.n	406852 <_svfprintf_r+0xaa>
  406ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  406ce4:	6829      	ldr	r1, [r5, #0]
  406ce6:	4608      	mov	r0, r1
  406ce8:	910b      	str	r1, [sp, #44]	; 0x2c
  406cea:	4629      	mov	r1, r5
  406cec:	2800      	cmp	r0, #0
  406cee:	f101 0104 	add.w	r1, r1, #4
  406cf2:	f2c0 854f 	blt.w	407794 <_svfprintf_r+0xfec>
  406cf6:	910c      	str	r1, [sp, #48]	; 0x30
  406cf8:	4619      	mov	r1, r3
  406cfa:	781e      	ldrb	r6, [r3, #0]
  406cfc:	e5a9      	b.n	406852 <_svfprintf_r+0xaa>
  406cfe:	9906      	ldr	r1, [sp, #24]
  406d00:	f041 0140 	orr.w	r1, r1, #64	; 0x40
  406d04:	9106      	str	r1, [sp, #24]
  406d06:	4619      	mov	r1, r3
  406d08:	781e      	ldrb	r6, [r3, #0]
  406d0a:	e5a2      	b.n	406852 <_svfprintf_r+0xaa>
  406d0c:	0040ad90 	.word	0x0040ad90
  406d10:	0040ad80 	.word	0x0040ad80
  406d14:	9906      	ldr	r1, [sp, #24]
  406d16:	f041 0120 	orr.w	r1, r1, #32
  406d1a:	9106      	str	r1, [sp, #24]
  406d1c:	4619      	mov	r1, r3
  406d1e:	781e      	ldrb	r6, [r3, #0]
  406d20:	e597      	b.n	406852 <_svfprintf_r+0xaa>
  406d22:	9308      	str	r3, [sp, #32]
  406d24:	9b06      	ldr	r3, [sp, #24]
  406d26:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  406d2a:	069e      	lsls	r6, r3, #26
  406d2c:	f140 84a4 	bpl.w	407678 <_svfprintf_r+0xed0>
  406d30:	990a      	ldr	r1, [sp, #40]	; 0x28
  406d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406d34:	17cd      	asrs	r5, r1, #31
  406d36:	4608      	mov	r0, r1
  406d38:	6813      	ldr	r3, [r2, #0]
  406d3a:	3204      	adds	r2, #4
  406d3c:	4629      	mov	r1, r5
  406d3e:	920c      	str	r2, [sp, #48]	; 0x30
  406d40:	e9c3 0100 	strd	r0, r1, [r3]
  406d44:	e556      	b.n	4067f4 <_svfprintf_r+0x4c>
  406d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406d48:	2500      	movs	r5, #0
  406d4a:	9308      	str	r3, [sp, #32]
  406d4c:	6813      	ldr	r3, [r2, #0]
  406d4e:	1d17      	adds	r7, r2, #4
  406d50:	f88d 506f 	strb.w	r5, [sp, #111]	; 0x6f
  406d54:	930f      	str	r3, [sp, #60]	; 0x3c
  406d56:	2b00      	cmp	r3, #0
  406d58:	f000 867a 	beq.w	407a50 <_svfprintf_r+0x12a8>
  406d5c:	2c00      	cmp	r4, #0
  406d5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
  406d60:	f2c0 8624 	blt.w	4079ac <_svfprintf_r+0x1204>
  406d64:	4629      	mov	r1, r5
  406d66:	4622      	mov	r2, r4
  406d68:	f002 fbb6 	bl	4094d8 <memchr>
  406d6c:	2800      	cmp	r0, #0
  406d6e:	f000 86df 	beq.w	407b30 <_svfprintf_r+0x1388>
  406d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  406d74:	970c      	str	r7, [sp, #48]	; 0x30
  406d76:	1ac4      	subs	r4, r0, r3
  406d78:	9510      	str	r5, [sp, #64]	; 0x40
  406d7a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406d7e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  406d82:	9511      	str	r5, [sp, #68]	; 0x44
  406d84:	9307      	str	r3, [sp, #28]
  406d86:	e622      	b.n	4069ce <_svfprintf_r+0x226>
  406d88:	9308      	str	r3, [sp, #32]
  406d8a:	46a4      	mov	ip, r4
  406d8c:	9b06      	ldr	r3, [sp, #24]
  406d8e:	f043 0310 	orr.w	r3, r3, #16
  406d92:	9306      	str	r3, [sp, #24]
  406d94:	9b06      	ldr	r3, [sp, #24]
  406d96:	f013 0320 	ands.w	r3, r3, #32
  406d9a:	f47f af52 	bne.w	406c42 <_svfprintf_r+0x49a>
  406d9e:	9a06      	ldr	r2, [sp, #24]
  406da0:	f012 0210 	ands.w	r2, r2, #16
  406da4:	f040 8352 	bne.w	40744c <_svfprintf_r+0xca4>
  406da8:	9b06      	ldr	r3, [sp, #24]
  406daa:	f013 0340 	ands.w	r3, r3, #64	; 0x40
  406dae:	f000 834d 	beq.w	40744c <_svfprintf_r+0xca4>
  406db2:	990c      	ldr	r1, [sp, #48]	; 0x30
  406db4:	4613      	mov	r3, r2
  406db6:	2500      	movs	r5, #0
  406db8:	460a      	mov	r2, r1
  406dba:	880c      	ldrh	r4, [r1, #0]
  406dbc:	3204      	adds	r2, #4
  406dbe:	920c      	str	r2, [sp, #48]	; 0x30
  406dc0:	e5d5      	b.n	40696e <_svfprintf_r+0x1c6>
  406dc2:	9308      	str	r3, [sp, #32]
  406dc4:	46a4      	mov	ip, r4
  406dc6:	9b06      	ldr	r3, [sp, #24]
  406dc8:	f043 0310 	orr.w	r3, r3, #16
  406dcc:	9306      	str	r3, [sp, #24]
  406dce:	9b06      	ldr	r3, [sp, #24]
  406dd0:	0698      	lsls	r0, r3, #26
  406dd2:	f53f adc2 	bmi.w	40695a <_svfprintf_r+0x1b2>
  406dd6:	9b06      	ldr	r3, [sp, #24]
  406dd8:	06d9      	lsls	r1, r3, #27
  406dda:	f140 8432 	bpl.w	407642 <_svfprintf_r+0xe9a>
  406dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406de0:	4613      	mov	r3, r2
  406de2:	3204      	adds	r2, #4
  406de4:	681c      	ldr	r4, [r3, #0]
  406de6:	2500      	movs	r5, #0
  406de8:	2301      	movs	r3, #1
  406dea:	920c      	str	r2, [sp, #48]	; 0x30
  406dec:	e5bf      	b.n	40696e <_svfprintf_r+0x1c6>
  406dee:	9308      	str	r3, [sp, #32]
  406df0:	46a4      	mov	ip, r4
  406df2:	4bb7      	ldr	r3, [pc, #732]	; (4070d0 <_svfprintf_r+0x928>)
  406df4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  406df8:	9315      	str	r3, [sp, #84]	; 0x54
  406dfa:	9b06      	ldr	r3, [sp, #24]
  406dfc:	069a      	lsls	r2, r3, #26
  406dfe:	d53e      	bpl.n	406e7e <_svfprintf_r+0x6d6>
  406e00:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406e02:	3707      	adds	r7, #7
  406e04:	f027 0307 	bic.w	r3, r7, #7
  406e08:	f103 0208 	add.w	r2, r3, #8
  406e0c:	e9d3 4500 	ldrd	r4, r5, [r3]
  406e10:	920c      	str	r2, [sp, #48]	; 0x30
  406e12:	9b06      	ldr	r3, [sp, #24]
  406e14:	07df      	lsls	r7, r3, #31
  406e16:	f140 8268 	bpl.w	4072ea <_svfprintf_r+0xb42>
  406e1a:	ea54 0305 	orrs.w	r3, r4, r5
  406e1e:	f000 8264 	beq.w	4072ea <_svfprintf_r+0xb42>
  406e22:	9b06      	ldr	r3, [sp, #24]
  406e24:	2230      	movs	r2, #48	; 0x30
  406e26:	f88d 6071 	strb.w	r6, [sp, #113]	; 0x71
  406e2a:	f043 0302 	orr.w	r3, r3, #2
  406e2e:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  406e32:	9306      	str	r3, [sp, #24]
  406e34:	2302      	movs	r3, #2
  406e36:	e59a      	b.n	40696e <_svfprintf_r+0x1c6>
  406e38:	990c      	ldr	r1, [sp, #48]	; 0x30
  406e3a:	2001      	movs	r0, #1
  406e3c:	9308      	str	r3, [sp, #32]
  406e3e:	2300      	movs	r3, #0
  406e40:	680a      	ldr	r2, [r1, #0]
  406e42:	3104      	adds	r1, #4
  406e44:	461f      	mov	r7, r3
  406e46:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406e4a:	9310      	str	r3, [sp, #64]	; 0x40
  406e4c:	4604      	mov	r4, r0
  406e4e:	9311      	str	r3, [sp, #68]	; 0x44
  406e50:	ab26      	add	r3, sp, #152	; 0x98
  406e52:	9007      	str	r0, [sp, #28]
  406e54:	910c      	str	r1, [sp, #48]	; 0x30
  406e56:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  406e5a:	930f      	str	r3, [sp, #60]	; 0x3c
  406e5c:	e5bb      	b.n	4069d6 <_svfprintf_r+0x22e>
  406e5e:	9906      	ldr	r1, [sp, #24]
  406e60:	f041 0108 	orr.w	r1, r1, #8
  406e64:	9106      	str	r1, [sp, #24]
  406e66:	4619      	mov	r1, r3
  406e68:	781e      	ldrb	r6, [r3, #0]
  406e6a:	e4f2      	b.n	406852 <_svfprintf_r+0xaa>
  406e6c:	9308      	str	r3, [sp, #32]
  406e6e:	46a4      	mov	ip, r4
  406e70:	4b98      	ldr	r3, [pc, #608]	; (4070d4 <_svfprintf_r+0x92c>)
  406e72:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  406e76:	9315      	str	r3, [sp, #84]	; 0x54
  406e78:	9b06      	ldr	r3, [sp, #24]
  406e7a:	069a      	lsls	r2, r3, #26
  406e7c:	d4c0      	bmi.n	406e00 <_svfprintf_r+0x658>
  406e7e:	9b06      	ldr	r3, [sp, #24]
  406e80:	06db      	lsls	r3, r3, #27
  406e82:	f140 83ec 	bpl.w	40765e <_svfprintf_r+0xeb6>
  406e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406e88:	2500      	movs	r5, #0
  406e8a:	4613      	mov	r3, r2
  406e8c:	6814      	ldr	r4, [r2, #0]
  406e8e:	3304      	adds	r3, #4
  406e90:	930c      	str	r3, [sp, #48]	; 0x30
  406e92:	e7be      	b.n	406e12 <_svfprintf_r+0x66a>
  406e94:	781e      	ldrb	r6, [r3, #0]
  406e96:	4619      	mov	r1, r3
  406e98:	2a00      	cmp	r2, #0
  406e9a:	f47f acda 	bne.w	406852 <_svfprintf_r+0xaa>
  406e9e:	2220      	movs	r2, #32
  406ea0:	e4d7      	b.n	406852 <_svfprintf_r+0xaa>
  406ea2:	9906      	ldr	r1, [sp, #24]
  406ea4:	f041 0101 	orr.w	r1, r1, #1
  406ea8:	9106      	str	r1, [sp, #24]
  406eaa:	4619      	mov	r1, r3
  406eac:	781e      	ldrb	r6, [r3, #0]
  406eae:	e4d0      	b.n	406852 <_svfprintf_r+0xaa>
  406eb0:	9906      	ldr	r1, [sp, #24]
  406eb2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  406eb6:	9106      	str	r1, [sp, #24]
  406eb8:	4619      	mov	r1, r3
  406eba:	781e      	ldrb	r6, [r3, #0]
  406ebc:	e4c9      	b.n	406852 <_svfprintf_r+0xaa>
  406ebe:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  406ec2:	2100      	movs	r1, #0
  406ec4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  406ec8:	f813 6b01 	ldrb.w	r6, [r3], #1
  406ecc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  406ed0:	f1a6 0030 	sub.w	r0, r6, #48	; 0x30
  406ed4:	2809      	cmp	r0, #9
  406ed6:	d9f5      	bls.n	406ec4 <_svfprintf_r+0x71c>
  406ed8:	910b      	str	r1, [sp, #44]	; 0x2c
  406eda:	e4bb      	b.n	406854 <_svfprintf_r+0xac>
  406edc:	9308      	str	r3, [sp, #32]
  406ede:	46a4      	mov	ip, r4
  406ee0:	9b06      	ldr	r3, [sp, #24]
  406ee2:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  406ee6:	f043 0310 	orr.w	r3, r3, #16
  406eea:	9306      	str	r3, [sp, #24]
  406eec:	9b06      	ldr	r3, [sp, #24]
  406eee:	069c      	lsls	r4, r3, #26
  406ef0:	f53f aed7 	bmi.w	406ca2 <_svfprintf_r+0x4fa>
  406ef4:	9b06      	ldr	r3, [sp, #24]
  406ef6:	06d8      	lsls	r0, r3, #27
  406ef8:	f140 83d5 	bpl.w	4076a6 <_svfprintf_r+0xefe>
  406efc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406efe:	4613      	mov	r3, r2
  406f00:	681c      	ldr	r4, [r3, #0]
  406f02:	3304      	adds	r3, #4
  406f04:	17e5      	asrs	r5, r4, #31
  406f06:	4622      	mov	r2, r4
  406f08:	930c      	str	r3, [sp, #48]	; 0x30
  406f0a:	2a00      	cmp	r2, #0
  406f0c:	462b      	mov	r3, r5
  406f0e:	f173 0300 	sbcs.w	r3, r3, #0
  406f12:	f6bf aed6 	bge.w	406cc2 <_svfprintf_r+0x51a>
  406f16:	272d      	movs	r7, #45	; 0x2d
  406f18:	4264      	negs	r4, r4
  406f1a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  406f1e:	f04f 0301 	mov.w	r3, #1
  406f22:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  406f26:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  406f2a:	e526      	b.n	40697a <_svfprintf_r+0x1d2>
  406f2c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406f2e:	9308      	str	r3, [sp, #32]
  406f30:	3707      	adds	r7, #7
  406f32:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  406f36:	f027 0307 	bic.w	r3, r7, #7
  406f3a:	f103 0208 	add.w	r2, r3, #8
  406f3e:	920c      	str	r2, [sp, #48]	; 0x30
  406f40:	681a      	ldr	r2, [r3, #0]
  406f42:	9213      	str	r2, [sp, #76]	; 0x4c
  406f44:	685b      	ldr	r3, [r3, #4]
  406f46:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406f48:	9314      	str	r3, [sp, #80]	; 0x50
  406f4a:	9914      	ldr	r1, [sp, #80]	; 0x50
  406f4c:	9407      	str	r4, [sp, #28]
  406f4e:	f7fe f96b 	bl	405228 <__fpclassifyd>
  406f52:	2801      	cmp	r0, #1
  406f54:	f8dd c01c 	ldr.w	ip, [sp, #28]
  406f58:	f040 8355 	bne.w	407606 <_svfprintf_r+0xe5e>
  406f5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  406f5e:	2200      	movs	r2, #0
  406f60:	2300      	movs	r3, #0
  406f62:	9914      	ldr	r1, [sp, #80]	; 0x50
  406f64:	f7fe ff40 	bl	405de8 <__aeabi_dcmplt>
  406f68:	2800      	cmp	r0, #0
  406f6a:	f040 8582 	bne.w	407a72 <_svfprintf_r+0x12ca>
  406f6e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406f72:	2303      	movs	r3, #3
  406f74:	9806      	ldr	r0, [sp, #24]
  406f76:	4a58      	ldr	r2, [pc, #352]	; (4070d8 <_svfprintf_r+0x930>)
  406f78:	2100      	movs	r1, #0
  406f7a:	461c      	mov	r4, r3
  406f7c:	9307      	str	r3, [sp, #28]
  406f7e:	4b57      	ldr	r3, [pc, #348]	; (4070dc <_svfprintf_r+0x934>)
  406f80:	f020 0080 	bic.w	r0, r0, #128	; 0x80
  406f84:	9110      	str	r1, [sp, #64]	; 0x40
  406f86:	2e47      	cmp	r6, #71	; 0x47
  406f88:	bfd8      	it	le
  406f8a:	461a      	movle	r2, r3
  406f8c:	9006      	str	r0, [sp, #24]
  406f8e:	9111      	str	r1, [sp, #68]	; 0x44
  406f90:	920f      	str	r2, [sp, #60]	; 0x3c
  406f92:	e51c      	b.n	4069ce <_svfprintf_r+0x226>
  406f94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  406f96:	2230      	movs	r2, #48	; 0x30
  406f98:	9806      	ldr	r0, [sp, #24]
  406f9a:	46a4      	mov	ip, r4
  406f9c:	4629      	mov	r1, r5
  406f9e:	9308      	str	r3, [sp, #32]
  406fa0:	2378      	movs	r3, #120	; 0x78
  406fa2:	f040 0002 	orr.w	r0, r0, #2
  406fa6:	3104      	adds	r1, #4
  406fa8:	682c      	ldr	r4, [r5, #0]
  406faa:	461e      	mov	r6, r3
  406fac:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
  406fb0:	4b48      	ldr	r3, [pc, #288]	; (4070d4 <_svfprintf_r+0x92c>)
  406fb2:	2500      	movs	r5, #0
  406fb4:	9006      	str	r0, [sp, #24]
  406fb6:	9315      	str	r3, [sp, #84]	; 0x54
  406fb8:	2302      	movs	r3, #2
  406fba:	910c      	str	r1, [sp, #48]	; 0x30
  406fbc:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
  406fc0:	e4d5      	b.n	40696e <_svfprintf_r+0x1c6>
  406fc2:	9308      	str	r3, [sp, #32]
  406fc4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  406fc8:	2e00      	cmp	r6, #0
  406fca:	f43f acab 	beq.w	406924 <_svfprintf_r+0x17c>
  406fce:	2300      	movs	r3, #0
  406fd0:	2201      	movs	r2, #1
  406fd2:	a926      	add	r1, sp, #152	; 0x98
  406fd4:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
  406fd8:	9207      	str	r2, [sp, #28]
  406fda:	461f      	mov	r7, r3
  406fdc:	910f      	str	r1, [sp, #60]	; 0x3c
  406fde:	4614      	mov	r4, r2
  406fe0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  406fe4:	9310      	str	r3, [sp, #64]	; 0x40
  406fe6:	9311      	str	r3, [sp, #68]	; 0x44
  406fe8:	e4f5      	b.n	4069d6 <_svfprintf_r+0x22e>
  406fea:	9809      	ldr	r0, [sp, #36]	; 0x24
  406fec:	4649      	mov	r1, r9
  406fee:	aa23      	add	r2, sp, #140	; 0x8c
  406ff0:	f003 f836 	bl	40a060 <__ssprint_r>
  406ff4:	2800      	cmp	r0, #0
  406ff6:	f47f ac9c 	bne.w	406932 <_svfprintf_r+0x18a>
  406ffa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  406ffe:	46c3      	mov	fp, r8
  407000:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407004:	e53f      	b.n	406a86 <_svfprintf_r+0x2de>
  407006:	2e65      	cmp	r6, #101	; 0x65
  407008:	f340 80c9 	ble.w	40719e <_svfprintf_r+0x9f6>
  40700c:	9813      	ldr	r0, [sp, #76]	; 0x4c
  40700e:	2200      	movs	r2, #0
  407010:	2300      	movs	r3, #0
  407012:	9914      	ldr	r1, [sp, #80]	; 0x50
  407014:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  407018:	f7fe fedc 	bl	405dd4 <__aeabi_dcmpeq>
  40701c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  407020:	2800      	cmp	r0, #0
  407022:	f000 8165 	beq.w	4072f0 <_svfprintf_r+0xb48>
  407026:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407028:	2201      	movs	r2, #1
  40702a:	f10c 0c01 	add.w	ip, ip, #1
  40702e:	492c      	ldr	r1, [pc, #176]	; (4070e0 <_svfprintf_r+0x938>)
  407030:	4413      	add	r3, r2
  407032:	f8cb 2004 	str.w	r2, [fp, #4]
  407036:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40703a:	2b07      	cmp	r3, #7
  40703c:	f8cb 1000 	str.w	r1, [fp]
  407040:	9324      	str	r3, [sp, #144]	; 0x90
  407042:	f300 8343 	bgt.w	4076cc <_svfprintf_r+0xf24>
  407046:	f10b 0b08 	add.w	fp, fp, #8
  40704a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40704c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40704e:	4293      	cmp	r3, r2
  407050:	db03      	blt.n	40705a <_svfprintf_r+0x8b2>
  407052:	9b06      	ldr	r3, [sp, #24]
  407054:	07de      	lsls	r6, r3, #31
  407056:	f57f ad92 	bpl.w	406b7e <_svfprintf_r+0x3d6>
  40705a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40705c:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40705e:	3301      	adds	r3, #1
  407060:	9a16      	ldr	r2, [sp, #88]	; 0x58
  407062:	448c      	add	ip, r1
  407064:	f8cb 1004 	str.w	r1, [fp, #4]
  407068:	2b07      	cmp	r3, #7
  40706a:	f8cb 2000 	str.w	r2, [fp]
  40706e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407072:	9324      	str	r3, [sp, #144]	; 0x90
  407074:	f300 841d 	bgt.w	4078b2 <_svfprintf_r+0x110a>
  407078:	f10b 0b08 	add.w	fp, fp, #8
  40707c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40707e:	1e5c      	subs	r4, r3, #1
  407080:	2c00      	cmp	r4, #0
  407082:	f77f ad7c 	ble.w	406b7e <_svfprintf_r+0x3d6>
  407086:	2c10      	cmp	r4, #16
  407088:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40708a:	f340 85bc 	ble.w	407c06 <_svfprintf_r+0x145e>
  40708e:	2610      	movs	r6, #16
  407090:	4d14      	ldr	r5, [pc, #80]	; (4070e4 <_svfprintf_r+0x93c>)
  407092:	4662      	mov	r2, ip
  407094:	9f09      	ldr	r7, [sp, #36]	; 0x24
  407096:	e003      	b.n	4070a0 <_svfprintf_r+0x8f8>
  407098:	3c10      	subs	r4, #16
  40709a:	2c10      	cmp	r4, #16
  40709c:	f340 81c8 	ble.w	407430 <_svfprintf_r+0xc88>
  4070a0:	3301      	adds	r3, #1
  4070a2:	3210      	adds	r2, #16
  4070a4:	f8cb 5000 	str.w	r5, [fp]
  4070a8:	f10b 0b08 	add.w	fp, fp, #8
  4070ac:	2b07      	cmp	r3, #7
  4070ae:	f84b 6c04 	str.w	r6, [fp, #-4]
  4070b2:	9225      	str	r2, [sp, #148]	; 0x94
  4070b4:	9324      	str	r3, [sp, #144]	; 0x90
  4070b6:	ddef      	ble.n	407098 <_svfprintf_r+0x8f0>
  4070b8:	4638      	mov	r0, r7
  4070ba:	4649      	mov	r1, r9
  4070bc:	aa23      	add	r2, sp, #140	; 0x8c
  4070be:	46c3      	mov	fp, r8
  4070c0:	f002 ffce 	bl	40a060 <__ssprint_r>
  4070c4:	2800      	cmp	r0, #0
  4070c6:	f47f ac34 	bne.w	406932 <_svfprintf_r+0x18a>
  4070ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4070cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4070ce:	e7e3      	b.n	407098 <_svfprintf_r+0x8f0>
  4070d0:	0040adb0 	.word	0x0040adb0
  4070d4:	0040adc4 	.word	0x0040adc4
  4070d8:	0040ada4 	.word	0x0040ada4
  4070dc:	0040ada0 	.word	0x0040ada0
  4070e0:	0040ade0 	.word	0x0040ade0
  4070e4:	0040ad80 	.word	0x0040ad80
  4070e8:	2b01      	cmp	r3, #1
  4070ea:	f000 814d 	beq.w	407388 <_svfprintf_r+0xbe0>
  4070ee:	2b02      	cmp	r3, #2
  4070f0:	f040 80e3 	bne.w	4072ba <_svfprintf_r+0xb12>
  4070f4:	46c2      	mov	sl, r8
  4070f6:	9815      	ldr	r0, [sp, #84]	; 0x54
  4070f8:	0923      	lsrs	r3, r4, #4
  4070fa:	f004 010f 	and.w	r1, r4, #15
  4070fe:	092a      	lsrs	r2, r5, #4
  407100:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  407104:	4615      	mov	r5, r2
  407106:	461c      	mov	r4, r3
  407108:	5c43      	ldrb	r3, [r0, r1]
  40710a:	f80a 3d01 	strb.w	r3, [sl, #-1]!
  40710e:	ea54 0305 	orrs.w	r3, r4, r5
  407112:	d1f1      	bne.n	4070f8 <_svfprintf_r+0x950>
  407114:	4653      	mov	r3, sl
  407116:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  40711a:	ebc3 0408 	rsb	r4, r3, r8
  40711e:	e44f      	b.n	4069c0 <_svfprintf_r+0x218>
  407120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407122:	9a07      	ldr	r2, [sp, #28]
  407124:	1a9f      	subs	r7, r3, r2
  407126:	2f00      	cmp	r7, #0
  407128:	f77f acd9 	ble.w	406ade <_svfprintf_r+0x336>
  40712c:	2f10      	cmp	r7, #16
  40712e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407130:	f340 84f9 	ble.w	407b26 <_svfprintf_r+0x137e>
  407134:	940d      	str	r4, [sp, #52]	; 0x34
  407136:	f04f 0a10 	mov.w	sl, #16
  40713a:	4dc8      	ldr	r5, [pc, #800]	; (40745c <_svfprintf_r+0xcb4>)
  40713c:	4662      	mov	r2, ip
  40713e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  407140:	e002      	b.n	407148 <_svfprintf_r+0x9a0>
  407142:	3f10      	subs	r7, #16
  407144:	2f10      	cmp	r7, #16
  407146:	dd19      	ble.n	40717c <_svfprintf_r+0x9d4>
  407148:	3301      	adds	r3, #1
  40714a:	3210      	adds	r2, #16
  40714c:	f8cb 5000 	str.w	r5, [fp]
  407150:	f10b 0b08 	add.w	fp, fp, #8
  407154:	2b07      	cmp	r3, #7
  407156:	f84b ac04 	str.w	sl, [fp, #-4]
  40715a:	9225      	str	r2, [sp, #148]	; 0x94
  40715c:	9324      	str	r3, [sp, #144]	; 0x90
  40715e:	ddf0      	ble.n	407142 <_svfprintf_r+0x99a>
  407160:	4620      	mov	r0, r4
  407162:	4649      	mov	r1, r9
  407164:	aa23      	add	r2, sp, #140	; 0x8c
  407166:	46c3      	mov	fp, r8
  407168:	f002 ff7a 	bl	40a060 <__ssprint_r>
  40716c:	2800      	cmp	r0, #0
  40716e:	f47f abe0 	bne.w	406932 <_svfprintf_r+0x18a>
  407172:	3f10      	subs	r7, #16
  407174:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407176:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407178:	2f10      	cmp	r7, #16
  40717a:	dce5      	bgt.n	407148 <_svfprintf_r+0x9a0>
  40717c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
  40717e:	4694      	mov	ip, r2
  407180:	3301      	adds	r3, #1
  407182:	44bc      	add	ip, r7
  407184:	f8cb 5000 	str.w	r5, [fp]
  407188:	2b07      	cmp	r3, #7
  40718a:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40718e:	9324      	str	r3, [sp, #144]	; 0x90
  407190:	f8cb 7004 	str.w	r7, [fp, #4]
  407194:	f300 81fc 	bgt.w	407590 <_svfprintf_r+0xde8>
  407198:	f10b 0b08 	add.w	fp, fp, #8
  40719c:	e49f      	b.n	406ade <_svfprintf_r+0x336>
  40719e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4071a0:	f10c 0601 	add.w	r6, ip, #1
  4071a4:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4071a6:	2b01      	cmp	r3, #1
  4071a8:	f340 81c9 	ble.w	40753e <_svfprintf_r+0xd96>
  4071ac:	2301      	movs	r3, #1
  4071ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4071b0:	9625      	str	r6, [sp, #148]	; 0x94
  4071b2:	441c      	add	r4, r3
  4071b4:	f8cb 2000 	str.w	r2, [fp]
  4071b8:	f8cb 3004 	str.w	r3, [fp, #4]
  4071bc:	2c07      	cmp	r4, #7
  4071be:	9424      	str	r4, [sp, #144]	; 0x90
  4071c0:	f300 81da 	bgt.w	407578 <_svfprintf_r+0xdd0>
  4071c4:	f10b 0b08 	add.w	fp, fp, #8
  4071c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  4071ca:	3401      	adds	r4, #1
  4071cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4071ce:	4416      	add	r6, r2
  4071d0:	2c07      	cmp	r4, #7
  4071d2:	f8cb 3000 	str.w	r3, [fp]
  4071d6:	9625      	str	r6, [sp, #148]	; 0x94
  4071d8:	9424      	str	r4, [sp, #144]	; 0x90
  4071da:	f8cb 2004 	str.w	r2, [fp, #4]
  4071de:	f300 81bf 	bgt.w	407560 <_svfprintf_r+0xdb8>
  4071e2:	f10b 0b08 	add.w	fp, fp, #8
  4071e6:	2300      	movs	r3, #0
  4071e8:	9813      	ldr	r0, [sp, #76]	; 0x4c
  4071ea:	2200      	movs	r2, #0
  4071ec:	9914      	ldr	r1, [sp, #80]	; 0x50
  4071ee:	f7fe fdf1 	bl	405dd4 <__aeabi_dcmpeq>
  4071f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4071f4:	2800      	cmp	r0, #0
  4071f6:	f040 80dc 	bne.w	4073b2 <_svfprintf_r+0xc0a>
  4071fa:	3b01      	subs	r3, #1
  4071fc:	3401      	adds	r4, #1
  4071fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407200:	441e      	add	r6, r3
  407202:	2c07      	cmp	r4, #7
  407204:	f102 0201 	add.w	r2, r2, #1
  407208:	9424      	str	r4, [sp, #144]	; 0x90
  40720a:	9625      	str	r6, [sp, #148]	; 0x94
  40720c:	f8cb 2000 	str.w	r2, [fp]
  407210:	f8cb 3004 	str.w	r3, [fp, #4]
  407214:	f300 8100 	bgt.w	407418 <_svfprintf_r+0xc70>
  407218:	f10b 0b08 	add.w	fp, fp, #8
  40721c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40721e:	3401      	adds	r4, #1
  407220:	ab1f      	add	r3, sp, #124	; 0x7c
  407222:	eb06 0c02 	add.w	ip, r6, r2
  407226:	2c07      	cmp	r4, #7
  407228:	f8cb 2004 	str.w	r2, [fp, #4]
  40722c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407230:	9424      	str	r4, [sp, #144]	; 0x90
  407232:	f8cb 3000 	str.w	r3, [fp]
  407236:	f77f aca0 	ble.w	406b7a <_svfprintf_r+0x3d2>
  40723a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40723c:	4649      	mov	r1, r9
  40723e:	aa23      	add	r2, sp, #140	; 0x8c
  407240:	f002 ff0e 	bl	40a060 <__ssprint_r>
  407244:	2800      	cmp	r0, #0
  407246:	f47f ab74 	bne.w	406932 <_svfprintf_r+0x18a>
  40724a:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40724e:	46c3      	mov	fp, r8
  407250:	e495      	b.n	406b7e <_svfprintf_r+0x3d6>
  407252:	9809      	ldr	r0, [sp, #36]	; 0x24
  407254:	4649      	mov	r1, r9
  407256:	aa23      	add	r2, sp, #140	; 0x8c
  407258:	f002 ff02 	bl	40a060 <__ssprint_r>
  40725c:	2800      	cmp	r0, #0
  40725e:	f43f acde 	beq.w	406c1e <_svfprintf_r+0x476>
  407262:	f7ff bb66 	b.w	406932 <_svfprintf_r+0x18a>
  407266:	4614      	mov	r4, r2
  407268:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  40726c:	f7ff bba8 	b.w	4069c0 <_svfprintf_r+0x218>
  407270:	9809      	ldr	r0, [sp, #36]	; 0x24
  407272:	4649      	mov	r1, r9
  407274:	aa23      	add	r2, sp, #140	; 0x8c
  407276:	f002 fef3 	bl	40a060 <__ssprint_r>
  40727a:	2800      	cmp	r0, #0
  40727c:	f47f ab59 	bne.w	406932 <_svfprintf_r+0x18a>
  407280:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407284:	46c3      	mov	fp, r8
  407286:	e466      	b.n	406b56 <_svfprintf_r+0x3ae>
  407288:	9809      	ldr	r0, [sp, #36]	; 0x24
  40728a:	4649      	mov	r1, r9
  40728c:	aa23      	add	r2, sp, #140	; 0x8c
  40728e:	f002 fee7 	bl	40a060 <__ssprint_r>
  407292:	2800      	cmp	r0, #0
  407294:	f47f ab4d 	bne.w	406932 <_svfprintf_r+0x18a>
  407298:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  40729c:	46c3      	mov	fp, r8
  40729e:	e41a      	b.n	406ad6 <_svfprintf_r+0x32e>
  4072a0:	9809      	ldr	r0, [sp, #36]	; 0x24
  4072a2:	4649      	mov	r1, r9
  4072a4:	aa23      	add	r2, sp, #140	; 0x8c
  4072a6:	f002 fedb 	bl	40a060 <__ssprint_r>
  4072aa:	2800      	cmp	r0, #0
  4072ac:	f47f ab41 	bne.w	406932 <_svfprintf_r+0x18a>
  4072b0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4072b4:	46c3      	mov	fp, r8
  4072b6:	f7ff bbfa 	b.w	406aae <_svfprintf_r+0x306>
  4072ba:	4641      	mov	r1, r8
  4072bc:	08e2      	lsrs	r2, r4, #3
  4072be:	f004 0307 	and.w	r3, r4, #7
  4072c2:	08e8      	lsrs	r0, r5, #3
  4072c4:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4072c8:	3330      	adds	r3, #48	; 0x30
  4072ca:	4605      	mov	r5, r0
  4072cc:	4614      	mov	r4, r2
  4072ce:	f801 3d01 	strb.w	r3, [r1, #-1]!
  4072d2:	ea54 0205 	orrs.w	r2, r4, r5
  4072d6:	d1f1      	bne.n	4072bc <_svfprintf_r+0xb14>
  4072d8:	9a06      	ldr	r2, [sp, #24]
  4072da:	910f      	str	r1, [sp, #60]	; 0x3c
  4072dc:	07d0      	lsls	r0, r2, #31
  4072de:	f100 8164 	bmi.w	4075aa <_svfprintf_r+0xe02>
  4072e2:	ebc1 0408 	rsb	r4, r1, r8
  4072e6:	f7ff bb6b 	b.w	4069c0 <_svfprintf_r+0x218>
  4072ea:	2302      	movs	r3, #2
  4072ec:	f7ff bb3f 	b.w	40696e <_svfprintf_r+0x1c6>
  4072f0:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  4072f2:	2c00      	cmp	r4, #0
  4072f4:	f340 81f6 	ble.w	4076e4 <_svfprintf_r+0xf3c>
  4072f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4072fa:	9911      	ldr	r1, [sp, #68]	; 0x44
  4072fc:	4613      	mov	r3, r2
  4072fe:	428a      	cmp	r2, r1
  407300:	bfa8      	it	ge
  407302:	460b      	movge	r3, r1
  407304:	990f      	ldr	r1, [sp, #60]	; 0x3c
  407306:	461c      	mov	r4, r3
  407308:	188f      	adds	r7, r1, r2
  40730a:	2c00      	cmp	r4, #0
  40730c:	dd0e      	ble.n	40732c <_svfprintf_r+0xb84>
  40730e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407310:	44a4      	add	ip, r4
  407312:	f8cb 1000 	str.w	r1, [fp]
  407316:	3301      	adds	r3, #1
  407318:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40731c:	f8cb 4004 	str.w	r4, [fp, #4]
  407320:	2b07      	cmp	r3, #7
  407322:	9324      	str	r3, [sp, #144]	; 0x90
  407324:	f300 8353 	bgt.w	4079ce <_svfprintf_r+0x1226>
  407328:	f10b 0b08 	add.w	fp, fp, #8
  40732c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40732e:	2c00      	cmp	r4, #0
  407330:	bfa8      	it	ge
  407332:	1b1b      	subge	r3, r3, r4
  407334:	2b00      	cmp	r3, #0
  407336:	461c      	mov	r4, r3
  407338:	f340 80a1 	ble.w	40747e <_svfprintf_r+0xcd6>
  40733c:	2c10      	cmp	r4, #16
  40733e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407340:	f340 846c 	ble.w	407c1c <_svfprintf_r+0x1474>
  407344:	2610      	movs	r6, #16
  407346:	4d45      	ldr	r5, [pc, #276]	; (40745c <_svfprintf_r+0xcb4>)
  407348:	4662      	mov	r2, ip
  40734a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  40734e:	e003      	b.n	407358 <_svfprintf_r+0xbb0>
  407350:	3c10      	subs	r4, #16
  407352:	2c10      	cmp	r4, #16
  407354:	f340 8084 	ble.w	407460 <_svfprintf_r+0xcb8>
  407358:	3301      	adds	r3, #1
  40735a:	3210      	adds	r2, #16
  40735c:	f8cb 5000 	str.w	r5, [fp]
  407360:	f10b 0b08 	add.w	fp, fp, #8
  407364:	2b07      	cmp	r3, #7
  407366:	f84b 6c04 	str.w	r6, [fp, #-4]
  40736a:	9225      	str	r2, [sp, #148]	; 0x94
  40736c:	9324      	str	r3, [sp, #144]	; 0x90
  40736e:	ddef      	ble.n	407350 <_svfprintf_r+0xba8>
  407370:	4650      	mov	r0, sl
  407372:	4649      	mov	r1, r9
  407374:	aa23      	add	r2, sp, #140	; 0x8c
  407376:	46c3      	mov	fp, r8
  407378:	f002 fe72 	bl	40a060 <__ssprint_r>
  40737c:	2800      	cmp	r0, #0
  40737e:	f47f aad8 	bne.w	406932 <_svfprintf_r+0x18a>
  407382:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407384:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407386:	e7e3      	b.n	407350 <_svfprintf_r+0xba8>
  407388:	2d00      	cmp	r5, #0
  40738a:	bf08      	it	eq
  40738c:	2c0a      	cmpeq	r4, #10
  40738e:	f080 811a 	bcs.w	4075c6 <_svfprintf_r+0xe1e>
  407392:	f50d 7a80 	add.w	sl, sp, #256	; 0x100
  407396:	3430      	adds	r4, #48	; 0x30
  407398:	f80a 4d41 	strb.w	r4, [sl, #-65]!
  40739c:	ebca 0408 	rsb	r4, sl, r8
  4073a0:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  4073a4:	f7ff bb0c 	b.w	4069c0 <_svfprintf_r+0x218>
  4073a8:	461c      	mov	r4, r3
  4073aa:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  4073ae:	f7ff bb07 	b.w	4069c0 <_svfprintf_r+0x218>
  4073b2:	1e5f      	subs	r7, r3, #1
  4073b4:	2f00      	cmp	r7, #0
  4073b6:	f77f af31 	ble.w	40721c <_svfprintf_r+0xa74>
  4073ba:	2f10      	cmp	r7, #16
  4073bc:	4d27      	ldr	r5, [pc, #156]	; (40745c <_svfprintf_r+0xcb4>)
  4073be:	bfc8      	it	gt
  4073c0:	f04f 0a10 	movgt.w	sl, #16
  4073c4:	dc03      	bgt.n	4073ce <_svfprintf_r+0xc26>
  4073c6:	e01c      	b.n	407402 <_svfprintf_r+0xc5a>
  4073c8:	3f10      	subs	r7, #16
  4073ca:	2f10      	cmp	r7, #16
  4073cc:	dd19      	ble.n	407402 <_svfprintf_r+0xc5a>
  4073ce:	3401      	adds	r4, #1
  4073d0:	3610      	adds	r6, #16
  4073d2:	f8cb 5000 	str.w	r5, [fp]
  4073d6:	f10b 0b08 	add.w	fp, fp, #8
  4073da:	2c07      	cmp	r4, #7
  4073dc:	f84b ac04 	str.w	sl, [fp, #-4]
  4073e0:	9625      	str	r6, [sp, #148]	; 0x94
  4073e2:	9424      	str	r4, [sp, #144]	; 0x90
  4073e4:	ddf0      	ble.n	4073c8 <_svfprintf_r+0xc20>
  4073e6:	9809      	ldr	r0, [sp, #36]	; 0x24
  4073e8:	4649      	mov	r1, r9
  4073ea:	aa23      	add	r2, sp, #140	; 0x8c
  4073ec:	46c3      	mov	fp, r8
  4073ee:	f002 fe37 	bl	40a060 <__ssprint_r>
  4073f2:	2800      	cmp	r0, #0
  4073f4:	f47f aa9d 	bne.w	406932 <_svfprintf_r+0x18a>
  4073f8:	3f10      	subs	r7, #16
  4073fa:	9e25      	ldr	r6, [sp, #148]	; 0x94
  4073fc:	9c24      	ldr	r4, [sp, #144]	; 0x90
  4073fe:	2f10      	cmp	r7, #16
  407400:	dce5      	bgt.n	4073ce <_svfprintf_r+0xc26>
  407402:	3401      	adds	r4, #1
  407404:	443e      	add	r6, r7
  407406:	f8cb 5000 	str.w	r5, [fp]
  40740a:	2c07      	cmp	r4, #7
  40740c:	9625      	str	r6, [sp, #148]	; 0x94
  40740e:	9424      	str	r4, [sp, #144]	; 0x90
  407410:	f8cb 7004 	str.w	r7, [fp, #4]
  407414:	f77f af00 	ble.w	407218 <_svfprintf_r+0xa70>
  407418:	9809      	ldr	r0, [sp, #36]	; 0x24
  40741a:	4649      	mov	r1, r9
  40741c:	aa23      	add	r2, sp, #140	; 0x8c
  40741e:	f002 fe1f 	bl	40a060 <__ssprint_r>
  407422:	2800      	cmp	r0, #0
  407424:	f47f aa85 	bne.w	406932 <_svfprintf_r+0x18a>
  407428:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40742a:	46c3      	mov	fp, r8
  40742c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40742e:	e6f5      	b.n	40721c <_svfprintf_r+0xa74>
  407430:	4694      	mov	ip, r2
  407432:	3301      	adds	r3, #1
  407434:	44a4      	add	ip, r4
  407436:	f8cb 5000 	str.w	r5, [fp]
  40743a:	2b07      	cmp	r3, #7
  40743c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407440:	9324      	str	r3, [sp, #144]	; 0x90
  407442:	f8cb 4004 	str.w	r4, [fp, #4]
  407446:	f77f ab98 	ble.w	406b7a <_svfprintf_r+0x3d2>
  40744a:	e6f6      	b.n	40723a <_svfprintf_r+0xa92>
  40744c:	990c      	ldr	r1, [sp, #48]	; 0x30
  40744e:	2500      	movs	r5, #0
  407450:	460a      	mov	r2, r1
  407452:	680c      	ldr	r4, [r1, #0]
  407454:	3204      	adds	r2, #4
  407456:	920c      	str	r2, [sp, #48]	; 0x30
  407458:	f7ff ba89 	b.w	40696e <_svfprintf_r+0x1c6>
  40745c:	0040ad80 	.word	0x0040ad80
  407460:	4694      	mov	ip, r2
  407462:	3301      	adds	r3, #1
  407464:	44a4      	add	ip, r4
  407466:	f8cb 5000 	str.w	r5, [fp]
  40746a:	2b07      	cmp	r3, #7
  40746c:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407470:	9324      	str	r3, [sp, #144]	; 0x90
  407472:	f8cb 4004 	str.w	r4, [fp, #4]
  407476:	f300 82df 	bgt.w	407a38 <_svfprintf_r+0x1290>
  40747a:	f10b 0b08 	add.w	fp, fp, #8
  40747e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407480:	9911      	ldr	r1, [sp, #68]	; 0x44
  407482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407484:	440a      	add	r2, r1
  407486:	4616      	mov	r6, r2
  407488:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40748a:	4293      	cmp	r3, r2
  40748c:	db45      	blt.n	40751a <_svfprintf_r+0xd72>
  40748e:	9a06      	ldr	r2, [sp, #24]
  407490:	07d0      	lsls	r0, r2, #31
  407492:	d442      	bmi.n	40751a <_svfprintf_r+0xd72>
  407494:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407496:	1bbc      	subs	r4, r7, r6
  407498:	1ad3      	subs	r3, r2, r3
  40749a:	429c      	cmp	r4, r3
  40749c:	bfa8      	it	ge
  40749e:	461c      	movge	r4, r3
  4074a0:	2c00      	cmp	r4, #0
  4074a2:	4625      	mov	r5, r4
  4074a4:	dd0e      	ble.n	4074c4 <_svfprintf_r+0xd1c>
  4074a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4074a8:	44a4      	add	ip, r4
  4074aa:	f8cb 6000 	str.w	r6, [fp]
  4074ae:	3201      	adds	r2, #1
  4074b0:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4074b4:	f8cb 4004 	str.w	r4, [fp, #4]
  4074b8:	2a07      	cmp	r2, #7
  4074ba:	9224      	str	r2, [sp, #144]	; 0x90
  4074bc:	f300 82a0 	bgt.w	407a00 <_svfprintf_r+0x1258>
  4074c0:	f10b 0b08 	add.w	fp, fp, #8
  4074c4:	2d00      	cmp	r5, #0
  4074c6:	bfac      	ite	ge
  4074c8:	1b5c      	subge	r4, r3, r5
  4074ca:	461c      	movlt	r4, r3
  4074cc:	2c00      	cmp	r4, #0
  4074ce:	f77f ab56 	ble.w	406b7e <_svfprintf_r+0x3d6>
  4074d2:	2c10      	cmp	r4, #16
  4074d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4074d6:	f340 8396 	ble.w	407c06 <_svfprintf_r+0x145e>
  4074da:	2610      	movs	r6, #16
  4074dc:	4db1      	ldr	r5, [pc, #708]	; (4077a4 <_svfprintf_r+0xffc>)
  4074de:	4662      	mov	r2, ip
  4074e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
  4074e2:	e002      	b.n	4074ea <_svfprintf_r+0xd42>
  4074e4:	3c10      	subs	r4, #16
  4074e6:	2c10      	cmp	r4, #16
  4074e8:	dda2      	ble.n	407430 <_svfprintf_r+0xc88>
  4074ea:	3301      	adds	r3, #1
  4074ec:	3210      	adds	r2, #16
  4074ee:	f8cb 5000 	str.w	r5, [fp]
  4074f2:	f10b 0b08 	add.w	fp, fp, #8
  4074f6:	2b07      	cmp	r3, #7
  4074f8:	f84b 6c04 	str.w	r6, [fp, #-4]
  4074fc:	9225      	str	r2, [sp, #148]	; 0x94
  4074fe:	9324      	str	r3, [sp, #144]	; 0x90
  407500:	ddf0      	ble.n	4074e4 <_svfprintf_r+0xd3c>
  407502:	4638      	mov	r0, r7
  407504:	4649      	mov	r1, r9
  407506:	aa23      	add	r2, sp, #140	; 0x8c
  407508:	46c3      	mov	fp, r8
  40750a:	f002 fda9 	bl	40a060 <__ssprint_r>
  40750e:	2800      	cmp	r0, #0
  407510:	f47f aa0f 	bne.w	406932 <_svfprintf_r+0x18a>
  407514:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407516:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407518:	e7e4      	b.n	4074e4 <_svfprintf_r+0xd3c>
  40751a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40751c:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40751e:	3201      	adds	r2, #1
  407520:	9916      	ldr	r1, [sp, #88]	; 0x58
  407522:	4484      	add	ip, r0
  407524:	f8cb 0004 	str.w	r0, [fp, #4]
  407528:	2a07      	cmp	r2, #7
  40752a:	f8cb 1000 	str.w	r1, [fp]
  40752e:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  407532:	9224      	str	r2, [sp, #144]	; 0x90
  407534:	f300 8273 	bgt.w	407a1e <_svfprintf_r+0x1276>
  407538:	f10b 0b08 	add.w	fp, fp, #8
  40753c:	e7aa      	b.n	407494 <_svfprintf_r+0xcec>
  40753e:	9b06      	ldr	r3, [sp, #24]
  407540:	07d9      	lsls	r1, r3, #31
  407542:	f53f ae33 	bmi.w	4071ac <_svfprintf_r+0xa04>
  407546:	2301      	movs	r3, #1
  407548:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40754a:	9625      	str	r6, [sp, #148]	; 0x94
  40754c:	441c      	add	r4, r3
  40754e:	f8cb 2000 	str.w	r2, [fp]
  407552:	f8cb 3004 	str.w	r3, [fp, #4]
  407556:	2c07      	cmp	r4, #7
  407558:	9424      	str	r4, [sp, #144]	; 0x90
  40755a:	f77f ae5d 	ble.w	407218 <_svfprintf_r+0xa70>
  40755e:	e75b      	b.n	407418 <_svfprintf_r+0xc70>
  407560:	9809      	ldr	r0, [sp, #36]	; 0x24
  407562:	4649      	mov	r1, r9
  407564:	aa23      	add	r2, sp, #140	; 0x8c
  407566:	f002 fd7b 	bl	40a060 <__ssprint_r>
  40756a:	2800      	cmp	r0, #0
  40756c:	f47f a9e1 	bne.w	406932 <_svfprintf_r+0x18a>
  407570:	9e25      	ldr	r6, [sp, #148]	; 0x94
  407572:	46c3      	mov	fp, r8
  407574:	9c24      	ldr	r4, [sp, #144]	; 0x90
  407576:	e636      	b.n	4071e6 <_svfprintf_r+0xa3e>
  407578:	9809      	ldr	r0, [sp, #36]	; 0x24
  40757a:	4649      	mov	r1, r9
  40757c:	aa23      	add	r2, sp, #140	; 0x8c
  40757e:	f002 fd6f 	bl	40a060 <__ssprint_r>
  407582:	2800      	cmp	r0, #0
  407584:	f47f a9d5 	bne.w	406932 <_svfprintf_r+0x18a>
  407588:	9e25      	ldr	r6, [sp, #148]	; 0x94
  40758a:	46c3      	mov	fp, r8
  40758c:	9c24      	ldr	r4, [sp, #144]	; 0x90
  40758e:	e61b      	b.n	4071c8 <_svfprintf_r+0xa20>
  407590:	9809      	ldr	r0, [sp, #36]	; 0x24
  407592:	4649      	mov	r1, r9
  407594:	aa23      	add	r2, sp, #140	; 0x8c
  407596:	f002 fd63 	bl	40a060 <__ssprint_r>
  40759a:	2800      	cmp	r0, #0
  40759c:	f47f a9c9 	bne.w	406932 <_svfprintf_r+0x18a>
  4075a0:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4075a4:	46c3      	mov	fp, r8
  4075a6:	f7ff ba9a 	b.w	406ade <_svfprintf_r+0x336>
  4075aa:	2b30      	cmp	r3, #48	; 0x30
  4075ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4075ae:	f43f adb4 	beq.w	40711a <_svfprintf_r+0x972>
  4075b2:	3b01      	subs	r3, #1
  4075b4:	461a      	mov	r2, r3
  4075b6:	930f      	str	r3, [sp, #60]	; 0x3c
  4075b8:	2330      	movs	r3, #48	; 0x30
  4075ba:	ebc2 0408 	rsb	r4, r2, r8
  4075be:	f801 3c01 	strb.w	r3, [r1, #-1]
  4075c2:	f7ff b9fd 	b.w	4069c0 <_svfprintf_r+0x218>
  4075c6:	46c2      	mov	sl, r8
  4075c8:	f8cd c01c 	str.w	ip, [sp, #28]
  4075cc:	4620      	mov	r0, r4
  4075ce:	4629      	mov	r1, r5
  4075d0:	220a      	movs	r2, #10
  4075d2:	2300      	movs	r3, #0
  4075d4:	f002 fe50 	bl	40a278 <__aeabi_uldivmod>
  4075d8:	f102 0e30 	add.w	lr, r2, #48	; 0x30
  4075dc:	4620      	mov	r0, r4
  4075de:	4629      	mov	r1, r5
  4075e0:	2300      	movs	r3, #0
  4075e2:	220a      	movs	r2, #10
  4075e4:	f80a ed01 	strb.w	lr, [sl, #-1]!
  4075e8:	f002 fe46 	bl	40a278 <__aeabi_uldivmod>
  4075ec:	4604      	mov	r4, r0
  4075ee:	460d      	mov	r5, r1
  4075f0:	ea54 0305 	orrs.w	r3, r4, r5
  4075f4:	d1ea      	bne.n	4075cc <_svfprintf_r+0xe24>
  4075f6:	f8dd c01c 	ldr.w	ip, [sp, #28]
  4075fa:	ebca 0408 	rsb	r4, sl, r8
  4075fe:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
  407602:	f7ff b9dd 	b.w	4069c0 <_svfprintf_r+0x218>
  407606:	9813      	ldr	r0, [sp, #76]	; 0x4c
  407608:	9914      	ldr	r1, [sp, #80]	; 0x50
  40760a:	f8cd c01c 	str.w	ip, [sp, #28]
  40760e:	f7fd fe0b 	bl	405228 <__fpclassifyd>
  407612:	f8dd c01c 	ldr.w	ip, [sp, #28]
  407616:	2800      	cmp	r0, #0
  407618:	f040 80cc 	bne.w	4077b4 <_svfprintf_r+0x100c>
  40761c:	9c06      	ldr	r4, [sp, #24]
  40761e:	2103      	movs	r1, #3
  407620:	4a61      	ldr	r2, [pc, #388]	; (4077a8 <_svfprintf_r+0x1000>)
  407622:	4b62      	ldr	r3, [pc, #392]	; (4077ac <_svfprintf_r+0x1004>)
  407624:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  407628:	9010      	str	r0, [sp, #64]	; 0x40
  40762a:	2e47      	cmp	r6, #71	; 0x47
  40762c:	bfd8      	it	le
  40762e:	461a      	movle	r2, r3
  407630:	9406      	str	r4, [sp, #24]
  407632:	9107      	str	r1, [sp, #28]
  407634:	460c      	mov	r4, r1
  407636:	9011      	str	r0, [sp, #68]	; 0x44
  407638:	920f      	str	r2, [sp, #60]	; 0x3c
  40763a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40763e:	f7ff b9c6 	b.w	4069ce <_svfprintf_r+0x226>
  407642:	9b06      	ldr	r3, [sp, #24]
  407644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407646:	f013 0f40 	tst.w	r3, #64	; 0x40
  40764a:	4613      	mov	r3, r2
  40764c:	f43f abc9 	beq.w	406de2 <_svfprintf_r+0x63a>
  407650:	8814      	ldrh	r4, [r2, #0]
  407652:	3204      	adds	r2, #4
  407654:	2500      	movs	r5, #0
  407656:	2301      	movs	r3, #1
  407658:	920c      	str	r2, [sp, #48]	; 0x30
  40765a:	f7ff b988 	b.w	40696e <_svfprintf_r+0x1c6>
  40765e:	9b06      	ldr	r3, [sp, #24]
  407660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407662:	f013 0f40 	tst.w	r3, #64	; 0x40
  407666:	4613      	mov	r3, r2
  407668:	f000 8130 	beq.w	4078cc <_svfprintf_r+0x1124>
  40766c:	3304      	adds	r3, #4
  40766e:	8814      	ldrh	r4, [r2, #0]
  407670:	2500      	movs	r5, #0
  407672:	930c      	str	r3, [sp, #48]	; 0x30
  407674:	f7ff bbcd 	b.w	406e12 <_svfprintf_r+0x66a>
  407678:	9b06      	ldr	r3, [sp, #24]
  40767a:	06dd      	lsls	r5, r3, #27
  40767c:	d40b      	bmi.n	407696 <_svfprintf_r+0xeee>
  40767e:	9b06      	ldr	r3, [sp, #24]
  407680:	065c      	lsls	r4, r3, #25
  407682:	d508      	bpl.n	407696 <_svfprintf_r+0xeee>
  407684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407686:	6813      	ldr	r3, [r2, #0]
  407688:	3204      	adds	r2, #4
  40768a:	920c      	str	r2, [sp, #48]	; 0x30
  40768c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
  407690:	801a      	strh	r2, [r3, #0]
  407692:	f7ff b8af 	b.w	4067f4 <_svfprintf_r+0x4c>
  407696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  407698:	6813      	ldr	r3, [r2, #0]
  40769a:	3204      	adds	r2, #4
  40769c:	920c      	str	r2, [sp, #48]	; 0x30
  40769e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4076a0:	601a      	str	r2, [r3, #0]
  4076a2:	f7ff b8a7 	b.w	4067f4 <_svfprintf_r+0x4c>
  4076a6:	9b06      	ldr	r3, [sp, #24]
  4076a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4076aa:	f013 0f40 	tst.w	r3, #64	; 0x40
  4076ae:	4613      	mov	r3, r2
  4076b0:	f43f ac26 	beq.w	406f00 <_svfprintf_r+0x758>
  4076b4:	f9b2 4000 	ldrsh.w	r4, [r2]
  4076b8:	3304      	adds	r3, #4
  4076ba:	17e5      	asrs	r5, r4, #31
  4076bc:	930c      	str	r3, [sp, #48]	; 0x30
  4076be:	4622      	mov	r2, r4
  4076c0:	462b      	mov	r3, r5
  4076c2:	f7ff baf9 	b.w	406cb8 <_svfprintf_r+0x510>
  4076c6:	4d37      	ldr	r5, [pc, #220]	; (4077a4 <_svfprintf_r+0xffc>)
  4076c8:	f7ff ba37 	b.w	406b3a <_svfprintf_r+0x392>
  4076cc:	9809      	ldr	r0, [sp, #36]	; 0x24
  4076ce:	4649      	mov	r1, r9
  4076d0:	aa23      	add	r2, sp, #140	; 0x8c
  4076d2:	f002 fcc5 	bl	40a060 <__ssprint_r>
  4076d6:	2800      	cmp	r0, #0
  4076d8:	f47f a92b 	bne.w	406932 <_svfprintf_r+0x18a>
  4076dc:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4076e0:	46c3      	mov	fp, r8
  4076e2:	e4b2      	b.n	40704a <_svfprintf_r+0x8a2>
  4076e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4076e6:	2201      	movs	r2, #1
  4076e8:	f10c 0c01 	add.w	ip, ip, #1
  4076ec:	4930      	ldr	r1, [pc, #192]	; (4077b0 <_svfprintf_r+0x1008>)
  4076ee:	4413      	add	r3, r2
  4076f0:	f8cb 2004 	str.w	r2, [fp, #4]
  4076f4:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  4076f8:	2b07      	cmp	r3, #7
  4076fa:	f8cb 1000 	str.w	r1, [fp]
  4076fe:	9324      	str	r3, [sp, #144]	; 0x90
  407700:	f300 80fa 	bgt.w	4078f8 <_svfprintf_r+0x1150>
  407704:	f10b 0b08 	add.w	fp, fp, #8
  407708:	b92c      	cbnz	r4, 407716 <_svfprintf_r+0xf6e>
  40770a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40770c:	b91b      	cbnz	r3, 407716 <_svfprintf_r+0xf6e>
  40770e:	9b06      	ldr	r3, [sp, #24]
  407710:	07dd      	lsls	r5, r3, #31
  407712:	f57f aa34 	bpl.w	406b7e <_svfprintf_r+0x3d6>
  407716:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407718:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40771a:	3301      	adds	r3, #1
  40771c:	9816      	ldr	r0, [sp, #88]	; 0x58
  40771e:	eb0c 0201 	add.w	r2, ip, r1
  407722:	f8cb 1004 	str.w	r1, [fp, #4]
  407726:	2b07      	cmp	r3, #7
  407728:	f8cb 0000 	str.w	r0, [fp]
  40772c:	9225      	str	r2, [sp, #148]	; 0x94
  40772e:	9324      	str	r3, [sp, #144]	; 0x90
  407730:	f300 824c 	bgt.w	407bcc <_svfprintf_r+0x1424>
  407734:	f10b 0b08 	add.w	fp, fp, #8
  407738:	4264      	negs	r4, r4
  40773a:	2c00      	cmp	r4, #0
  40773c:	f340 8126 	ble.w	40798c <_svfprintf_r+0x11e4>
  407740:	2c10      	cmp	r4, #16
  407742:	4d18      	ldr	r5, [pc, #96]	; (4077a4 <_svfprintf_r+0xffc>)
  407744:	f340 814f 	ble.w	4079e6 <_svfprintf_r+0x123e>
  407748:	2610      	movs	r6, #16
  40774a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40774c:	e003      	b.n	407756 <_svfprintf_r+0xfae>
  40774e:	3c10      	subs	r4, #16
  407750:	2c10      	cmp	r4, #16
  407752:	f340 8148 	ble.w	4079e6 <_svfprintf_r+0x123e>
  407756:	3301      	adds	r3, #1
  407758:	3210      	adds	r2, #16
  40775a:	f8cb 5000 	str.w	r5, [fp]
  40775e:	f10b 0b08 	add.w	fp, fp, #8
  407762:	2b07      	cmp	r3, #7
  407764:	f84b 6c04 	str.w	r6, [fp, #-4]
  407768:	9225      	str	r2, [sp, #148]	; 0x94
  40776a:	9324      	str	r3, [sp, #144]	; 0x90
  40776c:	ddef      	ble.n	40774e <_svfprintf_r+0xfa6>
  40776e:	4638      	mov	r0, r7
  407770:	4649      	mov	r1, r9
  407772:	aa23      	add	r2, sp, #140	; 0x8c
  407774:	46c3      	mov	fp, r8
  407776:	f002 fc73 	bl	40a060 <__ssprint_r>
  40777a:	2800      	cmp	r0, #0
  40777c:	f47f a8d9 	bne.w	406932 <_svfprintf_r+0x18a>
  407780:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407782:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407784:	e7e3      	b.n	40774e <_svfprintf_r+0xfa6>
  407786:	f041 0120 	orr.w	r1, r1, #32
  40778a:	785e      	ldrb	r6, [r3, #1]
  40778c:	9106      	str	r1, [sp, #24]
  40778e:	1c59      	adds	r1, r3, #1
  407790:	f7ff b85f 	b.w	406852 <_svfprintf_r+0xaa>
  407794:	980b      	ldr	r0, [sp, #44]	; 0x2c
  407796:	910c      	str	r1, [sp, #48]	; 0x30
  407798:	4619      	mov	r1, r3
  40779a:	4240      	negs	r0, r0
  40779c:	900b      	str	r0, [sp, #44]	; 0x2c
  40779e:	f7ff ba43 	b.w	406c28 <_svfprintf_r+0x480>
  4077a2:	bf00      	nop
  4077a4:	0040ad80 	.word	0x0040ad80
  4077a8:	0040adac 	.word	0x0040adac
  4077ac:	0040ada8 	.word	0x0040ada8
  4077b0:	0040ade0 	.word	0x0040ade0
  4077b4:	f1bc 3fff 	cmp.w	ip, #4294967295
  4077b8:	f026 0a20 	bic.w	sl, r6, #32
  4077bc:	f000 80a9 	beq.w	407912 <_svfprintf_r+0x116a>
  4077c0:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  4077c4:	f040 80a7 	bne.w	407916 <_svfprintf_r+0x116e>
  4077c8:	f1bc 0f00 	cmp.w	ip, #0
  4077cc:	f040 80a3 	bne.w	407916 <_svfprintf_r+0x116e>
  4077d0:	9b06      	ldr	r3, [sp, #24]
  4077d2:	f04f 0a47 	mov.w	sl, #71	; 0x47
  4077d6:	f04f 0c01 	mov.w	ip, #1
  4077da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4077de:	930e      	str	r3, [sp, #56]	; 0x38
  4077e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4077e2:	2b00      	cmp	r3, #0
  4077e4:	f2c0 81ff 	blt.w	407be6 <_svfprintf_r+0x143e>
  4077e8:	461d      	mov	r5, r3
  4077ea:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  4077ec:	2300      	movs	r3, #0
  4077ee:	930d      	str	r3, [sp, #52]	; 0x34
  4077f0:	2002      	movs	r0, #2
  4077f2:	a91d      	add	r1, sp, #116	; 0x74
  4077f4:	f8cd c004 	str.w	ip, [sp, #4]
  4077f8:	463a      	mov	r2, r7
  4077fa:	9000      	str	r0, [sp, #0]
  4077fc:	a81e      	add	r0, sp, #120	; 0x78
  4077fe:	9102      	str	r1, [sp, #8]
  407800:	a921      	add	r1, sp, #132	; 0x84
  407802:	9003      	str	r0, [sp, #12]
  407804:	462b      	mov	r3, r5
  407806:	9809      	ldr	r0, [sp, #36]	; 0x24
  407808:	9104      	str	r1, [sp, #16]
  40780a:	f8cd c01c 	str.w	ip, [sp, #28]
  40780e:	f000 fb03 	bl	407e18 <_dtoa_r>
  407812:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  407816:	900f      	str	r0, [sp, #60]	; 0x3c
  407818:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40781c:	f040 8242 	bne.w	407ca4 <_svfprintf_r+0x14fc>
  407820:	9b06      	ldr	r3, [sp, #24]
  407822:	07db      	lsls	r3, r3, #31
  407824:	f140 81f3 	bpl.w	407c0e <_svfprintf_r+0x1466>
  407828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40782a:	eb03 040c 	add.w	r4, r3, ip
  40782e:	4638      	mov	r0, r7
  407830:	2200      	movs	r2, #0
  407832:	2300      	movs	r3, #0
  407834:	4629      	mov	r1, r5
  407836:	f8cd c01c 	str.w	ip, [sp, #28]
  40783a:	f7fe facb 	bl	405dd4 <__aeabi_dcmpeq>
  40783e:	f8dd c01c 	ldr.w	ip, [sp, #28]
  407842:	2800      	cmp	r0, #0
  407844:	f040 8172 	bne.w	407b2c <_svfprintf_r+0x1384>
  407848:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40784a:	429c      	cmp	r4, r3
  40784c:	d906      	bls.n	40785c <_svfprintf_r+0x10b4>
  40784e:	2130      	movs	r1, #48	; 0x30
  407850:	1c5a      	adds	r2, r3, #1
  407852:	9221      	str	r2, [sp, #132]	; 0x84
  407854:	7019      	strb	r1, [r3, #0]
  407856:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407858:	429c      	cmp	r4, r3
  40785a:	d8f9      	bhi.n	407850 <_svfprintf_r+0x10a8>
  40785c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40785e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
  407862:	eba3 0302 	sub.w	r3, r3, r2
  407866:	9312      	str	r3, [sp, #72]	; 0x48
  407868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40786a:	f040 8113 	bne.w	407a94 <_svfprintf_r+0x12ec>
  40786e:	459c      	cmp	ip, r3
  407870:	f2c0 8168 	blt.w	407b44 <_svfprintf_r+0x139c>
  407874:	1cd9      	adds	r1, r3, #3
  407876:	f2c0 8165 	blt.w	407b44 <_svfprintf_r+0x139c>
  40787a:	2667      	movs	r6, #103	; 0x67
  40787c:	9311      	str	r3, [sp, #68]	; 0x44
  40787e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407880:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407882:	4293      	cmp	r3, r2
  407884:	f300 81b6 	bgt.w	407bf4 <_svfprintf_r+0x144c>
  407888:	9b06      	ldr	r3, [sp, #24]
  40788a:	07df      	lsls	r7, r3, #31
  40788c:	f100 81c1 	bmi.w	407c12 <_svfprintf_r+0x146a>
  407890:	4614      	mov	r4, r2
  407892:	ea22 7ce2 	bic.w	ip, r2, r2, asr #31
  407896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  407898:	2b00      	cmp	r3, #0
  40789a:	f040 80f0 	bne.w	407a7e <_svfprintf_r+0x12d6>
  40789e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4078a0:	f8cd c01c 	str.w	ip, [sp, #28]
  4078a4:	9306      	str	r3, [sp, #24]
  4078a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4078a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4078ac:	9310      	str	r3, [sp, #64]	; 0x40
  4078ae:	f7ff b88e 	b.w	4069ce <_svfprintf_r+0x226>
  4078b2:	9809      	ldr	r0, [sp, #36]	; 0x24
  4078b4:	4649      	mov	r1, r9
  4078b6:	aa23      	add	r2, sp, #140	; 0x8c
  4078b8:	f002 fbd2 	bl	40a060 <__ssprint_r>
  4078bc:	2800      	cmp	r0, #0
  4078be:	f47f a838 	bne.w	406932 <_svfprintf_r+0x18a>
  4078c2:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4078c6:	46c3      	mov	fp, r8
  4078c8:	f7ff bbd8 	b.w	40707c <_svfprintf_r+0x8d4>
  4078cc:	3304      	adds	r3, #4
  4078ce:	6814      	ldr	r4, [r2, #0]
  4078d0:	2500      	movs	r5, #0
  4078d2:	930c      	str	r3, [sp, #48]	; 0x30
  4078d4:	f7ff ba9d 	b.w	406e12 <_svfprintf_r+0x66a>
  4078d8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4078da:	2140      	movs	r1, #64	; 0x40
  4078dc:	f001 fb50 	bl	408f80 <_malloc_r>
  4078e0:	f8c9 0000 	str.w	r0, [r9]
  4078e4:	f8c9 0010 	str.w	r0, [r9, #16]
  4078e8:	2800      	cmp	r0, #0
  4078ea:	f000 81d4 	beq.w	407c96 <_svfprintf_r+0x14ee>
  4078ee:	2340      	movs	r3, #64	; 0x40
  4078f0:	f8c9 3014 	str.w	r3, [r9, #20]
  4078f4:	f7fe bf70 	b.w	4067d8 <_svfprintf_r+0x30>
  4078f8:	9809      	ldr	r0, [sp, #36]	; 0x24
  4078fa:	4649      	mov	r1, r9
  4078fc:	aa23      	add	r2, sp, #140	; 0x8c
  4078fe:	f002 fbaf 	bl	40a060 <__ssprint_r>
  407902:	2800      	cmp	r0, #0
  407904:	f47f a815 	bne.w	406932 <_svfprintf_r+0x18a>
  407908:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  40790a:	46c3      	mov	fp, r8
  40790c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407910:	e6fa      	b.n	407708 <_svfprintf_r+0xf60>
  407912:	f04f 0c06 	mov.w	ip, #6
  407916:	9b06      	ldr	r3, [sp, #24]
  407918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  40791c:	930e      	str	r3, [sp, #56]	; 0x38
  40791e:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407920:	2b00      	cmp	r3, #0
  407922:	f2c0 8160 	blt.w	407be6 <_svfprintf_r+0x143e>
  407926:	461d      	mov	r5, r3
  407928:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40792a:	2300      	movs	r3, #0
  40792c:	930d      	str	r3, [sp, #52]	; 0x34
  40792e:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
  407932:	f000 80c4 	beq.w	407abe <_svfprintf_r+0x1316>
  407936:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
  40793a:	f47f af59 	bne.w	4077f0 <_svfprintf_r+0x1048>
  40793e:	f10c 0401 	add.w	r4, ip, #1
  407942:	f8cd c01c 	str.w	ip, [sp, #28]
  407946:	f10d 0e74 	add.w	lr, sp, #116	; 0x74
  40794a:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
  40794e:	a81e      	add	r0, sp, #120	; 0x78
  407950:	2102      	movs	r1, #2
  407952:	f8cd c010 	str.w	ip, [sp, #16]
  407956:	463a      	mov	r2, r7
  407958:	9003      	str	r0, [sp, #12]
  40795a:	462b      	mov	r3, r5
  40795c:	9401      	str	r4, [sp, #4]
  40795e:	9100      	str	r1, [sp, #0]
  407960:	f8cd e008 	str.w	lr, [sp, #8]
  407964:	9809      	ldr	r0, [sp, #36]	; 0x24
  407966:	f000 fa57 	bl	407e18 <_dtoa_r>
  40796a:	f8dd c01c 	ldr.w	ip, [sp, #28]
  40796e:	900f      	str	r0, [sp, #60]	; 0x3c
  407970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407972:	441c      	add	r4, r3
  407974:	e75b      	b.n	40782e <_svfprintf_r+0x1086>
  407976:	9809      	ldr	r0, [sp, #36]	; 0x24
  407978:	4649      	mov	r1, r9
  40797a:	aa23      	add	r2, sp, #140	; 0x8c
  40797c:	f002 fb70 	bl	40a060 <__ssprint_r>
  407980:	2800      	cmp	r0, #0
  407982:	f47e afd6 	bne.w	406932 <_svfprintf_r+0x18a>
  407986:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407988:	46c3      	mov	fp, r8
  40798a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40798c:	9812      	ldr	r0, [sp, #72]	; 0x48
  40798e:	3301      	adds	r3, #1
  407990:	eb02 0c00 	add.w	ip, r2, r0
  407994:	2b07      	cmp	r3, #7
  407996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  407998:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
  40799c:	f8cb 2000 	str.w	r2, [fp]
  4079a0:	9324      	str	r3, [sp, #144]	; 0x90
  4079a2:	f8cb 0004 	str.w	r0, [fp, #4]
  4079a6:	f77f a8e8 	ble.w	406b7a <_svfprintf_r+0x3d2>
  4079aa:	e446      	b.n	40723a <_svfprintf_r+0xa92>
  4079ac:	9510      	str	r5, [sp, #64]	; 0x40
  4079ae:	f7fe fecd 	bl	40674c <strlen>
  4079b2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  4079b6:	970c      	str	r7, [sp, #48]	; 0x30
  4079b8:	4604      	mov	r4, r0
  4079ba:	9511      	str	r5, [sp, #68]	; 0x44
  4079bc:	9307      	str	r3, [sp, #28]
  4079be:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4079c2:	f7ff b804 	b.w	4069ce <_svfprintf_r+0x226>
  4079c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4079c8:	4fb7      	ldr	r7, [pc, #732]	; (407ca8 <_svfprintf_r+0x1500>)
  4079ca:	f7ff b84b 	b.w	406a64 <_svfprintf_r+0x2bc>
  4079ce:	9809      	ldr	r0, [sp, #36]	; 0x24
  4079d0:	4649      	mov	r1, r9
  4079d2:	aa23      	add	r2, sp, #140	; 0x8c
  4079d4:	f002 fb44 	bl	40a060 <__ssprint_r>
  4079d8:	2800      	cmp	r0, #0
  4079da:	f47e afaa 	bne.w	406932 <_svfprintf_r+0x18a>
  4079de:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  4079e2:	46c3      	mov	fp, r8
  4079e4:	e4a2      	b.n	40732c <_svfprintf_r+0xb84>
  4079e6:	3301      	adds	r3, #1
  4079e8:	4422      	add	r2, r4
  4079ea:	f8cb 5000 	str.w	r5, [fp]
  4079ee:	2b07      	cmp	r3, #7
  4079f0:	9225      	str	r2, [sp, #148]	; 0x94
  4079f2:	9324      	str	r3, [sp, #144]	; 0x90
  4079f4:	f8cb 4004 	str.w	r4, [fp, #4]
  4079f8:	dcbd      	bgt.n	407976 <_svfprintf_r+0x11ce>
  4079fa:	f10b 0b08 	add.w	fp, fp, #8
  4079fe:	e7c5      	b.n	40798c <_svfprintf_r+0x11e4>
  407a00:	9809      	ldr	r0, [sp, #36]	; 0x24
  407a02:	4649      	mov	r1, r9
  407a04:	aa23      	add	r2, sp, #140	; 0x8c
  407a06:	f002 fb2b 	bl	40a060 <__ssprint_r>
  407a0a:	2800      	cmp	r0, #0
  407a0c:	f47e af91 	bne.w	406932 <_svfprintf_r+0x18a>
  407a10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407a12:	46c3      	mov	fp, r8
  407a14:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407a16:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407a1a:	1ad3      	subs	r3, r2, r3
  407a1c:	e552      	b.n	4074c4 <_svfprintf_r+0xd1c>
  407a1e:	9809      	ldr	r0, [sp, #36]	; 0x24
  407a20:	4649      	mov	r1, r9
  407a22:	aa23      	add	r2, sp, #140	; 0x8c
  407a24:	f002 fb1c 	bl	40a060 <__ssprint_r>
  407a28:	2800      	cmp	r0, #0
  407a2a:	f47e af82 	bne.w	406932 <_svfprintf_r+0x18a>
  407a2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  407a30:	46c3      	mov	fp, r8
  407a32:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407a36:	e52d      	b.n	407494 <_svfprintf_r+0xcec>
  407a38:	9809      	ldr	r0, [sp, #36]	; 0x24
  407a3a:	4649      	mov	r1, r9
  407a3c:	aa23      	add	r2, sp, #140	; 0x8c
  407a3e:	f002 fb0f 	bl	40a060 <__ssprint_r>
  407a42:	2800      	cmp	r0, #0
  407a44:	f47e af75 	bne.w	406932 <_svfprintf_r+0x18a>
  407a48:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
  407a4c:	46c3      	mov	fp, r8
  407a4e:	e516      	b.n	40747e <_svfprintf_r+0xcd6>
  407a50:	2c06      	cmp	r4, #6
  407a52:	970c      	str	r7, [sp, #48]	; 0x30
  407a54:	9310      	str	r3, [sp, #64]	; 0x40
  407a56:	461f      	mov	r7, r3
  407a58:	bf28      	it	cs
  407a5a:	2406      	movcs	r4, #6
  407a5c:	9711      	str	r7, [sp, #68]	; 0x44
  407a5e:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  407a62:	9307      	str	r3, [sp, #28]
  407a64:	4b91      	ldr	r3, [pc, #580]	; (407cac <_svfprintf_r+0x1504>)
  407a66:	930f      	str	r3, [sp, #60]	; 0x3c
  407a68:	f7fe bfb1 	b.w	4069ce <_svfprintf_r+0x226>
  407a6c:	4f8e      	ldr	r7, [pc, #568]	; (407ca8 <_svfprintf_r+0x1500>)
  407a6e:	f7ff b8b5 	b.w	406bdc <_svfprintf_r+0x434>
  407a72:	232d      	movs	r3, #45	; 0x2d
  407a74:	461f      	mov	r7, r3
  407a76:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  407a7a:	f7ff ba7a 	b.w	406f72 <_svfprintf_r+0x7ca>
  407a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  407a80:	272d      	movs	r7, #45	; 0x2d
  407a82:	f8cd c01c 	str.w	ip, [sp, #28]
  407a86:	9306      	str	r3, [sp, #24]
  407a88:	2300      	movs	r3, #0
  407a8a:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  407a8e:	9310      	str	r3, [sp, #64]	; 0x40
  407a90:	f7fe bf9e 	b.w	4069d0 <_svfprintf_r+0x228>
  407a94:	2e65      	cmp	r6, #101	; 0x65
  407a96:	dd56      	ble.n	407b46 <_svfprintf_r+0x139e>
  407a98:	2e66      	cmp	r6, #102	; 0x66
  407a9a:	9311      	str	r3, [sp, #68]	; 0x44
  407a9c:	f47f aeef 	bne.w	40787e <_svfprintf_r+0x10d6>
  407aa0:	2b00      	cmp	r3, #0
  407aa2:	f340 80d6 	ble.w	407c52 <_svfprintf_r+0x14aa>
  407aa6:	f1bc 0f00 	cmp.w	ip, #0
  407aaa:	f040 80c1 	bne.w	407c30 <_svfprintf_r+0x1488>
  407aae:	9b06      	ldr	r3, [sp, #24]
  407ab0:	07da      	lsls	r2, r3, #31
  407ab2:	f100 80bd 	bmi.w	407c30 <_svfprintf_r+0x1488>
  407ab6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  407ab8:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  407abc:	e6eb      	b.n	407896 <_svfprintf_r+0x10ee>
  407abe:	2003      	movs	r0, #3
  407ac0:	a91d      	add	r1, sp, #116	; 0x74
  407ac2:	463a      	mov	r2, r7
  407ac4:	f8cd c004 	str.w	ip, [sp, #4]
  407ac8:	9000      	str	r0, [sp, #0]
  407aca:	a81e      	add	r0, sp, #120	; 0x78
  407acc:	9102      	str	r1, [sp, #8]
  407ace:	a921      	add	r1, sp, #132	; 0x84
  407ad0:	462b      	mov	r3, r5
  407ad2:	9003      	str	r0, [sp, #12]
  407ad4:	9104      	str	r1, [sp, #16]
  407ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
  407ad8:	f8cd c01c 	str.w	ip, [sp, #28]
  407adc:	f000 f99c 	bl	407e18 <_dtoa_r>
  407ae0:	f8dd c01c 	ldr.w	ip, [sp, #28]
  407ae4:	4602      	mov	r2, r0
  407ae6:	7803      	ldrb	r3, [r0, #0]
  407ae8:	4462      	add	r2, ip
  407aea:	900f      	str	r0, [sp, #60]	; 0x3c
  407aec:	2b30      	cmp	r3, #48	; 0x30
  407aee:	9207      	str	r2, [sp, #28]
  407af0:	f040 808b 	bne.w	407c0a <_svfprintf_r+0x1462>
  407af4:	4638      	mov	r0, r7
  407af6:	2200      	movs	r2, #0
  407af8:	2300      	movs	r3, #0
  407afa:	4629      	mov	r1, r5
  407afc:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
  407b00:	f04f 0401 	mov.w	r4, #1
  407b04:	f7fe f966 	bl	405dd4 <__aeabi_dcmpeq>
  407b08:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
  407b0c:	b108      	cbz	r0, 407b12 <_svfprintf_r+0x136a>
  407b0e:	f04f 0400 	mov.w	r4, #0
  407b12:	f014 0fff 	tst.w	r4, #255	; 0xff
  407b16:	d078      	beq.n	407c0a <_svfprintf_r+0x1462>
  407b18:	f1cc 0401 	rsb	r4, ip, #1
  407b1c:	941d      	str	r4, [sp, #116]	; 0x74
  407b1e:	9b07      	ldr	r3, [sp, #28]
  407b20:	4423      	add	r3, r4
  407b22:	461c      	mov	r4, r3
  407b24:	e683      	b.n	40782e <_svfprintf_r+0x1086>
  407b26:	4d62      	ldr	r5, [pc, #392]	; (407cb0 <_svfprintf_r+0x1508>)
  407b28:	f7ff bb2a 	b.w	407180 <_svfprintf_r+0x9d8>
  407b2c:	4623      	mov	r3, r4
  407b2e:	e695      	b.n	40785c <_svfprintf_r+0x10b4>
  407b30:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
  407b34:	970c      	str	r7, [sp, #48]	; 0x30
  407b36:	9010      	str	r0, [sp, #64]	; 0x40
  407b38:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  407b3c:	9307      	str	r3, [sp, #28]
  407b3e:	9011      	str	r0, [sp, #68]	; 0x44
  407b40:	f7fe bf45 	b.w	4069ce <_svfprintf_r+0x226>
  407b44:	3e02      	subs	r6, #2
  407b46:	3b01      	subs	r3, #1
  407b48:	f88d 607c 	strb.w	r6, [sp, #124]	; 0x7c
  407b4c:	2b00      	cmp	r3, #0
  407b4e:	931d      	str	r3, [sp, #116]	; 0x74
  407b50:	db75      	blt.n	407c3e <_svfprintf_r+0x1496>
  407b52:	222b      	movs	r2, #43	; 0x2b
  407b54:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  407b58:	2b09      	cmp	r3, #9
  407b5a:	dd61      	ble.n	407c20 <_svfprintf_r+0x1478>
  407b5c:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  407b60:	4601      	mov	r1, r0
  407b62:	4a54      	ldr	r2, [pc, #336]	; (407cb4 <_svfprintf_r+0x150c>)
  407b64:	fb82 2403 	smull	r2, r4, r2, r3
  407b68:	17da      	asrs	r2, r3, #31
  407b6a:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  407b6e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
  407b72:	2c09      	cmp	r4, #9
  407b74:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  407b78:	4623      	mov	r3, r4
  407b7a:	f102 0230 	add.w	r2, r2, #48	; 0x30
  407b7e:	f801 2d01 	strb.w	r2, [r1, #-1]!
  407b82:	dcee      	bgt.n	407b62 <_svfprintf_r+0x13ba>
  407b84:	3330      	adds	r3, #48	; 0x30
  407b86:	460a      	mov	r2, r1
  407b88:	b2db      	uxtb	r3, r3
  407b8a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  407b8e:	4290      	cmp	r0, r2
  407b90:	d97e      	bls.n	407c90 <_svfprintf_r+0x14e8>
  407b92:	460a      	mov	r2, r1
  407b94:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
  407b98:	e001      	b.n	407b9e <_svfprintf_r+0x13f6>
  407b9a:	f812 3b01 	ldrb.w	r3, [r2], #1
  407b9e:	4282      	cmp	r2, r0
  407ba0:	f804 3b01 	strb.w	r3, [r4], #1
  407ba4:	d1f9      	bne.n	407b9a <_svfprintf_r+0x13f2>
  407ba6:	ab23      	add	r3, sp, #140	; 0x8c
  407ba8:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  407bac:	1a5b      	subs	r3, r3, r1
  407bae:	4413      	add	r3, r2
  407bb0:	aa1f      	add	r2, sp, #124	; 0x7c
  407bb2:	1a9b      	subs	r3, r3, r2
  407bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407bb6:	2a01      	cmp	r2, #1
  407bb8:	9319      	str	r3, [sp, #100]	; 0x64
  407bba:	eb02 0403 	add.w	r4, r2, r3
  407bbe:	dd43      	ble.n	407c48 <_svfprintf_r+0x14a0>
  407bc0:	3401      	adds	r4, #1
  407bc2:	2300      	movs	r3, #0
  407bc4:	9311      	str	r3, [sp, #68]	; 0x44
  407bc6:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  407bca:	e664      	b.n	407896 <_svfprintf_r+0x10ee>
  407bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
  407bce:	4649      	mov	r1, r9
  407bd0:	aa23      	add	r2, sp, #140	; 0x8c
  407bd2:	f002 fa45 	bl	40a060 <__ssprint_r>
  407bd6:	2800      	cmp	r0, #0
  407bd8:	f47e aeab 	bne.w	406932 <_svfprintf_r+0x18a>
  407bdc:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  407bde:	46c3      	mov	fp, r8
  407be0:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407be2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  407be4:	e5a8      	b.n	407738 <_svfprintf_r+0xf90>
  407be6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  407be8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  407bea:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
  407bee:	232d      	movs	r3, #45	; 0x2d
  407bf0:	930d      	str	r3, [sp, #52]	; 0x34
  407bf2:	e69c      	b.n	40792e <_svfprintf_r+0x1186>
  407bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407bf6:	2b00      	cmp	r3, #0
  407bf8:	dd35      	ble.n	407c66 <_svfprintf_r+0x14be>
  407bfa:	2401      	movs	r4, #1
  407bfc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407bfe:	441c      	add	r4, r3
  407c00:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  407c04:	e647      	b.n	407896 <_svfprintf_r+0x10ee>
  407c06:	4d2a      	ldr	r5, [pc, #168]	; (407cb0 <_svfprintf_r+0x1508>)
  407c08:	e413      	b.n	407432 <_svfprintf_r+0xc8a>
  407c0a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
  407c0c:	e787      	b.n	407b1e <_svfprintf_r+0x1376>
  407c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
  407c10:	e624      	b.n	40785c <_svfprintf_r+0x10b4>
  407c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407c14:	1c5c      	adds	r4, r3, #1
  407c16:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  407c1a:	e63c      	b.n	407896 <_svfprintf_r+0x10ee>
  407c1c:	4d24      	ldr	r5, [pc, #144]	; (407cb0 <_svfprintf_r+0x1508>)
  407c1e:	e420      	b.n	407462 <_svfprintf_r+0xcba>
  407c20:	3330      	adds	r3, #48	; 0x30
  407c22:	2230      	movs	r2, #48	; 0x30
  407c24:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  407c28:	ab20      	add	r3, sp, #128	; 0x80
  407c2a:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  407c2e:	e7bf      	b.n	407bb0 <_svfprintf_r+0x1408>
  407c30:	f10c 0401 	add.w	r4, ip, #1
  407c34:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407c36:	441c      	add	r4, r3
  407c38:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  407c3c:	e62b      	b.n	407896 <_svfprintf_r+0x10ee>
  407c3e:	222d      	movs	r2, #45	; 0x2d
  407c40:	425b      	negs	r3, r3
  407c42:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  407c46:	e787      	b.n	407b58 <_svfprintf_r+0x13b0>
  407c48:	9b06      	ldr	r3, [sp, #24]
  407c4a:	f013 0301 	ands.w	r3, r3, #1
  407c4e:	d0b9      	beq.n	407bc4 <_svfprintf_r+0x141c>
  407c50:	e7b6      	b.n	407bc0 <_svfprintf_r+0x1418>
  407c52:	f1bc 0f00 	cmp.w	ip, #0
  407c56:	d109      	bne.n	407c6c <_svfprintf_r+0x14c4>
  407c58:	9b06      	ldr	r3, [sp, #24]
  407c5a:	07db      	lsls	r3, r3, #31
  407c5c:	d406      	bmi.n	407c6c <_svfprintf_r+0x14c4>
  407c5e:	f04f 0c01 	mov.w	ip, #1
  407c62:	4664      	mov	r4, ip
  407c64:	e617      	b.n	407896 <_svfprintf_r+0x10ee>
  407c66:	f1c3 0402 	rsb	r4, r3, #2
  407c6a:	e7c7      	b.n	407bfc <_svfprintf_r+0x1454>
  407c6c:	f10c 0402 	add.w	r4, ip, #2
  407c70:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
  407c74:	e60f      	b.n	407896 <_svfprintf_r+0x10ee>
  407c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  407c78:	785e      	ldrb	r6, [r3, #1]
  407c7a:	4628      	mov	r0, r5
  407c7c:	682c      	ldr	r4, [r5, #0]
  407c7e:	3004      	adds	r0, #4
  407c80:	2c00      	cmp	r4, #0
  407c82:	900c      	str	r0, [sp, #48]	; 0x30
  407c84:	f6be ade5 	bge.w	406852 <_svfprintf_r+0xaa>
  407c88:	f04f 34ff 	mov.w	r4, #4294967295
  407c8c:	f7fe bde1 	b.w	406852 <_svfprintf_r+0xaa>
  407c90:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  407c94:	e78c      	b.n	407bb0 <_svfprintf_r+0x1408>
  407c96:	230c      	movs	r3, #12
  407c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
  407c9a:	f04f 30ff 	mov.w	r0, #4294967295
  407c9e:	6013      	str	r3, [r2, #0]
  407ca0:	f7fe be50 	b.w	406944 <_svfprintf_r+0x19c>
  407ca4:	4664      	mov	r4, ip
  407ca6:	e663      	b.n	407970 <_svfprintf_r+0x11c8>
  407ca8:	0040ad90 	.word	0x0040ad90
  407cac:	0040add8 	.word	0x0040add8
  407cb0:	0040ad80 	.word	0x0040ad80
  407cb4:	66666667 	.word	0x66666667

00407cb8 <register_fini>:
  407cb8:	4b02      	ldr	r3, [pc, #8]	; (407cc4 <register_fini+0xc>)
  407cba:	b113      	cbz	r3, 407cc2 <register_fini+0xa>
  407cbc:	4802      	ldr	r0, [pc, #8]	; (407cc8 <register_fini+0x10>)
  407cbe:	f000 b805 	b.w	407ccc <atexit>
  407cc2:	4770      	bx	lr
  407cc4:	00000000 	.word	0x00000000
  407cc8:	00408d01 	.word	0x00408d01

00407ccc <atexit>:
  407ccc:	4601      	mov	r1, r0
  407cce:	2000      	movs	r0, #0
  407cd0:	4602      	mov	r2, r0
  407cd2:	4603      	mov	r3, r0
  407cd4:	f002 ba4c 	b.w	40a170 <__register_exitproc>

00407cd8 <quorem>:
  407cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407cdc:	6903      	ldr	r3, [r0, #16]
  407cde:	b083      	sub	sp, #12
  407ce0:	690f      	ldr	r7, [r1, #16]
  407ce2:	429f      	cmp	r7, r3
  407ce4:	f300 8093 	bgt.w	407e0e <quorem+0x136>
  407ce8:	3f01      	subs	r7, #1
  407cea:	f101 0614 	add.w	r6, r1, #20
  407cee:	f100 0a14 	add.w	sl, r0, #20
  407cf2:	00bb      	lsls	r3, r7, #2
  407cf4:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
  407cf8:	461d      	mov	r5, r3
  407cfa:	9300      	str	r3, [sp, #0]
  407cfc:	3201      	adds	r2, #1
  407cfe:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  407d02:	eb0a 0405 	add.w	r4, sl, r5
  407d06:	eb06 0905 	add.w	r9, r6, r5
  407d0a:	fbb3 f8f2 	udiv	r8, r3, r2
  407d0e:	9401      	str	r4, [sp, #4]
  407d10:	f1b8 0f00 	cmp.w	r8, #0
  407d14:	d040      	beq.n	407d98 <quorem+0xc0>
  407d16:	2500      	movs	r5, #0
  407d18:	46b4      	mov	ip, r6
  407d1a:	46d6      	mov	lr, sl
  407d1c:	462b      	mov	r3, r5
  407d1e:	f85c bb04 	ldr.w	fp, [ip], #4
  407d22:	f8de 2000 	ldr.w	r2, [lr]
  407d26:	fa1f f48b 	uxth.w	r4, fp
  407d2a:	45e1      	cmp	r9, ip
  407d2c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
  407d30:	fb04 5508 	mla	r5, r4, r8, r5
  407d34:	fb0b fb08 	mul.w	fp, fp, r8
  407d38:	b2ac      	uxth	r4, r5
  407d3a:	eb0b 4515 	add.w	r5, fp, r5, lsr #16
  407d3e:	eba3 0304 	sub.w	r3, r3, r4
  407d42:	fa1f fb85 	uxth.w	fp, r5
  407d46:	fa13 f482 	uxtah	r4, r3, r2
  407d4a:	ea4f 4515 	mov.w	r5, r5, lsr #16
  407d4e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
  407d52:	fa1f fb84 	uxth.w	fp, r4
  407d56:	eb02 4324 	add.w	r3, r2, r4, asr #16
  407d5a:	ea4b 4203 	orr.w	r2, fp, r3, lsl #16
  407d5e:	ea4f 4323 	mov.w	r3, r3, asr #16
  407d62:	f84e 2b04 	str.w	r2, [lr], #4
  407d66:	d2da      	bcs.n	407d1e <quorem+0x46>
  407d68:	9b00      	ldr	r3, [sp, #0]
  407d6a:	f85a 3003 	ldr.w	r3, [sl, r3]
  407d6e:	b99b      	cbnz	r3, 407d98 <quorem+0xc0>
  407d70:	9c01      	ldr	r4, [sp, #4]
  407d72:	1f23      	subs	r3, r4, #4
  407d74:	459a      	cmp	sl, r3
  407d76:	d20e      	bcs.n	407d96 <quorem+0xbe>
  407d78:	f854 3c04 	ldr.w	r3, [r4, #-4]
  407d7c:	b95b      	cbnz	r3, 407d96 <quorem+0xbe>
  407d7e:	f1a4 0308 	sub.w	r3, r4, #8
  407d82:	e001      	b.n	407d88 <quorem+0xb0>
  407d84:	6812      	ldr	r2, [r2, #0]
  407d86:	b932      	cbnz	r2, 407d96 <quorem+0xbe>
  407d88:	459a      	cmp	sl, r3
  407d8a:	461a      	mov	r2, r3
  407d8c:	f107 37ff 	add.w	r7, r7, #4294967295
  407d90:	f1a3 0304 	sub.w	r3, r3, #4
  407d94:	d3f6      	bcc.n	407d84 <quorem+0xac>
  407d96:	6107      	str	r7, [r0, #16]
  407d98:	4604      	mov	r4, r0
  407d9a:	f001 fe69 	bl	409a70 <__mcmp>
  407d9e:	2800      	cmp	r0, #0
  407da0:	db31      	blt.n	407e06 <quorem+0x12e>
  407da2:	f108 0801 	add.w	r8, r8, #1
  407da6:	4655      	mov	r5, sl
  407da8:	2000      	movs	r0, #0
  407daa:	f856 1b04 	ldr.w	r1, [r6], #4
  407dae:	682a      	ldr	r2, [r5, #0]
  407db0:	b28b      	uxth	r3, r1
  407db2:	45b1      	cmp	r9, r6
  407db4:	ea4f 4111 	mov.w	r1, r1, lsr #16
  407db8:	eba0 0303 	sub.w	r3, r0, r3
  407dbc:	ebc1 4112 	rsb	r1, r1, r2, lsr #16
  407dc0:	fa13 f382 	uxtah	r3, r3, r2
  407dc4:	eb01 4223 	add.w	r2, r1, r3, asr #16
  407dc8:	b29b      	uxth	r3, r3
  407dca:	ea4f 4022 	mov.w	r0, r2, asr #16
  407dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  407dd2:	f845 3b04 	str.w	r3, [r5], #4
  407dd6:	d2e8      	bcs.n	407daa <quorem+0xd2>
  407dd8:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
  407ddc:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
  407de0:	b98a      	cbnz	r2, 407e06 <quorem+0x12e>
  407de2:	1f1a      	subs	r2, r3, #4
  407de4:	4592      	cmp	sl, r2
  407de6:	d20d      	bcs.n	407e04 <quorem+0x12c>
  407de8:	f853 2c04 	ldr.w	r2, [r3, #-4]
  407dec:	b952      	cbnz	r2, 407e04 <quorem+0x12c>
  407dee:	3b08      	subs	r3, #8
  407df0:	e001      	b.n	407df6 <quorem+0x11e>
  407df2:	6812      	ldr	r2, [r2, #0]
  407df4:	b932      	cbnz	r2, 407e04 <quorem+0x12c>
  407df6:	459a      	cmp	sl, r3
  407df8:	461a      	mov	r2, r3
  407dfa:	f107 37ff 	add.w	r7, r7, #4294967295
  407dfe:	f1a3 0304 	sub.w	r3, r3, #4
  407e02:	d3f6      	bcc.n	407df2 <quorem+0x11a>
  407e04:	6127      	str	r7, [r4, #16]
  407e06:	4640      	mov	r0, r8
  407e08:	b003      	add	sp, #12
  407e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e0e:	2000      	movs	r0, #0
  407e10:	b003      	add	sp, #12
  407e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e16:	bf00      	nop

00407e18 <_dtoa_r>:
  407e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407e1c:	469b      	mov	fp, r3
  407e1e:	b099      	sub	sp, #100	; 0x64
  407e20:	6c03      	ldr	r3, [r0, #64]	; 0x40
  407e22:	4604      	mov	r4, r0
  407e24:	4692      	mov	sl, r2
  407e26:	9d25      	ldr	r5, [sp, #148]	; 0x94
  407e28:	b14b      	cbz	r3, 407e3e <_dtoa_r+0x26>
  407e2a:	6c46      	ldr	r6, [r0, #68]	; 0x44
  407e2c:	2201      	movs	r2, #1
  407e2e:	4619      	mov	r1, r3
  407e30:	40b2      	lsls	r2, r6
  407e32:	605e      	str	r6, [r3, #4]
  407e34:	609a      	str	r2, [r3, #8]
  407e36:	f001 fc25 	bl	409684 <_Bfree>
  407e3a:	2300      	movs	r3, #0
  407e3c:	6423      	str	r3, [r4, #64]	; 0x40
  407e3e:	f1bb 0f00 	cmp.w	fp, #0
  407e42:	46d9      	mov	r9, fp
  407e44:	db33      	blt.n	407eae <_dtoa_r+0x96>
  407e46:	2300      	movs	r3, #0
  407e48:	602b      	str	r3, [r5, #0]
  407e4a:	4b99      	ldr	r3, [pc, #612]	; (4080b0 <_dtoa_r+0x298>)
  407e4c:	461a      	mov	r2, r3
  407e4e:	ea09 0303 	and.w	r3, r9, r3
  407e52:	4293      	cmp	r3, r2
  407e54:	d014      	beq.n	407e80 <_dtoa_r+0x68>
  407e56:	2200      	movs	r2, #0
  407e58:	2300      	movs	r3, #0
  407e5a:	4650      	mov	r0, sl
  407e5c:	4659      	mov	r1, fp
  407e5e:	f7fd ffb9 	bl	405dd4 <__aeabi_dcmpeq>
  407e62:	4680      	mov	r8, r0
  407e64:	b348      	cbz	r0, 407eba <_dtoa_r+0xa2>
  407e66:	2301      	movs	r3, #1
  407e68:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407e6a:	6013      	str	r3, [r2, #0]
  407e6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407e6e:	2b00      	cmp	r3, #0
  407e70:	f000 80cb 	beq.w	40800a <_dtoa_r+0x1f2>
  407e74:	488f      	ldr	r0, [pc, #572]	; (4080b4 <_dtoa_r+0x29c>)
  407e76:	6018      	str	r0, [r3, #0]
  407e78:	3801      	subs	r0, #1
  407e7a:	b019      	add	sp, #100	; 0x64
  407e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407e80:	f242 730f 	movw	r3, #9999	; 0x270f
  407e84:	9a24      	ldr	r2, [sp, #144]	; 0x90
  407e86:	6013      	str	r3, [r2, #0]
  407e88:	f1ba 0f00 	cmp.w	sl, #0
  407e8c:	f000 80a6 	beq.w	407fdc <_dtoa_r+0x1c4>
  407e90:	4889      	ldr	r0, [pc, #548]	; (4080b8 <_dtoa_r+0x2a0>)
  407e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
  407e94:	2b00      	cmp	r3, #0
  407e96:	d0f0      	beq.n	407e7a <_dtoa_r+0x62>
  407e98:	78c3      	ldrb	r3, [r0, #3]
  407e9a:	2b00      	cmp	r3, #0
  407e9c:	f000 80b7 	beq.w	40800e <_dtoa_r+0x1f6>
  407ea0:	f100 0308 	add.w	r3, r0, #8
  407ea4:	9a26      	ldr	r2, [sp, #152]	; 0x98
  407ea6:	6013      	str	r3, [r2, #0]
  407ea8:	b019      	add	sp, #100	; 0x64
  407eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407eae:	2301      	movs	r3, #1
  407eb0:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
  407eb4:	602b      	str	r3, [r5, #0]
  407eb6:	46cb      	mov	fp, r9
  407eb8:	e7c7      	b.n	407e4a <_dtoa_r+0x32>
  407eba:	ad17      	add	r5, sp, #92	; 0x5c
  407ebc:	a916      	add	r1, sp, #88	; 0x58
  407ebe:	4620      	mov	r0, r4
  407ec0:	4652      	mov	r2, sl
  407ec2:	9500      	str	r5, [sp, #0]
  407ec4:	465b      	mov	r3, fp
  407ec6:	9101      	str	r1, [sp, #4]
  407ec8:	f001 fe68 	bl	409b9c <__d2b>
  407ecc:	9006      	str	r0, [sp, #24]
  407ece:	ea5f 5519 	movs.w	r5, r9, lsr #20
  407ed2:	f040 808c 	bne.w	407fee <_dtoa_r+0x1d6>
  407ed6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  407eda:	f46f 6382 	mvn.w	r3, #1040	; 0x410
  407ede:	9d17      	ldr	r5, [sp, #92]	; 0x5c
  407ee0:	4445      	add	r5, r8
  407ee2:	429d      	cmp	r5, r3
  407ee4:	f2c0 81cc 	blt.w	408280 <_dtoa_r+0x468>
  407ee8:	331f      	adds	r3, #31
  407eea:	f205 4212 	addw	r2, r5, #1042	; 0x412
  407eee:	1b5b      	subs	r3, r3, r5
  407ef0:	fa2a f002 	lsr.w	r0, sl, r2
  407ef4:	fa09 f903 	lsl.w	r9, r9, r3
  407ef8:	ea49 0000 	orr.w	r0, r9, r0
  407efc:	f7fd fc8c 	bl	405818 <__aeabi_ui2d>
  407f00:	3d01      	subs	r5, #1
  407f02:	2301      	movs	r3, #1
  407f04:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  407f08:	9311      	str	r3, [sp, #68]	; 0x44
  407f0a:	2200      	movs	r2, #0
  407f0c:	4b6b      	ldr	r3, [pc, #428]	; (4080bc <_dtoa_r+0x2a4>)
  407f0e:	f7fd fb45 	bl	40559c <__aeabi_dsub>
  407f12:	a361      	add	r3, pc, #388	; (adr r3, 408098 <_dtoa_r+0x280>)
  407f14:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f18:	f7fd fcf4 	bl	405904 <__aeabi_dmul>
  407f1c:	a360      	add	r3, pc, #384	; (adr r3, 4080a0 <_dtoa_r+0x288>)
  407f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f22:	f7fd fb3d 	bl	4055a0 <__adddf3>
  407f26:	4606      	mov	r6, r0
  407f28:	460f      	mov	r7, r1
  407f2a:	4628      	mov	r0, r5
  407f2c:	f7fd fc84 	bl	405838 <__aeabi_i2d>
  407f30:	a35d      	add	r3, pc, #372	; (adr r3, 4080a8 <_dtoa_r+0x290>)
  407f32:	e9d3 2300 	ldrd	r2, r3, [r3]
  407f36:	f7fd fce5 	bl	405904 <__aeabi_dmul>
  407f3a:	4602      	mov	r2, r0
  407f3c:	460b      	mov	r3, r1
  407f3e:	4630      	mov	r0, r6
  407f40:	4639      	mov	r1, r7
  407f42:	f7fd fb2d 	bl	4055a0 <__adddf3>
  407f46:	4606      	mov	r6, r0
  407f48:	460f      	mov	r7, r1
  407f4a:	f7fd ff75 	bl	405e38 <__aeabi_d2iz>
  407f4e:	2200      	movs	r2, #0
  407f50:	9002      	str	r0, [sp, #8]
  407f52:	4639      	mov	r1, r7
  407f54:	4630      	mov	r0, r6
  407f56:	2300      	movs	r3, #0
  407f58:	f7fd ff46 	bl	405de8 <__aeabi_dcmplt>
  407f5c:	2800      	cmp	r0, #0
  407f5e:	f040 8171 	bne.w	408244 <_dtoa_r+0x42c>
  407f62:	9b02      	ldr	r3, [sp, #8]
  407f64:	2b16      	cmp	r3, #22
  407f66:	f200 8091 	bhi.w	40808c <_dtoa_r+0x274>
  407f6a:	9802      	ldr	r0, [sp, #8]
  407f6c:	4652      	mov	r2, sl
  407f6e:	4954      	ldr	r1, [pc, #336]	; (4080c0 <_dtoa_r+0x2a8>)
  407f70:	465b      	mov	r3, fp
  407f72:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  407f76:	e9d1 0100 	ldrd	r0, r1, [r1]
  407f7a:	f7fd ff53 	bl	405e24 <__aeabi_dcmpgt>
  407f7e:	2800      	cmp	r0, #0
  407f80:	f000 817c 	beq.w	40827c <_dtoa_r+0x464>
  407f84:	9b02      	ldr	r3, [sp, #8]
  407f86:	3b01      	subs	r3, #1
  407f88:	9302      	str	r3, [sp, #8]
  407f8a:	2300      	movs	r3, #0
  407f8c:	930d      	str	r3, [sp, #52]	; 0x34
  407f8e:	ebc5 0508 	rsb	r5, r5, r8
  407f92:	1e6b      	subs	r3, r5, #1
  407f94:	9303      	str	r3, [sp, #12]
  407f96:	f100 816c 	bmi.w	408272 <_dtoa_r+0x45a>
  407f9a:	2300      	movs	r3, #0
  407f9c:	9307      	str	r3, [sp, #28]
  407f9e:	9b02      	ldr	r3, [sp, #8]
  407fa0:	2b00      	cmp	r3, #0
  407fa2:	f2c0 815d 	blt.w	408260 <_dtoa_r+0x448>
  407fa6:	9a03      	ldr	r2, [sp, #12]
  407fa8:	930c      	str	r3, [sp, #48]	; 0x30
  407faa:	4611      	mov	r1, r2
  407fac:	4419      	add	r1, r3
  407fae:	2300      	movs	r3, #0
  407fb0:	9103      	str	r1, [sp, #12]
  407fb2:	930a      	str	r3, [sp, #40]	; 0x28
  407fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
  407fb6:	2b09      	cmp	r3, #9
  407fb8:	d82b      	bhi.n	408012 <_dtoa_r+0x1fa>
  407fba:	2b05      	cmp	r3, #5
  407fbc:	f340 867e 	ble.w	408cbc <_dtoa_r+0xea4>
  407fc0:	3b04      	subs	r3, #4
  407fc2:	2500      	movs	r5, #0
  407fc4:	9322      	str	r3, [sp, #136]	; 0x88
  407fc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
  407fc8:	3b02      	subs	r3, #2
  407fca:	2b03      	cmp	r3, #3
  407fcc:	f200 8679 	bhi.w	408cc2 <_dtoa_r+0xeaa>
  407fd0:	e8df f013 	tbh	[pc, r3, lsl #1]
  407fd4:	0289029b 	.word	0x0289029b
  407fd8:	068d0180 	.word	0x068d0180
  407fdc:	f3c9 0013 	ubfx	r0, r9, #0, #20
  407fe0:	4b35      	ldr	r3, [pc, #212]	; (4080b8 <_dtoa_r+0x2a0>)
  407fe2:	4a38      	ldr	r2, [pc, #224]	; (4080c4 <_dtoa_r+0x2ac>)
  407fe4:	2800      	cmp	r0, #0
  407fe6:	bf14      	ite	ne
  407fe8:	4618      	movne	r0, r3
  407fea:	4610      	moveq	r0, r2
  407fec:	e751      	b.n	407e92 <_dtoa_r+0x7a>
  407fee:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407ff2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  407ff6:	4650      	mov	r0, sl
  407ff8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
  407ffc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  408000:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
  408004:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  408008:	e77f      	b.n	407f0a <_dtoa_r+0xf2>
  40800a:	482f      	ldr	r0, [pc, #188]	; (4080c8 <_dtoa_r+0x2b0>)
  40800c:	e735      	b.n	407e7a <_dtoa_r+0x62>
  40800e:	1cc3      	adds	r3, r0, #3
  408010:	e748      	b.n	407ea4 <_dtoa_r+0x8c>
  408012:	f04f 33ff 	mov.w	r3, #4294967295
  408016:	2100      	movs	r1, #0
  408018:	4620      	mov	r0, r4
  40801a:	461d      	mov	r5, r3
  40801c:	9310      	str	r3, [sp, #64]	; 0x40
  40801e:	2301      	movs	r3, #1
  408020:	6461      	str	r1, [r4, #68]	; 0x44
  408022:	9123      	str	r1, [sp, #140]	; 0x8c
  408024:	930b      	str	r3, [sp, #44]	; 0x2c
  408026:	f001 fb05 	bl	409634 <_Balloc>
  40802a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40802c:	9005      	str	r0, [sp, #20]
  40802e:	9322      	str	r3, [sp, #136]	; 0x88
  408030:	9504      	str	r5, [sp, #16]
  408032:	6420      	str	r0, [r4, #64]	; 0x40
  408034:	9a02      	ldr	r2, [sp, #8]
  408036:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408038:	2a0e      	cmp	r2, #14
  40803a:	dc49      	bgt.n	4080d0 <_dtoa_r+0x2b8>
  40803c:	2b00      	cmp	r3, #0
  40803e:	db47      	blt.n	4080d0 <_dtoa_r+0x2b8>
  408040:	4b1f      	ldr	r3, [pc, #124]	; (4080c0 <_dtoa_r+0x2a8>)
  408042:	9a02      	ldr	r2, [sp, #8]
  408044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  408048:	e9d3 8900 	ldrd	r8, r9, [r3]
  40804c:	9b04      	ldr	r3, [sp, #16]
  40804e:	2b00      	cmp	r3, #0
  408050:	f300 825e 	bgt.w	408510 <_dtoa_r+0x6f8>
  408054:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408056:	2b00      	cmp	r3, #0
  408058:	f280 825a 	bge.w	408510 <_dtoa_r+0x6f8>
  40805c:	9b04      	ldr	r3, [sp, #16]
  40805e:	2b00      	cmp	r3, #0
  408060:	f040 85bf 	bne.w	408be2 <_dtoa_r+0xdca>
  408064:	2200      	movs	r2, #0
  408066:	4b19      	ldr	r3, [pc, #100]	; (4080cc <_dtoa_r+0x2b4>)
  408068:	4640      	mov	r0, r8
  40806a:	4649      	mov	r1, r9
  40806c:	f7fd fc4a 	bl	405904 <__aeabi_dmul>
  408070:	4652      	mov	r2, sl
  408072:	465b      	mov	r3, fp
  408074:	f7fd fecc 	bl	405e10 <__aeabi_dcmpge>
  408078:	9f04      	ldr	r7, [sp, #16]
  40807a:	9708      	str	r7, [sp, #32]
  40807c:	2800      	cmp	r0, #0
  40807e:	f000 80bd 	beq.w	4081fc <_dtoa_r+0x3e4>
  408082:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  408084:	9d05      	ldr	r5, [sp, #20]
  408086:	43db      	mvns	r3, r3
  408088:	9302      	str	r3, [sp, #8]
  40808a:	e0be      	b.n	40820a <_dtoa_r+0x3f2>
  40808c:	2301      	movs	r3, #1
  40808e:	930d      	str	r3, [sp, #52]	; 0x34
  408090:	e77d      	b.n	407f8e <_dtoa_r+0x176>
  408092:	bf00      	nop
  408094:	f3af 8000 	nop.w
  408098:	636f4361 	.word	0x636f4361
  40809c:	3fd287a7 	.word	0x3fd287a7
  4080a0:	8b60c8b3 	.word	0x8b60c8b3
  4080a4:	3fc68a28 	.word	0x3fc68a28
  4080a8:	509f79fb 	.word	0x509f79fb
  4080ac:	3fd34413 	.word	0x3fd34413
  4080b0:	7ff00000 	.word	0x7ff00000
  4080b4:	0040ade1 	.word	0x0040ade1
  4080b8:	0040adf0 	.word	0x0040adf0
  4080bc:	3ff80000 	.word	0x3ff80000
  4080c0:	0040ae00 	.word	0x0040ae00
  4080c4:	0040ade4 	.word	0x0040ade4
  4080c8:	0040ade0 	.word	0x0040ade0
  4080cc:	40140000 	.word	0x40140000
  4080d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4080d2:	2a00      	cmp	r2, #0
  4080d4:	f040 80e1 	bne.w	40829a <_dtoa_r+0x482>
  4080d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4080da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  4080dc:	9d07      	ldr	r5, [sp, #28]
  4080de:	9308      	str	r3, [sp, #32]
  4080e0:	9903      	ldr	r1, [sp, #12]
  4080e2:	2900      	cmp	r1, #0
  4080e4:	460b      	mov	r3, r1
  4080e6:	dd0a      	ble.n	4080fe <_dtoa_r+0x2e6>
  4080e8:	2d00      	cmp	r5, #0
  4080ea:	dd08      	ble.n	4080fe <_dtoa_r+0x2e6>
  4080ec:	42a9      	cmp	r1, r5
  4080ee:	9a07      	ldr	r2, [sp, #28]
  4080f0:	bfa8      	it	ge
  4080f2:	462b      	movge	r3, r5
  4080f4:	1ad2      	subs	r2, r2, r3
  4080f6:	1aed      	subs	r5, r5, r3
  4080f8:	1acb      	subs	r3, r1, r3
  4080fa:	9207      	str	r2, [sp, #28]
  4080fc:	9303      	str	r3, [sp, #12]
  4080fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408100:	2b00      	cmp	r3, #0
  408102:	dd1b      	ble.n	40813c <_dtoa_r+0x324>
  408104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408106:	2b00      	cmp	r3, #0
  408108:	f000 84ce 	beq.w	408aa8 <_dtoa_r+0xc90>
  40810c:	2e00      	cmp	r6, #0
  40810e:	dd11      	ble.n	408134 <_dtoa_r+0x31c>
  408110:	9908      	ldr	r1, [sp, #32]
  408112:	4632      	mov	r2, r6
  408114:	4620      	mov	r0, r4
  408116:	f001 fc01 	bl	40991c <__pow5mult>
  40811a:	9f06      	ldr	r7, [sp, #24]
  40811c:	4601      	mov	r1, r0
  40811e:	9008      	str	r0, [sp, #32]
  408120:	463a      	mov	r2, r7
  408122:	4620      	mov	r0, r4
  408124:	f001 fb58 	bl	4097d8 <__multiply>
  408128:	4603      	mov	r3, r0
  40812a:	4639      	mov	r1, r7
  40812c:	4620      	mov	r0, r4
  40812e:	9306      	str	r3, [sp, #24]
  408130:	f001 faa8 	bl	409684 <_Bfree>
  408134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408136:	1b9a      	subs	r2, r3, r6
  408138:	f040 84ff 	bne.w	408b3a <_dtoa_r+0xd22>
  40813c:	4620      	mov	r0, r4
  40813e:	2101      	movs	r1, #1
  408140:	f001 fb40 	bl	4097c4 <__i2b>
  408144:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408146:	4607      	mov	r7, r0
  408148:	2b00      	cmp	r3, #0
  40814a:	f340 8282 	ble.w	408652 <_dtoa_r+0x83a>
  40814e:	4601      	mov	r1, r0
  408150:	461a      	mov	r2, r3
  408152:	4620      	mov	r0, r4
  408154:	f001 fbe2 	bl	40991c <__pow5mult>
  408158:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40815a:	4607      	mov	r7, r0
  40815c:	2b01      	cmp	r3, #1
  40815e:	f340 84f3 	ble.w	408b48 <_dtoa_r+0xd30>
  408162:	f04f 0800 	mov.w	r8, #0
  408166:	693b      	ldr	r3, [r7, #16]
  408168:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  40816c:	6918      	ldr	r0, [r3, #16]
  40816e:	f001 fad5 	bl	40971c <__hi0bits>
  408172:	f1c0 0020 	rsb	r0, r0, #32
  408176:	9b03      	ldr	r3, [sp, #12]
  408178:	4418      	add	r0, r3
  40817a:	f010 001f 	ands.w	r0, r0, #31
  40817e:	f000 82a0 	beq.w	4086c2 <_dtoa_r+0x8aa>
  408182:	f1c0 0320 	rsb	r3, r0, #32
  408186:	2b04      	cmp	r3, #4
  408188:	f340 8592 	ble.w	408cb0 <_dtoa_r+0xe98>
  40818c:	f1c0 001c 	rsb	r0, r0, #28
  408190:	9b07      	ldr	r3, [sp, #28]
  408192:	4405      	add	r5, r0
  408194:	4403      	add	r3, r0
  408196:	9307      	str	r3, [sp, #28]
  408198:	9b03      	ldr	r3, [sp, #12]
  40819a:	4403      	add	r3, r0
  40819c:	9303      	str	r3, [sp, #12]
  40819e:	9b07      	ldr	r3, [sp, #28]
  4081a0:	2b00      	cmp	r3, #0
  4081a2:	dd05      	ble.n	4081b0 <_dtoa_r+0x398>
  4081a4:	9906      	ldr	r1, [sp, #24]
  4081a6:	461a      	mov	r2, r3
  4081a8:	4620      	mov	r0, r4
  4081aa:	f001 fc07 	bl	4099bc <__lshift>
  4081ae:	9006      	str	r0, [sp, #24]
  4081b0:	9b03      	ldr	r3, [sp, #12]
  4081b2:	2b00      	cmp	r3, #0
  4081b4:	dd05      	ble.n	4081c2 <_dtoa_r+0x3aa>
  4081b6:	4639      	mov	r1, r7
  4081b8:	461a      	mov	r2, r3
  4081ba:	4620      	mov	r0, r4
  4081bc:	f001 fbfe 	bl	4099bc <__lshift>
  4081c0:	4607      	mov	r7, r0
  4081c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4081c4:	2b00      	cmp	r3, #0
  4081c6:	f040 838b 	bne.w	4088e0 <_dtoa_r+0xac8>
  4081ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
  4081cc:	2b02      	cmp	r3, #2
  4081ce:	f340 827a 	ble.w	4086c6 <_dtoa_r+0x8ae>
  4081d2:	9b04      	ldr	r3, [sp, #16]
  4081d4:	2b00      	cmp	r3, #0
  4081d6:	f300 8276 	bgt.w	4086c6 <_dtoa_r+0x8ae>
  4081da:	9b04      	ldr	r3, [sp, #16]
  4081dc:	2b00      	cmp	r3, #0
  4081de:	f47f af50 	bne.w	408082 <_dtoa_r+0x26a>
  4081e2:	4639      	mov	r1, r7
  4081e4:	2205      	movs	r2, #5
  4081e6:	4620      	mov	r0, r4
  4081e8:	f001 fa56 	bl	409698 <__multadd>
  4081ec:	4607      	mov	r7, r0
  4081ee:	9806      	ldr	r0, [sp, #24]
  4081f0:	4639      	mov	r1, r7
  4081f2:	f001 fc3d 	bl	409a70 <__mcmp>
  4081f6:	2800      	cmp	r0, #0
  4081f8:	f77f af43 	ble.w	408082 <_dtoa_r+0x26a>
  4081fc:	9a02      	ldr	r2, [sp, #8]
  4081fe:	2331      	movs	r3, #49	; 0x31
  408200:	3201      	adds	r2, #1
  408202:	9202      	str	r2, [sp, #8]
  408204:	9a05      	ldr	r2, [sp, #20]
  408206:	1c55      	adds	r5, r2, #1
  408208:	7013      	strb	r3, [r2, #0]
  40820a:	4639      	mov	r1, r7
  40820c:	4620      	mov	r0, r4
  40820e:	f001 fa39 	bl	409684 <_Bfree>
  408212:	9b08      	ldr	r3, [sp, #32]
  408214:	b11b      	cbz	r3, 40821e <_dtoa_r+0x406>
  408216:	9908      	ldr	r1, [sp, #32]
  408218:	4620      	mov	r0, r4
  40821a:	f001 fa33 	bl	409684 <_Bfree>
  40821e:	4620      	mov	r0, r4
  408220:	9906      	ldr	r1, [sp, #24]
  408222:	f001 fa2f 	bl	409684 <_Bfree>
  408226:	2200      	movs	r2, #0
  408228:	9b02      	ldr	r3, [sp, #8]
  40822a:	702a      	strb	r2, [r5, #0]
  40822c:	3301      	adds	r3, #1
  40822e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  408230:	6013      	str	r3, [r2, #0]
  408232:	9b26      	ldr	r3, [sp, #152]	; 0x98
  408234:	2b00      	cmp	r3, #0
  408236:	f000 82a3 	beq.w	408780 <_dtoa_r+0x968>
  40823a:	9805      	ldr	r0, [sp, #20]
  40823c:	601d      	str	r5, [r3, #0]
  40823e:	b019      	add	sp, #100	; 0x64
  408240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408244:	9802      	ldr	r0, [sp, #8]
  408246:	f7fd faf7 	bl	405838 <__aeabi_i2d>
  40824a:	4632      	mov	r2, r6
  40824c:	463b      	mov	r3, r7
  40824e:	f7fd fdc1 	bl	405dd4 <__aeabi_dcmpeq>
  408252:	2800      	cmp	r0, #0
  408254:	f47f ae85 	bne.w	407f62 <_dtoa_r+0x14a>
  408258:	9b02      	ldr	r3, [sp, #8]
  40825a:	3b01      	subs	r3, #1
  40825c:	9302      	str	r3, [sp, #8]
  40825e:	e680      	b.n	407f62 <_dtoa_r+0x14a>
  408260:	9a07      	ldr	r2, [sp, #28]
  408262:	9b02      	ldr	r3, [sp, #8]
  408264:	1ad2      	subs	r2, r2, r3
  408266:	425b      	negs	r3, r3
  408268:	930a      	str	r3, [sp, #40]	; 0x28
  40826a:	2300      	movs	r3, #0
  40826c:	9207      	str	r2, [sp, #28]
  40826e:	930c      	str	r3, [sp, #48]	; 0x30
  408270:	e6a0      	b.n	407fb4 <_dtoa_r+0x19c>
  408272:	425b      	negs	r3, r3
  408274:	9307      	str	r3, [sp, #28]
  408276:	2300      	movs	r3, #0
  408278:	9303      	str	r3, [sp, #12]
  40827a:	e690      	b.n	407f9e <_dtoa_r+0x186>
  40827c:	900d      	str	r0, [sp, #52]	; 0x34
  40827e:	e686      	b.n	407f8e <_dtoa_r+0x176>
  408280:	4bbd      	ldr	r3, [pc, #756]	; (408578 <_dtoa_r+0x760>)
  408282:	1b5b      	subs	r3, r3, r5
  408284:	fa0a f003 	lsl.w	r0, sl, r3
  408288:	e638      	b.n	407efc <_dtoa_r+0xe4>
  40828a:	2100      	movs	r1, #0
  40828c:	f04f 32ff 	mov.w	r2, #4294967295
  408290:	9123      	str	r1, [sp, #140]	; 0x8c
  408292:	2101      	movs	r1, #1
  408294:	9204      	str	r2, [sp, #16]
  408296:	910b      	str	r1, [sp, #44]	; 0x2c
  408298:	9210      	str	r2, [sp, #64]	; 0x40
  40829a:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40829c:	2a01      	cmp	r2, #1
  40829e:	f340 8460 	ble.w	408b62 <_dtoa_r+0xd4a>
  4082a2:	9b04      	ldr	r3, [sp, #16]
  4082a4:	1e5e      	subs	r6, r3, #1
  4082a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4082a8:	42b3      	cmp	r3, r6
  4082aa:	f2c0 8405 	blt.w	408ab8 <_dtoa_r+0xca0>
  4082ae:	1b9e      	subs	r6, r3, r6
  4082b0:	9b04      	ldr	r3, [sp, #16]
  4082b2:	2b00      	cmp	r3, #0
  4082b4:	f2c0 8461 	blt.w	408b7a <_dtoa_r+0xd62>
  4082b8:	9d07      	ldr	r5, [sp, #28]
  4082ba:	9b04      	ldr	r3, [sp, #16]
  4082bc:	9a07      	ldr	r2, [sp, #28]
  4082be:	4620      	mov	r0, r4
  4082c0:	2101      	movs	r1, #1
  4082c2:	441a      	add	r2, r3
  4082c4:	9207      	str	r2, [sp, #28]
  4082c6:	9a03      	ldr	r2, [sp, #12]
  4082c8:	441a      	add	r2, r3
  4082ca:	9203      	str	r2, [sp, #12]
  4082cc:	f001 fa7a 	bl	4097c4 <__i2b>
  4082d0:	9008      	str	r0, [sp, #32]
  4082d2:	e705      	b.n	4080e0 <_dtoa_r+0x2c8>
  4082d4:	2301      	movs	r3, #1
  4082d6:	930b      	str	r3, [sp, #44]	; 0x2c
  4082d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4082da:	2b00      	cmp	r3, #0
  4082dc:	f340 83df 	ble.w	408a9e <_dtoa_r+0xc86>
  4082e0:	2b0e      	cmp	r3, #14
  4082e2:	bf8c      	ite	hi
  4082e4:	2500      	movhi	r5, #0
  4082e6:	f005 0501 	andls.w	r5, r5, #1
  4082ea:	461e      	mov	r6, r3
  4082ec:	9310      	str	r3, [sp, #64]	; 0x40
  4082ee:	9304      	str	r3, [sp, #16]
  4082f0:	2100      	movs	r1, #0
  4082f2:	2e17      	cmp	r6, #23
  4082f4:	6461      	str	r1, [r4, #68]	; 0x44
  4082f6:	d909      	bls.n	40830c <_dtoa_r+0x4f4>
  4082f8:	2201      	movs	r2, #1
  4082fa:	2304      	movs	r3, #4
  4082fc:	005b      	lsls	r3, r3, #1
  4082fe:	4611      	mov	r1, r2
  408300:	3201      	adds	r2, #1
  408302:	f103 0014 	add.w	r0, r3, #20
  408306:	42b0      	cmp	r0, r6
  408308:	d9f8      	bls.n	4082fc <_dtoa_r+0x4e4>
  40830a:	6461      	str	r1, [r4, #68]	; 0x44
  40830c:	4620      	mov	r0, r4
  40830e:	f001 f991 	bl	409634 <_Balloc>
  408312:	9005      	str	r0, [sp, #20]
  408314:	6420      	str	r0, [r4, #64]	; 0x40
  408316:	2d00      	cmp	r5, #0
  408318:	f43f ae8c 	beq.w	408034 <_dtoa_r+0x21c>
  40831c:	9802      	ldr	r0, [sp, #8]
  40831e:	2800      	cmp	r0, #0
  408320:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
  408324:	f340 8233 	ble.w	40878e <_dtoa_r+0x976>
  408328:	4a94      	ldr	r2, [pc, #592]	; (40857c <_dtoa_r+0x764>)
  40832a:	f000 030f 	and.w	r3, r0, #15
  40832e:	1105      	asrs	r5, r0, #4
  408330:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  408334:	06ea      	lsls	r2, r5, #27
  408336:	e9d3 6700 	ldrd	r6, r7, [r3]
  40833a:	f140 821c 	bpl.w	408776 <_dtoa_r+0x95e>
  40833e:	4b90      	ldr	r3, [pc, #576]	; (408580 <_dtoa_r+0x768>)
  408340:	4650      	mov	r0, sl
  408342:	4659      	mov	r1, fp
  408344:	f005 050f 	and.w	r5, r5, #15
  408348:	f04f 0803 	mov.w	r8, #3
  40834c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  408350:	f7fd fc02 	bl	405b58 <__aeabi_ddiv>
  408354:	4682      	mov	sl, r0
  408356:	468b      	mov	fp, r1
  408358:	b18d      	cbz	r5, 40837e <_dtoa_r+0x566>
  40835a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 408580 <_dtoa_r+0x768>
  40835e:	07eb      	lsls	r3, r5, #31
  408360:	4630      	mov	r0, r6
  408362:	4639      	mov	r1, r7
  408364:	d507      	bpl.n	408376 <_dtoa_r+0x55e>
  408366:	f108 0801 	add.w	r8, r8, #1
  40836a:	e9d9 2300 	ldrd	r2, r3, [r9]
  40836e:	f7fd fac9 	bl	405904 <__aeabi_dmul>
  408372:	4606      	mov	r6, r0
  408374:	460f      	mov	r7, r1
  408376:	106d      	asrs	r5, r5, #1
  408378:	f109 0908 	add.w	r9, r9, #8
  40837c:	d1ef      	bne.n	40835e <_dtoa_r+0x546>
  40837e:	4650      	mov	r0, sl
  408380:	4659      	mov	r1, fp
  408382:	4632      	mov	r2, r6
  408384:	463b      	mov	r3, r7
  408386:	f7fd fbe7 	bl	405b58 <__aeabi_ddiv>
  40838a:	e9cd 0108 	strd	r0, r1, [sp, #32]
  40838e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  408390:	b143      	cbz	r3, 4083a4 <_dtoa_r+0x58c>
  408392:	2200      	movs	r2, #0
  408394:	4b7b      	ldr	r3, [pc, #492]	; (408584 <_dtoa_r+0x76c>)
  408396:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40839a:	f7fd fd25 	bl	405de8 <__aeabi_dcmplt>
  40839e:	2800      	cmp	r0, #0
  4083a0:	f040 8393 	bne.w	408aca <_dtoa_r+0xcb2>
  4083a4:	4640      	mov	r0, r8
  4083a6:	f7fd fa47 	bl	405838 <__aeabi_i2d>
  4083aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  4083ae:	f7fd faa9 	bl	405904 <__aeabi_dmul>
  4083b2:	4b75      	ldr	r3, [pc, #468]	; (408588 <_dtoa_r+0x770>)
  4083b4:	2200      	movs	r2, #0
  4083b6:	f7fd f8f3 	bl	4055a0 <__adddf3>
  4083ba:	9b04      	ldr	r3, [sp, #16]
  4083bc:	4606      	mov	r6, r0
  4083be:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  4083c2:	2b00      	cmp	r3, #0
  4083c4:	f000 8161 	beq.w	40868a <_dtoa_r+0x872>
  4083c8:	9b02      	ldr	r3, [sp, #8]
  4083ca:	f8dd c010 	ldr.w	ip, [sp, #16]
  4083ce:	9314      	str	r3, [sp, #80]	; 0x50
  4083d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4083d2:	2b00      	cmp	r3, #0
  4083d4:	f000 820b 	beq.w	4087ee <_dtoa_r+0x9d6>
  4083d8:	4b68      	ldr	r3, [pc, #416]	; (40857c <_dtoa_r+0x764>)
  4083da:	2000      	movs	r0, #0
  4083dc:	9a05      	ldr	r2, [sp, #20]
  4083de:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4083e2:	496a      	ldr	r1, [pc, #424]	; (40858c <_dtoa_r+0x774>)
  4083e4:	1c55      	adds	r5, r2, #1
  4083e6:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
  4083ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4083ee:	f7fd fbb3 	bl	405b58 <__aeabi_ddiv>
  4083f2:	4632      	mov	r2, r6
  4083f4:	463b      	mov	r3, r7
  4083f6:	f7fd f8d1 	bl	40559c <__aeabi_dsub>
  4083fa:	4682      	mov	sl, r0
  4083fc:	468b      	mov	fp, r1
  4083fe:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  408402:	4649      	mov	r1, r9
  408404:	4640      	mov	r0, r8
  408406:	f7fd fd17 	bl	405e38 <__aeabi_d2iz>
  40840a:	4606      	mov	r6, r0
  40840c:	f7fd fa14 	bl	405838 <__aeabi_i2d>
  408410:	4602      	mov	r2, r0
  408412:	3630      	adds	r6, #48	; 0x30
  408414:	460b      	mov	r3, r1
  408416:	4640      	mov	r0, r8
  408418:	4649      	mov	r1, r9
  40841a:	f7fd f8bf 	bl	40559c <__aeabi_dsub>
  40841e:	9f05      	ldr	r7, [sp, #20]
  408420:	4680      	mov	r8, r0
  408422:	4689      	mov	r9, r1
  408424:	b2f6      	uxtb	r6, r6
  408426:	4650      	mov	r0, sl
  408428:	4659      	mov	r1, fp
  40842a:	4642      	mov	r2, r8
  40842c:	464b      	mov	r3, r9
  40842e:	703e      	strb	r6, [r7, #0]
  408430:	f7fd fcf8 	bl	405e24 <__aeabi_dcmpgt>
  408434:	2800      	cmp	r0, #0
  408436:	f040 8243 	bne.w	4088c0 <_dtoa_r+0xaa8>
  40843a:	4642      	mov	r2, r8
  40843c:	464b      	mov	r3, r9
  40843e:	2000      	movs	r0, #0
  408440:	4950      	ldr	r1, [pc, #320]	; (408584 <_dtoa_r+0x76c>)
  408442:	f7fd f8ab 	bl	40559c <__aeabi_dsub>
  408446:	4602      	mov	r2, r0
  408448:	460b      	mov	r3, r1
  40844a:	4650      	mov	r0, sl
  40844c:	4659      	mov	r1, fp
  40844e:	f7fd fce9 	bl	405e24 <__aeabi_dcmpgt>
  408452:	2800      	cmp	r0, #0
  408454:	f040 80eb 	bne.w	40862e <_dtoa_r+0x816>
  408458:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
  40845c:	f1bc 0f01 	cmp.w	ip, #1
  408460:	f340 8192 	ble.w	408788 <_dtoa_r+0x970>
  408464:	9f05      	ldr	r7, [sp, #20]
  408466:	9412      	str	r4, [sp, #72]	; 0x48
  408468:	4467      	add	r7, ip
  40846a:	9708      	str	r7, [sp, #32]
  40846c:	e00e      	b.n	40848c <_dtoa_r+0x674>
  40846e:	2000      	movs	r0, #0
  408470:	4944      	ldr	r1, [pc, #272]	; (408584 <_dtoa_r+0x76c>)
  408472:	f7fd f893 	bl	40559c <__aeabi_dsub>
  408476:	4652      	mov	r2, sl
  408478:	465b      	mov	r3, fp
  40847a:	f7fd fcb5 	bl	405de8 <__aeabi_dcmplt>
  40847e:	2800      	cmp	r0, #0
  408480:	f040 83a1 	bne.w	408bc6 <_dtoa_r+0xdae>
  408484:	9b08      	ldr	r3, [sp, #32]
  408486:	429d      	cmp	r5, r3
  408488:	f000 817d 	beq.w	408786 <_dtoa_r+0x96e>
  40848c:	4650      	mov	r0, sl
  40848e:	4659      	mov	r1, fp
  408490:	2200      	movs	r2, #0
  408492:	4b3f      	ldr	r3, [pc, #252]	; (408590 <_dtoa_r+0x778>)
  408494:	f7fd fa36 	bl	405904 <__aeabi_dmul>
  408498:	2200      	movs	r2, #0
  40849a:	4b3d      	ldr	r3, [pc, #244]	; (408590 <_dtoa_r+0x778>)
  40849c:	4682      	mov	sl, r0
  40849e:	468b      	mov	fp, r1
  4084a0:	4640      	mov	r0, r8
  4084a2:	4649      	mov	r1, r9
  4084a4:	f7fd fa2e 	bl	405904 <__aeabi_dmul>
  4084a8:	4606      	mov	r6, r0
  4084aa:	460f      	mov	r7, r1
  4084ac:	f7fd fcc4 	bl	405e38 <__aeabi_d2iz>
  4084b0:	4604      	mov	r4, r0
  4084b2:	f7fd f9c1 	bl	405838 <__aeabi_i2d>
  4084b6:	4602      	mov	r2, r0
  4084b8:	460b      	mov	r3, r1
  4084ba:	3430      	adds	r4, #48	; 0x30
  4084bc:	4630      	mov	r0, r6
  4084be:	4639      	mov	r1, r7
  4084c0:	b2e6      	uxtb	r6, r4
  4084c2:	f7fd f86b 	bl	40559c <__aeabi_dsub>
  4084c6:	4680      	mov	r8, r0
  4084c8:	4689      	mov	r9, r1
  4084ca:	4652      	mov	r2, sl
  4084cc:	465b      	mov	r3, fp
  4084ce:	f805 6b01 	strb.w	r6, [r5], #1
  4084d2:	f7fd fc89 	bl	405de8 <__aeabi_dcmplt>
  4084d6:	4642      	mov	r2, r8
  4084d8:	464b      	mov	r3, r9
  4084da:	2800      	cmp	r0, #0
  4084dc:	d0c7      	beq.n	40846e <_dtoa_r+0x656>
  4084de:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4084e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
  4084e2:	9302      	str	r3, [sp, #8]
  4084e4:	e69b      	b.n	40821e <_dtoa_r+0x406>
  4084e6:	2300      	movs	r3, #0
  4084e8:	930b      	str	r3, [sp, #44]	; 0x2c
  4084ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4084ec:	9a02      	ldr	r2, [sp, #8]
  4084ee:	4413      	add	r3, r2
  4084f0:	9310      	str	r3, [sp, #64]	; 0x40
  4084f2:	3301      	adds	r3, #1
  4084f4:	2b00      	cmp	r3, #0
  4084f6:	9304      	str	r3, [sp, #16]
  4084f8:	f340 82c9 	ble.w	408a8e <_dtoa_r+0xc76>
  4084fc:	9e04      	ldr	r6, [sp, #16]
  4084fe:	2e0e      	cmp	r6, #14
  408500:	bf8c      	ite	hi
  408502:	2500      	movhi	r5, #0
  408504:	f005 0501 	andls.w	r5, r5, #1
  408508:	e6f2      	b.n	4082f0 <_dtoa_r+0x4d8>
  40850a:	2300      	movs	r3, #0
  40850c:	930b      	str	r3, [sp, #44]	; 0x2c
  40850e:	e6e3      	b.n	4082d8 <_dtoa_r+0x4c0>
  408510:	9905      	ldr	r1, [sp, #20]
  408512:	4642      	mov	r2, r8
  408514:	464b      	mov	r3, r9
  408516:	4650      	mov	r0, sl
  408518:	1c4d      	adds	r5, r1, #1
  40851a:	4659      	mov	r1, fp
  40851c:	f7fd fb1c 	bl	405b58 <__aeabi_ddiv>
  408520:	4656      	mov	r6, sl
  408522:	f7fd fc89 	bl	405e38 <__aeabi_d2iz>
  408526:	4682      	mov	sl, r0
  408528:	f7fd f986 	bl	405838 <__aeabi_i2d>
  40852c:	4642      	mov	r2, r8
  40852e:	464b      	mov	r3, r9
  408530:	f7fd f9e8 	bl	405904 <__aeabi_dmul>
  408534:	4602      	mov	r2, r0
  408536:	460b      	mov	r3, r1
  408538:	4630      	mov	r0, r6
  40853a:	4659      	mov	r1, fp
  40853c:	f7fd f82e 	bl	40559c <__aeabi_dsub>
  408540:	f10a 0330 	add.w	r3, sl, #48	; 0x30
  408544:	9a05      	ldr	r2, [sp, #20]
  408546:	4606      	mov	r6, r0
  408548:	460f      	mov	r7, r1
  40854a:	7013      	strb	r3, [r2, #0]
  40854c:	9b04      	ldr	r3, [sp, #16]
  40854e:	2b01      	cmp	r3, #1
  408550:	d04d      	beq.n	4085ee <_dtoa_r+0x7d6>
  408552:	2200      	movs	r2, #0
  408554:	4b0e      	ldr	r3, [pc, #56]	; (408590 <_dtoa_r+0x778>)
  408556:	f7fd f9d5 	bl	405904 <__aeabi_dmul>
  40855a:	2200      	movs	r2, #0
  40855c:	2300      	movs	r3, #0
  40855e:	4606      	mov	r6, r0
  408560:	460f      	mov	r7, r1
  408562:	f7fd fc37 	bl	405dd4 <__aeabi_dcmpeq>
  408566:	2800      	cmp	r0, #0
  408568:	f47f ae59 	bne.w	40821e <_dtoa_r+0x406>
  40856c:	9403      	str	r4, [sp, #12]
  40856e:	f8dd b014 	ldr.w	fp, [sp, #20]
  408572:	9c04      	ldr	r4, [sp, #16]
  408574:	e019      	b.n	4085aa <_dtoa_r+0x792>
  408576:	bf00      	nop
  408578:	fffffbee 	.word	0xfffffbee
  40857c:	0040ae00 	.word	0x0040ae00
  408580:	0040aed8 	.word	0x0040aed8
  408584:	3ff00000 	.word	0x3ff00000
  408588:	401c0000 	.word	0x401c0000
  40858c:	3fe00000 	.word	0x3fe00000
  408590:	40240000 	.word	0x40240000
  408594:	f7fd f9b6 	bl	405904 <__aeabi_dmul>
  408598:	2200      	movs	r2, #0
  40859a:	2300      	movs	r3, #0
  40859c:	4606      	mov	r6, r0
  40859e:	460f      	mov	r7, r1
  4085a0:	f7fd fc18 	bl	405dd4 <__aeabi_dcmpeq>
  4085a4:	2800      	cmp	r0, #0
  4085a6:	f040 82e5 	bne.w	408b74 <_dtoa_r+0xd5c>
  4085aa:	4642      	mov	r2, r8
  4085ac:	464b      	mov	r3, r9
  4085ae:	4630      	mov	r0, r6
  4085b0:	4639      	mov	r1, r7
  4085b2:	f7fd fad1 	bl	405b58 <__aeabi_ddiv>
  4085b6:	f7fd fc3f 	bl	405e38 <__aeabi_d2iz>
  4085ba:	4682      	mov	sl, r0
  4085bc:	f7fd f93c 	bl	405838 <__aeabi_i2d>
  4085c0:	4642      	mov	r2, r8
  4085c2:	464b      	mov	r3, r9
  4085c4:	f7fd f99e 	bl	405904 <__aeabi_dmul>
  4085c8:	4602      	mov	r2, r0
  4085ca:	460b      	mov	r3, r1
  4085cc:	4630      	mov	r0, r6
  4085ce:	4639      	mov	r1, r7
  4085d0:	f7fc ffe4 	bl	40559c <__aeabi_dsub>
  4085d4:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
  4085d8:	4606      	mov	r6, r0
  4085da:	460f      	mov	r7, r1
  4085dc:	f805 eb01 	strb.w	lr, [r5], #1
  4085e0:	ebcb 0e05 	rsb	lr, fp, r5
  4085e4:	2200      	movs	r2, #0
  4085e6:	4bb8      	ldr	r3, [pc, #736]	; (4088c8 <_dtoa_r+0xab0>)
  4085e8:	4574      	cmp	r4, lr
  4085ea:	d1d3      	bne.n	408594 <_dtoa_r+0x77c>
  4085ec:	9c03      	ldr	r4, [sp, #12]
  4085ee:	4632      	mov	r2, r6
  4085f0:	463b      	mov	r3, r7
  4085f2:	4630      	mov	r0, r6
  4085f4:	4639      	mov	r1, r7
  4085f6:	f7fc ffd3 	bl	4055a0 <__adddf3>
  4085fa:	4606      	mov	r6, r0
  4085fc:	460f      	mov	r7, r1
  4085fe:	4640      	mov	r0, r8
  408600:	4649      	mov	r1, r9
  408602:	4632      	mov	r2, r6
  408604:	463b      	mov	r3, r7
  408606:	f7fd fbef 	bl	405de8 <__aeabi_dcmplt>
  40860a:	b960      	cbnz	r0, 408626 <_dtoa_r+0x80e>
  40860c:	4640      	mov	r0, r8
  40860e:	4649      	mov	r1, r9
  408610:	4632      	mov	r2, r6
  408612:	463b      	mov	r3, r7
  408614:	f7fd fbde 	bl	405dd4 <__aeabi_dcmpeq>
  408618:	2800      	cmp	r0, #0
  40861a:	f43f ae00 	beq.w	40821e <_dtoa_r+0x406>
  40861e:	f01a 0f01 	tst.w	sl, #1
  408622:	f43f adfc 	beq.w	40821e <_dtoa_r+0x406>
  408626:	9b02      	ldr	r3, [sp, #8]
  408628:	9314      	str	r3, [sp, #80]	; 0x50
  40862a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
  40862e:	1e6a      	subs	r2, r5, #1
  408630:	9b05      	ldr	r3, [sp, #20]
  408632:	e004      	b.n	40863e <_dtoa_r+0x826>
  408634:	429a      	cmp	r2, r3
  408636:	f000 8277 	beq.w	408b28 <_dtoa_r+0xd10>
  40863a:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
  40863e:	2e39      	cmp	r6, #57	; 0x39
  408640:	f102 0501 	add.w	r5, r2, #1
  408644:	d0f6      	beq.n	408634 <_dtoa_r+0x81c>
  408646:	1c73      	adds	r3, r6, #1
  408648:	9914      	ldr	r1, [sp, #80]	; 0x50
  40864a:	b2db      	uxtb	r3, r3
  40864c:	9102      	str	r1, [sp, #8]
  40864e:	7013      	strb	r3, [r2, #0]
  408650:	e5e5      	b.n	40821e <_dtoa_r+0x406>
  408652:	9b22      	ldr	r3, [sp, #136]	; 0x88
  408654:	2b01      	cmp	r3, #1
  408656:	f340 8161 	ble.w	40891c <_dtoa_r+0xb04>
  40865a:	f04f 0800 	mov.w	r8, #0
  40865e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408660:	2b00      	cmp	r3, #0
  408662:	f47f ad80 	bne.w	408166 <_dtoa_r+0x34e>
  408666:	2001      	movs	r0, #1
  408668:	e585      	b.n	408176 <_dtoa_r+0x35e>
  40866a:	4640      	mov	r0, r8
  40866c:	f7fd f8e4 	bl	405838 <__aeabi_i2d>
  408670:	4602      	mov	r2, r0
  408672:	460b      	mov	r3, r1
  408674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408678:	f7fd f944 	bl	405904 <__aeabi_dmul>
  40867c:	2200      	movs	r2, #0
  40867e:	4b93      	ldr	r3, [pc, #588]	; (4088cc <_dtoa_r+0xab4>)
  408680:	f7fc ff8e 	bl	4055a0 <__adddf3>
  408684:	4606      	mov	r6, r0
  408686:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  40868a:	2200      	movs	r2, #0
  40868c:	4b90      	ldr	r3, [pc, #576]	; (4088d0 <_dtoa_r+0xab8>)
  40868e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408692:	f7fc ff83 	bl	40559c <__aeabi_dsub>
  408696:	4632      	mov	r2, r6
  408698:	463b      	mov	r3, r7
  40869a:	4680      	mov	r8, r0
  40869c:	4689      	mov	r9, r1
  40869e:	f7fd fbc1 	bl	405e24 <__aeabi_dcmpgt>
  4086a2:	4605      	mov	r5, r0
  4086a4:	2800      	cmp	r0, #0
  4086a6:	f040 809f 	bne.w	4087e8 <_dtoa_r+0x9d0>
  4086aa:	4632      	mov	r2, r6
  4086ac:	4640      	mov	r0, r8
  4086ae:	4649      	mov	r1, r9
  4086b0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  4086b4:	f7fd fb98 	bl	405de8 <__aeabi_dcmplt>
  4086b8:	2800      	cmp	r0, #0
  4086ba:	d065      	beq.n	408788 <_dtoa_r+0x970>
  4086bc:	462f      	mov	r7, r5
  4086be:	9508      	str	r5, [sp, #32]
  4086c0:	e4df      	b.n	408082 <_dtoa_r+0x26a>
  4086c2:	201c      	movs	r0, #28
  4086c4:	e564      	b.n	408190 <_dtoa_r+0x378>
  4086c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4086c8:	2b00      	cmp	r3, #0
  4086ca:	f040 814f 	bne.w	40896c <_dtoa_r+0xb54>
  4086ce:	f8dd a014 	ldr.w	sl, [sp, #20]
  4086d2:	9e06      	ldr	r6, [sp, #24]
  4086d4:	4655      	mov	r5, sl
  4086d6:	f8dd 8010 	ldr.w	r8, [sp, #16]
  4086da:	e002      	b.n	4086e2 <_dtoa_r+0x8ca>
  4086dc:	f000 ffdc 	bl	409698 <__multadd>
  4086e0:	4606      	mov	r6, r0
  4086e2:	4639      	mov	r1, r7
  4086e4:	4630      	mov	r0, r6
  4086e6:	f7ff faf7 	bl	407cd8 <quorem>
  4086ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
  4086ee:	4631      	mov	r1, r6
  4086f0:	4620      	mov	r0, r4
  4086f2:	f805 9b01 	strb.w	r9, [r5], #1
  4086f6:	ebca 0e05 	rsb	lr, sl, r5
  4086fa:	220a      	movs	r2, #10
  4086fc:	2300      	movs	r3, #0
  4086fe:	45c6      	cmp	lr, r8
  408700:	dbec      	blt.n	4086dc <_dtoa_r+0x8c4>
  408702:	9b05      	ldr	r3, [sp, #20]
  408704:	f04f 0a00 	mov.w	sl, #0
  408708:	9a04      	ldr	r2, [sp, #16]
  40870a:	9606      	str	r6, [sp, #24]
  40870c:	2a01      	cmp	r2, #1
  40870e:	bfac      	ite	ge
  408710:	189b      	addge	r3, r3, r2
  408712:	3301      	addlt	r3, #1
  408714:	461d      	mov	r5, r3
  408716:	9906      	ldr	r1, [sp, #24]
  408718:	2201      	movs	r2, #1
  40871a:	4620      	mov	r0, r4
  40871c:	f001 f94e 	bl	4099bc <__lshift>
  408720:	4639      	mov	r1, r7
  408722:	9006      	str	r0, [sp, #24]
  408724:	f001 f9a4 	bl	409a70 <__mcmp>
  408728:	2800      	cmp	r0, #0
  40872a:	f340 824e 	ble.w	408bca <_dtoa_r+0xdb2>
  40872e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  408732:	1e6b      	subs	r3, r5, #1
  408734:	9905      	ldr	r1, [sp, #20]
  408736:	e004      	b.n	408742 <_dtoa_r+0x92a>
  408738:	428b      	cmp	r3, r1
  40873a:	f000 820b 	beq.w	408b54 <_dtoa_r+0xd3c>
  40873e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  408742:	2a39      	cmp	r2, #57	; 0x39
  408744:	f103 0501 	add.w	r5, r3, #1
  408748:	d0f6      	beq.n	408738 <_dtoa_r+0x920>
  40874a:	3201      	adds	r2, #1
  40874c:	701a      	strb	r2, [r3, #0]
  40874e:	4639      	mov	r1, r7
  408750:	4620      	mov	r0, r4
  408752:	f000 ff97 	bl	409684 <_Bfree>
  408756:	9b08      	ldr	r3, [sp, #32]
  408758:	2b00      	cmp	r3, #0
  40875a:	f43f ad60 	beq.w	40821e <_dtoa_r+0x406>
  40875e:	459a      	cmp	sl, r3
  408760:	f43f ad59 	beq.w	408216 <_dtoa_r+0x3fe>
  408764:	f1ba 0f00 	cmp.w	sl, #0
  408768:	f43f ad55 	beq.w	408216 <_dtoa_r+0x3fe>
  40876c:	4651      	mov	r1, sl
  40876e:	4620      	mov	r0, r4
  408770:	f000 ff88 	bl	409684 <_Bfree>
  408774:	e54f      	b.n	408216 <_dtoa_r+0x3fe>
  408776:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40877a:	f04f 0802 	mov.w	r8, #2
  40877e:	e5eb      	b.n	408358 <_dtoa_r+0x540>
  408780:	9805      	ldr	r0, [sp, #20]
  408782:	f7ff bb7a 	b.w	407e7a <_dtoa_r+0x62>
  408786:	9c12      	ldr	r4, [sp, #72]	; 0x48
  408788:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  40878c:	e452      	b.n	408034 <_dtoa_r+0x21c>
  40878e:	9b02      	ldr	r3, [sp, #8]
  408790:	425d      	negs	r5, r3
  408792:	2d00      	cmp	r5, #0
  408794:	f000 81c1 	beq.w	408b1a <_dtoa_r+0xd02>
  408798:	f005 020f 	and.w	r2, r5, #15
  40879c:	4b4d      	ldr	r3, [pc, #308]	; (4088d4 <_dtoa_r+0xabc>)
  40879e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4087a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  4087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4087aa:	f7fd f8ab 	bl	405904 <__aeabi_dmul>
  4087ae:	112d      	asrs	r5, r5, #4
  4087b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
  4087b4:	f000 8275 	beq.w	408ca2 <_dtoa_r+0xe8a>
  4087b8:	4e47      	ldr	r6, [pc, #284]	; (4088d8 <_dtoa_r+0xac0>)
  4087ba:	f04f 0802 	mov.w	r8, #2
  4087be:	4602      	mov	r2, r0
  4087c0:	460b      	mov	r3, r1
  4087c2:	07ef      	lsls	r7, r5, #31
  4087c4:	4610      	mov	r0, r2
  4087c6:	4619      	mov	r1, r3
  4087c8:	d507      	bpl.n	4087da <_dtoa_r+0x9c2>
  4087ca:	f108 0801 	add.w	r8, r8, #1
  4087ce:	e9d6 2300 	ldrd	r2, r3, [r6]
  4087d2:	f7fd f897 	bl	405904 <__aeabi_dmul>
  4087d6:	4602      	mov	r2, r0
  4087d8:	460b      	mov	r3, r1
  4087da:	106d      	asrs	r5, r5, #1
  4087dc:	f106 0608 	add.w	r6, r6, #8
  4087e0:	d1ef      	bne.n	4087c2 <_dtoa_r+0x9aa>
  4087e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  4087e6:	e5d2      	b.n	40838e <_dtoa_r+0x576>
  4087e8:	2700      	movs	r7, #0
  4087ea:	9708      	str	r7, [sp, #32]
  4087ec:	e506      	b.n	4081fc <_dtoa_r+0x3e4>
  4087ee:	f10c 3bff 	add.w	fp, ip, #4294967295
  4087f2:	4938      	ldr	r1, [pc, #224]	; (4088d4 <_dtoa_r+0xabc>)
  4087f4:	4632      	mov	r2, r6
  4087f6:	463b      	mov	r3, r7
  4087f8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
  4087fc:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
  408800:	9f05      	ldr	r7, [sp, #20]
  408802:	e9d1 0100 	ldrd	r0, r1, [r1]
  408806:	f7fd f87d 	bl	405904 <__aeabi_dmul>
  40880a:	1c7d      	adds	r5, r7, #1
  40880c:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  408810:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  408814:	4649      	mov	r1, r9
  408816:	4640      	mov	r0, r8
  408818:	f7fd fb0e 	bl	405e38 <__aeabi_d2iz>
  40881c:	4606      	mov	r6, r0
  40881e:	f7fd f80b 	bl	405838 <__aeabi_i2d>
  408822:	4602      	mov	r2, r0
  408824:	460b      	mov	r3, r1
  408826:	4640      	mov	r0, r8
  408828:	4649      	mov	r1, r9
  40882a:	3630      	adds	r6, #48	; 0x30
  40882c:	f7fc feb6 	bl	40559c <__aeabi_dsub>
  408830:	f8dd c054 	ldr.w	ip, [sp, #84]	; 0x54
  408834:	4680      	mov	r8, r0
  408836:	4689      	mov	r9, r1
  408838:	f1bc 0f01 	cmp.w	ip, #1
  40883c:	703e      	strb	r6, [r7, #0]
  40883e:	d020      	beq.n	408882 <_dtoa_r+0xa6a>
  408840:	9b05      	ldr	r3, [sp, #20]
  408842:	4640      	mov	r0, r8
  408844:	46aa      	mov	sl, r5
  408846:	46a8      	mov	r8, r5
  408848:	eb03 070c 	add.w	r7, r3, ip
  40884c:	46b9      	mov	r9, r7
  40884e:	2200      	movs	r2, #0
  408850:	4b1d      	ldr	r3, [pc, #116]	; (4088c8 <_dtoa_r+0xab0>)
  408852:	f7fd f857 	bl	405904 <__aeabi_dmul>
  408856:	460f      	mov	r7, r1
  408858:	4606      	mov	r6, r0
  40885a:	f7fd faed 	bl	405e38 <__aeabi_d2iz>
  40885e:	4605      	mov	r5, r0
  408860:	f7fc ffea 	bl	405838 <__aeabi_i2d>
  408864:	4602      	mov	r2, r0
  408866:	460b      	mov	r3, r1
  408868:	3530      	adds	r5, #48	; 0x30
  40886a:	4630      	mov	r0, r6
  40886c:	4639      	mov	r1, r7
  40886e:	f7fc fe95 	bl	40559c <__aeabi_dsub>
  408872:	f80a 5b01 	strb.w	r5, [sl], #1
  408876:	45ca      	cmp	sl, r9
  408878:	d1e9      	bne.n	40884e <_dtoa_r+0xa36>
  40887a:	4645      	mov	r5, r8
  40887c:	4689      	mov	r9, r1
  40887e:	4680      	mov	r8, r0
  408880:	445d      	add	r5, fp
  408882:	2200      	movs	r2, #0
  408884:	4b15      	ldr	r3, [pc, #84]	; (4088dc <_dtoa_r+0xac4>)
  408886:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40888a:	f7fc fe89 	bl	4055a0 <__adddf3>
  40888e:	4642      	mov	r2, r8
  408890:	464b      	mov	r3, r9
  408892:	f7fd faa9 	bl	405de8 <__aeabi_dcmplt>
  408896:	2800      	cmp	r0, #0
  408898:	f47f aec7 	bne.w	40862a <_dtoa_r+0x812>
  40889c:	2000      	movs	r0, #0
  40889e:	490f      	ldr	r1, [pc, #60]	; (4088dc <_dtoa_r+0xac4>)
  4088a0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  4088a4:	f7fc fe7a 	bl	40559c <__aeabi_dsub>
  4088a8:	4642      	mov	r2, r8
  4088aa:	464b      	mov	r3, r9
  4088ac:	f7fd faba 	bl	405e24 <__aeabi_dcmpgt>
  4088b0:	b908      	cbnz	r0, 4088b6 <_dtoa_r+0xa9e>
  4088b2:	e769      	b.n	408788 <_dtoa_r+0x970>
  4088b4:	4615      	mov	r5, r2
  4088b6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4088ba:	1e6a      	subs	r2, r5, #1
  4088bc:	2b30      	cmp	r3, #48	; 0x30
  4088be:	d0f9      	beq.n	4088b4 <_dtoa_r+0xa9c>
  4088c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4088c2:	9302      	str	r3, [sp, #8]
  4088c4:	e4ab      	b.n	40821e <_dtoa_r+0x406>
  4088c6:	bf00      	nop
  4088c8:	40240000 	.word	0x40240000
  4088cc:	401c0000 	.word	0x401c0000
  4088d0:	40140000 	.word	0x40140000
  4088d4:	0040ae00 	.word	0x0040ae00
  4088d8:	0040aed8 	.word	0x0040aed8
  4088dc:	3fe00000 	.word	0x3fe00000
  4088e0:	9806      	ldr	r0, [sp, #24]
  4088e2:	4639      	mov	r1, r7
  4088e4:	f001 f8c4 	bl	409a70 <__mcmp>
  4088e8:	2800      	cmp	r0, #0
  4088ea:	f6bf ac6e 	bge.w	4081ca <_dtoa_r+0x3b2>
  4088ee:	9e02      	ldr	r6, [sp, #8]
  4088f0:	2300      	movs	r3, #0
  4088f2:	9906      	ldr	r1, [sp, #24]
  4088f4:	4620      	mov	r0, r4
  4088f6:	3e01      	subs	r6, #1
  4088f8:	220a      	movs	r2, #10
  4088fa:	9602      	str	r6, [sp, #8]
  4088fc:	f000 fecc 	bl	409698 <__multadd>
  408900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  408902:	9006      	str	r0, [sp, #24]
  408904:	bb1b      	cbnz	r3, 40894e <_dtoa_r+0xb36>
  408906:	9b22      	ldr	r3, [sp, #136]	; 0x88
  408908:	2b02      	cmp	r3, #2
  40890a:	f340 81ce 	ble.w	408caa <_dtoa_r+0xe92>
  40890e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408910:	2b00      	cmp	r3, #0
  408912:	f300 81ca 	bgt.w	408caa <_dtoa_r+0xe92>
  408916:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408918:	9304      	str	r3, [sp, #16]
  40891a:	e45e      	b.n	4081da <_dtoa_r+0x3c2>
  40891c:	f1ba 0f00 	cmp.w	sl, #0
  408920:	f47f ae9b 	bne.w	40865a <_dtoa_r+0x842>
  408924:	f3cb 0313 	ubfx	r3, fp, #0, #20
  408928:	2b00      	cmp	r3, #0
  40892a:	f47f ae96 	bne.w	40865a <_dtoa_r+0x842>
  40892e:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
  408932:	0d36      	lsrs	r6, r6, #20
  408934:	0536      	lsls	r6, r6, #20
  408936:	2e00      	cmp	r6, #0
  408938:	f000 818a 	beq.w	408c50 <_dtoa_r+0xe38>
  40893c:	9b07      	ldr	r3, [sp, #28]
  40893e:	f04f 0801 	mov.w	r8, #1
  408942:	3301      	adds	r3, #1
  408944:	9307      	str	r3, [sp, #28]
  408946:	9b03      	ldr	r3, [sp, #12]
  408948:	3301      	adds	r3, #1
  40894a:	9303      	str	r3, [sp, #12]
  40894c:	e687      	b.n	40865e <_dtoa_r+0x846>
  40894e:	2300      	movs	r3, #0
  408950:	9908      	ldr	r1, [sp, #32]
  408952:	4620      	mov	r0, r4
  408954:	220a      	movs	r2, #10
  408956:	f000 fe9f 	bl	409698 <__multadd>
  40895a:	9b22      	ldr	r3, [sp, #136]	; 0x88
  40895c:	9008      	str	r0, [sp, #32]
  40895e:	2b02      	cmp	r3, #2
  408960:	dd02      	ble.n	408968 <_dtoa_r+0xb50>
  408962:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408964:	2b00      	cmp	r3, #0
  408966:	ddd6      	ble.n	408916 <_dtoa_r+0xafe>
  408968:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40896a:	9304      	str	r3, [sp, #16]
  40896c:	2d00      	cmp	r5, #0
  40896e:	dd05      	ble.n	40897c <_dtoa_r+0xb64>
  408970:	9908      	ldr	r1, [sp, #32]
  408972:	462a      	mov	r2, r5
  408974:	4620      	mov	r0, r4
  408976:	f001 f821 	bl	4099bc <__lshift>
  40897a:	9008      	str	r0, [sp, #32]
  40897c:	f1b8 0f00 	cmp.w	r8, #0
  408980:	f040 8133 	bne.w	408bea <_dtoa_r+0xdd2>
  408984:	9e08      	ldr	r6, [sp, #32]
  408986:	f00a 0101 	and.w	r1, sl, #1
  40898a:	9b04      	ldr	r3, [sp, #16]
  40898c:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40898e:	3b01      	subs	r3, #1
  408990:	910b      	str	r1, [sp, #44]	; 0x2c
  408992:	9905      	ldr	r1, [sp, #20]
  408994:	fab2 f282 	clz	r2, r2
  408998:	970a      	str	r7, [sp, #40]	; 0x28
  40899a:	18cb      	adds	r3, r1, r3
  40899c:	4688      	mov	r8, r1
  40899e:	f8dd b020 	ldr.w	fp, [sp, #32]
  4089a2:	930c      	str	r3, [sp, #48]	; 0x30
  4089a4:	0953      	lsrs	r3, r2, #5
  4089a6:	9f06      	ldr	r7, [sp, #24]
  4089a8:	9303      	str	r3, [sp, #12]
  4089aa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4089ac:	4638      	mov	r0, r7
  4089ae:	4629      	mov	r1, r5
  4089b0:	f7ff f992 	bl	407cd8 <quorem>
  4089b4:	4659      	mov	r1, fp
  4089b6:	4681      	mov	r9, r0
  4089b8:	4638      	mov	r0, r7
  4089ba:	f001 f859 	bl	409a70 <__mcmp>
  4089be:	4629      	mov	r1, r5
  4089c0:	4632      	mov	r2, r6
  4089c2:	4682      	mov	sl, r0
  4089c4:	4620      	mov	r0, r4
  4089c6:	f001 f877 	bl	409ab8 <__mdiff>
  4089ca:	68c2      	ldr	r2, [r0, #12]
  4089cc:	4605      	mov	r5, r0
  4089ce:	f109 0c30 	add.w	ip, r9, #48	; 0x30
  4089d2:	9207      	str	r2, [sp, #28]
  4089d4:	2a00      	cmp	r2, #0
  4089d6:	d150      	bne.n	408a7a <_dtoa_r+0xc62>
  4089d8:	4629      	mov	r1, r5
  4089da:	4638      	mov	r0, r7
  4089dc:	f8cd c018 	str.w	ip, [sp, #24]
  4089e0:	f001 f846 	bl	409a70 <__mcmp>
  4089e4:	4629      	mov	r1, r5
  4089e6:	9004      	str	r0, [sp, #16]
  4089e8:	4620      	mov	r0, r4
  4089ea:	f000 fe4b 	bl	409684 <_Bfree>
  4089ee:	9a03      	ldr	r2, [sp, #12]
  4089f0:	9b04      	ldr	r3, [sp, #16]
  4089f2:	f8dd c018 	ldr.w	ip, [sp, #24]
  4089f6:	b132      	cbz	r2, 408a06 <_dtoa_r+0xbee>
  4089f8:	b92b      	cbnz	r3, 408a06 <_dtoa_r+0xbee>
  4089fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4089fc:	9a07      	ldr	r2, [sp, #28]
  4089fe:	2b00      	cmp	r3, #0
  408a00:	f000 8128 	beq.w	408c54 <_dtoa_r+0xe3c>
  408a04:	4613      	mov	r3, r2
  408a06:	f1ba 0f00 	cmp.w	sl, #0
  408a0a:	f2c0 80bc 	blt.w	408b86 <_dtoa_r+0xd6e>
  408a0e:	9a03      	ldr	r2, [sp, #12]
  408a10:	b132      	cbz	r2, 408a20 <_dtoa_r+0xc08>
  408a12:	f1ba 0f00 	cmp.w	sl, #0
  408a16:	d103      	bne.n	408a20 <_dtoa_r+0xc08>
  408a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  408a1a:	2a00      	cmp	r2, #0
  408a1c:	f000 80b3 	beq.w	408b86 <_dtoa_r+0xd6e>
  408a20:	2b00      	cmp	r3, #0
  408a22:	f300 80fe 	bgt.w	408c22 <_dtoa_r+0xe0a>
  408a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  408a28:	f108 0901 	add.w	r9, r8, #1
  408a2c:	f888 c000 	strb.w	ip, [r8]
  408a30:	4598      	cmp	r8, r3
  408a32:	464d      	mov	r5, r9
  408a34:	f000 8106 	beq.w	408c44 <_dtoa_r+0xe2c>
  408a38:	4639      	mov	r1, r7
  408a3a:	220a      	movs	r2, #10
  408a3c:	2300      	movs	r3, #0
  408a3e:	4620      	mov	r0, r4
  408a40:	f000 fe2a 	bl	409698 <__multadd>
  408a44:	45b3      	cmp	fp, r6
  408a46:	4607      	mov	r7, r0
  408a48:	4659      	mov	r1, fp
  408a4a:	4620      	mov	r0, r4
  408a4c:	f04f 020a 	mov.w	r2, #10
  408a50:	f04f 0300 	mov.w	r3, #0
  408a54:	d00b      	beq.n	408a6e <_dtoa_r+0xc56>
  408a56:	f000 fe1f 	bl	409698 <__multadd>
  408a5a:	4631      	mov	r1, r6
  408a5c:	4683      	mov	fp, r0
  408a5e:	220a      	movs	r2, #10
  408a60:	4620      	mov	r0, r4
  408a62:	2300      	movs	r3, #0
  408a64:	f000 fe18 	bl	409698 <__multadd>
  408a68:	46c8      	mov	r8, r9
  408a6a:	4606      	mov	r6, r0
  408a6c:	e79d      	b.n	4089aa <_dtoa_r+0xb92>
  408a6e:	f000 fe13 	bl	409698 <__multadd>
  408a72:	46c8      	mov	r8, r9
  408a74:	4683      	mov	fp, r0
  408a76:	4606      	mov	r6, r0
  408a78:	e797      	b.n	4089aa <_dtoa_r+0xb92>
  408a7a:	4601      	mov	r1, r0
  408a7c:	4620      	mov	r0, r4
  408a7e:	f8cd c010 	str.w	ip, [sp, #16]
  408a82:	f000 fdff 	bl	409684 <_Bfree>
  408a86:	2301      	movs	r3, #1
  408a88:	f8dd c010 	ldr.w	ip, [sp, #16]
  408a8c:	e7bb      	b.n	408a06 <_dtoa_r+0xbee>
  408a8e:	2b0e      	cmp	r3, #14
  408a90:	bf8c      	ite	hi
  408a92:	2300      	movhi	r3, #0
  408a94:	2301      	movls	r3, #1
  408a96:	2100      	movs	r1, #0
  408a98:	401d      	ands	r5, r3
  408a9a:	6461      	str	r1, [r4, #68]	; 0x44
  408a9c:	e436      	b.n	40830c <_dtoa_r+0x4f4>
  408a9e:	2301      	movs	r3, #1
  408aa0:	9323      	str	r3, [sp, #140]	; 0x8c
  408aa2:	9310      	str	r3, [sp, #64]	; 0x40
  408aa4:	9304      	str	r3, [sp, #16]
  408aa6:	e7f6      	b.n	408a96 <_dtoa_r+0xc7e>
  408aa8:	9906      	ldr	r1, [sp, #24]
  408aaa:	4620      	mov	r0, r4
  408aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  408aae:	f000 ff35 	bl	40991c <__pow5mult>
  408ab2:	9006      	str	r0, [sp, #24]
  408ab4:	f7ff bb42 	b.w	40813c <_dtoa_r+0x324>
  408ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  408aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  408abc:	1af3      	subs	r3, r6, r3
  408abe:	960a      	str	r6, [sp, #40]	; 0x28
  408ac0:	2600      	movs	r6, #0
  408ac2:	441a      	add	r2, r3
  408ac4:	920c      	str	r2, [sp, #48]	; 0x30
  408ac6:	f7ff bbf3 	b.w	4082b0 <_dtoa_r+0x498>
  408aca:	9b04      	ldr	r3, [sp, #16]
  408acc:	2b00      	cmp	r3, #0
  408ace:	f43f adcc 	beq.w	40866a <_dtoa_r+0x852>
  408ad2:	9d10      	ldr	r5, [sp, #64]	; 0x40
  408ad4:	2d00      	cmp	r5, #0
  408ad6:	f77f ae57 	ble.w	408788 <_dtoa_r+0x970>
  408ada:	2200      	movs	r2, #0
  408adc:	4b86      	ldr	r3, [pc, #536]	; (408cf8 <_dtoa_r+0xee0>)
  408ade:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  408ae2:	f7fc ff0f 	bl	405904 <__aeabi_dmul>
  408ae6:	9b02      	ldr	r3, [sp, #8]
  408ae8:	4606      	mov	r6, r0
  408aea:	460f      	mov	r7, r1
  408aec:	3b01      	subs	r3, #1
  408aee:	f108 0001 	add.w	r0, r8, #1
  408af2:	e9cd 6708 	strd	r6, r7, [sp, #32]
  408af6:	9314      	str	r3, [sp, #80]	; 0x50
  408af8:	f7fc fe9e 	bl	405838 <__aeabi_i2d>
  408afc:	4602      	mov	r2, r0
  408afe:	460b      	mov	r3, r1
  408b00:	4630      	mov	r0, r6
  408b02:	4639      	mov	r1, r7
  408b04:	f7fc fefe 	bl	405904 <__aeabi_dmul>
  408b08:	2200      	movs	r2, #0
  408b0a:	4b7c      	ldr	r3, [pc, #496]	; (408cfc <_dtoa_r+0xee4>)
  408b0c:	f7fc fd48 	bl	4055a0 <__adddf3>
  408b10:	46ac      	mov	ip, r5
  408b12:	4606      	mov	r6, r0
  408b14:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
  408b18:	e45a      	b.n	4083d0 <_dtoa_r+0x5b8>
  408b1a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
  408b1e:	f04f 0802 	mov.w	r8, #2
  408b22:	e9cd 2308 	strd	r2, r3, [sp, #32]
  408b26:	e432      	b.n	40838e <_dtoa_r+0x576>
  408b28:	9b14      	ldr	r3, [sp, #80]	; 0x50
  408b2a:	2130      	movs	r1, #48	; 0x30
  408b2c:	3301      	adds	r3, #1
  408b2e:	7011      	strb	r1, [r2, #0]
  408b30:	9302      	str	r3, [sp, #8]
  408b32:	2331      	movs	r3, #49	; 0x31
  408b34:	7013      	strb	r3, [r2, #0]
  408b36:	f7ff bb72 	b.w	40821e <_dtoa_r+0x406>
  408b3a:	9906      	ldr	r1, [sp, #24]
  408b3c:	4620      	mov	r0, r4
  408b3e:	f000 feed 	bl	40991c <__pow5mult>
  408b42:	9006      	str	r0, [sp, #24]
  408b44:	f7ff bafa 	b.w	40813c <_dtoa_r+0x324>
  408b48:	f1ba 0f00 	cmp.w	sl, #0
  408b4c:	f43f aeea 	beq.w	408924 <_dtoa_r+0xb0c>
  408b50:	f7ff bb07 	b.w	408162 <_dtoa_r+0x34a>
  408b54:	9a02      	ldr	r2, [sp, #8]
  408b56:	2331      	movs	r3, #49	; 0x31
  408b58:	3201      	adds	r2, #1
  408b5a:	9202      	str	r2, [sp, #8]
  408b5c:	9a05      	ldr	r2, [sp, #20]
  408b5e:	7013      	strb	r3, [r2, #0]
  408b60:	e5f5      	b.n	40874e <_dtoa_r+0x936>
  408b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
  408b64:	2a00      	cmp	r2, #0
  408b66:	d055      	beq.n	408c14 <_dtoa_r+0xdfc>
  408b68:	f203 4333 	addw	r3, r3, #1075	; 0x433
  408b6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408b6e:	9d07      	ldr	r5, [sp, #28]
  408b70:	f7ff bba4 	b.w	4082bc <_dtoa_r+0x4a4>
  408b74:	9c03      	ldr	r4, [sp, #12]
  408b76:	f7ff bb52 	b.w	40821e <_dtoa_r+0x406>
  408b7a:	9b07      	ldr	r3, [sp, #28]
  408b7c:	9a04      	ldr	r2, [sp, #16]
  408b7e:	1a9d      	subs	r5, r3, r2
  408b80:	2300      	movs	r3, #0
  408b82:	f7ff bb9b 	b.w	4082bc <_dtoa_r+0x4a4>
  408b86:	2b00      	cmp	r3, #0
  408b88:	9706      	str	r7, [sp, #24]
  408b8a:	46e1      	mov	r9, ip
  408b8c:	f8cd b020 	str.w	fp, [sp, #32]
  408b90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408b92:	4665      	mov	r5, ip
  408b94:	dd0f      	ble.n	408bb6 <_dtoa_r+0xd9e>
  408b96:	9906      	ldr	r1, [sp, #24]
  408b98:	2201      	movs	r2, #1
  408b9a:	4620      	mov	r0, r4
  408b9c:	f000 ff0e 	bl	4099bc <__lshift>
  408ba0:	4639      	mov	r1, r7
  408ba2:	9006      	str	r0, [sp, #24]
  408ba4:	f000 ff64 	bl	409a70 <__mcmp>
  408ba8:	2800      	cmp	r0, #0
  408baa:	dd75      	ble.n	408c98 <_dtoa_r+0xe80>
  408bac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
  408bb0:	d066      	beq.n	408c80 <_dtoa_r+0xe68>
  408bb2:	f109 0501 	add.w	r5, r9, #1
  408bb6:	f8dd a020 	ldr.w	sl, [sp, #32]
  408bba:	f888 5000 	strb.w	r5, [r8]
  408bbe:	f108 0501 	add.w	r5, r8, #1
  408bc2:	9608      	str	r6, [sp, #32]
  408bc4:	e5c3      	b.n	40874e <_dtoa_r+0x936>
  408bc6:	9c12      	ldr	r4, [sp, #72]	; 0x48
  408bc8:	e531      	b.n	40862e <_dtoa_r+0x816>
  408bca:	d104      	bne.n	408bd6 <_dtoa_r+0xdbe>
  408bcc:	f019 0f01 	tst.w	r9, #1
  408bd0:	d001      	beq.n	408bd6 <_dtoa_r+0xdbe>
  408bd2:	e5ac      	b.n	40872e <_dtoa_r+0x916>
  408bd4:	4615      	mov	r5, r2
  408bd6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  408bda:	1e6a      	subs	r2, r5, #1
  408bdc:	2b30      	cmp	r3, #48	; 0x30
  408bde:	d0f9      	beq.n	408bd4 <_dtoa_r+0xdbc>
  408be0:	e5b5      	b.n	40874e <_dtoa_r+0x936>
  408be2:	2700      	movs	r7, #0
  408be4:	9708      	str	r7, [sp, #32]
  408be6:	f7ff ba4c 	b.w	408082 <_dtoa_r+0x26a>
  408bea:	9e08      	ldr	r6, [sp, #32]
  408bec:	4620      	mov	r0, r4
  408bee:	6871      	ldr	r1, [r6, #4]
  408bf0:	f000 fd20 	bl	409634 <_Balloc>
  408bf4:	6933      	ldr	r3, [r6, #16]
  408bf6:	4605      	mov	r5, r0
  408bf8:	f106 010c 	add.w	r1, r6, #12
  408bfc:	1c9a      	adds	r2, r3, #2
  408bfe:	300c      	adds	r0, #12
  408c00:	0092      	lsls	r2, r2, #2
  408c02:	f7fd fc93 	bl	40652c <memcpy>
  408c06:	4620      	mov	r0, r4
  408c08:	4629      	mov	r1, r5
  408c0a:	2201      	movs	r2, #1
  408c0c:	f000 fed6 	bl	4099bc <__lshift>
  408c10:	4606      	mov	r6, r0
  408c12:	e6b8      	b.n	408986 <_dtoa_r+0xb6e>
  408c14:	9b16      	ldr	r3, [sp, #88]	; 0x58
  408c16:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  408c18:	9d07      	ldr	r5, [sp, #28]
  408c1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  408c1e:	f7ff bb4d 	b.w	4082bc <_dtoa_r+0x4a4>
  408c22:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  408c26:	9706      	str	r7, [sp, #24]
  408c28:	f8cd b020 	str.w	fp, [sp, #32]
  408c2c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408c2e:	d030      	beq.n	408c92 <_dtoa_r+0xe7a>
  408c30:	f10c 0901 	add.w	r9, ip, #1
  408c34:	f8dd a020 	ldr.w	sl, [sp, #32]
  408c38:	f108 0501 	add.w	r5, r8, #1
  408c3c:	9608      	str	r6, [sp, #32]
  408c3e:	f888 9000 	strb.w	r9, [r8]
  408c42:	e584      	b.n	40874e <_dtoa_r+0x936>
  408c44:	9706      	str	r7, [sp, #24]
  408c46:	46e1      	mov	r9, ip
  408c48:	46da      	mov	sl, fp
  408c4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408c4c:	9608      	str	r6, [sp, #32]
  408c4e:	e562      	b.n	408716 <_dtoa_r+0x8fe>
  408c50:	46b0      	mov	r8, r6
  408c52:	e504      	b.n	40865e <_dtoa_r+0x846>
  408c54:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
  408c58:	9706      	str	r7, [sp, #24]
  408c5a:	f8cd b020 	str.w	fp, [sp, #32]
  408c5e:	4655      	mov	r5, sl
  408c60:	46cb      	mov	fp, r9
  408c62:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  408c64:	46e1      	mov	r9, ip
  408c66:	d00b      	beq.n	408c80 <_dtoa_r+0xe68>
  408c68:	2d00      	cmp	r5, #0
  408c6a:	dd01      	ble.n	408c70 <_dtoa_r+0xe58>
  408c6c:	f10b 0931 	add.w	r9, fp, #49	; 0x31
  408c70:	f8dd a020 	ldr.w	sl, [sp, #32]
  408c74:	f108 0501 	add.w	r5, r8, #1
  408c78:	f888 9000 	strb.w	r9, [r8]
  408c7c:	9608      	str	r6, [sp, #32]
  408c7e:	e566      	b.n	40874e <_dtoa_r+0x936>
  408c80:	f8dd a020 	ldr.w	sl, [sp, #32]
  408c84:	9608      	str	r6, [sp, #32]
  408c86:	2239      	movs	r2, #57	; 0x39
  408c88:	f108 0501 	add.w	r5, r8, #1
  408c8c:	f888 2000 	strb.w	r2, [r8]
  408c90:	e54f      	b.n	408732 <_dtoa_r+0x91a>
  408c92:	46da      	mov	sl, fp
  408c94:	9608      	str	r6, [sp, #32]
  408c96:	e7f6      	b.n	408c86 <_dtoa_r+0xe6e>
  408c98:	d18d      	bne.n	408bb6 <_dtoa_r+0xd9e>
  408c9a:	f019 0f01 	tst.w	r9, #1
  408c9e:	d08a      	beq.n	408bb6 <_dtoa_r+0xd9e>
  408ca0:	e784      	b.n	408bac <_dtoa_r+0xd94>
  408ca2:	f04f 0802 	mov.w	r8, #2
  408ca6:	f7ff bb72 	b.w	40838e <_dtoa_r+0x576>
  408caa:	9b10      	ldr	r3, [sp, #64]	; 0x40
  408cac:	9304      	str	r3, [sp, #16]
  408cae:	e50e      	b.n	4086ce <_dtoa_r+0x8b6>
  408cb0:	f43f aa75 	beq.w	40819e <_dtoa_r+0x386>
  408cb4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  408cb8:	f7ff ba6a 	b.w	408190 <_dtoa_r+0x378>
  408cbc:	2501      	movs	r5, #1
  408cbe:	f7ff b982 	b.w	407fc6 <_dtoa_r+0x1ae>
  408cc2:	2500      	movs	r5, #0
  408cc4:	4620      	mov	r0, r4
  408cc6:	6465      	str	r5, [r4, #68]	; 0x44
  408cc8:	4629      	mov	r1, r5
  408cca:	f000 fcb3 	bl	409634 <_Balloc>
  408cce:	9a02      	ldr	r2, [sp, #8]
  408cd0:	9005      	str	r0, [sp, #20]
  408cd2:	2a0e      	cmp	r2, #14
  408cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  408cd6:	6420      	str	r0, [r4, #64]	; 0x40
  408cd8:	f73f aad7 	bgt.w	40828a <_dtoa_r+0x472>
  408cdc:	42ab      	cmp	r3, r5
  408cde:	f6ff aad4 	blt.w	40828a <_dtoa_r+0x472>
  408ce2:	f04f 33ff 	mov.w	r3, #4294967295
  408ce6:	9523      	str	r5, [sp, #140]	; 0x8c
  408ce8:	9304      	str	r3, [sp, #16]
  408cea:	f7ff b9a9 	b.w	408040 <_dtoa_r+0x228>
  408cee:	2301      	movs	r3, #1
  408cf0:	930b      	str	r3, [sp, #44]	; 0x2c
  408cf2:	f7ff bbfa 	b.w	4084ea <_dtoa_r+0x6d2>
  408cf6:	bf00      	nop
  408cf8:	40240000 	.word	0x40240000
  408cfc:	401c0000 	.word	0x401c0000

00408d00 <__libc_fini_array>:
  408d00:	b538      	push	{r3, r4, r5, lr}
  408d02:	4b08      	ldr	r3, [pc, #32]	; (408d24 <__libc_fini_array+0x24>)
  408d04:	4d08      	ldr	r5, [pc, #32]	; (408d28 <__libc_fini_array+0x28>)
  408d06:	1aed      	subs	r5, r5, r3
  408d08:	10ac      	asrs	r4, r5, #2
  408d0a:	bf18      	it	ne
  408d0c:	18ed      	addne	r5, r5, r3
  408d0e:	d005      	beq.n	408d1c <__libc_fini_array+0x1c>
  408d10:	3c01      	subs	r4, #1
  408d12:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  408d16:	4798      	blx	r3
  408d18:	2c00      	cmp	r4, #0
  408d1a:	d1f9      	bne.n	408d10 <__libc_fini_array+0x10>
  408d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  408d20:	f002 b8f8 	b.w	40af14 <_fini>
  408d24:	0040af20 	.word	0x0040af20
  408d28:	0040af24 	.word	0x0040af24

00408d2c <_malloc_trim_r>:
  408d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408d2e:	4f22      	ldr	r7, [pc, #136]	; (408db8 <_malloc_trim_r+0x8c>)
  408d30:	460c      	mov	r4, r1
  408d32:	4606      	mov	r6, r0
  408d34:	f000 fc7a 	bl	40962c <__malloc_lock>
  408d38:	68ba      	ldr	r2, [r7, #8]
  408d3a:	4b20      	ldr	r3, [pc, #128]	; (408dbc <_malloc_trim_r+0x90>)
  408d3c:	6855      	ldr	r5, [r2, #4]
  408d3e:	f025 0503 	bic.w	r5, r5, #3
  408d42:	1b2c      	subs	r4, r5, r4
  408d44:	f604 74ef 	addw	r4, r4, #4079	; 0xfef
  408d48:	4023      	ands	r3, r4
  408d4a:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
  408d4e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  408d52:	db07      	blt.n	408d64 <_malloc_trim_r+0x38>
  408d54:	4630      	mov	r0, r6
  408d56:	2100      	movs	r1, #0
  408d58:	f001 f970 	bl	40a03c <_sbrk_r>
  408d5c:	68bb      	ldr	r3, [r7, #8]
  408d5e:	442b      	add	r3, r5
  408d60:	4298      	cmp	r0, r3
  408d62:	d004      	beq.n	408d6e <_malloc_trim_r+0x42>
  408d64:	4630      	mov	r0, r6
  408d66:	f000 fc63 	bl	409630 <__malloc_unlock>
  408d6a:	2000      	movs	r0, #0
  408d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408d6e:	4630      	mov	r0, r6
  408d70:	4261      	negs	r1, r4
  408d72:	f001 f963 	bl	40a03c <_sbrk_r>
  408d76:	3001      	adds	r0, #1
  408d78:	d00d      	beq.n	408d96 <_malloc_trim_r+0x6a>
  408d7a:	4a11      	ldr	r2, [pc, #68]	; (408dc0 <_malloc_trim_r+0x94>)
  408d7c:	1b2d      	subs	r5, r5, r4
  408d7e:	68b9      	ldr	r1, [r7, #8]
  408d80:	4630      	mov	r0, r6
  408d82:	6813      	ldr	r3, [r2, #0]
  408d84:	f045 0501 	orr.w	r5, r5, #1
  408d88:	1b1b      	subs	r3, r3, r4
  408d8a:	604d      	str	r5, [r1, #4]
  408d8c:	6013      	str	r3, [r2, #0]
  408d8e:	f000 fc4f 	bl	409630 <__malloc_unlock>
  408d92:	2001      	movs	r0, #1
  408d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408d96:	4630      	mov	r0, r6
  408d98:	2100      	movs	r1, #0
  408d9a:	f001 f94f 	bl	40a03c <_sbrk_r>
  408d9e:	68ba      	ldr	r2, [r7, #8]
  408da0:	1a83      	subs	r3, r0, r2
  408da2:	2b0f      	cmp	r3, #15
  408da4:	ddde      	ble.n	408d64 <_malloc_trim_r+0x38>
  408da6:	4c07      	ldr	r4, [pc, #28]	; (408dc4 <_malloc_trim_r+0x98>)
  408da8:	f043 0301 	orr.w	r3, r3, #1
  408dac:	4904      	ldr	r1, [pc, #16]	; (408dc0 <_malloc_trim_r+0x94>)
  408dae:	6824      	ldr	r4, [r4, #0]
  408db0:	6053      	str	r3, [r2, #4]
  408db2:	1b00      	subs	r0, r0, r4
  408db4:	6008      	str	r0, [r1, #0]
  408db6:	e7d5      	b.n	408d64 <_malloc_trim_r+0x38>
  408db8:	20400484 	.word	0x20400484
  408dbc:	fffff000 	.word	0xfffff000
  408dc0:	2040c384 	.word	0x2040c384
  408dc4:	20400890 	.word	0x20400890

00408dc8 <_free_r>:
  408dc8:	2900      	cmp	r1, #0
  408dca:	d04d      	beq.n	408e68 <_free_r+0xa0>
  408dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408dd0:	460c      	mov	r4, r1
  408dd2:	4680      	mov	r8, r0
  408dd4:	f000 fc2a 	bl	40962c <__malloc_lock>
  408dd8:	4963      	ldr	r1, [pc, #396]	; (408f68 <_free_r+0x1a0>)
  408dda:	f854 7c04 	ldr.w	r7, [r4, #-4]
  408dde:	f1a4 0508 	sub.w	r5, r4, #8
  408de2:	688e      	ldr	r6, [r1, #8]
  408de4:	f027 0301 	bic.w	r3, r7, #1
  408de8:	18ea      	adds	r2, r5, r3
  408dea:	6850      	ldr	r0, [r2, #4]
  408dec:	4296      	cmp	r6, r2
  408dee:	f020 0003 	bic.w	r0, r0, #3
  408df2:	d059      	beq.n	408ea8 <_free_r+0xe0>
  408df4:	07fe      	lsls	r6, r7, #31
  408df6:	6050      	str	r0, [r2, #4]
  408df8:	d40b      	bmi.n	408e12 <_free_r+0x4a>
  408dfa:	f854 4c08 	ldr.w	r4, [r4, #-8]
  408dfe:	f101 0708 	add.w	r7, r1, #8
  408e02:	1b2d      	subs	r5, r5, r4
  408e04:	4423      	add	r3, r4
  408e06:	68ac      	ldr	r4, [r5, #8]
  408e08:	42bc      	cmp	r4, r7
  408e0a:	d066      	beq.n	408eda <_free_r+0x112>
  408e0c:	68ef      	ldr	r7, [r5, #12]
  408e0e:	60e7      	str	r7, [r4, #12]
  408e10:	60bc      	str	r4, [r7, #8]
  408e12:	1814      	adds	r4, r2, r0
  408e14:	6864      	ldr	r4, [r4, #4]
  408e16:	07e4      	lsls	r4, r4, #31
  408e18:	d40c      	bmi.n	408e34 <_free_r+0x6c>
  408e1a:	4c54      	ldr	r4, [pc, #336]	; (408f6c <_free_r+0x1a4>)
  408e1c:	4403      	add	r3, r0
  408e1e:	6890      	ldr	r0, [r2, #8]
  408e20:	42a0      	cmp	r0, r4
  408e22:	d07c      	beq.n	408f1e <_free_r+0x156>
  408e24:	68d4      	ldr	r4, [r2, #12]
  408e26:	f043 0201 	orr.w	r2, r3, #1
  408e2a:	60c4      	str	r4, [r0, #12]
  408e2c:	60a0      	str	r0, [r4, #8]
  408e2e:	606a      	str	r2, [r5, #4]
  408e30:	50eb      	str	r3, [r5, r3]
  408e32:	e003      	b.n	408e3c <_free_r+0x74>
  408e34:	f043 0201 	orr.w	r2, r3, #1
  408e38:	606a      	str	r2, [r5, #4]
  408e3a:	50eb      	str	r3, [r5, r3]
  408e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  408e40:	d213      	bcs.n	408e6a <_free_r+0xa2>
  408e42:	08db      	lsrs	r3, r3, #3
  408e44:	2001      	movs	r0, #1
  408e46:	684a      	ldr	r2, [r1, #4]
  408e48:	109c      	asrs	r4, r3, #2
  408e4a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  408e4e:	40a0      	lsls	r0, r4
  408e50:	689c      	ldr	r4, [r3, #8]
  408e52:	4302      	orrs	r2, r0
  408e54:	60eb      	str	r3, [r5, #12]
  408e56:	60ac      	str	r4, [r5, #8]
  408e58:	604a      	str	r2, [r1, #4]
  408e5a:	609d      	str	r5, [r3, #8]
  408e5c:	60e5      	str	r5, [r4, #12]
  408e5e:	4640      	mov	r0, r8
  408e60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408e64:	f000 bbe4 	b.w	409630 <__malloc_unlock>
  408e68:	4770      	bx	lr
  408e6a:	0a5a      	lsrs	r2, r3, #9
  408e6c:	2a04      	cmp	r2, #4
  408e6e:	d847      	bhi.n	408f00 <_free_r+0x138>
  408e70:	099a      	lsrs	r2, r3, #6
  408e72:	f102 0438 	add.w	r4, r2, #56	; 0x38
  408e76:	0060      	lsls	r0, r4, #1
  408e78:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  408e7c:	493a      	ldr	r1, [pc, #232]	; (408f68 <_free_r+0x1a0>)
  408e7e:	6882      	ldr	r2, [r0, #8]
  408e80:	4282      	cmp	r2, r0
  408e82:	d043      	beq.n	408f0c <_free_r+0x144>
  408e84:	6851      	ldr	r1, [r2, #4]
  408e86:	f021 0103 	bic.w	r1, r1, #3
  408e8a:	4299      	cmp	r1, r3
  408e8c:	d902      	bls.n	408e94 <_free_r+0xcc>
  408e8e:	6892      	ldr	r2, [r2, #8]
  408e90:	4290      	cmp	r0, r2
  408e92:	d1f7      	bne.n	408e84 <_free_r+0xbc>
  408e94:	68d3      	ldr	r3, [r2, #12]
  408e96:	60eb      	str	r3, [r5, #12]
  408e98:	4640      	mov	r0, r8
  408e9a:	60aa      	str	r2, [r5, #8]
  408e9c:	609d      	str	r5, [r3, #8]
  408e9e:	60d5      	str	r5, [r2, #12]
  408ea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408ea4:	f000 bbc4 	b.w	409630 <__malloc_unlock>
  408ea8:	07ff      	lsls	r7, r7, #31
  408eaa:	4403      	add	r3, r0
  408eac:	d407      	bmi.n	408ebe <_free_r+0xf6>
  408eae:	f854 2c08 	ldr.w	r2, [r4, #-8]
  408eb2:	1aad      	subs	r5, r5, r2
  408eb4:	4413      	add	r3, r2
  408eb6:	68a8      	ldr	r0, [r5, #8]
  408eb8:	68ea      	ldr	r2, [r5, #12]
  408eba:	60c2      	str	r2, [r0, #12]
  408ebc:	6090      	str	r0, [r2, #8]
  408ebe:	4a2c      	ldr	r2, [pc, #176]	; (408f70 <_free_r+0x1a8>)
  408ec0:	f043 0001 	orr.w	r0, r3, #1
  408ec4:	6812      	ldr	r2, [r2, #0]
  408ec6:	6068      	str	r0, [r5, #4]
  408ec8:	4293      	cmp	r3, r2
  408eca:	608d      	str	r5, [r1, #8]
  408ecc:	d3c7      	bcc.n	408e5e <_free_r+0x96>
  408ece:	4b29      	ldr	r3, [pc, #164]	; (408f74 <_free_r+0x1ac>)
  408ed0:	4640      	mov	r0, r8
  408ed2:	6819      	ldr	r1, [r3, #0]
  408ed4:	f7ff ff2a 	bl	408d2c <_malloc_trim_r>
  408ed8:	e7c1      	b.n	408e5e <_free_r+0x96>
  408eda:	1811      	adds	r1, r2, r0
  408edc:	6849      	ldr	r1, [r1, #4]
  408ede:	07c9      	lsls	r1, r1, #31
  408ee0:	d409      	bmi.n	408ef6 <_free_r+0x12e>
  408ee2:	4403      	add	r3, r0
  408ee4:	68d1      	ldr	r1, [r2, #12]
  408ee6:	6892      	ldr	r2, [r2, #8]
  408ee8:	f043 0001 	orr.w	r0, r3, #1
  408eec:	60d1      	str	r1, [r2, #12]
  408eee:	608a      	str	r2, [r1, #8]
  408ef0:	6068      	str	r0, [r5, #4]
  408ef2:	50eb      	str	r3, [r5, r3]
  408ef4:	e7b3      	b.n	408e5e <_free_r+0x96>
  408ef6:	f043 0201 	orr.w	r2, r3, #1
  408efa:	606a      	str	r2, [r5, #4]
  408efc:	50eb      	str	r3, [r5, r3]
  408efe:	e7ae      	b.n	408e5e <_free_r+0x96>
  408f00:	2a14      	cmp	r2, #20
  408f02:	d815      	bhi.n	408f30 <_free_r+0x168>
  408f04:	f102 045b 	add.w	r4, r2, #91	; 0x5b
  408f08:	0060      	lsls	r0, r4, #1
  408f0a:	e7b5      	b.n	408e78 <_free_r+0xb0>
  408f0c:	10a4      	asrs	r4, r4, #2
  408f0e:	2701      	movs	r7, #1
  408f10:	6848      	ldr	r0, [r1, #4]
  408f12:	4613      	mov	r3, r2
  408f14:	fa07 f404 	lsl.w	r4, r7, r4
  408f18:	4320      	orrs	r0, r4
  408f1a:	6048      	str	r0, [r1, #4]
  408f1c:	e7bb      	b.n	408e96 <_free_r+0xce>
  408f1e:	f043 0201 	orr.w	r2, r3, #1
  408f22:	614d      	str	r5, [r1, #20]
  408f24:	610d      	str	r5, [r1, #16]
  408f26:	60e8      	str	r0, [r5, #12]
  408f28:	60a8      	str	r0, [r5, #8]
  408f2a:	606a      	str	r2, [r5, #4]
  408f2c:	50eb      	str	r3, [r5, r3]
  408f2e:	e796      	b.n	408e5e <_free_r+0x96>
  408f30:	2a54      	cmp	r2, #84	; 0x54
  408f32:	d804      	bhi.n	408f3e <_free_r+0x176>
  408f34:	0b1a      	lsrs	r2, r3, #12
  408f36:	f102 046e 	add.w	r4, r2, #110	; 0x6e
  408f3a:	0060      	lsls	r0, r4, #1
  408f3c:	e79c      	b.n	408e78 <_free_r+0xb0>
  408f3e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  408f42:	d804      	bhi.n	408f4e <_free_r+0x186>
  408f44:	0bda      	lsrs	r2, r3, #15
  408f46:	f102 0477 	add.w	r4, r2, #119	; 0x77
  408f4a:	0060      	lsls	r0, r4, #1
  408f4c:	e794      	b.n	408e78 <_free_r+0xb0>
  408f4e:	f240 5054 	movw	r0, #1364	; 0x554
  408f52:	4282      	cmp	r2, r0
  408f54:	d804      	bhi.n	408f60 <_free_r+0x198>
  408f56:	0c9a      	lsrs	r2, r3, #18
  408f58:	f102 047c 	add.w	r4, r2, #124	; 0x7c
  408f5c:	0060      	lsls	r0, r4, #1
  408f5e:	e78b      	b.n	408e78 <_free_r+0xb0>
  408f60:	20fc      	movs	r0, #252	; 0xfc
  408f62:	247e      	movs	r4, #126	; 0x7e
  408f64:	e788      	b.n	408e78 <_free_r+0xb0>
  408f66:	bf00      	nop
  408f68:	20400484 	.word	0x20400484
  408f6c:	2040048c 	.word	0x2040048c
  408f70:	2040088c 	.word	0x2040088c
  408f74:	2040c380 	.word	0x2040c380

00408f78 <_localeconv_r>:
  408f78:	4800      	ldr	r0, [pc, #0]	; (408f7c <_localeconv_r+0x4>)
  408f7a:	4770      	bx	lr
  408f7c:	2040044c 	.word	0x2040044c

00408f80 <_malloc_r>:
  408f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f84:	f101 040b 	add.w	r4, r1, #11
  408f88:	b083      	sub	sp, #12
  408f8a:	4605      	mov	r5, r0
  408f8c:	2c16      	cmp	r4, #22
  408f8e:	d927      	bls.n	408fe0 <_malloc_r+0x60>
  408f90:	f034 0407 	bics.w	r4, r4, #7
  408f94:	d42a      	bmi.n	408fec <_malloc_r+0x6c>
  408f96:	42a1      	cmp	r1, r4
  408f98:	d828      	bhi.n	408fec <_malloc_r+0x6c>
  408f9a:	f000 fb47 	bl	40962c <__malloc_lock>
  408f9e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
  408fa2:	d22b      	bcs.n	408ffc <_malloc_r+0x7c>
  408fa4:	ea4f 0cd4 	mov.w	ip, r4, lsr #3
  408fa8:	4ec0      	ldr	r6, [pc, #768]	; (4092ac <_malloc_r+0x32c>)
  408faa:	eb06 02cc 	add.w	r2, r6, ip, lsl #3
  408fae:	68d3      	ldr	r3, [r2, #12]
  408fb0:	4293      	cmp	r3, r2
  408fb2:	f000 8171 	beq.w	409298 <_malloc_r+0x318>
  408fb6:	685a      	ldr	r2, [r3, #4]
  408fb8:	f103 0808 	add.w	r8, r3, #8
  408fbc:	68d9      	ldr	r1, [r3, #12]
  408fbe:	4628      	mov	r0, r5
  408fc0:	f022 0203 	bic.w	r2, r2, #3
  408fc4:	689c      	ldr	r4, [r3, #8]
  408fc6:	4413      	add	r3, r2
  408fc8:	60e1      	str	r1, [r4, #12]
  408fca:	608c      	str	r4, [r1, #8]
  408fcc:	685a      	ldr	r2, [r3, #4]
  408fce:	f042 0201 	orr.w	r2, r2, #1
  408fd2:	605a      	str	r2, [r3, #4]
  408fd4:	f000 fb2c 	bl	409630 <__malloc_unlock>
  408fd8:	4640      	mov	r0, r8
  408fda:	b003      	add	sp, #12
  408fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408fe0:	2910      	cmp	r1, #16
  408fe2:	d803      	bhi.n	408fec <_malloc_r+0x6c>
  408fe4:	f000 fb22 	bl	40962c <__malloc_lock>
  408fe8:	2410      	movs	r4, #16
  408fea:	e7db      	b.n	408fa4 <_malloc_r+0x24>
  408fec:	f04f 0800 	mov.w	r8, #0
  408ff0:	230c      	movs	r3, #12
  408ff2:	4640      	mov	r0, r8
  408ff4:	602b      	str	r3, [r5, #0]
  408ff6:	b003      	add	sp, #12
  408ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408ffc:	ea5f 2c54 	movs.w	ip, r4, lsr #9
  409000:	f000 8089 	beq.w	409116 <_malloc_r+0x196>
  409004:	f1bc 0f04 	cmp.w	ip, #4
  409008:	f200 80c4 	bhi.w	409194 <_malloc_r+0x214>
  40900c:	ea4f 1c94 	mov.w	ip, r4, lsr #6
  409010:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
  409014:	ea4f 004c 	mov.w	r0, ip, lsl #1
  409018:	4ea4      	ldr	r6, [pc, #656]	; (4092ac <_malloc_r+0x32c>)
  40901a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  40901e:	68c3      	ldr	r3, [r0, #12]
  409020:	4298      	cmp	r0, r3
  409022:	d105      	bne.n	409030 <_malloc_r+0xb0>
  409024:	e00c      	b.n	409040 <_malloc_r+0xc0>
  409026:	2900      	cmp	r1, #0
  409028:	da79      	bge.n	40911e <_malloc_r+0x19e>
  40902a:	68db      	ldr	r3, [r3, #12]
  40902c:	4298      	cmp	r0, r3
  40902e:	d007      	beq.n	409040 <_malloc_r+0xc0>
  409030:	685a      	ldr	r2, [r3, #4]
  409032:	f022 0203 	bic.w	r2, r2, #3
  409036:	1b11      	subs	r1, r2, r4
  409038:	290f      	cmp	r1, #15
  40903a:	ddf4      	ble.n	409026 <_malloc_r+0xa6>
  40903c:	f10c 3cff 	add.w	ip, ip, #4294967295
  409040:	f10c 0c01 	add.w	ip, ip, #1
  409044:	4f99      	ldr	r7, [pc, #612]	; (4092ac <_malloc_r+0x32c>)
  409046:	6933      	ldr	r3, [r6, #16]
  409048:	f107 0e08 	add.w	lr, r7, #8
  40904c:	4573      	cmp	r3, lr
  40904e:	f000 8119 	beq.w	409284 <_malloc_r+0x304>
  409052:	685a      	ldr	r2, [r3, #4]
  409054:	f022 0203 	bic.w	r2, r2, #3
  409058:	1b11      	subs	r1, r2, r4
  40905a:	290f      	cmp	r1, #15
  40905c:	f300 80ca 	bgt.w	4091f4 <_malloc_r+0x274>
  409060:	2900      	cmp	r1, #0
  409062:	f8c7 e014 	str.w	lr, [r7, #20]
  409066:	f8c7 e010 	str.w	lr, [r7, #16]
  40906a:	da6a      	bge.n	409142 <_malloc_r+0x1c2>
  40906c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  409070:	f080 809f 	bcs.w	4091b2 <_malloc_r+0x232>
  409074:	08d2      	lsrs	r2, r2, #3
  409076:	2001      	movs	r0, #1
  409078:	6879      	ldr	r1, [r7, #4]
  40907a:	ea4f 08a2 	mov.w	r8, r2, asr #2
  40907e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
  409082:	fa00 f008 	lsl.w	r0, r0, r8
  409086:	f8d2 8008 	ldr.w	r8, [r2, #8]
  40908a:	4308      	orrs	r0, r1
  40908c:	60da      	str	r2, [r3, #12]
  40908e:	f8c3 8008 	str.w	r8, [r3, #8]
  409092:	6078      	str	r0, [r7, #4]
  409094:	6093      	str	r3, [r2, #8]
  409096:	f8c8 300c 	str.w	r3, [r8, #12]
  40909a:	ea4f 03ac 	mov.w	r3, ip, asr #2
  40909e:	2101      	movs	r1, #1
  4090a0:	4099      	lsls	r1, r3
  4090a2:	4281      	cmp	r1, r0
  4090a4:	d85b      	bhi.n	40915e <_malloc_r+0x1de>
  4090a6:	4208      	tst	r0, r1
  4090a8:	d106      	bne.n	4090b8 <_malloc_r+0x138>
  4090aa:	f02c 0c03 	bic.w	ip, ip, #3
  4090ae:	0049      	lsls	r1, r1, #1
  4090b0:	f10c 0c04 	add.w	ip, ip, #4
  4090b4:	4208      	tst	r0, r1
  4090b6:	d0fa      	beq.n	4090ae <_malloc_r+0x12e>
  4090b8:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
  4090bc:	46e1      	mov	r9, ip
  4090be:	4640      	mov	r0, r8
  4090c0:	68c7      	ldr	r7, [r0, #12]
  4090c2:	42b8      	cmp	r0, r7
  4090c4:	d107      	bne.n	4090d6 <_malloc_r+0x156>
  4090c6:	e0df      	b.n	409288 <_malloc_r+0x308>
  4090c8:	2a00      	cmp	r2, #0
  4090ca:	f280 80f7 	bge.w	4092bc <_malloc_r+0x33c>
  4090ce:	68ff      	ldr	r7, [r7, #12]
  4090d0:	42b8      	cmp	r0, r7
  4090d2:	f000 80d9 	beq.w	409288 <_malloc_r+0x308>
  4090d6:	687b      	ldr	r3, [r7, #4]
  4090d8:	f023 0303 	bic.w	r3, r3, #3
  4090dc:	1b1a      	subs	r2, r3, r4
  4090de:	2a0f      	cmp	r2, #15
  4090e0:	ddf2      	ble.n	4090c8 <_malloc_r+0x148>
  4090e2:	46b8      	mov	r8, r7
  4090e4:	68fb      	ldr	r3, [r7, #12]
  4090e6:	f044 0901 	orr.w	r9, r4, #1
  4090ea:	f042 0c01 	orr.w	ip, r2, #1
  4090ee:	f858 1f08 	ldr.w	r1, [r8, #8]!
  4090f2:	443c      	add	r4, r7
  4090f4:	f8c7 9004 	str.w	r9, [r7, #4]
  4090f8:	4628      	mov	r0, r5
  4090fa:	60cb      	str	r3, [r1, #12]
  4090fc:	6099      	str	r1, [r3, #8]
  4090fe:	6174      	str	r4, [r6, #20]
  409100:	6134      	str	r4, [r6, #16]
  409102:	f8c4 e00c 	str.w	lr, [r4, #12]
  409106:	f8c4 e008 	str.w	lr, [r4, #8]
  40910a:	f8c4 c004 	str.w	ip, [r4, #4]
  40910e:	50a2      	str	r2, [r4, r2]
  409110:	f000 fa8e 	bl	409630 <__malloc_unlock>
  409114:	e760      	b.n	408fd8 <_malloc_r+0x58>
  409116:	207e      	movs	r0, #126	; 0x7e
  409118:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
  40911c:	e77c      	b.n	409018 <_malloc_r+0x98>
  40911e:	441a      	add	r2, r3
  409120:	68dc      	ldr	r4, [r3, #12]
  409122:	689e      	ldr	r6, [r3, #8]
  409124:	f103 0808 	add.w	r8, r3, #8
  409128:	6851      	ldr	r1, [r2, #4]
  40912a:	4628      	mov	r0, r5
  40912c:	60f4      	str	r4, [r6, #12]
  40912e:	f041 0301 	orr.w	r3, r1, #1
  409132:	60a6      	str	r6, [r4, #8]
  409134:	6053      	str	r3, [r2, #4]
  409136:	f000 fa7b 	bl	409630 <__malloc_unlock>
  40913a:	4640      	mov	r0, r8
  40913c:	b003      	add	sp, #12
  40913e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409142:	441a      	add	r2, r3
  409144:	f103 0808 	add.w	r8, r3, #8
  409148:	4628      	mov	r0, r5
  40914a:	6853      	ldr	r3, [r2, #4]
  40914c:	f043 0301 	orr.w	r3, r3, #1
  409150:	6053      	str	r3, [r2, #4]
  409152:	f000 fa6d 	bl	409630 <__malloc_unlock>
  409156:	4640      	mov	r0, r8
  409158:	b003      	add	sp, #12
  40915a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40915e:	68b7      	ldr	r7, [r6, #8]
  409160:	687a      	ldr	r2, [r7, #4]
  409162:	f022 0803 	bic.w	r8, r2, #3
  409166:	ebc4 0208 	rsb	r2, r4, r8
  40916a:	2a0f      	cmp	r2, #15
  40916c:	dd56      	ble.n	40921c <_malloc_r+0x29c>
  40916e:	45a0      	cmp	r8, r4
  409170:	d354      	bcc.n	40921c <_malloc_r+0x29c>
  409172:	f044 0301 	orr.w	r3, r4, #1
  409176:	f042 0201 	orr.w	r2, r2, #1
  40917a:	443c      	add	r4, r7
  40917c:	f107 0808 	add.w	r8, r7, #8
  409180:	607b      	str	r3, [r7, #4]
  409182:	4628      	mov	r0, r5
  409184:	60b4      	str	r4, [r6, #8]
  409186:	6062      	str	r2, [r4, #4]
  409188:	f000 fa52 	bl	409630 <__malloc_unlock>
  40918c:	4640      	mov	r0, r8
  40918e:	b003      	add	sp, #12
  409190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409194:	f1bc 0f14 	cmp.w	ip, #20
  409198:	f240 809f 	bls.w	4092da <_malloc_r+0x35a>
  40919c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
  4091a0:	f200 8127 	bhi.w	4093f2 <_malloc_r+0x472>
  4091a4:	ea4f 3c14 	mov.w	ip, r4, lsr #12
  4091a8:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
  4091ac:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4091b0:	e732      	b.n	409018 <_malloc_r+0x98>
  4091b2:	0a51      	lsrs	r1, r2, #9
  4091b4:	2904      	cmp	r1, #4
  4091b6:	f240 8095 	bls.w	4092e4 <_malloc_r+0x364>
  4091ba:	2914      	cmp	r1, #20
  4091bc:	f200 8142 	bhi.w	409444 <_malloc_r+0x4c4>
  4091c0:	f101 075b 	add.w	r7, r1, #91	; 0x5b
  4091c4:	0078      	lsls	r0, r7, #1
  4091c6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4091ca:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 4092ac <_malloc_r+0x32c>
  4091ce:	6881      	ldr	r1, [r0, #8]
  4091d0:	4281      	cmp	r1, r0
  4091d2:	f000 811b 	beq.w	40940c <_malloc_r+0x48c>
  4091d6:	684f      	ldr	r7, [r1, #4]
  4091d8:	f027 0703 	bic.w	r7, r7, #3
  4091dc:	42ba      	cmp	r2, r7
  4091de:	d202      	bcs.n	4091e6 <_malloc_r+0x266>
  4091e0:	6889      	ldr	r1, [r1, #8]
  4091e2:	4288      	cmp	r0, r1
  4091e4:	d1f7      	bne.n	4091d6 <_malloc_r+0x256>
  4091e6:	68ca      	ldr	r2, [r1, #12]
  4091e8:	6870      	ldr	r0, [r6, #4]
  4091ea:	60da      	str	r2, [r3, #12]
  4091ec:	6099      	str	r1, [r3, #8]
  4091ee:	6093      	str	r3, [r2, #8]
  4091f0:	60cb      	str	r3, [r1, #12]
  4091f2:	e752      	b.n	40909a <_malloc_r+0x11a>
  4091f4:	f044 0601 	orr.w	r6, r4, #1
  4091f8:	f041 0201 	orr.w	r2, r1, #1
  4091fc:	441c      	add	r4, r3
  4091fe:	4628      	mov	r0, r5
  409200:	605e      	str	r6, [r3, #4]
  409202:	f103 0808 	add.w	r8, r3, #8
  409206:	617c      	str	r4, [r7, #20]
  409208:	613c      	str	r4, [r7, #16]
  40920a:	f8c4 e00c 	str.w	lr, [r4, #12]
  40920e:	f8c4 e008 	str.w	lr, [r4, #8]
  409212:	6062      	str	r2, [r4, #4]
  409214:	5061      	str	r1, [r4, r1]
  409216:	f000 fa0b 	bl	409630 <__malloc_unlock>
  40921a:	e6dd      	b.n	408fd8 <_malloc_r+0x58>
  40921c:	4a24      	ldr	r2, [pc, #144]	; (4092b0 <_malloc_r+0x330>)
  40921e:	4b25      	ldr	r3, [pc, #148]	; (4092b4 <_malloc_r+0x334>)
  409220:	6811      	ldr	r1, [r2, #0]
  409222:	681b      	ldr	r3, [r3, #0]
  409224:	3101      	adds	r1, #1
  409226:	4423      	add	r3, r4
  409228:	f000 8109 	beq.w	40943e <_malloc_r+0x4be>
  40922c:	f241 010f 	movw	r1, #4111	; 0x100f
  409230:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4092b8 <_malloc_r+0x338>
  409234:	4419      	add	r1, r3
  409236:	ea01 0909 	and.w	r9, r1, r9
  40923a:	4628      	mov	r0, r5
  40923c:	4649      	mov	r1, r9
  40923e:	9201      	str	r2, [sp, #4]
  409240:	f000 fefc 	bl	40a03c <_sbrk_r>
  409244:	f1b0 3fff 	cmp.w	r0, #4294967295
  409248:	4682      	mov	sl, r0
  40924a:	9a01      	ldr	r2, [sp, #4]
  40924c:	f000 8101 	beq.w	409452 <_malloc_r+0x4d2>
  409250:	1bbb      	subs	r3, r7, r6
  409252:	eb07 0108 	add.w	r1, r7, r8
  409256:	4815      	ldr	r0, [pc, #84]	; (4092ac <_malloc_r+0x32c>)
  409258:	bf18      	it	ne
  40925a:	2301      	movne	r3, #1
  40925c:	4551      	cmp	r1, sl
  40925e:	d967      	bls.n	409330 <_malloc_r+0x3b0>
  409260:	2b00      	cmp	r3, #0
  409262:	d065      	beq.n	409330 <_malloc_r+0x3b0>
  409264:	6887      	ldr	r7, [r0, #8]
  409266:	687b      	ldr	r3, [r7, #4]
  409268:	f023 0303 	bic.w	r3, r3, #3
  40926c:	1b1a      	subs	r2, r3, r4
  40926e:	2a0f      	cmp	r2, #15
  409270:	dd02      	ble.n	409278 <_malloc_r+0x2f8>
  409272:	429c      	cmp	r4, r3
  409274:	f67f af7d 	bls.w	409172 <_malloc_r+0x1f2>
  409278:	4628      	mov	r0, r5
  40927a:	f04f 0800 	mov.w	r8, #0
  40927e:	f000 f9d7 	bl	409630 <__malloc_unlock>
  409282:	e6a9      	b.n	408fd8 <_malloc_r+0x58>
  409284:	6878      	ldr	r0, [r7, #4]
  409286:	e708      	b.n	40909a <_malloc_r+0x11a>
  409288:	f109 0901 	add.w	r9, r9, #1
  40928c:	3008      	adds	r0, #8
  40928e:	f019 0f03 	tst.w	r9, #3
  409292:	f47f af15 	bne.w	4090c0 <_malloc_r+0x140>
  409296:	e02f      	b.n	4092f8 <_malloc_r+0x378>
  409298:	f103 0208 	add.w	r2, r3, #8
  40929c:	695b      	ldr	r3, [r3, #20]
  40929e:	429a      	cmp	r2, r3
  4092a0:	bf08      	it	eq
  4092a2:	f10c 0c02 	addeq.w	ip, ip, #2
  4092a6:	f43f aecd 	beq.w	409044 <_malloc_r+0xc4>
  4092aa:	e684      	b.n	408fb6 <_malloc_r+0x36>
  4092ac:	20400484 	.word	0x20400484
  4092b0:	20400890 	.word	0x20400890
  4092b4:	2040c380 	.word	0x2040c380
  4092b8:	fffff000 	.word	0xfffff000
  4092bc:	18fa      	adds	r2, r7, r3
  4092be:	46b8      	mov	r8, r7
  4092c0:	68f9      	ldr	r1, [r7, #12]
  4092c2:	4628      	mov	r0, r5
  4092c4:	6853      	ldr	r3, [r2, #4]
  4092c6:	f858 4f08 	ldr.w	r4, [r8, #8]!
  4092ca:	f043 0301 	orr.w	r3, r3, #1
  4092ce:	6053      	str	r3, [r2, #4]
  4092d0:	60e1      	str	r1, [r4, #12]
  4092d2:	608c      	str	r4, [r1, #8]
  4092d4:	f000 f9ac 	bl	409630 <__malloc_unlock>
  4092d8:	e67e      	b.n	408fd8 <_malloc_r+0x58>
  4092da:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
  4092de:	ea4f 004c 	mov.w	r0, ip, lsl #1
  4092e2:	e699      	b.n	409018 <_malloc_r+0x98>
  4092e4:	0991      	lsrs	r1, r2, #6
  4092e6:	f101 0738 	add.w	r7, r1, #56	; 0x38
  4092ea:	0078      	lsls	r0, r7, #1
  4092ec:	e76b      	b.n	4091c6 <_malloc_r+0x246>
  4092ee:	f8d8 8000 	ldr.w	r8, [r8]
  4092f2:	4598      	cmp	r8, r3
  4092f4:	f040 80e6 	bne.w	4094c4 <_malloc_r+0x544>
  4092f8:	f01c 0f03 	tst.w	ip, #3
  4092fc:	f1a8 0308 	sub.w	r3, r8, #8
  409300:	f10c 3cff 	add.w	ip, ip, #4294967295
  409304:	d1f3      	bne.n	4092ee <_malloc_r+0x36e>
  409306:	6873      	ldr	r3, [r6, #4]
  409308:	ea23 0301 	bic.w	r3, r3, r1
  40930c:	6073      	str	r3, [r6, #4]
  40930e:	0049      	lsls	r1, r1, #1
  409310:	4299      	cmp	r1, r3
  409312:	f63f af24 	bhi.w	40915e <_malloc_r+0x1de>
  409316:	2900      	cmp	r1, #0
  409318:	f43f af21 	beq.w	40915e <_malloc_r+0x1de>
  40931c:	420b      	tst	r3, r1
  40931e:	46cc      	mov	ip, r9
  409320:	f47f aeca 	bne.w	4090b8 <_malloc_r+0x138>
  409324:	0049      	lsls	r1, r1, #1
  409326:	f10c 0c04 	add.w	ip, ip, #4
  40932a:	420b      	tst	r3, r1
  40932c:	d0fa      	beq.n	409324 <_malloc_r+0x3a4>
  40932e:	e6c3      	b.n	4090b8 <_malloc_r+0x138>
  409330:	f8df b19c 	ldr.w	fp, [pc, #412]	; 4094d0 <_malloc_r+0x550>
  409334:	4551      	cmp	r1, sl
  409336:	f8db 0000 	ldr.w	r0, [fp]
  40933a:	4448      	add	r0, r9
  40933c:	f8cb 0000 	str.w	r0, [fp]
  409340:	f000 808c 	beq.w	40945c <_malloc_r+0x4dc>
  409344:	6812      	ldr	r2, [r2, #0]
  409346:	f8df e18c 	ldr.w	lr, [pc, #396]	; 4094d4 <_malloc_r+0x554>
  40934a:	3201      	adds	r2, #1
  40934c:	f000 80a3 	beq.w	409496 <_malloc_r+0x516>
  409350:	ebc1 010a 	rsb	r1, r1, sl
  409354:	4408      	add	r0, r1
  409356:	f8cb 0000 	str.w	r0, [fp]
  40935a:	f01a 0107 	ands.w	r1, sl, #7
  40935e:	d052      	beq.n	409406 <_malloc_r+0x486>
  409360:	f1c1 0008 	rsb	r0, r1, #8
  409364:	f241 0208 	movw	r2, #4104	; 0x1008
  409368:	4482      	add	sl, r0
  40936a:	1a52      	subs	r2, r2, r1
  40936c:	eb0a 0109 	add.w	r1, sl, r9
  409370:	4628      	mov	r0, r5
  409372:	9301      	str	r3, [sp, #4]
  409374:	f3c1 010b 	ubfx	r1, r1, #0, #12
  409378:	ebc1 0902 	rsb	r9, r1, r2
  40937c:	4649      	mov	r1, r9
  40937e:	f000 fe5d 	bl	40a03c <_sbrk_r>
  409382:	1c43      	adds	r3, r0, #1
  409384:	9b01      	ldr	r3, [sp, #4]
  409386:	d07a      	beq.n	40947e <_malloc_r+0x4fe>
  409388:	ebca 0200 	rsb	r2, sl, r0
  40938c:	444a      	add	r2, r9
  40938e:	f042 0201 	orr.w	r2, r2, #1
  409392:	f8db 0000 	ldr.w	r0, [fp]
  409396:	f8c6 a008 	str.w	sl, [r6, #8]
  40939a:	4448      	add	r0, r9
  40939c:	f8ca 2004 	str.w	r2, [sl, #4]
  4093a0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4094d0 <_malloc_r+0x550>
  4093a4:	f8cb 0000 	str.w	r0, [fp]
  4093a8:	b1a3      	cbz	r3, 4093d4 <_malloc_r+0x454>
  4093aa:	f1b8 0f0f 	cmp.w	r8, #15
  4093ae:	d937      	bls.n	409420 <_malloc_r+0x4a0>
  4093b0:	687b      	ldr	r3, [r7, #4]
  4093b2:	f1a8 020c 	sub.w	r2, r8, #12
  4093b6:	f04f 0e05 	mov.w	lr, #5
  4093ba:	f022 0207 	bic.w	r2, r2, #7
  4093be:	f003 0301 	and.w	r3, r3, #1
  4093c2:	18b9      	adds	r1, r7, r2
  4093c4:	4313      	orrs	r3, r2
  4093c6:	2a0f      	cmp	r2, #15
  4093c8:	607b      	str	r3, [r7, #4]
  4093ca:	f8c1 e004 	str.w	lr, [r1, #4]
  4093ce:	f8c1 e008 	str.w	lr, [r1, #8]
  4093d2:	d858      	bhi.n	409486 <_malloc_r+0x506>
  4093d4:	4b3c      	ldr	r3, [pc, #240]	; (4094c8 <_malloc_r+0x548>)
  4093d6:	681a      	ldr	r2, [r3, #0]
  4093d8:	4290      	cmp	r0, r2
  4093da:	d900      	bls.n	4093de <_malloc_r+0x45e>
  4093dc:	6018      	str	r0, [r3, #0]
  4093de:	4b3b      	ldr	r3, [pc, #236]	; (4094cc <_malloc_r+0x54c>)
  4093e0:	68b7      	ldr	r7, [r6, #8]
  4093e2:	681a      	ldr	r2, [r3, #0]
  4093e4:	4290      	cmp	r0, r2
  4093e6:	d900      	bls.n	4093ea <_malloc_r+0x46a>
  4093e8:	6018      	str	r0, [r3, #0]
  4093ea:	687b      	ldr	r3, [r7, #4]
  4093ec:	f023 0303 	bic.w	r3, r3, #3
  4093f0:	e73c      	b.n	40926c <_malloc_r+0x2ec>
  4093f2:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
  4093f6:	d817      	bhi.n	409428 <_malloc_r+0x4a8>
  4093f8:	ea4f 3cd4 	mov.w	ip, r4, lsr #15
  4093fc:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
  409400:	ea4f 004c 	mov.w	r0, ip, lsl #1
  409404:	e608      	b.n	409018 <_malloc_r+0x98>
  409406:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40940a:	e7af      	b.n	40936c <_malloc_r+0x3ec>
  40940c:	10bf      	asrs	r7, r7, #2
  40940e:	2001      	movs	r0, #1
  409410:	460a      	mov	r2, r1
  409412:	40b8      	lsls	r0, r7
  409414:	f8d9 7004 	ldr.w	r7, [r9, #4]
  409418:	4338      	orrs	r0, r7
  40941a:	f8c9 0004 	str.w	r0, [r9, #4]
  40941e:	e6e4      	b.n	4091ea <_malloc_r+0x26a>
  409420:	2301      	movs	r3, #1
  409422:	f8ca 3004 	str.w	r3, [sl, #4]
  409426:	e727      	b.n	409278 <_malloc_r+0x2f8>
  409428:	f240 5354 	movw	r3, #1364	; 0x554
  40942c:	459c      	cmp	ip, r3
  40942e:	d822      	bhi.n	409476 <_malloc_r+0x4f6>
  409430:	ea4f 4c94 	mov.w	ip, r4, lsr #18
  409434:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
  409438:	ea4f 004c 	mov.w	r0, ip, lsl #1
  40943c:	e5ec      	b.n	409018 <_malloc_r+0x98>
  40943e:	f103 0910 	add.w	r9, r3, #16
  409442:	e6fa      	b.n	40923a <_malloc_r+0x2ba>
  409444:	2954      	cmp	r1, #84	; 0x54
  409446:	d829      	bhi.n	40949c <_malloc_r+0x51c>
  409448:	0b11      	lsrs	r1, r2, #12
  40944a:	f101 076e 	add.w	r7, r1, #110	; 0x6e
  40944e:	0078      	lsls	r0, r7, #1
  409450:	e6b9      	b.n	4091c6 <_malloc_r+0x246>
  409452:	68b7      	ldr	r7, [r6, #8]
  409454:	687b      	ldr	r3, [r7, #4]
  409456:	f023 0303 	bic.w	r3, r3, #3
  40945a:	e707      	b.n	40926c <_malloc_r+0x2ec>
  40945c:	f3c1 0e0b 	ubfx	lr, r1, #0, #12
  409460:	f1be 0f00 	cmp.w	lr, #0
  409464:	f47f af6e 	bne.w	409344 <_malloc_r+0x3c4>
  409468:	eb09 0308 	add.w	r3, r9, r8
  40946c:	68b2      	ldr	r2, [r6, #8]
  40946e:	f043 0301 	orr.w	r3, r3, #1
  409472:	6053      	str	r3, [r2, #4]
  409474:	e7ae      	b.n	4093d4 <_malloc_r+0x454>
  409476:	20fc      	movs	r0, #252	; 0xfc
  409478:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
  40947c:	e5cc      	b.n	409018 <_malloc_r+0x98>
  40947e:	2201      	movs	r2, #1
  409480:	f04f 0900 	mov.w	r9, #0
  409484:	e785      	b.n	409392 <_malloc_r+0x412>
  409486:	4628      	mov	r0, r5
  409488:	f107 0108 	add.w	r1, r7, #8
  40948c:	f7ff fc9c 	bl	408dc8 <_free_r>
  409490:	f8d9 0000 	ldr.w	r0, [r9]
  409494:	e79e      	b.n	4093d4 <_malloc_r+0x454>
  409496:	f8ce a000 	str.w	sl, [lr]
  40949a:	e75e      	b.n	40935a <_malloc_r+0x3da>
  40949c:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
  4094a0:	d804      	bhi.n	4094ac <_malloc_r+0x52c>
  4094a2:	0bd1      	lsrs	r1, r2, #15
  4094a4:	f101 0777 	add.w	r7, r1, #119	; 0x77
  4094a8:	0078      	lsls	r0, r7, #1
  4094aa:	e68c      	b.n	4091c6 <_malloc_r+0x246>
  4094ac:	f240 5054 	movw	r0, #1364	; 0x554
  4094b0:	4281      	cmp	r1, r0
  4094b2:	d804      	bhi.n	4094be <_malloc_r+0x53e>
  4094b4:	0c91      	lsrs	r1, r2, #18
  4094b6:	f101 077c 	add.w	r7, r1, #124	; 0x7c
  4094ba:	0078      	lsls	r0, r7, #1
  4094bc:	e683      	b.n	4091c6 <_malloc_r+0x246>
  4094be:	20fc      	movs	r0, #252	; 0xfc
  4094c0:	277e      	movs	r7, #126	; 0x7e
  4094c2:	e680      	b.n	4091c6 <_malloc_r+0x246>
  4094c4:	6873      	ldr	r3, [r6, #4]
  4094c6:	e722      	b.n	40930e <_malloc_r+0x38e>
  4094c8:	2040c37c 	.word	0x2040c37c
  4094cc:	2040c378 	.word	0x2040c378
  4094d0:	2040c384 	.word	0x2040c384
  4094d4:	20400890 	.word	0x20400890

004094d8 <memchr>:
  4094d8:	0783      	lsls	r3, r0, #30
  4094da:	b2c9      	uxtb	r1, r1
  4094dc:	b470      	push	{r4, r5, r6}
  4094de:	d03f      	beq.n	409560 <memchr+0x88>
  4094e0:	1e54      	subs	r4, r2, #1
  4094e2:	2a00      	cmp	r2, #0
  4094e4:	d03e      	beq.n	409564 <memchr+0x8c>
  4094e6:	7803      	ldrb	r3, [r0, #0]
  4094e8:	428b      	cmp	r3, r1
  4094ea:	bf18      	it	ne
  4094ec:	1c43      	addne	r3, r0, #1
  4094ee:	d105      	bne.n	4094fc <memchr+0x24>
  4094f0:	e01c      	b.n	40952c <memchr+0x54>
  4094f2:	b1ec      	cbz	r4, 409530 <memchr+0x58>
  4094f4:	7802      	ldrb	r2, [r0, #0]
  4094f6:	3c01      	subs	r4, #1
  4094f8:	428a      	cmp	r2, r1
  4094fa:	d017      	beq.n	40952c <memchr+0x54>
  4094fc:	f013 0f03 	tst.w	r3, #3
  409500:	4618      	mov	r0, r3
  409502:	f103 0301 	add.w	r3, r3, #1
  409506:	d1f4      	bne.n	4094f2 <memchr+0x1a>
  409508:	2c03      	cmp	r4, #3
  40950a:	d814      	bhi.n	409536 <memchr+0x5e>
  40950c:	b184      	cbz	r4, 409530 <memchr+0x58>
  40950e:	7803      	ldrb	r3, [r0, #0]
  409510:	428b      	cmp	r3, r1
  409512:	d00b      	beq.n	40952c <memchr+0x54>
  409514:	1905      	adds	r5, r0, r4
  409516:	1c43      	adds	r3, r0, #1
  409518:	e002      	b.n	409520 <memchr+0x48>
  40951a:	7802      	ldrb	r2, [r0, #0]
  40951c:	428a      	cmp	r2, r1
  40951e:	d005      	beq.n	40952c <memchr+0x54>
  409520:	42ab      	cmp	r3, r5
  409522:	4618      	mov	r0, r3
  409524:	f103 0301 	add.w	r3, r3, #1
  409528:	d1f7      	bne.n	40951a <memchr+0x42>
  40952a:	2000      	movs	r0, #0
  40952c:	bc70      	pop	{r4, r5, r6}
  40952e:	4770      	bx	lr
  409530:	4620      	mov	r0, r4
  409532:	bc70      	pop	{r4, r5, r6}
  409534:	4770      	bx	lr
  409536:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
  40953a:	4602      	mov	r2, r0
  40953c:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
  409540:	4610      	mov	r0, r2
  409542:	3204      	adds	r2, #4
  409544:	6803      	ldr	r3, [r0, #0]
  409546:	4073      	eors	r3, r6
  409548:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
  40954c:	ea25 0303 	bic.w	r3, r5, r3
  409550:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
  409554:	d1da      	bne.n	40950c <memchr+0x34>
  409556:	3c04      	subs	r4, #4
  409558:	4610      	mov	r0, r2
  40955a:	2c03      	cmp	r4, #3
  40955c:	d8f0      	bhi.n	409540 <memchr+0x68>
  40955e:	e7d5      	b.n	40950c <memchr+0x34>
  409560:	4614      	mov	r4, r2
  409562:	e7d1      	b.n	409508 <memchr+0x30>
  409564:	4610      	mov	r0, r2
  409566:	e7e1      	b.n	40952c <memchr+0x54>

00409568 <memmove>:
  409568:	4288      	cmp	r0, r1
  40956a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40956c:	d90d      	bls.n	40958a <memmove+0x22>
  40956e:	188b      	adds	r3, r1, r2
  409570:	4298      	cmp	r0, r3
  409572:	d20a      	bcs.n	40958a <memmove+0x22>
  409574:	1881      	adds	r1, r0, r2
  409576:	2a00      	cmp	r2, #0
  409578:	d053      	beq.n	409622 <memmove+0xba>
  40957a:	1a9a      	subs	r2, r3, r2
  40957c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  409580:	4293      	cmp	r3, r2
  409582:	f801 4d01 	strb.w	r4, [r1, #-1]!
  409586:	d1f9      	bne.n	40957c <memmove+0x14>
  409588:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40958a:	2a0f      	cmp	r2, #15
  40958c:	d947      	bls.n	40961e <memmove+0xb6>
  40958e:	ea40 0301 	orr.w	r3, r0, r1
  409592:	079b      	lsls	r3, r3, #30
  409594:	d146      	bne.n	409624 <memmove+0xbc>
  409596:	f100 0410 	add.w	r4, r0, #16
  40959a:	f101 0310 	add.w	r3, r1, #16
  40959e:	4615      	mov	r5, r2
  4095a0:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4095a4:	3d10      	subs	r5, #16
  4095a6:	3310      	adds	r3, #16
  4095a8:	3410      	adds	r4, #16
  4095aa:	f844 6c20 	str.w	r6, [r4, #-32]
  4095ae:	2d0f      	cmp	r5, #15
  4095b0:	f853 6c1c 	ldr.w	r6, [r3, #-28]
  4095b4:	f844 6c1c 	str.w	r6, [r4, #-28]
  4095b8:	f853 6c18 	ldr.w	r6, [r3, #-24]
  4095bc:	f844 6c18 	str.w	r6, [r4, #-24]
  4095c0:	f853 6c14 	ldr.w	r6, [r3, #-20]
  4095c4:	f844 6c14 	str.w	r6, [r4, #-20]
  4095c8:	d8ea      	bhi.n	4095a0 <memmove+0x38>
  4095ca:	f1a2 0310 	sub.w	r3, r2, #16
  4095ce:	f002 0e0f 	and.w	lr, r2, #15
  4095d2:	f023 030f 	bic.w	r3, r3, #15
  4095d6:	f1be 0f03 	cmp.w	lr, #3
  4095da:	f103 0310 	add.w	r3, r3, #16
  4095de:	4419      	add	r1, r3
  4095e0:	4403      	add	r3, r0
  4095e2:	d921      	bls.n	409628 <memmove+0xc0>
  4095e4:	1f1e      	subs	r6, r3, #4
  4095e6:	460d      	mov	r5, r1
  4095e8:	4674      	mov	r4, lr
  4095ea:	3c04      	subs	r4, #4
  4095ec:	f855 7b04 	ldr.w	r7, [r5], #4
  4095f0:	2c03      	cmp	r4, #3
  4095f2:	f846 7f04 	str.w	r7, [r6, #4]!
  4095f6:	d8f8      	bhi.n	4095ea <memmove+0x82>
  4095f8:	f1ae 0404 	sub.w	r4, lr, #4
  4095fc:	f002 0203 	and.w	r2, r2, #3
  409600:	f024 0403 	bic.w	r4, r4, #3
  409604:	3404      	adds	r4, #4
  409606:	4423      	add	r3, r4
  409608:	4421      	add	r1, r4
  40960a:	b152      	cbz	r2, 409622 <memmove+0xba>
  40960c:	3b01      	subs	r3, #1
  40960e:	440a      	add	r2, r1
  409610:	f811 4b01 	ldrb.w	r4, [r1], #1
  409614:	4291      	cmp	r1, r2
  409616:	f803 4f01 	strb.w	r4, [r3, #1]!
  40961a:	d1f9      	bne.n	409610 <memmove+0xa8>
  40961c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40961e:	4603      	mov	r3, r0
  409620:	e7f3      	b.n	40960a <memmove+0xa2>
  409622:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409624:	4603      	mov	r3, r0
  409626:	e7f1      	b.n	40960c <memmove+0xa4>
  409628:	4672      	mov	r2, lr
  40962a:	e7ee      	b.n	40960a <memmove+0xa2>

0040962c <__malloc_lock>:
  40962c:	4770      	bx	lr
  40962e:	bf00      	nop

00409630 <__malloc_unlock>:
  409630:	4770      	bx	lr
  409632:	bf00      	nop

00409634 <_Balloc>:
  409634:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  409636:	b538      	push	{r3, r4, r5, lr}
  409638:	4605      	mov	r5, r0
  40963a:	460c      	mov	r4, r1
  40963c:	b152      	cbz	r2, 409654 <_Balloc+0x20>
  40963e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
  409642:	b18b      	cbz	r3, 409668 <_Balloc+0x34>
  409644:	6819      	ldr	r1, [r3, #0]
  409646:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
  40964a:	2200      	movs	r2, #0
  40964c:	4618      	mov	r0, r3
  40964e:	611a      	str	r2, [r3, #16]
  409650:	60da      	str	r2, [r3, #12]
  409652:	bd38      	pop	{r3, r4, r5, pc}
  409654:	2221      	movs	r2, #33	; 0x21
  409656:	2104      	movs	r1, #4
  409658:	f000 fdde 	bl	40a218 <_calloc_r>
  40965c:	64e8      	str	r0, [r5, #76]	; 0x4c
  40965e:	4602      	mov	r2, r0
  409660:	2800      	cmp	r0, #0
  409662:	d1ec      	bne.n	40963e <_Balloc+0xa>
  409664:	2000      	movs	r0, #0
  409666:	bd38      	pop	{r3, r4, r5, pc}
  409668:	2101      	movs	r1, #1
  40966a:	4628      	mov	r0, r5
  40966c:	fa01 f504 	lsl.w	r5, r1, r4
  409670:	1d6a      	adds	r2, r5, #5
  409672:	0092      	lsls	r2, r2, #2
  409674:	f000 fdd0 	bl	40a218 <_calloc_r>
  409678:	4603      	mov	r3, r0
  40967a:	2800      	cmp	r0, #0
  40967c:	d0f2      	beq.n	409664 <_Balloc+0x30>
  40967e:	6044      	str	r4, [r0, #4]
  409680:	6085      	str	r5, [r0, #8]
  409682:	e7e2      	b.n	40964a <_Balloc+0x16>

00409684 <_Bfree>:
  409684:	b131      	cbz	r1, 409694 <_Bfree+0x10>
  409686:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  409688:	684a      	ldr	r2, [r1, #4]
  40968a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  40968e:	6008      	str	r0, [r1, #0]
  409690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  409694:	4770      	bx	lr
  409696:	bf00      	nop

00409698 <__multadd>:
  409698:	b5f0      	push	{r4, r5, r6, r7, lr}
  40969a:	460c      	mov	r4, r1
  40969c:	b083      	sub	sp, #12
  40969e:	4605      	mov	r5, r0
  4096a0:	690e      	ldr	r6, [r1, #16]
  4096a2:	f101 0e14 	add.w	lr, r1, #20
  4096a6:	2700      	movs	r7, #0
  4096a8:	f8de 1000 	ldr.w	r1, [lr]
  4096ac:	3701      	adds	r7, #1
  4096ae:	b288      	uxth	r0, r1
  4096b0:	42be      	cmp	r6, r7
  4096b2:	ea4f 4111 	mov.w	r1, r1, lsr #16
  4096b6:	fb02 3300 	mla	r3, r2, r0, r3
  4096ba:	fb02 f101 	mul.w	r1, r2, r1
  4096be:	b298      	uxth	r0, r3
  4096c0:	eb01 4313 	add.w	r3, r1, r3, lsr #16
  4096c4:	eb00 4103 	add.w	r1, r0, r3, lsl #16
  4096c8:	ea4f 4313 	mov.w	r3, r3, lsr #16
  4096cc:	f84e 1b04 	str.w	r1, [lr], #4
  4096d0:	dcea      	bgt.n	4096a8 <__multadd+0x10>
  4096d2:	b13b      	cbz	r3, 4096e4 <__multadd+0x4c>
  4096d4:	68a2      	ldr	r2, [r4, #8]
  4096d6:	4296      	cmp	r6, r2
  4096d8:	da07      	bge.n	4096ea <__multadd+0x52>
  4096da:	eb04 0286 	add.w	r2, r4, r6, lsl #2
  4096de:	3601      	adds	r6, #1
  4096e0:	6153      	str	r3, [r2, #20]
  4096e2:	6126      	str	r6, [r4, #16]
  4096e4:	4620      	mov	r0, r4
  4096e6:	b003      	add	sp, #12
  4096e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4096ea:	6861      	ldr	r1, [r4, #4]
  4096ec:	4628      	mov	r0, r5
  4096ee:	9301      	str	r3, [sp, #4]
  4096f0:	3101      	adds	r1, #1
  4096f2:	f7ff ff9f 	bl	409634 <_Balloc>
  4096f6:	6922      	ldr	r2, [r4, #16]
  4096f8:	f104 010c 	add.w	r1, r4, #12
  4096fc:	4607      	mov	r7, r0
  4096fe:	3202      	adds	r2, #2
  409700:	300c      	adds	r0, #12
  409702:	0092      	lsls	r2, r2, #2
  409704:	f7fc ff12 	bl	40652c <memcpy>
  409708:	6cea      	ldr	r2, [r5, #76]	; 0x4c
  40970a:	6861      	ldr	r1, [r4, #4]
  40970c:	9b01      	ldr	r3, [sp, #4]
  40970e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  409712:	6020      	str	r0, [r4, #0]
  409714:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  409718:	463c      	mov	r4, r7
  40971a:	e7de      	b.n	4096da <__multadd+0x42>

0040971c <__hi0bits>:
  40971c:	4b0f      	ldr	r3, [pc, #60]	; (40975c <__hi0bits+0x40>)
  40971e:	4003      	ands	r3, r0
  409720:	b9b3      	cbnz	r3, 409750 <__hi0bits+0x34>
  409722:	0400      	lsls	r0, r0, #16
  409724:	2310      	movs	r3, #16
  409726:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40972a:	d101      	bne.n	409730 <__hi0bits+0x14>
  40972c:	3308      	adds	r3, #8
  40972e:	0200      	lsls	r0, r0, #8
  409730:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  409734:	d101      	bne.n	40973a <__hi0bits+0x1e>
  409736:	3304      	adds	r3, #4
  409738:	0100      	lsls	r0, r0, #4
  40973a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  40973e:	d101      	bne.n	409744 <__hi0bits+0x28>
  409740:	3302      	adds	r3, #2
  409742:	0080      	lsls	r0, r0, #2
  409744:	2800      	cmp	r0, #0
  409746:	db07      	blt.n	409758 <__hi0bits+0x3c>
  409748:	0042      	lsls	r2, r0, #1
  40974a:	d403      	bmi.n	409754 <__hi0bits+0x38>
  40974c:	2020      	movs	r0, #32
  40974e:	4770      	bx	lr
  409750:	2300      	movs	r3, #0
  409752:	e7e8      	b.n	409726 <__hi0bits+0xa>
  409754:	1c58      	adds	r0, r3, #1
  409756:	4770      	bx	lr
  409758:	4618      	mov	r0, r3
  40975a:	4770      	bx	lr
  40975c:	ffff0000 	.word	0xffff0000

00409760 <__lo0bits>:
  409760:	6803      	ldr	r3, [r0, #0]
  409762:	f013 0207 	ands.w	r2, r3, #7
  409766:	d008      	beq.n	40977a <__lo0bits+0x1a>
  409768:	07d9      	lsls	r1, r3, #31
  40976a:	d422      	bmi.n	4097b2 <__lo0bits+0x52>
  40976c:	079a      	lsls	r2, r3, #30
  40976e:	d423      	bmi.n	4097b8 <__lo0bits+0x58>
  409770:	089b      	lsrs	r3, r3, #2
  409772:	2202      	movs	r2, #2
  409774:	6003      	str	r3, [r0, #0]
  409776:	4610      	mov	r0, r2
  409778:	4770      	bx	lr
  40977a:	b299      	uxth	r1, r3
  40977c:	b909      	cbnz	r1, 409782 <__lo0bits+0x22>
  40977e:	0c1b      	lsrs	r3, r3, #16
  409780:	2210      	movs	r2, #16
  409782:	f013 0fff 	tst.w	r3, #255	; 0xff
  409786:	d101      	bne.n	40978c <__lo0bits+0x2c>
  409788:	3208      	adds	r2, #8
  40978a:	0a1b      	lsrs	r3, r3, #8
  40978c:	0719      	lsls	r1, r3, #28
  40978e:	d101      	bne.n	409794 <__lo0bits+0x34>
  409790:	3204      	adds	r2, #4
  409792:	091b      	lsrs	r3, r3, #4
  409794:	0799      	lsls	r1, r3, #30
  409796:	d101      	bne.n	40979c <__lo0bits+0x3c>
  409798:	3202      	adds	r2, #2
  40979a:	089b      	lsrs	r3, r3, #2
  40979c:	07d9      	lsls	r1, r3, #31
  40979e:	d405      	bmi.n	4097ac <__lo0bits+0x4c>
  4097a0:	085b      	lsrs	r3, r3, #1
  4097a2:	d102      	bne.n	4097aa <__lo0bits+0x4a>
  4097a4:	2220      	movs	r2, #32
  4097a6:	4610      	mov	r0, r2
  4097a8:	4770      	bx	lr
  4097aa:	3201      	adds	r2, #1
  4097ac:	6003      	str	r3, [r0, #0]
  4097ae:	4610      	mov	r0, r2
  4097b0:	4770      	bx	lr
  4097b2:	2200      	movs	r2, #0
  4097b4:	4610      	mov	r0, r2
  4097b6:	4770      	bx	lr
  4097b8:	085b      	lsrs	r3, r3, #1
  4097ba:	2201      	movs	r2, #1
  4097bc:	6003      	str	r3, [r0, #0]
  4097be:	4610      	mov	r0, r2
  4097c0:	4770      	bx	lr
  4097c2:	bf00      	nop

004097c4 <__i2b>:
  4097c4:	b510      	push	{r4, lr}
  4097c6:	460c      	mov	r4, r1
  4097c8:	2101      	movs	r1, #1
  4097ca:	f7ff ff33 	bl	409634 <_Balloc>
  4097ce:	2201      	movs	r2, #1
  4097d0:	6144      	str	r4, [r0, #20]
  4097d2:	6102      	str	r2, [r0, #16]
  4097d4:	bd10      	pop	{r4, pc}
  4097d6:	bf00      	nop

004097d8 <__multiply>:
  4097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4097dc:	690e      	ldr	r6, [r1, #16]
  4097de:	b085      	sub	sp, #20
  4097e0:	6915      	ldr	r5, [r2, #16]
  4097e2:	460c      	mov	r4, r1
  4097e4:	4691      	mov	r9, r2
  4097e6:	42ae      	cmp	r6, r5
  4097e8:	f2c0 8094 	blt.w	409914 <__multiply+0x13c>
  4097ec:	462b      	mov	r3, r5
  4097ee:	4635      	mov	r5, r6
  4097f0:	461e      	mov	r6, r3
  4097f2:	eb05 0806 	add.w	r8, r5, r6
  4097f6:	68a3      	ldr	r3, [r4, #8]
  4097f8:	6861      	ldr	r1, [r4, #4]
  4097fa:	4598      	cmp	r8, r3
  4097fc:	dd00      	ble.n	409800 <__multiply+0x28>
  4097fe:	3101      	adds	r1, #1
  409800:	f7ff ff18 	bl	409634 <_Balloc>
  409804:	f100 0a14 	add.w	sl, r0, #20
  409808:	9001      	str	r0, [sp, #4]
  40980a:	eb0a 0b88 	add.w	fp, sl, r8, lsl #2
  40980e:	45da      	cmp	sl, fp
  409810:	d205      	bcs.n	40981e <__multiply+0x46>
  409812:	4653      	mov	r3, sl
  409814:	2100      	movs	r1, #0
  409816:	f843 1b04 	str.w	r1, [r3], #4
  40981a:	459b      	cmp	fp, r3
  40981c:	d8fb      	bhi.n	409816 <__multiply+0x3e>
  40981e:	f109 0914 	add.w	r9, r9, #20
  409822:	f104 0314 	add.w	r3, r4, #20
  409826:	eb09 0286 	add.w	r2, r9, r6, lsl #2
  40982a:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
  40982e:	4591      	cmp	r9, r2
  409830:	d25b      	bcs.n	4098ea <__multiply+0x112>
  409832:	f8cd b008 	str.w	fp, [sp, #8]
  409836:	4693      	mov	fp, r2
  409838:	f8cd 800c 	str.w	r8, [sp, #12]
  40983c:	4698      	mov	r8, r3
  40983e:	f859 6b04 	ldr.w	r6, [r9], #4
  409842:	fa1f fe86 	uxth.w	lr, r6
  409846:	f1be 0f00 	cmp.w	lr, #0
  40984a:	d021      	beq.n	409890 <__multiply+0xb8>
  40984c:	4647      	mov	r7, r8
  40984e:	4656      	mov	r6, sl
  409850:	2100      	movs	r1, #0
  409852:	e000      	b.n	409856 <__multiply+0x7e>
  409854:	4626      	mov	r6, r4
  409856:	f857 2b04 	ldr.w	r2, [r7], #4
  40985a:	4634      	mov	r4, r6
  40985c:	6835      	ldr	r5, [r6, #0]
  40985e:	b290      	uxth	r0, r2
  409860:	45bc      	cmp	ip, r7
  409862:	b2ab      	uxth	r3, r5
  409864:	ea4f 4212 	mov.w	r2, r2, lsr #16
  409868:	fb0e 3000 	mla	r0, lr, r0, r3
  40986c:	ea4f 4315 	mov.w	r3, r5, lsr #16
  409870:	4401      	add	r1, r0
  409872:	fb0e 3302 	mla	r3, lr, r2, r3
  409876:	b28a      	uxth	r2, r1
  409878:	eb03 4111 	add.w	r1, r3, r1, lsr #16
  40987c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
  409880:	ea4f 4111 	mov.w	r1, r1, lsr #16
  409884:	f844 3b04 	str.w	r3, [r4], #4
  409888:	d8e4      	bhi.n	409854 <__multiply+0x7c>
  40988a:	6071      	str	r1, [r6, #4]
  40988c:	f859 6c04 	ldr.w	r6, [r9, #-4]
  409890:	0c36      	lsrs	r6, r6, #16
  409892:	d022      	beq.n	4098da <__multiply+0x102>
  409894:	f8da 3000 	ldr.w	r3, [sl]
  409898:	2700      	movs	r7, #0
  40989a:	4655      	mov	r5, sl
  40989c:	4640      	mov	r0, r8
  40989e:	461a      	mov	r2, r3
  4098a0:	46be      	mov	lr, r7
  4098a2:	e000      	b.n	4098a6 <__multiply+0xce>
  4098a4:	4625      	mov	r5, r4
  4098a6:	8807      	ldrh	r7, [r0, #0]
  4098a8:	0c12      	lsrs	r2, r2, #16
  4098aa:	b299      	uxth	r1, r3
  4098ac:	462c      	mov	r4, r5
  4098ae:	fb06 2207 	mla	r2, r6, r7, r2
  4098b2:	eb02 070e 	add.w	r7, r2, lr
  4098b6:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  4098ba:	f844 3b04 	str.w	r3, [r4], #4
  4098be:	f850 1b04 	ldr.w	r1, [r0], #4
  4098c2:	686a      	ldr	r2, [r5, #4]
  4098c4:	0c09      	lsrs	r1, r1, #16
  4098c6:	4584      	cmp	ip, r0
  4098c8:	b293      	uxth	r3, r2
  4098ca:	fb06 3101 	mla	r1, r6, r1, r3
  4098ce:	eb01 4317 	add.w	r3, r1, r7, lsr #16
  4098d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
  4098d6:	d8e5      	bhi.n	4098a4 <__multiply+0xcc>
  4098d8:	606b      	str	r3, [r5, #4]
  4098da:	45cb      	cmp	fp, r9
  4098dc:	f10a 0a04 	add.w	sl, sl, #4
  4098e0:	d8ad      	bhi.n	40983e <__multiply+0x66>
  4098e2:	f8dd b008 	ldr.w	fp, [sp, #8]
  4098e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
  4098ea:	f1b8 0f00 	cmp.w	r8, #0
  4098ee:	dd0b      	ble.n	409908 <__multiply+0x130>
  4098f0:	f85b 3c04 	ldr.w	r3, [fp, #-4]
  4098f4:	f1ab 0b04 	sub.w	fp, fp, #4
  4098f8:	b11b      	cbz	r3, 409902 <__multiply+0x12a>
  4098fa:	e005      	b.n	409908 <__multiply+0x130>
  4098fc:	f85b 3d04 	ldr.w	r3, [fp, #-4]!
  409900:	b913      	cbnz	r3, 409908 <__multiply+0x130>
  409902:	f1b8 0801 	subs.w	r8, r8, #1
  409906:	d1f9      	bne.n	4098fc <__multiply+0x124>
  409908:	9801      	ldr	r0, [sp, #4]
  40990a:	f8c0 8010 	str.w	r8, [r0, #16]
  40990e:	b005      	add	sp, #20
  409910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409914:	4614      	mov	r4, r2
  409916:	4689      	mov	r9, r1
  409918:	e76b      	b.n	4097f2 <__multiply+0x1a>
  40991a:	bf00      	nop

0040991c <__pow5mult>:
  40991c:	f012 0303 	ands.w	r3, r2, #3
  409920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409924:	4614      	mov	r4, r2
  409926:	4607      	mov	r7, r0
  409928:	460e      	mov	r6, r1
  40992a:	d12d      	bne.n	409988 <__pow5mult+0x6c>
  40992c:	10a4      	asrs	r4, r4, #2
  40992e:	d01c      	beq.n	40996a <__pow5mult+0x4e>
  409930:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  409932:	b395      	cbz	r5, 40999a <__pow5mult+0x7e>
  409934:	07e3      	lsls	r3, r4, #31
  409936:	f04f 0800 	mov.w	r8, #0
  40993a:	d406      	bmi.n	40994a <__pow5mult+0x2e>
  40993c:	1064      	asrs	r4, r4, #1
  40993e:	d014      	beq.n	40996a <__pow5mult+0x4e>
  409940:	6828      	ldr	r0, [r5, #0]
  409942:	b1a8      	cbz	r0, 409970 <__pow5mult+0x54>
  409944:	4605      	mov	r5, r0
  409946:	07e3      	lsls	r3, r4, #31
  409948:	d5f8      	bpl.n	40993c <__pow5mult+0x20>
  40994a:	4638      	mov	r0, r7
  40994c:	4631      	mov	r1, r6
  40994e:	462a      	mov	r2, r5
  409950:	f7ff ff42 	bl	4097d8 <__multiply>
  409954:	b1b6      	cbz	r6, 409984 <__pow5mult+0x68>
  409956:	6872      	ldr	r2, [r6, #4]
  409958:	1064      	asrs	r4, r4, #1
  40995a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40995c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409960:	6031      	str	r1, [r6, #0]
  409962:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  409966:	4606      	mov	r6, r0
  409968:	d1ea      	bne.n	409940 <__pow5mult+0x24>
  40996a:	4630      	mov	r0, r6
  40996c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409970:	4629      	mov	r1, r5
  409972:	462a      	mov	r2, r5
  409974:	4638      	mov	r0, r7
  409976:	f7ff ff2f 	bl	4097d8 <__multiply>
  40997a:	6028      	str	r0, [r5, #0]
  40997c:	f8c0 8000 	str.w	r8, [r0]
  409980:	4605      	mov	r5, r0
  409982:	e7e0      	b.n	409946 <__pow5mult+0x2a>
  409984:	4606      	mov	r6, r0
  409986:	e7d9      	b.n	40993c <__pow5mult+0x20>
  409988:	1e5a      	subs	r2, r3, #1
  40998a:	4d0b      	ldr	r5, [pc, #44]	; (4099b8 <__pow5mult+0x9c>)
  40998c:	2300      	movs	r3, #0
  40998e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  409992:	f7ff fe81 	bl	409698 <__multadd>
  409996:	4606      	mov	r6, r0
  409998:	e7c8      	b.n	40992c <__pow5mult+0x10>
  40999a:	2101      	movs	r1, #1
  40999c:	4638      	mov	r0, r7
  40999e:	f7ff fe49 	bl	409634 <_Balloc>
  4099a2:	f240 2171 	movw	r1, #625	; 0x271
  4099a6:	2201      	movs	r2, #1
  4099a8:	2300      	movs	r3, #0
  4099aa:	6141      	str	r1, [r0, #20]
  4099ac:	4605      	mov	r5, r0
  4099ae:	6102      	str	r2, [r0, #16]
  4099b0:	64b8      	str	r0, [r7, #72]	; 0x48
  4099b2:	6003      	str	r3, [r0, #0]
  4099b4:	e7be      	b.n	409934 <__pow5mult+0x18>
  4099b6:	bf00      	nop
  4099b8:	0040aec8 	.word	0x0040aec8

004099bc <__lshift>:
  4099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4099c0:	690e      	ldr	r6, [r1, #16]
  4099c2:	ea4f 1962 	mov.w	r9, r2, asr #5
  4099c6:	688b      	ldr	r3, [r1, #8]
  4099c8:	460d      	mov	r5, r1
  4099ca:	444e      	add	r6, r9
  4099cc:	4690      	mov	r8, r2
  4099ce:	4607      	mov	r7, r0
  4099d0:	6849      	ldr	r1, [r1, #4]
  4099d2:	1c74      	adds	r4, r6, #1
  4099d4:	429c      	cmp	r4, r3
  4099d6:	dd03      	ble.n	4099e0 <__lshift+0x24>
  4099d8:	005b      	lsls	r3, r3, #1
  4099da:	3101      	adds	r1, #1
  4099dc:	429c      	cmp	r4, r3
  4099de:	dcfb      	bgt.n	4099d8 <__lshift+0x1c>
  4099e0:	4638      	mov	r0, r7
  4099e2:	f7ff fe27 	bl	409634 <_Balloc>
  4099e6:	f1b9 0f00 	cmp.w	r9, #0
  4099ea:	4684      	mov	ip, r0
  4099ec:	f100 0114 	add.w	r1, r0, #20
  4099f0:	dd09      	ble.n	409a06 <__lshift+0x4a>
  4099f2:	2300      	movs	r3, #0
  4099f4:	460a      	mov	r2, r1
  4099f6:	4618      	mov	r0, r3
  4099f8:	3301      	adds	r3, #1
  4099fa:	f842 0b04 	str.w	r0, [r2], #4
  4099fe:	454b      	cmp	r3, r9
  409a00:	d1fa      	bne.n	4099f8 <__lshift+0x3c>
  409a02:	eb01 0183 	add.w	r1, r1, r3, lsl #2
  409a06:	692a      	ldr	r2, [r5, #16]
  409a08:	f105 0314 	add.w	r3, r5, #20
  409a0c:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
  409a10:	f018 021f 	ands.w	r2, r8, #31
  409a14:	d023      	beq.n	409a5e <__lshift+0xa2>
  409a16:	f1c2 0920 	rsb	r9, r2, #32
  409a1a:	f04f 0a00 	mov.w	sl, #0
  409a1e:	6818      	ldr	r0, [r3, #0]
  409a20:	4688      	mov	r8, r1
  409a22:	4090      	lsls	r0, r2
  409a24:	ea4a 0000 	orr.w	r0, sl, r0
  409a28:	f841 0b04 	str.w	r0, [r1], #4
  409a2c:	f853 0b04 	ldr.w	r0, [r3], #4
  409a30:	459e      	cmp	lr, r3
  409a32:	fa20 fa09 	lsr.w	sl, r0, r9
  409a36:	d8f2      	bhi.n	409a1e <__lshift+0x62>
  409a38:	f8c8 a004 	str.w	sl, [r8, #4]
  409a3c:	f1ba 0f00 	cmp.w	sl, #0
  409a40:	d000      	beq.n	409a44 <__lshift+0x88>
  409a42:	1cb4      	adds	r4, r6, #2
  409a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409a46:	3c01      	subs	r4, #1
  409a48:	686a      	ldr	r2, [r5, #4]
  409a4a:	4660      	mov	r0, ip
  409a4c:	f8cc 4010 	str.w	r4, [ip, #16]
  409a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  409a54:	6029      	str	r1, [r5, #0]
  409a56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  409a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409a5e:	3904      	subs	r1, #4
  409a60:	f853 2b04 	ldr.w	r2, [r3], #4
  409a64:	459e      	cmp	lr, r3
  409a66:	f841 2f04 	str.w	r2, [r1, #4]!
  409a6a:	d8f9      	bhi.n	409a60 <__lshift+0xa4>
  409a6c:	e7ea      	b.n	409a44 <__lshift+0x88>
  409a6e:	bf00      	nop

00409a70 <__mcmp>:
  409a70:	6902      	ldr	r2, [r0, #16]
  409a72:	690b      	ldr	r3, [r1, #16]
  409a74:	1ad2      	subs	r2, r2, r3
  409a76:	d113      	bne.n	409aa0 <__mcmp+0x30>
  409a78:	009a      	lsls	r2, r3, #2
  409a7a:	3014      	adds	r0, #20
  409a7c:	3114      	adds	r1, #20
  409a7e:	1883      	adds	r3, r0, r2
  409a80:	4411      	add	r1, r2
  409a82:	b410      	push	{r4}
  409a84:	e001      	b.n	409a8a <__mcmp+0x1a>
  409a86:	4298      	cmp	r0, r3
  409a88:	d20c      	bcs.n	409aa4 <__mcmp+0x34>
  409a8a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  409a8e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  409a92:	4294      	cmp	r4, r2
  409a94:	d0f7      	beq.n	409a86 <__mcmp+0x16>
  409a96:	d309      	bcc.n	409aac <__mcmp+0x3c>
  409a98:	2001      	movs	r0, #1
  409a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  409a9e:	4770      	bx	lr
  409aa0:	4610      	mov	r0, r2
  409aa2:	4770      	bx	lr
  409aa4:	2000      	movs	r0, #0
  409aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
  409aaa:	4770      	bx	lr
  409aac:	f04f 30ff 	mov.w	r0, #4294967295
  409ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
  409ab4:	4770      	bx	lr
  409ab6:	bf00      	nop

00409ab8 <__mdiff>:
  409ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  409abc:	460c      	mov	r4, r1
  409abe:	4605      	mov	r5, r0
  409ac0:	4611      	mov	r1, r2
  409ac2:	4617      	mov	r7, r2
  409ac4:	4620      	mov	r0, r4
  409ac6:	f7ff ffd3 	bl	409a70 <__mcmp>
  409aca:	1e06      	subs	r6, r0, #0
  409acc:	d05c      	beq.n	409b88 <__mdiff+0xd0>
  409ace:	db55      	blt.n	409b7c <__mdiff+0xc4>
  409ad0:	f04f 0800 	mov.w	r8, #0
  409ad4:	6861      	ldr	r1, [r4, #4]
  409ad6:	4628      	mov	r0, r5
  409ad8:	f7ff fdac 	bl	409634 <_Balloc>
  409adc:	f107 0514 	add.w	r5, r7, #20
  409ae0:	693b      	ldr	r3, [r7, #16]
  409ae2:	f104 0114 	add.w	r1, r4, #20
  409ae6:	6926      	ldr	r6, [r4, #16]
  409ae8:	4684      	mov	ip, r0
  409aea:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  409aee:	f100 0414 	add.w	r4, r0, #20
  409af2:	eb01 0786 	add.w	r7, r1, r6, lsl #2
  409af6:	2300      	movs	r3, #0
  409af8:	f8c0 800c 	str.w	r8, [r0, #12]
  409afc:	f851 9b04 	ldr.w	r9, [r1], #4
  409b00:	f855 2b04 	ldr.w	r2, [r5], #4
  409b04:	fa13 f889 	uxtah	r8, r3, r9
  409b08:	4608      	mov	r0, r1
  409b0a:	b293      	uxth	r3, r2
  409b0c:	45ae      	cmp	lr, r5
  409b0e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  409b12:	ebc3 0308 	rsb	r3, r3, r8
  409b16:	ebc2 4219 	rsb	r2, r2, r9, lsr #16
  409b1a:	fa1f f883 	uxth.w	r8, r3
  409b1e:	eb02 4323 	add.w	r3, r2, r3, asr #16
  409b22:	ea48 4203 	orr.w	r2, r8, r3, lsl #16
  409b26:	ea4f 4323 	mov.w	r3, r3, asr #16
  409b2a:	f844 2b04 	str.w	r2, [r4], #4
  409b2e:	d8e5      	bhi.n	409afc <__mdiff+0x44>
  409b30:	428f      	cmp	r7, r1
  409b32:	4625      	mov	r5, r4
  409b34:	d916      	bls.n	409b64 <__mdiff+0xac>
  409b36:	f850 2b04 	ldr.w	r2, [r0], #4
  409b3a:	fa13 f382 	uxtah	r3, r3, r2
  409b3e:	0c12      	lsrs	r2, r2, #16
  409b40:	4287      	cmp	r7, r0
  409b42:	fa1f fe83 	uxth.w	lr, r3
  409b46:	eb02 4323 	add.w	r3, r2, r3, asr #16
  409b4a:	ea4e 4203 	orr.w	r2, lr, r3, lsl #16
  409b4e:	ea4f 4323 	mov.w	r3, r3, asr #16
  409b52:	f844 2b04 	str.w	r2, [r4], #4
  409b56:	d8ee      	bhi.n	409b36 <__mdiff+0x7e>
  409b58:	43c9      	mvns	r1, r1
  409b5a:	4439      	add	r1, r7
  409b5c:	f021 0403 	bic.w	r4, r1, #3
  409b60:	3404      	adds	r4, #4
  409b62:	442c      	add	r4, r5
  409b64:	3c04      	subs	r4, #4
  409b66:	b922      	cbnz	r2, 409b72 <__mdiff+0xba>
  409b68:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  409b6c:	3e01      	subs	r6, #1
  409b6e:	2b00      	cmp	r3, #0
  409b70:	d0fa      	beq.n	409b68 <__mdiff+0xb0>
  409b72:	4660      	mov	r0, ip
  409b74:	f8cc 6010 	str.w	r6, [ip, #16]
  409b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  409b7c:	4623      	mov	r3, r4
  409b7e:	f04f 0801 	mov.w	r8, #1
  409b82:	463c      	mov	r4, r7
  409b84:	461f      	mov	r7, r3
  409b86:	e7a5      	b.n	409ad4 <__mdiff+0x1c>
  409b88:	4628      	mov	r0, r5
  409b8a:	4631      	mov	r1, r6
  409b8c:	f7ff fd52 	bl	409634 <_Balloc>
  409b90:	2201      	movs	r2, #1
  409b92:	4603      	mov	r3, r0
  409b94:	6146      	str	r6, [r0, #20]
  409b96:	611a      	str	r2, [r3, #16]
  409b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00409b9c <__d2b>:
  409b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409ba0:	461c      	mov	r4, r3
  409ba2:	b082      	sub	sp, #8
  409ba4:	2101      	movs	r1, #1
  409ba6:	4616      	mov	r6, r2
  409ba8:	f3c4 550a 	ubfx	r5, r4, #20, #11
  409bac:	f7ff fd42 	bl	409634 <_Balloc>
  409bb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
  409bb4:	4607      	mov	r7, r0
  409bb6:	b10d      	cbz	r5, 409bbc <__d2b+0x20>
  409bb8:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  409bbc:	9401      	str	r4, [sp, #4]
  409bbe:	b30e      	cbz	r6, 409c04 <__d2b+0x68>
  409bc0:	a802      	add	r0, sp, #8
  409bc2:	f840 6d08 	str.w	r6, [r0, #-8]!
  409bc6:	f7ff fdcb 	bl	409760 <__lo0bits>
  409bca:	2800      	cmp	r0, #0
  409bcc:	d132      	bne.n	409c34 <__d2b+0x98>
  409bce:	e89d 000c 	ldmia.w	sp, {r2, r3}
  409bd2:	617a      	str	r2, [r7, #20]
  409bd4:	2b00      	cmp	r3, #0
  409bd6:	61bb      	str	r3, [r7, #24]
  409bd8:	bf14      	ite	ne
  409bda:	2402      	movne	r4, #2
  409bdc:	2401      	moveq	r4, #1
  409bde:	613c      	str	r4, [r7, #16]
  409be0:	b9dd      	cbnz	r5, 409c1a <__d2b+0x7e>
  409be2:	eb07 0384 	add.w	r3, r7, r4, lsl #2
  409be6:	9a08      	ldr	r2, [sp, #32]
  409be8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  409bec:	6010      	str	r0, [r2, #0]
  409bee:	6918      	ldr	r0, [r3, #16]
  409bf0:	f7ff fd94 	bl	40971c <__hi0bits>
  409bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  409bf6:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
  409bfa:	6018      	str	r0, [r3, #0]
  409bfc:	4638      	mov	r0, r7
  409bfe:	b002      	add	sp, #8
  409c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c04:	a801      	add	r0, sp, #4
  409c06:	f7ff fdab 	bl	409760 <__lo0bits>
  409c0a:	2301      	movs	r3, #1
  409c0c:	9a01      	ldr	r2, [sp, #4]
  409c0e:	3020      	adds	r0, #32
  409c10:	461c      	mov	r4, r3
  409c12:	613b      	str	r3, [r7, #16]
  409c14:	617a      	str	r2, [r7, #20]
  409c16:	2d00      	cmp	r5, #0
  409c18:	d0e3      	beq.n	409be2 <__d2b+0x46>
  409c1a:	f2a5 4833 	subw	r8, r5, #1075	; 0x433
  409c1e:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
  409c22:	9a08      	ldr	r2, [sp, #32]
  409c24:	4440      	add	r0, r8
  409c26:	6010      	str	r0, [r2, #0]
  409c28:	4638      	mov	r0, r7
  409c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  409c2c:	6013      	str	r3, [r2, #0]
  409c2e:	b002      	add	sp, #8
  409c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  409c34:	9b01      	ldr	r3, [sp, #4]
  409c36:	f1c0 0120 	rsb	r1, r0, #32
  409c3a:	9a00      	ldr	r2, [sp, #0]
  409c3c:	fa03 f101 	lsl.w	r1, r3, r1
  409c40:	40c3      	lsrs	r3, r0
  409c42:	430a      	orrs	r2, r1
  409c44:	9301      	str	r3, [sp, #4]
  409c46:	617a      	str	r2, [r7, #20]
  409c48:	e7c4      	b.n	409bd4 <__d2b+0x38>
  409c4a:	bf00      	nop

00409c4c <_realloc_r>:
  409c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409c50:	4617      	mov	r7, r2
  409c52:	b083      	sub	sp, #12
  409c54:	460e      	mov	r6, r1
  409c56:	2900      	cmp	r1, #0
  409c58:	f000 80e2 	beq.w	409e20 <_realloc_r+0x1d4>
  409c5c:	f107 040b 	add.w	r4, r7, #11
  409c60:	4681      	mov	r9, r0
  409c62:	f7ff fce3 	bl	40962c <__malloc_lock>
  409c66:	f856 3c04 	ldr.w	r3, [r6, #-4]
  409c6a:	2c16      	cmp	r4, #22
  409c6c:	f1a6 0808 	sub.w	r8, r6, #8
  409c70:	f023 0503 	bic.w	r5, r3, #3
  409c74:	d850      	bhi.n	409d18 <_realloc_r+0xcc>
  409c76:	2210      	movs	r2, #16
  409c78:	2100      	movs	r1, #0
  409c7a:	4614      	mov	r4, r2
  409c7c:	42bc      	cmp	r4, r7
  409c7e:	f0c0 80dc 	bcc.w	409e3a <_realloc_r+0x1ee>
  409c82:	2900      	cmp	r1, #0
  409c84:	f040 80d9 	bne.w	409e3a <_realloc_r+0x1ee>
  409c88:	4295      	cmp	r5, r2
  409c8a:	da4a      	bge.n	409d22 <_realloc_r+0xd6>
  409c8c:	f8df b3a8 	ldr.w	fp, [pc, #936]	; 40a038 <_realloc_r+0x3ec>
  409c90:	eb08 0105 	add.w	r1, r8, r5
  409c94:	f8db 0008 	ldr.w	r0, [fp, #8]
  409c98:	4288      	cmp	r0, r1
  409c9a:	f000 80d3 	beq.w	409e44 <_realloc_r+0x1f8>
  409c9e:	6848      	ldr	r0, [r1, #4]
  409ca0:	f020 0e01 	bic.w	lr, r0, #1
  409ca4:	448e      	add	lr, r1
  409ca6:	f8de e004 	ldr.w	lr, [lr, #4]
  409caa:	f01e 0f01 	tst.w	lr, #1
  409cae:	d14e      	bne.n	409d4e <_realloc_r+0x102>
  409cb0:	f020 0003 	bic.w	r0, r0, #3
  409cb4:	4428      	add	r0, r5
  409cb6:	4290      	cmp	r0, r2
  409cb8:	f280 80b8 	bge.w	409e2c <_realloc_r+0x1e0>
  409cbc:	07db      	lsls	r3, r3, #31
  409cbe:	f100 808b 	bmi.w	409dd8 <_realloc_r+0x18c>
  409cc2:	f856 3c08 	ldr.w	r3, [r6, #-8]
  409cc6:	ebc3 0a08 	rsb	sl, r3, r8
  409cca:	f8da 3004 	ldr.w	r3, [sl, #4]
  409cce:	f023 0303 	bic.w	r3, r3, #3
  409cd2:	eb00 0e03 	add.w	lr, r0, r3
  409cd6:	4596      	cmp	lr, r2
  409cd8:	db43      	blt.n	409d62 <_realloc_r+0x116>
  409cda:	68cb      	ldr	r3, [r1, #12]
  409cdc:	4657      	mov	r7, sl
  409cde:	6889      	ldr	r1, [r1, #8]
  409ce0:	1f2a      	subs	r2, r5, #4
  409ce2:	60cb      	str	r3, [r1, #12]
  409ce4:	2a24      	cmp	r2, #36	; 0x24
  409ce6:	6099      	str	r1, [r3, #8]
  409ce8:	f857 1f08 	ldr.w	r1, [r7, #8]!
  409cec:	f8da 300c 	ldr.w	r3, [sl, #12]
  409cf0:	60cb      	str	r3, [r1, #12]
  409cf2:	6099      	str	r1, [r3, #8]
  409cf4:	f200 813c 	bhi.w	409f70 <_realloc_r+0x324>
  409cf8:	2a13      	cmp	r2, #19
  409cfa:	f240 80fa 	bls.w	409ef2 <_realloc_r+0x2a6>
  409cfe:	6833      	ldr	r3, [r6, #0]
  409d00:	2a1b      	cmp	r2, #27
  409d02:	f8ca 3008 	str.w	r3, [sl, #8]
  409d06:	6873      	ldr	r3, [r6, #4]
  409d08:	f8ca 300c 	str.w	r3, [sl, #12]
  409d0c:	f200 813b 	bhi.w	409f86 <_realloc_r+0x33a>
  409d10:	3608      	adds	r6, #8
  409d12:	f10a 0310 	add.w	r3, sl, #16
  409d16:	e0ed      	b.n	409ef4 <_realloc_r+0x2a8>
  409d18:	f024 0407 	bic.w	r4, r4, #7
  409d1c:	4622      	mov	r2, r4
  409d1e:	0fe1      	lsrs	r1, r4, #31
  409d20:	e7ac      	b.n	409c7c <_realloc_r+0x30>
  409d22:	4637      	mov	r7, r6
  409d24:	1b2a      	subs	r2, r5, r4
  409d26:	f003 0301 	and.w	r3, r3, #1
  409d2a:	2a0f      	cmp	r2, #15
  409d2c:	d841      	bhi.n	409db2 <_realloc_r+0x166>
  409d2e:	eb08 0205 	add.w	r2, r8, r5
  409d32:	431d      	orrs	r5, r3
  409d34:	f8c8 5004 	str.w	r5, [r8, #4]
  409d38:	6853      	ldr	r3, [r2, #4]
  409d3a:	f043 0301 	orr.w	r3, r3, #1
  409d3e:	6053      	str	r3, [r2, #4]
  409d40:	4648      	mov	r0, r9
  409d42:	f7ff fc75 	bl	409630 <__malloc_unlock>
  409d46:	4638      	mov	r0, r7
  409d48:	b003      	add	sp, #12
  409d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409d4e:	07d9      	lsls	r1, r3, #31
  409d50:	d442      	bmi.n	409dd8 <_realloc_r+0x18c>
  409d52:	f856 3c08 	ldr.w	r3, [r6, #-8]
  409d56:	ebc3 0a08 	rsb	sl, r3, r8
  409d5a:	f8da 3004 	ldr.w	r3, [sl, #4]
  409d5e:	f023 0303 	bic.w	r3, r3, #3
  409d62:	442b      	add	r3, r5
  409d64:	4293      	cmp	r3, r2
  409d66:	db37      	blt.n	409dd8 <_realloc_r+0x18c>
  409d68:	4657      	mov	r7, sl
  409d6a:	1f2a      	subs	r2, r5, #4
  409d6c:	f8da 100c 	ldr.w	r1, [sl, #12]
  409d70:	f857 0f08 	ldr.w	r0, [r7, #8]!
  409d74:	2a24      	cmp	r2, #36	; 0x24
  409d76:	60c1      	str	r1, [r0, #12]
  409d78:	6088      	str	r0, [r1, #8]
  409d7a:	f200 80c6 	bhi.w	409f0a <_realloc_r+0x2be>
  409d7e:	2a13      	cmp	r2, #19
  409d80:	f240 80ff 	bls.w	409f82 <_realloc_r+0x336>
  409d84:	6831      	ldr	r1, [r6, #0]
  409d86:	2a1b      	cmp	r2, #27
  409d88:	f8ca 1008 	str.w	r1, [sl, #8]
  409d8c:	6871      	ldr	r1, [r6, #4]
  409d8e:	f8ca 100c 	str.w	r1, [sl, #12]
  409d92:	f200 810d 	bhi.w	409fb0 <_realloc_r+0x364>
  409d96:	3608      	adds	r6, #8
  409d98:	f10a 0210 	add.w	r2, sl, #16
  409d9c:	6831      	ldr	r1, [r6, #0]
  409d9e:	461d      	mov	r5, r3
  409da0:	46d0      	mov	r8, sl
  409da2:	6011      	str	r1, [r2, #0]
  409da4:	6873      	ldr	r3, [r6, #4]
  409da6:	6053      	str	r3, [r2, #4]
  409da8:	68b3      	ldr	r3, [r6, #8]
  409daa:	6093      	str	r3, [r2, #8]
  409dac:	f8da 3004 	ldr.w	r3, [sl, #4]
  409db0:	e7b8      	b.n	409d24 <_realloc_r+0xd8>
  409db2:	eb08 0504 	add.w	r5, r8, r4
  409db6:	f042 0601 	orr.w	r6, r2, #1
  409dba:	431c      	orrs	r4, r3
  409dbc:	4648      	mov	r0, r9
  409dbe:	442a      	add	r2, r5
  409dc0:	f105 0108 	add.w	r1, r5, #8
  409dc4:	f8c8 4004 	str.w	r4, [r8, #4]
  409dc8:	606e      	str	r6, [r5, #4]
  409dca:	6853      	ldr	r3, [r2, #4]
  409dcc:	f043 0301 	orr.w	r3, r3, #1
  409dd0:	6053      	str	r3, [r2, #4]
  409dd2:	f7fe fff9 	bl	408dc8 <_free_r>
  409dd6:	e7b3      	b.n	409d40 <_realloc_r+0xf4>
  409dd8:	4639      	mov	r1, r7
  409dda:	4648      	mov	r0, r9
  409ddc:	f7ff f8d0 	bl	408f80 <_malloc_r>
  409de0:	4607      	mov	r7, r0
  409de2:	2800      	cmp	r0, #0
  409de4:	d0ac      	beq.n	409d40 <_realloc_r+0xf4>
  409de6:	f856 3c04 	ldr.w	r3, [r6, #-4]
  409dea:	f1a0 0108 	sub.w	r1, r0, #8
  409dee:	f023 0201 	bic.w	r2, r3, #1
  409df2:	4442      	add	r2, r8
  409df4:	4291      	cmp	r1, r2
  409df6:	f000 80b4 	beq.w	409f62 <_realloc_r+0x316>
  409dfa:	1f2a      	subs	r2, r5, #4
  409dfc:	2a24      	cmp	r2, #36	; 0x24
  409dfe:	f200 80a1 	bhi.w	409f44 <_realloc_r+0x2f8>
  409e02:	2a13      	cmp	r2, #19
  409e04:	d86a      	bhi.n	409edc <_realloc_r+0x290>
  409e06:	4603      	mov	r3, r0
  409e08:	4632      	mov	r2, r6
  409e0a:	6811      	ldr	r1, [r2, #0]
  409e0c:	6019      	str	r1, [r3, #0]
  409e0e:	6851      	ldr	r1, [r2, #4]
  409e10:	6059      	str	r1, [r3, #4]
  409e12:	6892      	ldr	r2, [r2, #8]
  409e14:	609a      	str	r2, [r3, #8]
  409e16:	4631      	mov	r1, r6
  409e18:	4648      	mov	r0, r9
  409e1a:	f7fe ffd5 	bl	408dc8 <_free_r>
  409e1e:	e78f      	b.n	409d40 <_realloc_r+0xf4>
  409e20:	4611      	mov	r1, r2
  409e22:	b003      	add	sp, #12
  409e24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  409e28:	f7ff b8aa 	b.w	408f80 <_malloc_r>
  409e2c:	68ca      	ldr	r2, [r1, #12]
  409e2e:	4637      	mov	r7, r6
  409e30:	6889      	ldr	r1, [r1, #8]
  409e32:	4605      	mov	r5, r0
  409e34:	60ca      	str	r2, [r1, #12]
  409e36:	6091      	str	r1, [r2, #8]
  409e38:	e774      	b.n	409d24 <_realloc_r+0xd8>
  409e3a:	230c      	movs	r3, #12
  409e3c:	2000      	movs	r0, #0
  409e3e:	f8c9 3000 	str.w	r3, [r9]
  409e42:	e781      	b.n	409d48 <_realloc_r+0xfc>
  409e44:	6841      	ldr	r1, [r0, #4]
  409e46:	f104 0010 	add.w	r0, r4, #16
  409e4a:	f021 0103 	bic.w	r1, r1, #3
  409e4e:	4429      	add	r1, r5
  409e50:	4281      	cmp	r1, r0
  409e52:	da63      	bge.n	409f1c <_realloc_r+0x2d0>
  409e54:	07db      	lsls	r3, r3, #31
  409e56:	d4bf      	bmi.n	409dd8 <_realloc_r+0x18c>
  409e58:	f856 3c08 	ldr.w	r3, [r6, #-8]
  409e5c:	ebc3 0a08 	rsb	sl, r3, r8
  409e60:	f8da 3004 	ldr.w	r3, [sl, #4]
  409e64:	f023 0303 	bic.w	r3, r3, #3
  409e68:	eb01 0c03 	add.w	ip, r1, r3
  409e6c:	4560      	cmp	r0, ip
  409e6e:	f73f af78 	bgt.w	409d62 <_realloc_r+0x116>
  409e72:	4657      	mov	r7, sl
  409e74:	1f2a      	subs	r2, r5, #4
  409e76:	f8da 300c 	ldr.w	r3, [sl, #12]
  409e7a:	f857 1f08 	ldr.w	r1, [r7, #8]!
  409e7e:	2a24      	cmp	r2, #36	; 0x24
  409e80:	60cb      	str	r3, [r1, #12]
  409e82:	6099      	str	r1, [r3, #8]
  409e84:	f200 80b8 	bhi.w	409ff8 <_realloc_r+0x3ac>
  409e88:	2a13      	cmp	r2, #19
  409e8a:	f240 80a8 	bls.w	409fde <_realloc_r+0x392>
  409e8e:	6833      	ldr	r3, [r6, #0]
  409e90:	2a1b      	cmp	r2, #27
  409e92:	f8ca 3008 	str.w	r3, [sl, #8]
  409e96:	6873      	ldr	r3, [r6, #4]
  409e98:	f8ca 300c 	str.w	r3, [sl, #12]
  409e9c:	f200 80b5 	bhi.w	40a00a <_realloc_r+0x3be>
  409ea0:	3608      	adds	r6, #8
  409ea2:	f10a 0310 	add.w	r3, sl, #16
  409ea6:	6832      	ldr	r2, [r6, #0]
  409ea8:	601a      	str	r2, [r3, #0]
  409eaa:	6872      	ldr	r2, [r6, #4]
  409eac:	605a      	str	r2, [r3, #4]
  409eae:	68b2      	ldr	r2, [r6, #8]
  409eb0:	609a      	str	r2, [r3, #8]
  409eb2:	ebc4 030c 	rsb	r3, r4, ip
  409eb6:	eb0a 0204 	add.w	r2, sl, r4
  409eba:	4648      	mov	r0, r9
  409ebc:	f043 0301 	orr.w	r3, r3, #1
  409ec0:	f8cb 2008 	str.w	r2, [fp, #8]
  409ec4:	6053      	str	r3, [r2, #4]
  409ec6:	f8da 3004 	ldr.w	r3, [sl, #4]
  409eca:	f003 0301 	and.w	r3, r3, #1
  409ece:	431c      	orrs	r4, r3
  409ed0:	f8ca 4004 	str.w	r4, [sl, #4]
  409ed4:	f7ff fbac 	bl	409630 <__malloc_unlock>
  409ed8:	4638      	mov	r0, r7
  409eda:	e735      	b.n	409d48 <_realloc_r+0xfc>
  409edc:	6833      	ldr	r3, [r6, #0]
  409ede:	2a1b      	cmp	r2, #27
  409ee0:	6003      	str	r3, [r0, #0]
  409ee2:	6873      	ldr	r3, [r6, #4]
  409ee4:	6043      	str	r3, [r0, #4]
  409ee6:	d831      	bhi.n	409f4c <_realloc_r+0x300>
  409ee8:	f100 0308 	add.w	r3, r0, #8
  409eec:	f106 0208 	add.w	r2, r6, #8
  409ef0:	e78b      	b.n	409e0a <_realloc_r+0x1be>
  409ef2:	463b      	mov	r3, r7
  409ef4:	6832      	ldr	r2, [r6, #0]
  409ef6:	4675      	mov	r5, lr
  409ef8:	46d0      	mov	r8, sl
  409efa:	601a      	str	r2, [r3, #0]
  409efc:	6872      	ldr	r2, [r6, #4]
  409efe:	605a      	str	r2, [r3, #4]
  409f00:	68b2      	ldr	r2, [r6, #8]
  409f02:	609a      	str	r2, [r3, #8]
  409f04:	f8da 3004 	ldr.w	r3, [sl, #4]
  409f08:	e70c      	b.n	409d24 <_realloc_r+0xd8>
  409f0a:	4631      	mov	r1, r6
  409f0c:	4638      	mov	r0, r7
  409f0e:	461d      	mov	r5, r3
  409f10:	46d0      	mov	r8, sl
  409f12:	f7ff fb29 	bl	409568 <memmove>
  409f16:	f8da 3004 	ldr.w	r3, [sl, #4]
  409f1a:	e703      	b.n	409d24 <_realloc_r+0xd8>
  409f1c:	1b0b      	subs	r3, r1, r4
  409f1e:	eb08 0204 	add.w	r2, r8, r4
  409f22:	4648      	mov	r0, r9
  409f24:	f043 0301 	orr.w	r3, r3, #1
  409f28:	f8cb 2008 	str.w	r2, [fp, #8]
  409f2c:	6053      	str	r3, [r2, #4]
  409f2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
  409f32:	f003 0301 	and.w	r3, r3, #1
  409f36:	431c      	orrs	r4, r3
  409f38:	f846 4c04 	str.w	r4, [r6, #-4]
  409f3c:	f7ff fb78 	bl	409630 <__malloc_unlock>
  409f40:	4630      	mov	r0, r6
  409f42:	e701      	b.n	409d48 <_realloc_r+0xfc>
  409f44:	4631      	mov	r1, r6
  409f46:	f7ff fb0f 	bl	409568 <memmove>
  409f4a:	e764      	b.n	409e16 <_realloc_r+0x1ca>
  409f4c:	68b3      	ldr	r3, [r6, #8]
  409f4e:	2a24      	cmp	r2, #36	; 0x24
  409f50:	6083      	str	r3, [r0, #8]
  409f52:	68f3      	ldr	r3, [r6, #12]
  409f54:	60c3      	str	r3, [r0, #12]
  409f56:	d022      	beq.n	409f9e <_realloc_r+0x352>
  409f58:	f100 0310 	add.w	r3, r0, #16
  409f5c:	f106 0210 	add.w	r2, r6, #16
  409f60:	e753      	b.n	409e0a <_realloc_r+0x1be>
  409f62:	f850 2c04 	ldr.w	r2, [r0, #-4]
  409f66:	4637      	mov	r7, r6
  409f68:	f022 0203 	bic.w	r2, r2, #3
  409f6c:	4415      	add	r5, r2
  409f6e:	e6d9      	b.n	409d24 <_realloc_r+0xd8>
  409f70:	4631      	mov	r1, r6
  409f72:	4638      	mov	r0, r7
  409f74:	4675      	mov	r5, lr
  409f76:	46d0      	mov	r8, sl
  409f78:	f7ff faf6 	bl	409568 <memmove>
  409f7c:	f8da 3004 	ldr.w	r3, [sl, #4]
  409f80:	e6d0      	b.n	409d24 <_realloc_r+0xd8>
  409f82:	463a      	mov	r2, r7
  409f84:	e70a      	b.n	409d9c <_realloc_r+0x150>
  409f86:	68b3      	ldr	r3, [r6, #8]
  409f88:	2a24      	cmp	r2, #36	; 0x24
  409f8a:	f8ca 3010 	str.w	r3, [sl, #16]
  409f8e:	68f3      	ldr	r3, [r6, #12]
  409f90:	f8ca 3014 	str.w	r3, [sl, #20]
  409f94:	d018      	beq.n	409fc8 <_realloc_r+0x37c>
  409f96:	3610      	adds	r6, #16
  409f98:	f10a 0318 	add.w	r3, sl, #24
  409f9c:	e7aa      	b.n	409ef4 <_realloc_r+0x2a8>
  409f9e:	6931      	ldr	r1, [r6, #16]
  409fa0:	f100 0318 	add.w	r3, r0, #24
  409fa4:	f106 0218 	add.w	r2, r6, #24
  409fa8:	6101      	str	r1, [r0, #16]
  409faa:	6971      	ldr	r1, [r6, #20]
  409fac:	6141      	str	r1, [r0, #20]
  409fae:	e72c      	b.n	409e0a <_realloc_r+0x1be>
  409fb0:	68b1      	ldr	r1, [r6, #8]
  409fb2:	2a24      	cmp	r2, #36	; 0x24
  409fb4:	f8ca 1010 	str.w	r1, [sl, #16]
  409fb8:	68f1      	ldr	r1, [r6, #12]
  409fba:	f8ca 1014 	str.w	r1, [sl, #20]
  409fbe:	d010      	beq.n	409fe2 <_realloc_r+0x396>
  409fc0:	3610      	adds	r6, #16
  409fc2:	f10a 0218 	add.w	r2, sl, #24
  409fc6:	e6e9      	b.n	409d9c <_realloc_r+0x150>
  409fc8:	6932      	ldr	r2, [r6, #16]
  409fca:	f10a 0320 	add.w	r3, sl, #32
  409fce:	3618      	adds	r6, #24
  409fd0:	f8ca 2018 	str.w	r2, [sl, #24]
  409fd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
  409fd8:	f8ca 201c 	str.w	r2, [sl, #28]
  409fdc:	e78a      	b.n	409ef4 <_realloc_r+0x2a8>
  409fde:	463b      	mov	r3, r7
  409fe0:	e761      	b.n	409ea6 <_realloc_r+0x25a>
  409fe2:	6931      	ldr	r1, [r6, #16]
  409fe4:	f10a 0220 	add.w	r2, sl, #32
  409fe8:	3618      	adds	r6, #24
  409fea:	f8ca 1018 	str.w	r1, [sl, #24]
  409fee:	f856 1c04 	ldr.w	r1, [r6, #-4]
  409ff2:	f8ca 101c 	str.w	r1, [sl, #28]
  409ff6:	e6d1      	b.n	409d9c <_realloc_r+0x150>
  409ff8:	4631      	mov	r1, r6
  409ffa:	4638      	mov	r0, r7
  409ffc:	f8cd c004 	str.w	ip, [sp, #4]
  40a000:	f7ff fab2 	bl	409568 <memmove>
  40a004:	f8dd c004 	ldr.w	ip, [sp, #4]
  40a008:	e753      	b.n	409eb2 <_realloc_r+0x266>
  40a00a:	68b3      	ldr	r3, [r6, #8]
  40a00c:	2a24      	cmp	r2, #36	; 0x24
  40a00e:	f8ca 3010 	str.w	r3, [sl, #16]
  40a012:	68f3      	ldr	r3, [r6, #12]
  40a014:	f8ca 3014 	str.w	r3, [sl, #20]
  40a018:	d003      	beq.n	40a022 <_realloc_r+0x3d6>
  40a01a:	3610      	adds	r6, #16
  40a01c:	f10a 0318 	add.w	r3, sl, #24
  40a020:	e741      	b.n	409ea6 <_realloc_r+0x25a>
  40a022:	6932      	ldr	r2, [r6, #16]
  40a024:	f10a 0320 	add.w	r3, sl, #32
  40a028:	3618      	adds	r6, #24
  40a02a:	f8ca 2018 	str.w	r2, [sl, #24]
  40a02e:	f856 2c04 	ldr.w	r2, [r6, #-4]
  40a032:	f8ca 201c 	str.w	r2, [sl, #28]
  40a036:	e736      	b.n	409ea6 <_realloc_r+0x25a>
  40a038:	20400484 	.word	0x20400484

0040a03c <_sbrk_r>:
  40a03c:	b538      	push	{r3, r4, r5, lr}
  40a03e:	2300      	movs	r3, #0
  40a040:	4c06      	ldr	r4, [pc, #24]	; (40a05c <_sbrk_r+0x20>)
  40a042:	4605      	mov	r5, r0
  40a044:	4608      	mov	r0, r1
  40a046:	6023      	str	r3, [r4, #0]
  40a048:	f7f8 fe5a 	bl	402d00 <_sbrk>
  40a04c:	1c43      	adds	r3, r0, #1
  40a04e:	d000      	beq.n	40a052 <_sbrk_r+0x16>
  40a050:	bd38      	pop	{r3, r4, r5, pc}
  40a052:	6823      	ldr	r3, [r4, #0]
  40a054:	2b00      	cmp	r3, #0
  40a056:	d0fb      	beq.n	40a050 <_sbrk_r+0x14>
  40a058:	602b      	str	r3, [r5, #0]
  40a05a:	bd38      	pop	{r3, r4, r5, pc}
  40a05c:	2040c4b8 	.word	0x2040c4b8

0040a060 <__ssprint_r>:
  40a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40a064:	6893      	ldr	r3, [r2, #8]
  40a066:	b083      	sub	sp, #12
  40a068:	4691      	mov	r9, r2
  40a06a:	f8d2 8000 	ldr.w	r8, [r2]
  40a06e:	9001      	str	r0, [sp, #4]
  40a070:	2b00      	cmp	r3, #0
  40a072:	d073      	beq.n	40a15c <__ssprint_r+0xfc>
  40a074:	f04f 0b00 	mov.w	fp, #0
  40a078:	460d      	mov	r5, r1
  40a07a:	6808      	ldr	r0, [r1, #0]
  40a07c:	688b      	ldr	r3, [r1, #8]
  40a07e:	465c      	mov	r4, fp
  40a080:	2c00      	cmp	r4, #0
  40a082:	d046      	beq.n	40a112 <__ssprint_r+0xb2>
  40a084:	429c      	cmp	r4, r3
  40a086:	461e      	mov	r6, r3
  40a088:	469a      	mov	sl, r3
  40a08a:	d349      	bcc.n	40a120 <__ssprint_r+0xc0>
  40a08c:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
  40a090:	f41e 6f90 	tst.w	lr, #1152	; 0x480
  40a094:	d02d      	beq.n	40a0f2 <__ssprint_r+0x92>
  40a096:	696b      	ldr	r3, [r5, #20]
  40a098:	1c62      	adds	r2, r4, #1
  40a09a:	6929      	ldr	r1, [r5, #16]
  40a09c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40a0a0:	1a46      	subs	r6, r0, r1
  40a0a2:	4610      	mov	r0, r2
  40a0a4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
  40a0a8:	4430      	add	r0, r6
  40a0aa:	105f      	asrs	r7, r3, #1
  40a0ac:	4287      	cmp	r7, r0
  40a0ae:	463a      	mov	r2, r7
  40a0b0:	d201      	bcs.n	40a0b6 <__ssprint_r+0x56>
  40a0b2:	4607      	mov	r7, r0
  40a0b4:	4602      	mov	r2, r0
  40a0b6:	f41e 6f80 	tst.w	lr, #1024	; 0x400
  40a0ba:	d034      	beq.n	40a126 <__ssprint_r+0xc6>
  40a0bc:	4611      	mov	r1, r2
  40a0be:	9801      	ldr	r0, [sp, #4]
  40a0c0:	f7fe ff5e 	bl	408f80 <_malloc_r>
  40a0c4:	4682      	mov	sl, r0
  40a0c6:	2800      	cmp	r0, #0
  40a0c8:	d04e      	beq.n	40a168 <__ssprint_r+0x108>
  40a0ca:	4632      	mov	r2, r6
  40a0cc:	6929      	ldr	r1, [r5, #16]
  40a0ce:	f7fc fa2d 	bl	40652c <memcpy>
  40a0d2:	89aa      	ldrh	r2, [r5, #12]
  40a0d4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  40a0d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  40a0dc:	81aa      	strh	r2, [r5, #12]
  40a0de:	eb0a 0006 	add.w	r0, sl, r6
  40a0e2:	1bba      	subs	r2, r7, r6
  40a0e4:	f8c5 a010 	str.w	sl, [r5, #16]
  40a0e8:	4626      	mov	r6, r4
  40a0ea:	46a2      	mov	sl, r4
  40a0ec:	6028      	str	r0, [r5, #0]
  40a0ee:	60aa      	str	r2, [r5, #8]
  40a0f0:	616f      	str	r7, [r5, #20]
  40a0f2:	4652      	mov	r2, sl
  40a0f4:	4659      	mov	r1, fp
  40a0f6:	f7ff fa37 	bl	409568 <memmove>
  40a0fa:	f8d9 2008 	ldr.w	r2, [r9, #8]
  40a0fe:	68ab      	ldr	r3, [r5, #8]
  40a100:	6828      	ldr	r0, [r5, #0]
  40a102:	1b14      	subs	r4, r2, r4
  40a104:	1b9b      	subs	r3, r3, r6
  40a106:	4450      	add	r0, sl
  40a108:	60ab      	str	r3, [r5, #8]
  40a10a:	6028      	str	r0, [r5, #0]
  40a10c:	f8c9 4008 	str.w	r4, [r9, #8]
  40a110:	b324      	cbz	r4, 40a15c <__ssprint_r+0xfc>
  40a112:	f8d8 b000 	ldr.w	fp, [r8]
  40a116:	f108 0808 	add.w	r8, r8, #8
  40a11a:	f858 4c04 	ldr.w	r4, [r8, #-4]
  40a11e:	e7af      	b.n	40a080 <__ssprint_r+0x20>
  40a120:	4626      	mov	r6, r4
  40a122:	46a2      	mov	sl, r4
  40a124:	e7e5      	b.n	40a0f2 <__ssprint_r+0x92>
  40a126:	9801      	ldr	r0, [sp, #4]
  40a128:	f7ff fd90 	bl	409c4c <_realloc_r>
  40a12c:	4682      	mov	sl, r0
  40a12e:	2800      	cmp	r0, #0
  40a130:	d1d5      	bne.n	40a0de <__ssprint_r+0x7e>
  40a132:	9c01      	ldr	r4, [sp, #4]
  40a134:	6929      	ldr	r1, [r5, #16]
  40a136:	4620      	mov	r0, r4
  40a138:	f7fe fe46 	bl	408dc8 <_free_r>
  40a13c:	230c      	movs	r3, #12
  40a13e:	6023      	str	r3, [r4, #0]
  40a140:	89ab      	ldrh	r3, [r5, #12]
  40a142:	2200      	movs	r2, #0
  40a144:	f04f 30ff 	mov.w	r0, #4294967295
  40a148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40a14c:	81ab      	strh	r3, [r5, #12]
  40a14e:	f8c9 2008 	str.w	r2, [r9, #8]
  40a152:	f8c9 2004 	str.w	r2, [r9, #4]
  40a156:	b003      	add	sp, #12
  40a158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a15c:	2000      	movs	r0, #0
  40a15e:	f8c9 0004 	str.w	r0, [r9, #4]
  40a162:	b003      	add	sp, #12
  40a164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40a168:	230c      	movs	r3, #12
  40a16a:	9a01      	ldr	r2, [sp, #4]
  40a16c:	6013      	str	r3, [r2, #0]
  40a16e:	e7e7      	b.n	40a140 <__ssprint_r+0xe0>

0040a170 <__register_exitproc>:
  40a170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a174:	4c26      	ldr	r4, [pc, #152]	; (40a210 <__register_exitproc+0xa0>)
  40a176:	4606      	mov	r6, r0
  40a178:	4688      	mov	r8, r1
  40a17a:	4691      	mov	r9, r2
  40a17c:	6825      	ldr	r5, [r4, #0]
  40a17e:	469a      	mov	sl, r3
  40a180:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40a184:	2c00      	cmp	r4, #0
  40a186:	d03a      	beq.n	40a1fe <__register_exitproc+0x8e>
  40a188:	6860      	ldr	r0, [r4, #4]
  40a18a:	281f      	cmp	r0, #31
  40a18c:	dc19      	bgt.n	40a1c2 <__register_exitproc+0x52>
  40a18e:	1c41      	adds	r1, r0, #1
  40a190:	b186      	cbz	r6, 40a1b4 <__register_exitproc+0x44>
  40a192:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  40a196:	2201      	movs	r2, #1
  40a198:	2e02      	cmp	r6, #2
  40a19a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  40a19e:	fa02 f200 	lsl.w	r2, r2, r0
  40a1a2:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  40a1a6:	ea43 0302 	orr.w	r3, r3, r2
  40a1aa:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  40a1ae:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40a1b2:	d01e      	beq.n	40a1f2 <__register_exitproc+0x82>
  40a1b4:	1c83      	adds	r3, r0, #2
  40a1b6:	6061      	str	r1, [r4, #4]
  40a1b8:	2000      	movs	r0, #0
  40a1ba:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  40a1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a1c2:	4b14      	ldr	r3, [pc, #80]	; (40a214 <__register_exitproc+0xa4>)
  40a1c4:	b303      	cbz	r3, 40a208 <__register_exitproc+0x98>
  40a1c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40a1ca:	f3af 8000 	nop.w
  40a1ce:	4604      	mov	r4, r0
  40a1d0:	b1d0      	cbz	r0, 40a208 <__register_exitproc+0x98>
  40a1d2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40a1d6:	2700      	movs	r7, #0
  40a1d8:	2101      	movs	r1, #1
  40a1da:	6003      	str	r3, [r0, #0]
  40a1dc:	4638      	mov	r0, r7
  40a1de:	6067      	str	r7, [r4, #4]
  40a1e0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40a1e4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40a1e8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  40a1ec:	2e00      	cmp	r6, #0
  40a1ee:	d0e1      	beq.n	40a1b4 <__register_exitproc+0x44>
  40a1f0:	e7cf      	b.n	40a192 <__register_exitproc+0x22>
  40a1f2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40a1f6:	431a      	orrs	r2, r3
  40a1f8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  40a1fc:	e7da      	b.n	40a1b4 <__register_exitproc+0x44>
  40a1fe:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40a202:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40a206:	e7bf      	b.n	40a188 <__register_exitproc+0x18>
  40a208:	f04f 30ff 	mov.w	r0, #4294967295
  40a20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a210:	0040ad7c 	.word	0x0040ad7c
  40a214:	00000000 	.word	0x00000000

0040a218 <_calloc_r>:
  40a218:	b510      	push	{r4, lr}
  40a21a:	fb02 f101 	mul.w	r1, r2, r1
  40a21e:	f7fe feaf 	bl	408f80 <_malloc_r>
  40a222:	4604      	mov	r4, r0
  40a224:	b168      	cbz	r0, 40a242 <_calloc_r+0x2a>
  40a226:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40a22a:	f022 0203 	bic.w	r2, r2, #3
  40a22e:	3a04      	subs	r2, #4
  40a230:	2a24      	cmp	r2, #36	; 0x24
  40a232:	d814      	bhi.n	40a25e <_calloc_r+0x46>
  40a234:	2a13      	cmp	r2, #19
  40a236:	d806      	bhi.n	40a246 <_calloc_r+0x2e>
  40a238:	4603      	mov	r3, r0
  40a23a:	2200      	movs	r2, #0
  40a23c:	601a      	str	r2, [r3, #0]
  40a23e:	605a      	str	r2, [r3, #4]
  40a240:	609a      	str	r2, [r3, #8]
  40a242:	4620      	mov	r0, r4
  40a244:	bd10      	pop	{r4, pc}
  40a246:	2100      	movs	r1, #0
  40a248:	2a1b      	cmp	r2, #27
  40a24a:	6001      	str	r1, [r0, #0]
  40a24c:	6041      	str	r1, [r0, #4]
  40a24e:	d90b      	bls.n	40a268 <_calloc_r+0x50>
  40a250:	2a24      	cmp	r2, #36	; 0x24
  40a252:	6081      	str	r1, [r0, #8]
  40a254:	60c1      	str	r1, [r0, #12]
  40a256:	d00a      	beq.n	40a26e <_calloc_r+0x56>
  40a258:	f100 0310 	add.w	r3, r0, #16
  40a25c:	e7ed      	b.n	40a23a <_calloc_r+0x22>
  40a25e:	2100      	movs	r1, #0
  40a260:	f7fc f9fe 	bl	406660 <memset>
  40a264:	4620      	mov	r0, r4
  40a266:	bd10      	pop	{r4, pc}
  40a268:	f100 0308 	add.w	r3, r0, #8
  40a26c:	e7e5      	b.n	40a23a <_calloc_r+0x22>
  40a26e:	6101      	str	r1, [r0, #16]
  40a270:	f100 0318 	add.w	r3, r0, #24
  40a274:	6141      	str	r1, [r0, #20]
  40a276:	e7e0      	b.n	40a23a <_calloc_r+0x22>

0040a278 <__aeabi_uldivmod>:
  40a278:	b953      	cbnz	r3, 40a290 <__aeabi_uldivmod+0x18>
  40a27a:	b94a      	cbnz	r2, 40a290 <__aeabi_uldivmod+0x18>
  40a27c:	2900      	cmp	r1, #0
  40a27e:	bf08      	it	eq
  40a280:	2800      	cmpeq	r0, #0
  40a282:	bf1c      	itt	ne
  40a284:	f04f 31ff 	movne.w	r1, #4294967295
  40a288:	f04f 30ff 	movne.w	r0, #4294967295
  40a28c:	f000 b83c 	b.w	40a308 <__aeabi_idiv0>
  40a290:	b082      	sub	sp, #8
  40a292:	46ec      	mov	ip, sp
  40a294:	e92d 5000 	stmdb	sp!, {ip, lr}
  40a298:	f000 f81e 	bl	40a2d8 <__gnu_uldivmod_helper>
  40a29c:	f8dd e004 	ldr.w	lr, [sp, #4]
  40a2a0:	b002      	add	sp, #8
  40a2a2:	bc0c      	pop	{r2, r3}
  40a2a4:	4770      	bx	lr
  40a2a6:	bf00      	nop

0040a2a8 <__gnu_ldivmod_helper>:
  40a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40a2ac:	4690      	mov	r8, r2
  40a2ae:	4606      	mov	r6, r0
  40a2b0:	460f      	mov	r7, r1
  40a2b2:	461d      	mov	r5, r3
  40a2b4:	9c06      	ldr	r4, [sp, #24]
  40a2b6:	f000 f829 	bl	40a30c <__divdi3>
  40a2ba:	fb08 fc01 	mul.w	ip, r8, r1
  40a2be:	4686      	mov	lr, r0
  40a2c0:	fba8 2300 	umull	r2, r3, r8, r0
  40a2c4:	fb00 c505 	mla	r5, r0, r5, ip
  40a2c8:	1ab2      	subs	r2, r6, r2
  40a2ca:	442b      	add	r3, r5
  40a2cc:	eb67 0303 	sbc.w	r3, r7, r3
  40a2d0:	e9c4 2300 	strd	r2, r3, [r4]
  40a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040a2d8 <__gnu_uldivmod_helper>:
  40a2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40a2dc:	461d      	mov	r5, r3
  40a2de:	4617      	mov	r7, r2
  40a2e0:	4680      	mov	r8, r0
  40a2e2:	4689      	mov	r9, r1
  40a2e4:	9e08      	ldr	r6, [sp, #32]
  40a2e6:	f000 f953 	bl	40a590 <__udivdi3>
  40a2ea:	fb00 f305 	mul.w	r3, r0, r5
  40a2ee:	fba0 4507 	umull	r4, r5, r0, r7
  40a2f2:	fb07 3701 	mla	r7, r7, r1, r3
  40a2f6:	ebb8 0404 	subs.w	r4, r8, r4
  40a2fa:	443d      	add	r5, r7
  40a2fc:	eb69 0505 	sbc.w	r5, r9, r5
  40a300:	e9c6 4500 	strd	r4, r5, [r6]
  40a304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0040a308 <__aeabi_idiv0>:
  40a308:	4770      	bx	lr
  40a30a:	bf00      	nop

0040a30c <__divdi3>:
  40a30c:	2900      	cmp	r1, #0
  40a30e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a312:	f2c0 80a2 	blt.w	40a45a <__divdi3+0x14e>
  40a316:	2600      	movs	r6, #0
  40a318:	2b00      	cmp	r3, #0
  40a31a:	f2c0 8098 	blt.w	40a44e <__divdi3+0x142>
  40a31e:	468c      	mov	ip, r1
  40a320:	4690      	mov	r8, r2
  40a322:	469e      	mov	lr, r3
  40a324:	4615      	mov	r5, r2
  40a326:	4604      	mov	r4, r0
  40a328:	460f      	mov	r7, r1
  40a32a:	bbcb      	cbnz	r3, 40a3a0 <__divdi3+0x94>
  40a32c:	428a      	cmp	r2, r1
  40a32e:	d956      	bls.n	40a3de <__divdi3+0xd2>
  40a330:	fab2 f382 	clz	r3, r2
  40a334:	b13b      	cbz	r3, 40a346 <__divdi3+0x3a>
  40a336:	f1c3 0220 	rsb	r2, r3, #32
  40a33a:	409f      	lsls	r7, r3
  40a33c:	409d      	lsls	r5, r3
  40a33e:	409c      	lsls	r4, r3
  40a340:	fa20 f202 	lsr.w	r2, r0, r2
  40a344:	4317      	orrs	r7, r2
  40a346:	0c28      	lsrs	r0, r5, #16
  40a348:	0c22      	lsrs	r2, r4, #16
  40a34a:	fa1f fe85 	uxth.w	lr, r5
  40a34e:	fbb7 f1f0 	udiv	r1, r7, r0
  40a352:	fb00 7711 	mls	r7, r0, r1, r7
  40a356:	fb0e f301 	mul.w	r3, lr, r1
  40a35a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
  40a35e:	42bb      	cmp	r3, r7
  40a360:	d907      	bls.n	40a372 <__divdi3+0x66>
  40a362:	197f      	adds	r7, r7, r5
  40a364:	f080 8101 	bcs.w	40a56a <__divdi3+0x25e>
  40a368:	42bb      	cmp	r3, r7
  40a36a:	f240 80fe 	bls.w	40a56a <__divdi3+0x25e>
  40a36e:	3902      	subs	r1, #2
  40a370:	442f      	add	r7, r5
  40a372:	1aff      	subs	r7, r7, r3
  40a374:	b2a4      	uxth	r4, r4
  40a376:	fbb7 f3f0 	udiv	r3, r7, r0
  40a37a:	fb00 7713 	mls	r7, r0, r3, r7
  40a37e:	fb0e fe03 	mul.w	lr, lr, r3
  40a382:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40a386:	45be      	cmp	lr, r7
  40a388:	d906      	bls.n	40a398 <__divdi3+0x8c>
  40a38a:	197f      	adds	r7, r7, r5
  40a38c:	f080 80eb 	bcs.w	40a566 <__divdi3+0x25a>
  40a390:	45be      	cmp	lr, r7
  40a392:	f240 80e8 	bls.w	40a566 <__divdi3+0x25a>
  40a396:	3b02      	subs	r3, #2
  40a398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  40a39c:	2200      	movs	r2, #0
  40a39e:	e003      	b.n	40a3a8 <__divdi3+0x9c>
  40a3a0:	428b      	cmp	r3, r1
  40a3a2:	d90f      	bls.n	40a3c4 <__divdi3+0xb8>
  40a3a4:	2200      	movs	r2, #0
  40a3a6:	4613      	mov	r3, r2
  40a3a8:	1c34      	adds	r4, r6, #0
  40a3aa:	f04f 0500 	mov.w	r5, #0
  40a3ae:	bf18      	it	ne
  40a3b0:	2401      	movne	r4, #1
  40a3b2:	4260      	negs	r0, r4
  40a3b4:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
  40a3b8:	4058      	eors	r0, r3
  40a3ba:	4051      	eors	r1, r2
  40a3bc:	1900      	adds	r0, r0, r4
  40a3be:	4169      	adcs	r1, r5
  40a3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a3c4:	fab3 f283 	clz	r2, r3
  40a3c8:	2a00      	cmp	r2, #0
  40a3ca:	f040 8083 	bne.w	40a4d4 <__divdi3+0x1c8>
  40a3ce:	4580      	cmp	r8, r0
  40a3d0:	f240 80cd 	bls.w	40a56e <__divdi3+0x262>
  40a3d4:	428b      	cmp	r3, r1
  40a3d6:	f0c0 80ca 	bcc.w	40a56e <__divdi3+0x262>
  40a3da:	4613      	mov	r3, r2
  40a3dc:	e7e4      	b.n	40a3a8 <__divdi3+0x9c>
  40a3de:	b912      	cbnz	r2, 40a3e6 <__divdi3+0xda>
  40a3e0:	2301      	movs	r3, #1
  40a3e2:	fbb3 f5f2 	udiv	r5, r3, r2
  40a3e6:	fab5 f285 	clz	r2, r5
  40a3ea:	2a00      	cmp	r2, #0
  40a3ec:	d13b      	bne.n	40a466 <__divdi3+0x15a>
  40a3ee:	1b78      	subs	r0, r7, r5
  40a3f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40a3f4:	fa1f fc85 	uxth.w	ip, r5
  40a3f8:	2201      	movs	r2, #1
  40a3fa:	0c21      	lsrs	r1, r4, #16
  40a3fc:	fbb0 f8fe 	udiv	r8, r0, lr
  40a400:	fb0e 0018 	mls	r0, lr, r8, r0
  40a404:	fb0c f308 	mul.w	r3, ip, r8
  40a408:	ea41 4700 	orr.w	r7, r1, r0, lsl #16
  40a40c:	42bb      	cmp	r3, r7
  40a40e:	d908      	bls.n	40a422 <__divdi3+0x116>
  40a410:	197f      	adds	r7, r7, r5
  40a412:	f080 80b0 	bcs.w	40a576 <__divdi3+0x26a>
  40a416:	42bb      	cmp	r3, r7
  40a418:	f240 80ad 	bls.w	40a576 <__divdi3+0x26a>
  40a41c:	f1a8 0802 	sub.w	r8, r8, #2
  40a420:	442f      	add	r7, r5
  40a422:	1aff      	subs	r7, r7, r3
  40a424:	b2a4      	uxth	r4, r4
  40a426:	fbb7 f3fe 	udiv	r3, r7, lr
  40a42a:	fb0e 7713 	mls	r7, lr, r3, r7
  40a42e:	fb0c fc03 	mul.w	ip, ip, r3
  40a432:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
  40a436:	45bc      	cmp	ip, r7
  40a438:	d906      	bls.n	40a448 <__divdi3+0x13c>
  40a43a:	197f      	adds	r7, r7, r5
  40a43c:	f080 8099 	bcs.w	40a572 <__divdi3+0x266>
  40a440:	45bc      	cmp	ip, r7
  40a442:	f240 8096 	bls.w	40a572 <__divdi3+0x266>
  40a446:	3b02      	subs	r3, #2
  40a448:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
  40a44c:	e7ac      	b.n	40a3a8 <__divdi3+0x9c>
  40a44e:	4252      	negs	r2, r2
  40a450:	ea6f 0606 	mvn.w	r6, r6
  40a454:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  40a458:	e761      	b.n	40a31e <__divdi3+0x12>
  40a45a:	4240      	negs	r0, r0
  40a45c:	f04f 36ff 	mov.w	r6, #4294967295
  40a460:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40a464:	e758      	b.n	40a318 <__divdi3+0xc>
  40a466:	4095      	lsls	r5, r2
  40a468:	f1c2 0120 	rsb	r1, r2, #32
  40a46c:	fa07 f302 	lsl.w	r3, r7, r2
  40a470:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40a474:	40cf      	lsrs	r7, r1
  40a476:	fa24 f101 	lsr.w	r1, r4, r1
  40a47a:	4094      	lsls	r4, r2
  40a47c:	fa1f fc85 	uxth.w	ip, r5
  40a480:	4319      	orrs	r1, r3
  40a482:	fbb7 f2fe 	udiv	r2, r7, lr
  40a486:	ea4f 4811 	mov.w	r8, r1, lsr #16
  40a48a:	fb0e 7712 	mls	r7, lr, r2, r7
  40a48e:	fb0c f302 	mul.w	r3, ip, r2
  40a492:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
  40a496:	42bb      	cmp	r3, r7
  40a498:	d905      	bls.n	40a4a6 <__divdi3+0x19a>
  40a49a:	197f      	adds	r7, r7, r5
  40a49c:	d271      	bcs.n	40a582 <__divdi3+0x276>
  40a49e:	42bb      	cmp	r3, r7
  40a4a0:	d96f      	bls.n	40a582 <__divdi3+0x276>
  40a4a2:	3a02      	subs	r2, #2
  40a4a4:	442f      	add	r7, r5
  40a4a6:	1aff      	subs	r7, r7, r3
  40a4a8:	b289      	uxth	r1, r1
  40a4aa:	fbb7 f8fe 	udiv	r8, r7, lr
  40a4ae:	fb0e 7718 	mls	r7, lr, r8, r7
  40a4b2:	fb0c f008 	mul.w	r0, ip, r8
  40a4b6:	ea41 4307 	orr.w	r3, r1, r7, lsl #16
  40a4ba:	4298      	cmp	r0, r3
  40a4bc:	d906      	bls.n	40a4cc <__divdi3+0x1c0>
  40a4be:	195b      	adds	r3, r3, r5
  40a4c0:	d261      	bcs.n	40a586 <__divdi3+0x27a>
  40a4c2:	4298      	cmp	r0, r3
  40a4c4:	d95f      	bls.n	40a586 <__divdi3+0x27a>
  40a4c6:	f1a8 0802 	sub.w	r8, r8, #2
  40a4ca:	442b      	add	r3, r5
  40a4cc:	1a18      	subs	r0, r3, r0
  40a4ce:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
  40a4d2:	e792      	b.n	40a3fa <__divdi3+0xee>
  40a4d4:	f1c2 0720 	rsb	r7, r2, #32
  40a4d8:	fa03 fe02 	lsl.w	lr, r3, r2
  40a4dc:	fa08 f502 	lsl.w	r5, r8, r2
  40a4e0:	4091      	lsls	r1, r2
  40a4e2:	fa28 f307 	lsr.w	r3, r8, r7
  40a4e6:	fa2c fc07 	lsr.w	ip, ip, r7
  40a4ea:	40f8      	lsrs	r0, r7
  40a4ec:	ea43 0e0e 	orr.w	lr, r3, lr
  40a4f0:	4308      	orrs	r0, r1
  40a4f2:	ea4f 481e 	mov.w	r8, lr, lsr #16
  40a4f6:	0c07      	lsrs	r7, r0, #16
  40a4f8:	fa1f fa8e 	uxth.w	sl, lr
  40a4fc:	fbbc f9f8 	udiv	r9, ip, r8
  40a500:	fb08 cc19 	mls	ip, r8, r9, ip
  40a504:	fb0a f109 	mul.w	r1, sl, r9
  40a508:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
  40a50c:	4561      	cmp	r1, ip
  40a50e:	d907      	bls.n	40a520 <__divdi3+0x214>
  40a510:	eb1c 0c0e 	adds.w	ip, ip, lr
  40a514:	d232      	bcs.n	40a57c <__divdi3+0x270>
  40a516:	4561      	cmp	r1, ip
  40a518:	d930      	bls.n	40a57c <__divdi3+0x270>
  40a51a:	f1a9 0902 	sub.w	r9, r9, #2
  40a51e:	44f4      	add	ip, lr
  40a520:	ebc1 0c0c 	rsb	ip, r1, ip
  40a524:	b280      	uxth	r0, r0
  40a526:	fbbc f3f8 	udiv	r3, ip, r8
  40a52a:	fb08 cc13 	mls	ip, r8, r3, ip
  40a52e:	fb0a fa03 	mul.w	sl, sl, r3
  40a532:	ea40 410c 	orr.w	r1, r0, ip, lsl #16
  40a536:	458a      	cmp	sl, r1
  40a538:	d906      	bls.n	40a548 <__divdi3+0x23c>
  40a53a:	eb11 010e 	adds.w	r1, r1, lr
  40a53e:	d225      	bcs.n	40a58c <__divdi3+0x280>
  40a540:	458a      	cmp	sl, r1
  40a542:	d923      	bls.n	40a58c <__divdi3+0x280>
  40a544:	3b02      	subs	r3, #2
  40a546:	4471      	add	r1, lr
  40a548:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
  40a54c:	ebca 0101 	rsb	r1, sl, r1
  40a550:	fba3 8905 	umull	r8, r9, r3, r5
  40a554:	4549      	cmp	r1, r9
  40a556:	d303      	bcc.n	40a560 <__divdi3+0x254>
  40a558:	d103      	bne.n	40a562 <__divdi3+0x256>
  40a55a:	4094      	lsls	r4, r2
  40a55c:	4544      	cmp	r4, r8
  40a55e:	d200      	bcs.n	40a562 <__divdi3+0x256>
  40a560:	3b01      	subs	r3, #1
  40a562:	2200      	movs	r2, #0
  40a564:	e720      	b.n	40a3a8 <__divdi3+0x9c>
  40a566:	3b01      	subs	r3, #1
  40a568:	e716      	b.n	40a398 <__divdi3+0x8c>
  40a56a:	3901      	subs	r1, #1
  40a56c:	e701      	b.n	40a372 <__divdi3+0x66>
  40a56e:	2301      	movs	r3, #1
  40a570:	e71a      	b.n	40a3a8 <__divdi3+0x9c>
  40a572:	3b01      	subs	r3, #1
  40a574:	e768      	b.n	40a448 <__divdi3+0x13c>
  40a576:	f108 38ff 	add.w	r8, r8, #4294967295
  40a57a:	e752      	b.n	40a422 <__divdi3+0x116>
  40a57c:	f109 39ff 	add.w	r9, r9, #4294967295
  40a580:	e7ce      	b.n	40a520 <__divdi3+0x214>
  40a582:	3a01      	subs	r2, #1
  40a584:	e78f      	b.n	40a4a6 <__divdi3+0x19a>
  40a586:	f108 38ff 	add.w	r8, r8, #4294967295
  40a58a:	e79f      	b.n	40a4cc <__divdi3+0x1c0>
  40a58c:	3b01      	subs	r3, #1
  40a58e:	e7db      	b.n	40a548 <__divdi3+0x23c>

0040a590 <__udivdi3>:
  40a590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a594:	2b00      	cmp	r3, #0
  40a596:	d140      	bne.n	40a61a <__udivdi3+0x8a>
  40a598:	428a      	cmp	r2, r1
  40a59a:	4604      	mov	r4, r0
  40a59c:	4615      	mov	r5, r2
  40a59e:	d94a      	bls.n	40a636 <__udivdi3+0xa6>
  40a5a0:	fab2 f382 	clz	r3, r2
  40a5a4:	460f      	mov	r7, r1
  40a5a6:	b14b      	cbz	r3, 40a5bc <__udivdi3+0x2c>
  40a5a8:	f1c3 0620 	rsb	r6, r3, #32
  40a5ac:	4099      	lsls	r1, r3
  40a5ae:	fa00 f403 	lsl.w	r4, r0, r3
  40a5b2:	fa02 f503 	lsl.w	r5, r2, r3
  40a5b6:	40f0      	lsrs	r0, r6
  40a5b8:	ea40 0701 	orr.w	r7, r0, r1
  40a5bc:	0c29      	lsrs	r1, r5, #16
  40a5be:	0c26      	lsrs	r6, r4, #16
  40a5c0:	fa1f fe85 	uxth.w	lr, r5
  40a5c4:	fbb7 f0f1 	udiv	r0, r7, r1
  40a5c8:	fb01 7710 	mls	r7, r1, r0, r7
  40a5cc:	fb0e f200 	mul.w	r2, lr, r0
  40a5d0:	ea46 4307 	orr.w	r3, r6, r7, lsl #16
  40a5d4:	429a      	cmp	r2, r3
  40a5d6:	d907      	bls.n	40a5e8 <__udivdi3+0x58>
  40a5d8:	195b      	adds	r3, r3, r5
  40a5da:	f080 80ea 	bcs.w	40a7b2 <__udivdi3+0x222>
  40a5de:	429a      	cmp	r2, r3
  40a5e0:	f240 80e7 	bls.w	40a7b2 <__udivdi3+0x222>
  40a5e4:	3802      	subs	r0, #2
  40a5e6:	442b      	add	r3, r5
  40a5e8:	1a9a      	subs	r2, r3, r2
  40a5ea:	b2a4      	uxth	r4, r4
  40a5ec:	fbb2 f3f1 	udiv	r3, r2, r1
  40a5f0:	fb01 2213 	mls	r2, r1, r3, r2
  40a5f4:	fb0e fe03 	mul.w	lr, lr, r3
  40a5f8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  40a5fc:	4596      	cmp	lr, r2
  40a5fe:	d906      	bls.n	40a60e <__udivdi3+0x7e>
  40a600:	1952      	adds	r2, r2, r5
  40a602:	f080 80da 	bcs.w	40a7ba <__udivdi3+0x22a>
  40a606:	4596      	cmp	lr, r2
  40a608:	f240 80d7 	bls.w	40a7ba <__udivdi3+0x22a>
  40a60c:	3b02      	subs	r3, #2
  40a60e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40a612:	2600      	movs	r6, #0
  40a614:	4631      	mov	r1, r6
  40a616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a61a:	428b      	cmp	r3, r1
  40a61c:	d844      	bhi.n	40a6a8 <__udivdi3+0x118>
  40a61e:	fab3 f683 	clz	r6, r3
  40a622:	2e00      	cmp	r6, #0
  40a624:	d145      	bne.n	40a6b2 <__udivdi3+0x122>
  40a626:	4282      	cmp	r2, r0
  40a628:	f240 80bf 	bls.w	40a7aa <__udivdi3+0x21a>
  40a62c:	428b      	cmp	r3, r1
  40a62e:	f0c0 80bc 	bcc.w	40a7aa <__udivdi3+0x21a>
  40a632:	4630      	mov	r0, r6
  40a634:	e7ee      	b.n	40a614 <__udivdi3+0x84>
  40a636:	b912      	cbnz	r2, 40a63e <__udivdi3+0xae>
  40a638:	2501      	movs	r5, #1
  40a63a:	fbb5 f5f2 	udiv	r5, r5, r2
  40a63e:	fab5 f285 	clz	r2, r5
  40a642:	2a00      	cmp	r2, #0
  40a644:	d17b      	bne.n	40a73e <__udivdi3+0x1ae>
  40a646:	1b4a      	subs	r2, r1, r5
  40a648:	0c2f      	lsrs	r7, r5, #16
  40a64a:	fa1f fe85 	uxth.w	lr, r5
  40a64e:	2601      	movs	r6, #1
  40a650:	0c23      	lsrs	r3, r4, #16
  40a652:	fbb2 f0f7 	udiv	r0, r2, r7
  40a656:	fb07 2210 	mls	r2, r7, r0, r2
  40a65a:	fb0e fc00 	mul.w	ip, lr, r0
  40a65e:	ea43 4102 	orr.w	r1, r3, r2, lsl #16
  40a662:	458c      	cmp	ip, r1
  40a664:	d907      	bls.n	40a676 <__udivdi3+0xe6>
  40a666:	1949      	adds	r1, r1, r5
  40a668:	f080 80a1 	bcs.w	40a7ae <__udivdi3+0x21e>
  40a66c:	458c      	cmp	ip, r1
  40a66e:	f240 809e 	bls.w	40a7ae <__udivdi3+0x21e>
  40a672:	3802      	subs	r0, #2
  40a674:	4429      	add	r1, r5
  40a676:	ebcc 0101 	rsb	r1, ip, r1
  40a67a:	b2a4      	uxth	r4, r4
  40a67c:	fbb1 f3f7 	udiv	r3, r1, r7
  40a680:	fb07 1113 	mls	r1, r7, r3, r1
  40a684:	fb0e fe03 	mul.w	lr, lr, r3
  40a688:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
  40a68c:	45a6      	cmp	lr, r4
  40a68e:	d906      	bls.n	40a69e <__udivdi3+0x10e>
  40a690:	1964      	adds	r4, r4, r5
  40a692:	f080 8090 	bcs.w	40a7b6 <__udivdi3+0x226>
  40a696:	45a6      	cmp	lr, r4
  40a698:	f240 808d 	bls.w	40a7b6 <__udivdi3+0x226>
  40a69c:	3b02      	subs	r3, #2
  40a69e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  40a6a2:	4631      	mov	r1, r6
  40a6a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a6a8:	2600      	movs	r6, #0
  40a6aa:	4630      	mov	r0, r6
  40a6ac:	4631      	mov	r1, r6
  40a6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a6b2:	f1c6 0520 	rsb	r5, r6, #32
  40a6b6:	40b3      	lsls	r3, r6
  40a6b8:	fa02 f706 	lsl.w	r7, r2, r6
  40a6bc:	fa01 f406 	lsl.w	r4, r1, r6
  40a6c0:	40ea      	lsrs	r2, r5
  40a6c2:	40e9      	lsrs	r1, r5
  40a6c4:	fa20 f505 	lsr.w	r5, r0, r5
  40a6c8:	431a      	orrs	r2, r3
  40a6ca:	4325      	orrs	r5, r4
  40a6cc:	ea4f 4c12 	mov.w	ip, r2, lsr #16
  40a6d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
  40a6d4:	b293      	uxth	r3, r2
  40a6d6:	fbb1 f8fc 	udiv	r8, r1, ip
  40a6da:	fb0c 1118 	mls	r1, ip, r8, r1
  40a6de:	fb03 f408 	mul.w	r4, r3, r8
  40a6e2:	ea4e 4101 	orr.w	r1, lr, r1, lsl #16
  40a6e6:	428c      	cmp	r4, r1
  40a6e8:	d906      	bls.n	40a6f8 <__udivdi3+0x168>
  40a6ea:	1889      	adds	r1, r1, r2
  40a6ec:	d269      	bcs.n	40a7c2 <__udivdi3+0x232>
  40a6ee:	428c      	cmp	r4, r1
  40a6f0:	d967      	bls.n	40a7c2 <__udivdi3+0x232>
  40a6f2:	f1a8 0802 	sub.w	r8, r8, #2
  40a6f6:	4411      	add	r1, r2
  40a6f8:	1b09      	subs	r1, r1, r4
  40a6fa:	b2ad      	uxth	r5, r5
  40a6fc:	fbb1 f4fc 	udiv	r4, r1, ip
  40a700:	fb0c 1114 	mls	r1, ip, r4, r1
  40a704:	fb03 fe04 	mul.w	lr, r3, r4
  40a708:	ea45 4301 	orr.w	r3, r5, r1, lsl #16
  40a70c:	459e      	cmp	lr, r3
  40a70e:	d905      	bls.n	40a71c <__udivdi3+0x18c>
  40a710:	189b      	adds	r3, r3, r2
  40a712:	d254      	bcs.n	40a7be <__udivdi3+0x22e>
  40a714:	459e      	cmp	lr, r3
  40a716:	d952      	bls.n	40a7be <__udivdi3+0x22e>
  40a718:	3c02      	subs	r4, #2
  40a71a:	4413      	add	r3, r2
  40a71c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
  40a720:	ebce 0303 	rsb	r3, lr, r3
  40a724:	fba4 8907 	umull	r8, r9, r4, r7
  40a728:	454b      	cmp	r3, r9
  40a72a:	d303      	bcc.n	40a734 <__udivdi3+0x1a4>
  40a72c:	d151      	bne.n	40a7d2 <__udivdi3+0x242>
  40a72e:	40b0      	lsls	r0, r6
  40a730:	4540      	cmp	r0, r8
  40a732:	d24e      	bcs.n	40a7d2 <__udivdi3+0x242>
  40a734:	2600      	movs	r6, #0
  40a736:	1e60      	subs	r0, r4, #1
  40a738:	4631      	mov	r1, r6
  40a73a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40a73e:	f1c2 0620 	rsb	r6, r2, #32
  40a742:	4095      	lsls	r5, r2
  40a744:	fa01 f302 	lsl.w	r3, r1, r2
  40a748:	fa00 f402 	lsl.w	r4, r0, r2
  40a74c:	0c2f      	lsrs	r7, r5, #16
  40a74e:	40f1      	lsrs	r1, r6
  40a750:	40f0      	lsrs	r0, r6
  40a752:	fa1f fe85 	uxth.w	lr, r5
  40a756:	fbb1 f6f7 	udiv	r6, r1, r7
  40a75a:	4318      	orrs	r0, r3
  40a75c:	fb07 1116 	mls	r1, r7, r6, r1
  40a760:	fb0e f206 	mul.w	r2, lr, r6
  40a764:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  40a768:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
  40a76c:	429a      	cmp	r2, r3
  40a76e:	d905      	bls.n	40a77c <__udivdi3+0x1ec>
  40a770:	195b      	adds	r3, r3, r5
  40a772:	d229      	bcs.n	40a7c8 <__udivdi3+0x238>
  40a774:	429a      	cmp	r2, r3
  40a776:	d927      	bls.n	40a7c8 <__udivdi3+0x238>
  40a778:	3e02      	subs	r6, #2
  40a77a:	442b      	add	r3, r5
  40a77c:	1a9b      	subs	r3, r3, r2
  40a77e:	b280      	uxth	r0, r0
  40a780:	fbb3 fcf7 	udiv	ip, r3, r7
  40a784:	fb07 331c 	mls	r3, r7, ip, r3
  40a788:	fb0e f10c 	mul.w	r1, lr, ip
  40a78c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
  40a790:	4299      	cmp	r1, r3
  40a792:	d906      	bls.n	40a7a2 <__udivdi3+0x212>
  40a794:	195b      	adds	r3, r3, r5
  40a796:	d219      	bcs.n	40a7cc <__udivdi3+0x23c>
  40a798:	4299      	cmp	r1, r3
  40a79a:	d917      	bls.n	40a7cc <__udivdi3+0x23c>
  40a79c:	f1ac 0c02 	sub.w	ip, ip, #2
  40a7a0:	442b      	add	r3, r5
  40a7a2:	1a5a      	subs	r2, r3, r1
  40a7a4:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
  40a7a8:	e752      	b.n	40a650 <__udivdi3+0xc0>
  40a7aa:	2001      	movs	r0, #1
  40a7ac:	e732      	b.n	40a614 <__udivdi3+0x84>
  40a7ae:	3801      	subs	r0, #1
  40a7b0:	e761      	b.n	40a676 <__udivdi3+0xe6>
  40a7b2:	3801      	subs	r0, #1
  40a7b4:	e718      	b.n	40a5e8 <__udivdi3+0x58>
  40a7b6:	3b01      	subs	r3, #1
  40a7b8:	e771      	b.n	40a69e <__udivdi3+0x10e>
  40a7ba:	3b01      	subs	r3, #1
  40a7bc:	e727      	b.n	40a60e <__udivdi3+0x7e>
  40a7be:	3c01      	subs	r4, #1
  40a7c0:	e7ac      	b.n	40a71c <__udivdi3+0x18c>
  40a7c2:	f108 38ff 	add.w	r8, r8, #4294967295
  40a7c6:	e797      	b.n	40a6f8 <__udivdi3+0x168>
  40a7c8:	3e01      	subs	r6, #1
  40a7ca:	e7d7      	b.n	40a77c <__udivdi3+0x1ec>
  40a7cc:	f10c 3cff 	add.w	ip, ip, #4294967295
  40a7d0:	e7e7      	b.n	40a7a2 <__udivdi3+0x212>
  40a7d2:	4620      	mov	r0, r4
  40a7d4:	2600      	movs	r6, #0
  40a7d6:	e71d      	b.n	40a614 <__udivdi3+0x84>
  40a7d8:	454c4449 	.word	0x454c4449
  40a7dc:	00000000 	.word	0x00000000
  40a7e0:	09632509 	.word	0x09632509
  40a7e4:	25097525 	.word	0x25097525
  40a7e8:	75250975 	.word	0x75250975
  40a7ec:	00000a0d 	.word	0x00000a0d
  40a7f0:	51726d54 	.word	0x51726d54
  40a7f4:	00000000 	.word	0x00000000
  40a7f8:	20726d54 	.word	0x20726d54
  40a7fc:	00637653 	.word	0x00637653
  40a800:	00002580 	.word	0x00002580
  40a804:	000000c0 	.word	0x000000c0
  40a808:	00000800 	.word	0x00000800
  40a80c:	4c4c454d 	.word	0x4c4c454d
  40a810:	4f525441 	.word	0x4f525441
  40a814:	3030394e 	.word	0x3030394e
  40a818:	4f422030 	.word	0x4f422030
  40a81c:	5320544f 	.word	0x5320544f
  40a820:	45555145 	.word	0x45555145
  40a824:	0a45434e 	.word	0x0a45434e
  40a828:	54524155 	.word	0x54524155
  40a82c:	4e4f4320 	.word	0x4e4f4320
  40a830:	454c4f53 	.word	0x454c4f53
  40a834:	41545320 	.word	0x41545320
  40a838:	44455452 	.word	0x44455452
  40a83c:	204e4f20 	.word	0x204e4f20
  40a840:	54524155 	.word	0x54524155
  40a844:	61420a34 	.word	0x61420a34
  40a848:	61526475 	.word	0x61526475
  40a84c:	203a6574 	.word	0x203a6574
  40a850:	32353131 	.word	0x32353131
  40a854:	420a3030 	.word	0x420a3030
  40a858:	3a737469 	.word	0x3a737469
  40a85c:	4e0a3820 	.word	0x4e0a3820
  40a860:	7473206f 	.word	0x7473206f
  40a864:	6220706f 	.word	0x6220706f
  40a868:	20737469 	.word	0x20737469
  40a86c:	0000000a 	.word	0x0000000a
  40a870:	20495053 	.word	0x20495053
  40a874:	54494e49 	.word	0x54494e49
  40a878:	494c4149 	.word	0x494c4149
  40a87c:	4954415a 	.word	0x4954415a
  40a880:	2d204e4f 	.word	0x2d204e4f
  40a884:	41545320 	.word	0x41545320
  40a888:	44455452 	.word	0x44455452
  40a88c:	0000000a 	.word	0x0000000a
  40a890:	20495053 	.word	0x20495053
  40a894:	54494e49 	.word	0x54494e49
  40a898:	494c4149 	.word	0x494c4149
  40a89c:	4954415a 	.word	0x4954415a
  40a8a0:	2d204e4f 	.word	0x2d204e4f
  40a8a4:	4e494620 	.word	0x4e494620
  40a8a8:	45485349 	.word	0x45485349
  40a8ac:	00000a44 	.word	0x00000a44
  40a8b0:	314d5744 	.word	0x314d5744
  40a8b4:	20303030 	.word	0x20303030
  40a8b8:	54494e49 	.word	0x54494e49
  40a8bc:	494c4149 	.word	0x494c4149
  40a8c0:	4954415a 	.word	0x4954415a
  40a8c4:	2d204e4f 	.word	0x2d204e4f
  40a8c8:	41545320 	.word	0x41545320
  40a8cc:	44455452 	.word	0x44455452
  40a8d0:	0000000a 	.word	0x0000000a
  40a8d4:	314d5744 	.word	0x314d5744
  40a8d8:	20303030 	.word	0x20303030
  40a8dc:	54494e49 	.word	0x54494e49
  40a8e0:	494c4149 	.word	0x494c4149
  40a8e4:	4954415a 	.word	0x4954415a
  40a8e8:	2d204e4f 	.word	0x2d204e4f
  40a8ec:	4e494620 	.word	0x4e494620
  40a8f0:	45485349 	.word	0x45485349
  40a8f4:	00000a44 	.word	0x00000a44
  40a8f8:	43544157 	.word	0x43544157
  40a8fc:	474f4448 	.word	0x474f4448
  40a900:	494e4920 	.word	0x494e4920
  40a904:	4c414954 	.word	0x4c414954
  40a908:	54415a49 	.word	0x54415a49
  40a90c:	204e4f49 	.word	0x204e4f49
  40a910:	5453202d 	.word	0x5453202d
  40a914:	45545241 	.word	0x45545241
  40a918:	00000a44 	.word	0x00000a44
  40a91c:	43544157 	.word	0x43544157
  40a920:	474f4448 	.word	0x474f4448
  40a924:	494e4920 	.word	0x494e4920
  40a928:	4c414954 	.word	0x4c414954
  40a92c:	54415a49 	.word	0x54415a49
  40a930:	204e4f49 	.word	0x204e4f49
  40a934:	4946202d 	.word	0x4946202d
  40a938:	4853494e 	.word	0x4853494e
  40a93c:	000a4445 	.word	0x000a4445
  40a940:	424f4c47 	.word	0x424f4c47
  40a944:	49204c41 	.word	0x49204c41
  40a948:	49205152 	.word	0x49205152
  40a94c:	4954494e 	.word	0x4954494e
  40a950:	5a494c41 	.word	0x5a494c41
  40a954:	4f495441 	.word	0x4f495441
  40a958:	202d204e 	.word	0x202d204e
  40a95c:	52415453 	.word	0x52415453
  40a960:	0a444554 	.word	0x0a444554
  40a964:	00000000 	.word	0x00000000
  40a968:	424f4c47 	.word	0x424f4c47
  40a96c:	49204c41 	.word	0x49204c41
  40a970:	49205152 	.word	0x49205152
  40a974:	4954494e 	.word	0x4954494e
  40a978:	5a494c41 	.word	0x5a494c41
  40a97c:	4f495441 	.word	0x4f495441
  40a980:	202d204e 	.word	0x202d204e
  40a984:	494e4946 	.word	0x494e4946
  40a988:	44454853 	.word	0x44454853
  40a98c:	0000000a 	.word	0x0000000a
  40a990:	49524550 	.word	0x49524550
  40a994:	52454850 	.word	0x52454850
  40a998:	49204c41 	.word	0x49204c41
  40a99c:	49205152 	.word	0x49205152
  40a9a0:	4954494e 	.word	0x4954494e
  40a9a4:	5a494c41 	.word	0x5a494c41
  40a9a8:	4f495441 	.word	0x4f495441
  40a9ac:	202d204e 	.word	0x202d204e
  40a9b0:	52415453 	.word	0x52415453
  40a9b4:	0a444554 	.word	0x0a444554
  40a9b8:	00000000 	.word	0x00000000
  40a9bc:	49524550 	.word	0x49524550
  40a9c0:	52454850 	.word	0x52454850
  40a9c4:	49204c41 	.word	0x49204c41
  40a9c8:	49205152 	.word	0x49205152
  40a9cc:	4954494e 	.word	0x4954494e
  40a9d0:	5a494c41 	.word	0x5a494c41
  40a9d4:	4f495441 	.word	0x4f495441
  40a9d8:	202d204e 	.word	0x202d204e
  40a9dc:	494e4946 	.word	0x494e4946
  40a9e0:	44454853 	.word	0x44454853
  40a9e4:	0000000a 	.word	0x0000000a
  40a9e8:	4b534154 	.word	0x4b534154
  40a9ec:	00000031 	.word	0x00000031
  40a9f0:	54545542 	.word	0x54545542
  40a9f4:	41544e4f 	.word	0x41544e4f
  40a9f8:	00004b53 	.word	0x00004b53
  40a9fc:	444e4553 	.word	0x444e4553
  40aa00:	4d415246 	.word	0x4d415246
  40aa04:	53415445 	.word	0x53415445
  40aa08:	0000004b 	.word	0x0000004b
  40aa0c:	6867694c 	.word	0x6867694c
  40aa10:	6f207374 	.word	0x6f207374
  40aa14:	48200a6e 	.word	0x48200a6e
  40aa18:	68532069 	.word	0x68532069
  40aa1c:	6c65766f 	.word	0x6c65766f
  40aa20:	726f4c20 	.word	0x726f4c20
  40aa24:	00000a64 	.word	0x00000a64
  40aa28:	65747962 	.word	0x65747962
  40aa2c:	3a642520 	.word	0x3a642520
  40aa30:	0a782520 	.word	0x0a782520
  40aa34:	00000000 	.word	0x00000000
  40aa38:	68737550 	.word	0x68737550
  40aa3c:	69775320 	.word	0x69775320
  40aa40:	20686374 	.word	0x20686374
  40aa44:	00000a31 	.word	0x00000a31
  40aa48:	68737550 	.word	0x68737550
  40aa4c:	69775320 	.word	0x69775320
  40aa50:	20686374 	.word	0x20686374
  40aa54:	00000a32 	.word	0x00000a32
  40aa58:	74736554 	.word	0x74736554
  40aa5c:	49766544 	.word	0x49766544
  40aa60:	30203a44 	.word	0x30203a44
  40aa64:	0a782578 	.word	0x0a782578
  40aa68:	00000000 	.word	0x00000000
  40aa6c:	53737953 	.word	0x53737953
  40aa70:	75746174 	.word	0x75746174
  40aa74:	30203a73 	.word	0x30203a73
  40aa78:	0a782578 	.word	0x0a782578
  40aa7c:	00000000 	.word	0x00000000
  40aa80:	57204449 	.word	0x57204449
  40aa84:	54544952 	.word	0x54544952
  40aa88:	520a4e45 	.word	0x520a4e45
  40aa8c:	20444145 	.word	0x20444145
  40aa90:	4b434142 	.word	0x4b434142
  40aa94:	7830203a 	.word	0x7830203a
  40aa98:	000a7825 	.word	0x000a7825
  40aa9c:	3456414e 	.word	0x3456414e
  40aaa0:	66654c20 	.word	0x66654c20
  40aaa4:	00000a74 	.word	0x00000a74
  40aaa8:	616f6c66 	.word	0x616f6c66
  40aaac:	61686374 	.word	0x61686374
  40aab0:	2065676e 	.word	0x2065676e
  40aab4:	3a786568 	.word	0x3a786568
  40aab8:	0a782520 	.word	0x0a782520
  40aabc:	00000000 	.word	0x00000000
  40aac0:	616f6c66 	.word	0x616f6c66
  40aac4:	61686374 	.word	0x61686374
  40aac8:	2065676e 	.word	0x2065676e
  40aacc:	616f6c66 	.word	0x616f6c66
  40aad0:	25203a74 	.word	0x25203a74
  40aad4:	00000a66 	.word	0x00000a66
  40aad8:	616f6c66 	.word	0x616f6c66
  40aadc:	726f2074 	.word	0x726f2074
  40aae0:	203a6769 	.word	0x203a6769
  40aae4:	000a7825 	.word	0x000a7825
  40aae8:	3456414e 	.word	0x3456414e
  40aaec:	67695220 	.word	0x67695220
  40aaf0:	000a7468 	.word	0x000a7468
  40aaf4:	3456414e 	.word	0x3456414e
  40aaf8:	20705520 	.word	0x20705520
  40aafc:	000a6e4f 	.word	0x000a6e4f
  40ab00:	3456414e 	.word	0x3456414e
  40ab04:	20705520 	.word	0x20705520
  40ab08:	0a66664f 	.word	0x0a66664f
  40ab0c:	00000000 	.word	0x00000000
  40ab10:	3456414e 	.word	0x3456414e
  40ab14:	776f4420 	.word	0x776f4420
  40ab18:	00000a6e 	.word	0x00000a6e
  40ab1c:	3456414e 	.word	0x3456414e
  40ab20:	73755020 	.word	0x73755020
  40ab24:	00000a68 	.word	0x00000a68
  40ab28:	3556414e 	.word	0x3556414e
  40ab2c:	66654c20 	.word	0x66654c20
  40ab30:	00000a74 	.word	0x00000a74
  40ab34:	3556414e 	.word	0x3556414e
  40ab38:	67695220 	.word	0x67695220
  40ab3c:	000a7468 	.word	0x000a7468
  40ab40:	3556414e 	.word	0x3556414e
  40ab44:	0a705520 	.word	0x0a705520
  40ab48:	00000000 	.word	0x00000000
  40ab4c:	3556414e 	.word	0x3556414e
  40ab50:	776f4420 	.word	0x776f4420
  40ab54:	00000a6e 	.word	0x00000a6e
  40ab58:	3556414e 	.word	0x3556414e
  40ab5c:	73755020 	.word	0x73755020
  40ab60:	00000a68 	.word	0x00000a68
  40ab64:	4c414e41 	.word	0x4c414e41
  40ab68:	4555474f 	.word	0x4555474f
  40ab6c:	54494220 	.word	0x54494220
  40ab70:	0a214843 	.word	0x0a214843
  40ab74:	00000000 	.word	0x00000000
  40ab78:	74727173 	.word	0x74727173
  40ab7c:	00000000 	.word	0x00000000

0040ab80 <npio2_hw>:
  40ab80:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  40ab90:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  40aba0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  40abb0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  40abc0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  40abd0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  40abe0:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  40abf0:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

0040ac00 <two_over_pi>:
  40ac00:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  40ac10:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  40ac20:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  40ac30:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  40ac40:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  40ac50:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  40ac60:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  40ac70:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  40ac80:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  40ac90:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  40aca0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  40acb0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  40acc0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  40acd0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  40ace0:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  40acf0:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  40ad00:	0060e27b 00c08c6b                       {.`.k...

0040ad08 <init_jk>:
  40ad08:	00000002 00000003 00000004 00000006     ................

0040ad18 <PIo2>:
  40ad18:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  40ad28:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  40ad38:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  40ad48:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

0040ad58 <atanlo>:
  40ad58:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

0040ad68 <atanhi>:
  40ad68:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
  40ad78:	00000043                                C...

0040ad7c <_global_impure_ptr>:
  40ad7c:	20400020                                 .@ 

0040ad80 <zeroes.6911>:
  40ad80:	30303030 30303030 30303030 30303030     0000000000000000

0040ad90 <blanks.6910>:
  40ad90:	20202020 20202020 20202020 20202020                     
  40ada0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  40adb0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  40adc0:	00000000 33323130 37363534 62613938     ....0123456789ab
  40add0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  40ade0:	00000030 69666e49 7974696e 00000000     0...Infinity....
  40adf0:	004e614e 49534f50 00000058 0000002e     NaN.POSIX.......

0040ae00 <__mprec_tens>:
  40ae00:	00000000 3ff00000 00000000 40240000     .......?......$@
  40ae10:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40ae20:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40ae30:	00000000 412e8480 00000000 416312d0     .......A......cA
  40ae40:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40ae50:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40ae60:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40ae70:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40ae80:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40ae90:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40aea0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40aeb0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40aec0:	79d99db4 44ea7843                       ...yCx.D

0040aec8 <p05.5302>:
  40aec8:	00000005 00000019 0000007d 00000000     ........}.......

0040aed8 <__mprec_bigtens>:
  40aed8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40aee8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40aef8:	7f73bf3c 75154fdd                       <.s..O.u

0040af00 <_init>:
  40af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40af02:	bf00      	nop
  40af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40af06:	bc08      	pop	{r3}
  40af08:	469e      	mov	lr, r3
  40af0a:	4770      	bx	lr

0040af0c <__init_array_start>:
  40af0c:	00407cb9 	.word	0x00407cb9

0040af10 <__frame_dummy_init_array_entry>:
  40af10:	00400165                                e.@.

0040af14 <_fini>:
  40af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40af16:	bf00      	nop
  40af18:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40af1a:	bc08      	pop	{r3}
  40af1c:	469e      	mov	lr, r3
  40af1e:	4770      	bx	lr

0040af20 <__fini_array_start>:
  40af20:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <__fdlib_version>:
20400018:	0001 0000 0000 0000                         ........

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	ad78 0040 0000 0000 0000 0000 0000 0000     x.@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 

2040044c <lconv>:
2040044c:	adfc 0040 ab74 0040 ab74 0040 ab74 0040     ..@.t.@.t.@.t.@.
2040045c:	ab74 0040 ab74 0040 ab74 0040 ab74 0040     t.@.t.@.t.@.t.@.
2040046c:	ab74 0040 ab74 0040 ffff ffff ffff ffff     t.@.t.@.........
2040047c:	ffff ffff ffff 0000                         ........

20400484 <__malloc_av_>:
	...
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 
2040085c:	0854 2040 0854 2040 085c 2040 085c 2040     T.@ T.@ \.@ \.@ 
2040086c:	0864 2040 0864 2040 086c 2040 086c 2040     d.@ d.@ l.@ l.@ 
2040087c:	0874 2040 0874 2040 087c 2040 087c 2040     t.@ t.@ |.@ |.@ 

2040088c <__malloc_trim_threshold>:
2040088c:	0000 0002                                   ....

20400890 <__malloc_sbrk_base>:
20400890:	ffff ffff                                   ....
