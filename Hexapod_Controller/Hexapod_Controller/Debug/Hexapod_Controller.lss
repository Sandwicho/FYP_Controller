
Hexapod_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003520  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20400000  00403520  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000bb80  20400438  00403958  00020438  2**2
                  ALLOC
  3 .stack        00002000  2040bfb8  0040f4d8  00020438  2**0
                  ALLOC
  4 .heap         00000200  2040dfb8  004114d8  00020438  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001204d  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f2f  00000000  00000000  0003250c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009287  00000000  00000000  0003543b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000da8  00000000  00000000  0003e6c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e50  00000000  00000000  0003f46a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00008ac8  00000000  00000000  000402ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011321  00000000  00000000  00048d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007cad7  00000000  00000000  0005a0a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000216c  00000000  00000000  000d6b7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040dfb8 	.word	0x2040dfb8
  400004:	00402789 	.word	0x00402789
  400008:	00402785 	.word	0x00402785
  40000c:	00402785 	.word	0x00402785
  400010:	00402785 	.word	0x00402785
  400014:	00402785 	.word	0x00402785
  400018:	00402785 	.word	0x00402785
	...
  40002c:	00400509 	.word	0x00400509
  400030:	00402785 	.word	0x00402785
  400034:	00000000 	.word	0x00000000
  400038:	004005a9 	.word	0x004005a9
  40003c:	00400611 	.word	0x00400611
  400040:	00402785 	.word	0x00402785
  400044:	00402785 	.word	0x00402785
  400048:	00402785 	.word	0x00402785
  40004c:	00402785 	.word	0x00402785
  400050:	00402785 	.word	0x00402785
  400054:	00402785 	.word	0x00402785
  400058:	00402785 	.word	0x00402785
  40005c:	00402785 	.word	0x00402785
  400060:	00402785 	.word	0x00402785
  400064:	00000000 	.word	0x00000000
  400068:	00402db9 	.word	0x00402db9
  40006c:	004002c1 	.word	0x004002c1
  400070:	00000000 	.word	0x00000000
  400074:	00402785 	.word	0x00402785
  400078:	00402785 	.word	0x00402785
  40007c:	00402785 	.word	0x00402785
  400080:	004002d5 	.word	0x004002d5
  400084:	00000000 	.word	0x00000000
  400088:	00402785 	.word	0x00402785
  40008c:	00402785 	.word	0x00402785
  400090:	00402785 	.word	0x00402785
  400094:	00402785 	.word	0x00402785
  400098:	00402785 	.word	0x00402785
  40009c:	00402785 	.word	0x00402785
  4000a0:	00402785 	.word	0x00402785
  4000a4:	00402785 	.word	0x00402785
	...
  4000b4:	00402201 	.word	0x00402201
  4000b8:	00000000 	.word	0x00000000
  4000bc:	00402785 	.word	0x00402785
  4000c0:	00402785 	.word	0x00402785
  4000c4:	00402785 	.word	0x00402785
  4000c8:	00402785 	.word	0x00402785
	...
  4000e0:	00402215 	.word	0x00402215
  4000e4:	00402785 	.word	0x00402785
  4000e8:	00402785 	.word	0x00402785
  4000ec:	00402785 	.word	0x00402785
  4000f0:	00402785 	.word	0x00402785
  4000f4:	00402785 	.word	0x00402785
  4000f8:	00402785 	.word	0x00402785
	...
  400108:	00402785 	.word	0x00402785
  40010c:	00402785 	.word	0x00402785
  400110:	00402785 	.word	0x00402785
	...
  400120:	00402785 	.word	0x00402785
  400124:	00402785 	.word	0x00402785
  400128:	00402785 	.word	0x00402785
  40012c:	00402785 	.word	0x00402785
  400130:	00402785 	.word	0x00402785
	...
  40013c:	00402785 	.word	0x00402785

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400438 	.word	0x20400438
  40015c:	00000000 	.word	0x00000000
  400160:	00403520 	.word	0x00403520

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	2040043c 	.word	0x2040043c
  400190:	00403520 	.word	0x00403520
  400194:	00403520 	.word	0x00403520
  400198:	00000000 	.word	0x00000000

0040019c <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  40019c:	b510      	push	{r4, lr}
  40019e:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <spi_master_init+0x48>)
  4001a2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4001a4:	2380      	movs	r3, #128	; 0x80
  4001a6:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4001a8:	6863      	ldr	r3, [r4, #4]
  4001aa:	f043 0301 	orr.w	r3, r3, #1
  4001ae:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4001b0:	6863      	ldr	r3, [r4, #4]
  4001b2:	f043 0310 	orr.w	r3, r3, #16
  4001b6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4001b8:	6863      	ldr	r3, [r4, #4]
  4001ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4001be:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4001c0:	2100      	movs	r1, #0
  4001c2:	4620      	mov	r0, r4
  4001c4:	4b08      	ldr	r3, [pc, #32]	; (4001e8 <spi_master_init+0x4c>)
  4001c6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4001c8:	6863      	ldr	r3, [r4, #4]
  4001ca:	f023 0302 	bic.w	r3, r3, #2
  4001ce:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4001d0:	6863      	ldr	r3, [r4, #4]
  4001d2:	f023 0304 	bic.w	r3, r3, #4
  4001d6:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4001d8:	2100      	movs	r1, #0
  4001da:	4620      	mov	r0, r4
  4001dc:	4b03      	ldr	r3, [pc, #12]	; (4001ec <spi_master_init+0x50>)
  4001de:	4798      	blx	r3
  4001e0:	bd10      	pop	{r4, pc}
  4001e2:	bf00      	nop
  4001e4:	004002e9 	.word	0x004002e9
  4001e8:	00400315 	.word	0x00400315
  4001ec:	0040032d 	.word	0x0040032d

004001f0 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4001f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f4:	4604      	mov	r4, r0
  4001f6:	460d      	mov	r5, r1
  4001f8:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  4001fa:	4915      	ldr	r1, [pc, #84]	; (400250 <spi_master_setup_device+0x60>)
  4001fc:	4618      	mov	r0, r3
  4001fe:	4b15      	ldr	r3, [pc, #84]	; (400254 <spi_master_setup_device+0x64>)
  400200:	4798      	blx	r3
  400202:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400204:	2300      	movs	r3, #0
  400206:	461a      	mov	r2, r3
  400208:	6829      	ldr	r1, [r5, #0]
  40020a:	4620      	mov	r0, r4
  40020c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 40026c <spi_master_setup_device+0x7c>
  400210:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400212:	2208      	movs	r2, #8
  400214:	6829      	ldr	r1, [r5, #0]
  400216:	4620      	mov	r0, r4
  400218:	4b0f      	ldr	r3, [pc, #60]	; (400258 <spi_master_setup_device+0x68>)
  40021a:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  40021c:	b2fa      	uxtb	r2, r7
  40021e:	6829      	ldr	r1, [r5, #0]
  400220:	4620      	mov	r0, r4
  400222:	4b0e      	ldr	r3, [pc, #56]	; (40025c <spi_master_setup_device+0x6c>)
  400224:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400226:	2208      	movs	r2, #8
  400228:	6829      	ldr	r1, [r5, #0]
  40022a:	4620      	mov	r0, r4
  40022c:	4b0c      	ldr	r3, [pc, #48]	; (400260 <spi_master_setup_device+0x70>)
  40022e:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400230:	0872      	lsrs	r2, r6, #1
  400232:	6829      	ldr	r1, [r5, #0]
  400234:	4620      	mov	r0, r4
  400236:	4b0b      	ldr	r3, [pc, #44]	; (400264 <spi_master_setup_device+0x74>)
  400238:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  40023a:	f086 0201 	eor.w	r2, r6, #1
  40023e:	f002 0201 	and.w	r2, r2, #1
  400242:	6829      	ldr	r1, [r5, #0]
  400244:	4620      	mov	r0, r4
  400246:	4b08      	ldr	r3, [pc, #32]	; (400268 <spi_master_setup_device+0x78>)
  400248:	4798      	blx	r3
  40024a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024e:	bf00      	nop
  400250:	11e1a300 	.word	0x11e1a300
  400254:	004003d9 	.word	0x004003d9
  400258:	004003c5 	.word	0x004003c5
  40025c:	004003f1 	.word	0x004003f1
  400260:	00400381 	.word	0x00400381
  400264:	00400341 	.word	0x00400341
  400268:	00400361 	.word	0x00400361
  40026c:	0040041d 	.word	0x0040041d

00400270 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400274:	4604      	mov	r4, r0
  400276:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400278:	4b0e      	ldr	r3, [pc, #56]	; (4002b4 <pio_handler_process+0x44>)
  40027a:	4798      	blx	r3
  40027c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40027e:	4620      	mov	r0, r4
  400280:	4b0d      	ldr	r3, [pc, #52]	; (4002b8 <pio_handler_process+0x48>)
  400282:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400284:	4005      	ands	r5, r0
  400286:	d013      	beq.n	4002b0 <pio_handler_process+0x40>
  400288:	4c0c      	ldr	r4, [pc, #48]	; (4002bc <pio_handler_process+0x4c>)
  40028a:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  40028e:	6823      	ldr	r3, [r4, #0]
  400290:	4543      	cmp	r3, r8
  400292:	d108      	bne.n	4002a6 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400294:	6861      	ldr	r1, [r4, #4]
  400296:	4229      	tst	r1, r5
  400298:	d005      	beq.n	4002a6 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40029a:	68e3      	ldr	r3, [r4, #12]
  40029c:	4640      	mov	r0, r8
  40029e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4002a0:	6863      	ldr	r3, [r4, #4]
  4002a2:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4002a6:	42bc      	cmp	r4, r7
  4002a8:	d002      	beq.n	4002b0 <pio_handler_process+0x40>
  4002aa:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4002ac:	2d00      	cmp	r5, #0
  4002ae:	d1ee      	bne.n	40028e <pio_handler_process+0x1e>
  4002b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002b4:	0040237d 	.word	0x0040237d
  4002b8:	00402381 	.word	0x00402381
  4002bc:	20400454 	.word	0x20400454

004002c0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4002c0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4002c2:	210b      	movs	r1, #11
  4002c4:	4801      	ldr	r0, [pc, #4]	; (4002cc <PIOB_Handler+0xc>)
  4002c6:	4b02      	ldr	r3, [pc, #8]	; (4002d0 <PIOB_Handler+0x10>)
  4002c8:	4798      	blx	r3
  4002ca:	bd08      	pop	{r3, pc}
  4002cc:	400e1000 	.word	0x400e1000
  4002d0:	00400271 	.word	0x00400271

004002d4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4002d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4002d6:	2110      	movs	r1, #16
  4002d8:	4801      	ldr	r0, [pc, #4]	; (4002e0 <PIOD_Handler+0xc>)
  4002da:	4b02      	ldr	r3, [pc, #8]	; (4002e4 <PIOD_Handler+0x10>)
  4002dc:	4798      	blx	r3
  4002de:	bd08      	pop	{r3, pc}
  4002e0:	400e1400 	.word	0x400e1400
  4002e4:	00400271 	.word	0x00400271

004002e8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4002e8:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4002ea:	4b07      	ldr	r3, [pc, #28]	; (400308 <spi_enable_clock+0x20>)
  4002ec:	4298      	cmp	r0, r3
  4002ee:	d103      	bne.n	4002f8 <spi_enable_clock+0x10>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002f0:	2015      	movs	r0, #21
  4002f2:	4b06      	ldr	r3, [pc, #24]	; (40030c <spi_enable_clock+0x24>)
  4002f4:	4798      	blx	r3
  4002f6:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4002f8:	4b05      	ldr	r3, [pc, #20]	; (400310 <spi_enable_clock+0x28>)
  4002fa:	4298      	cmp	r0, r3
  4002fc:	d102      	bne.n	400304 <spi_enable_clock+0x1c>
  4002fe:	202a      	movs	r0, #42	; 0x2a
  400300:	4b02      	ldr	r3, [pc, #8]	; (40030c <spi_enable_clock+0x24>)
  400302:	4798      	blx	r3
  400304:	bd08      	pop	{r3, pc}
  400306:	bf00      	nop
  400308:	40008000 	.word	0x40008000
  40030c:	004024ad 	.word	0x004024ad
  400310:	40058000 	.word	0x40058000

00400314 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400314:	6843      	ldr	r3, [r0, #4]
  400316:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40031a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40031c:	6843      	ldr	r3, [r0, #4]
  40031e:	0409      	lsls	r1, r1, #16
  400320:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400324:	430b      	orrs	r3, r1
  400326:	6043      	str	r3, [r0, #4]
  400328:	4770      	bx	lr
  40032a:	bf00      	nop

0040032c <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  40032c:	6843      	ldr	r3, [r0, #4]
  40032e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400332:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400334:	6843      	ldr	r3, [r0, #4]
  400336:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  40033a:	6041      	str	r1, [r0, #4]
  40033c:	4770      	bx	lr
  40033e:	bf00      	nop

00400340 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400340:	b132      	cbz	r2, 400350 <spi_set_clock_polarity+0x10>
  400342:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400346:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400348:	f043 0301 	orr.w	r3, r3, #1
  40034c:	6303      	str	r3, [r0, #48]	; 0x30
  40034e:	4770      	bx	lr
  400350:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400354:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400356:	f023 0301 	bic.w	r3, r3, #1
  40035a:	6303      	str	r3, [r0, #48]	; 0x30
  40035c:	4770      	bx	lr
  40035e:	bf00      	nop

00400360 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400360:	b132      	cbz	r2, 400370 <spi_set_clock_phase+0x10>
  400362:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400366:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400368:	f043 0302 	orr.w	r3, r3, #2
  40036c:	6303      	str	r3, [r0, #48]	; 0x30
  40036e:	4770      	bx	lr
  400370:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400374:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400376:	f023 0302 	bic.w	r3, r3, #2
  40037a:	6303      	str	r3, [r0, #48]	; 0x30
  40037c:	4770      	bx	lr
  40037e:	bf00      	nop

00400380 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400380:	2a04      	cmp	r2, #4
  400382:	d10a      	bne.n	40039a <spi_configure_cs_behavior+0x1a>
  400384:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400388:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40038a:	f023 0308 	bic.w	r3, r3, #8
  40038e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400390:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400392:	f043 0304 	orr.w	r3, r3, #4
  400396:	6303      	str	r3, [r0, #48]	; 0x30
  400398:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40039a:	b952      	cbnz	r2, 4003b2 <spi_configure_cs_behavior+0x32>
  40039c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4003a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003a2:	f023 0308 	bic.w	r3, r3, #8
  4003a6:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4003a8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003aa:	f023 0304 	bic.w	r3, r3, #4
  4003ae:	6303      	str	r3, [r0, #48]	; 0x30
  4003b0:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4003b2:	2a08      	cmp	r2, #8
  4003b4:	d105      	bne.n	4003c2 <spi_configure_cs_behavior+0x42>
  4003b6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4003ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4003bc:	f043 0308 	orr.w	r3, r3, #8
  4003c0:	6303      	str	r3, [r0, #48]	; 0x30
  4003c2:	4770      	bx	lr

004003c4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4003c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4003c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4003ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4003ce:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4003d0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4003d2:	431a      	orrs	r2, r3
  4003d4:	630a      	str	r2, [r1, #48]	; 0x30
  4003d6:	4770      	bx	lr

004003d8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4003d8:	1e43      	subs	r3, r0, #1
  4003da:	4419      	add	r1, r3
  4003dc:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4003e0:	1e43      	subs	r3, r0, #1
  4003e2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4003e4:	bf94      	ite	ls
  4003e6:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  4003e8:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  4003ec:	4770      	bx	lr
  4003ee:	bf00      	nop

004003f0 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4003f0:	b16a      	cbz	r2, 40040e <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4003f2:	b410      	push	{r4}
  4003f4:	4614      	mov	r4, r2
  4003f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4003fa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4003fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  400400:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400402:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400404:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400408:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40040a:	2000      	movs	r0, #0
  40040c:	e002      	b.n	400414 <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  40040e:	f04f 30ff 	mov.w	r0, #4294967295
  400412:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  400414:	f85d 4b04 	ldr.w	r4, [sp], #4
  400418:	4770      	bx	lr
  40041a:	bf00      	nop

0040041c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  40041c:	b410      	push	{r4}
  40041e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  400422:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400424:	b280      	uxth	r0, r0
  400426:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400428:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40042a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40042e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  400432:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  400434:	f85d 4b04 	ldr.w	r4, [sp], #4
  400438:	4770      	bx	lr
  40043a:	bf00      	nop

0040043c <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40043c:	2901      	cmp	r1, #1
  40043e:	d104      	bne.n	40044a <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  400440:	6882      	ldr	r2, [r0, #8]
  400442:	4b06      	ldr	r3, [pc, #24]	; (40045c <supc_switch_sclk_to_32kxtal+0x20>)
  400444:	4313      	orrs	r3, r2
  400446:	6083      	str	r3, [r0, #8]
  400448:	e003      	b.n	400452 <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  40044a:	6882      	ldr	r2, [r0, #8]
  40044c:	4b04      	ldr	r3, [pc, #16]	; (400460 <supc_switch_sclk_to_32kxtal+0x24>)
  40044e:	4013      	ands	r3, r2
  400450:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  400452:	6802      	ldr	r2, [r0, #0]
  400454:	4b03      	ldr	r3, [pc, #12]	; (400464 <supc_switch_sclk_to_32kxtal+0x28>)
  400456:	4313      	orrs	r3, r2
  400458:	6003      	str	r3, [r0, #0]
  40045a:	4770      	bx	lr
  40045c:	a5100000 	.word	0xa5100000
  400460:	5aefffff 	.word	0x5aefffff
  400464:	a5000008 	.word	0xa5000008

00400468 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400468:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40046c:	6043      	str	r3, [r0, #4]
  40046e:	4770      	bx	lr

00400470 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400470:	4b0d      	ldr	r3, [pc, #52]	; (4004a8 <prvTaskExitError+0x38>)
  400472:	681b      	ldr	r3, [r3, #0]
  400474:	f1b3 3fff 	cmp.w	r3, #4294967295
  400478:	d00a      	beq.n	400490 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40047a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40047e:	b672      	cpsid	i
  400480:	f383 8811 	msr	BASEPRI, r3
  400484:	f3bf 8f6f 	isb	sy
  400488:	f3bf 8f4f 	dsb	sy
  40048c:	b662      	cpsie	i
  40048e:	e7fe      	b.n	40048e <prvTaskExitError+0x1e>
  400490:	f04f 0380 	mov.w	r3, #128	; 0x80
  400494:	b672      	cpsid	i
  400496:	f383 8811 	msr	BASEPRI, r3
  40049a:	f3bf 8f6f 	isb	sy
  40049e:	f3bf 8f4f 	dsb	sy
  4004a2:	b662      	cpsie	i
  4004a4:	e7fe      	b.n	4004a4 <prvTaskExitError+0x34>
  4004a6:	bf00      	nop
  4004a8:	20400000 	.word	0x20400000

004004ac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4004ac:	4806      	ldr	r0, [pc, #24]	; (4004c8 <prvPortStartFirstTask+0x1c>)
  4004ae:	6800      	ldr	r0, [r0, #0]
  4004b0:	6800      	ldr	r0, [r0, #0]
  4004b2:	f380 8808 	msr	MSP, r0
  4004b6:	b662      	cpsie	i
  4004b8:	b661      	cpsie	f
  4004ba:	f3bf 8f4f 	dsb	sy
  4004be:	f3bf 8f6f 	isb	sy
  4004c2:	df00      	svc	0
  4004c4:	bf00      	nop
  4004c6:	0000      	.short	0x0000
  4004c8:	e000ed08 	.word	0xe000ed08

004004cc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4004cc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4004dc <vPortEnableVFP+0x10>
  4004d0:	6801      	ldr	r1, [r0, #0]
  4004d2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4004d6:	6001      	str	r1, [r0, #0]
  4004d8:	4770      	bx	lr
  4004da:	0000      	.short	0x0000
  4004dc:	e000ed88 	.word	0xe000ed88

004004e0 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4004e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4004e4:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4004e8:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4004ec:	4b05      	ldr	r3, [pc, #20]	; (400504 <pxPortInitialiseStack+0x24>)
  4004ee:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4004f2:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4004f6:	f06f 0302 	mvn.w	r3, #2
  4004fa:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4004fe:	3844      	subs	r0, #68	; 0x44
  400500:	4770      	bx	lr
  400502:	bf00      	nop
  400504:	00400471 	.word	0x00400471

00400508 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  400508:	4b06      	ldr	r3, [pc, #24]	; (400524 <pxCurrentTCBConst2>)
  40050a:	6819      	ldr	r1, [r3, #0]
  40050c:	6808      	ldr	r0, [r1, #0]
  40050e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400512:	f380 8809 	msr	PSP, r0
  400516:	f3bf 8f6f 	isb	sy
  40051a:	f04f 0000 	mov.w	r0, #0
  40051e:	f380 8811 	msr	BASEPRI, r0
  400522:	4770      	bx	lr

00400524 <pxCurrentTCBConst2>:
  400524:	2040be5c 	.word	0x2040be5c
  400528:	4770      	bx	lr
  40052a:	bf00      	nop

0040052c <vPortEnterCritical>:
  40052c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400530:	b672      	cpsid	i
  400532:	f383 8811 	msr	BASEPRI, r3
  400536:	f3bf 8f6f 	isb	sy
  40053a:	f3bf 8f4f 	dsb	sy
  40053e:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400540:	4a0b      	ldr	r2, [pc, #44]	; (400570 <vPortEnterCritical+0x44>)
  400542:	6813      	ldr	r3, [r2, #0]
  400544:	3301      	adds	r3, #1
  400546:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400548:	2b01      	cmp	r3, #1
  40054a:	d10f      	bne.n	40056c <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40054c:	4b09      	ldr	r3, [pc, #36]	; (400574 <vPortEnterCritical+0x48>)
  40054e:	681b      	ldr	r3, [r3, #0]
  400550:	f013 0fff 	tst.w	r3, #255	; 0xff
  400554:	d00a      	beq.n	40056c <vPortEnterCritical+0x40>
  400556:	f04f 0380 	mov.w	r3, #128	; 0x80
  40055a:	b672      	cpsid	i
  40055c:	f383 8811 	msr	BASEPRI, r3
  400560:	f3bf 8f6f 	isb	sy
  400564:	f3bf 8f4f 	dsb	sy
  400568:	b662      	cpsie	i
  40056a:	e7fe      	b.n	40056a <vPortEnterCritical+0x3e>
  40056c:	4770      	bx	lr
  40056e:	bf00      	nop
  400570:	20400000 	.word	0x20400000
  400574:	e000ed04 	.word	0xe000ed04

00400578 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400578:	4b0a      	ldr	r3, [pc, #40]	; (4005a4 <vPortExitCritical+0x2c>)
  40057a:	681b      	ldr	r3, [r3, #0]
  40057c:	b953      	cbnz	r3, 400594 <vPortExitCritical+0x1c>
  40057e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400582:	b672      	cpsid	i
  400584:	f383 8811 	msr	BASEPRI, r3
  400588:	f3bf 8f6f 	isb	sy
  40058c:	f3bf 8f4f 	dsb	sy
  400590:	b662      	cpsie	i
  400592:	e7fe      	b.n	400592 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400594:	3b01      	subs	r3, #1
  400596:	4a03      	ldr	r2, [pc, #12]	; (4005a4 <vPortExitCritical+0x2c>)
  400598:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40059a:	b90b      	cbnz	r3, 4005a0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40059c:	f383 8811 	msr	BASEPRI, r3
  4005a0:	4770      	bx	lr
  4005a2:	bf00      	nop
  4005a4:	20400000 	.word	0x20400000

004005a8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  4005a8:	f3ef 8009 	mrs	r0, PSP
  4005ac:	f3bf 8f6f 	isb	sy
  4005b0:	4b15      	ldr	r3, [pc, #84]	; (400608 <pxCurrentTCBConst>)
  4005b2:	681a      	ldr	r2, [r3, #0]
  4005b4:	f01e 0f10 	tst.w	lr, #16
  4005b8:	bf08      	it	eq
  4005ba:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4005be:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005c2:	6010      	str	r0, [r2, #0]
  4005c4:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4005c8:	f04f 0080 	mov.w	r0, #128	; 0x80
  4005cc:	b672      	cpsid	i
  4005ce:	f380 8811 	msr	BASEPRI, r0
  4005d2:	f3bf 8f4f 	dsb	sy
  4005d6:	f3bf 8f6f 	isb	sy
  4005da:	b662      	cpsie	i
  4005dc:	f001 f92e 	bl	40183c <vTaskSwitchContext>
  4005e0:	f04f 0000 	mov.w	r0, #0
  4005e4:	f380 8811 	msr	BASEPRI, r0
  4005e8:	bc08      	pop	{r3}
  4005ea:	6819      	ldr	r1, [r3, #0]
  4005ec:	6808      	ldr	r0, [r1, #0]
  4005ee:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005f2:	f01e 0f10 	tst.w	lr, #16
  4005f6:	bf08      	it	eq
  4005f8:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4005fc:	f380 8809 	msr	PSP, r0
  400600:	f3bf 8f6f 	isb	sy
  400604:	4770      	bx	lr
  400606:	bf00      	nop

00400608 <pxCurrentTCBConst>:
  400608:	2040be5c 	.word	0x2040be5c
  40060c:	4770      	bx	lr
  40060e:	bf00      	nop

00400610 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  400610:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400612:	f3ef 8311 	mrs	r3, BASEPRI
  400616:	f04f 0280 	mov.w	r2, #128	; 0x80
  40061a:	b672      	cpsid	i
  40061c:	f382 8811 	msr	BASEPRI, r2
  400620:	f3bf 8f6f 	isb	sy
  400624:	f3bf 8f4f 	dsb	sy
  400628:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  40062a:	4b05      	ldr	r3, [pc, #20]	; (400640 <SysTick_Handler+0x30>)
  40062c:	4798      	blx	r3
  40062e:	b118      	cbz	r0, 400638 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400634:	4b03      	ldr	r3, [pc, #12]	; (400644 <SysTick_Handler+0x34>)
  400636:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400638:	2300      	movs	r3, #0
  40063a:	f383 8811 	msr	BASEPRI, r3
  40063e:	bd08      	pop	{r3, pc}
  400640:	004014d1 	.word	0x004014d1
  400644:	e000ed04 	.word	0xe000ed04

00400648 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400648:	4a03      	ldr	r2, [pc, #12]	; (400658 <vPortSetupTimerInterrupt+0x10>)
  40064a:	4b04      	ldr	r3, [pc, #16]	; (40065c <vPortSetupTimerInterrupt+0x14>)
  40064c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40064e:	2207      	movs	r2, #7
  400650:	3b04      	subs	r3, #4
  400652:	601a      	str	r2, [r3, #0]
  400654:	4770      	bx	lr
  400656:	bf00      	nop
  400658:	000493df 	.word	0x000493df
  40065c:	e000e014 	.word	0xe000e014

00400660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400660:	b500      	push	{lr}
  400662:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400664:	4b25      	ldr	r3, [pc, #148]	; (4006fc <xPortStartScheduler+0x9c>)
  400666:	781a      	ldrb	r2, [r3, #0]
  400668:	b2d2      	uxtb	r2, r2
  40066a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40066c:	22ff      	movs	r2, #255	; 0xff
  40066e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400670:	781b      	ldrb	r3, [r3, #0]
  400672:	b2db      	uxtb	r3, r3
  400674:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400678:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40067c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400680:	4a1f      	ldr	r2, [pc, #124]	; (400700 <xPortStartScheduler+0xa0>)
  400682:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400684:	2207      	movs	r2, #7
  400686:	4b1f      	ldr	r3, [pc, #124]	; (400704 <xPortStartScheduler+0xa4>)
  400688:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40068a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40068e:	f013 0f80 	tst.w	r3, #128	; 0x80
  400692:	d010      	beq.n	4006b6 <xPortStartScheduler+0x56>
  400694:	2206      	movs	r2, #6
  400696:	e000      	b.n	40069a <xPortStartScheduler+0x3a>
  400698:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40069a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40069e:	005b      	lsls	r3, r3, #1
  4006a0:	b2db      	uxtb	r3, r3
  4006a2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4006a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4006aa:	1e51      	subs	r1, r2, #1
  4006ac:	f013 0f80 	tst.w	r3, #128	; 0x80
  4006b0:	d1f2      	bne.n	400698 <xPortStartScheduler+0x38>
  4006b2:	4b14      	ldr	r3, [pc, #80]	; (400704 <xPortStartScheduler+0xa4>)
  4006b4:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4006b6:	4a13      	ldr	r2, [pc, #76]	; (400704 <xPortStartScheduler+0xa4>)
  4006b8:	6813      	ldr	r3, [r2, #0]
  4006ba:	021b      	lsls	r3, r3, #8
  4006bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4006c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4006c2:	9b01      	ldr	r3, [sp, #4]
  4006c4:	b2db      	uxtb	r3, r3
  4006c6:	4a0d      	ldr	r2, [pc, #52]	; (4006fc <xPortStartScheduler+0x9c>)
  4006c8:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4006ca:	4b0f      	ldr	r3, [pc, #60]	; (400708 <xPortStartScheduler+0xa8>)
  4006cc:	681a      	ldr	r2, [r3, #0]
  4006ce:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4006d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4006d4:	681a      	ldr	r2, [r3, #0]
  4006d6:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4006da:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4006dc:	4b0b      	ldr	r3, [pc, #44]	; (40070c <xPortStartScheduler+0xac>)
  4006de:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4006e0:	2200      	movs	r2, #0
  4006e2:	4b0b      	ldr	r3, [pc, #44]	; (400710 <xPortStartScheduler+0xb0>)
  4006e4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  4006e6:	4b0b      	ldr	r3, [pc, #44]	; (400714 <xPortStartScheduler+0xb4>)
  4006e8:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4006ea:	4a0b      	ldr	r2, [pc, #44]	; (400718 <xPortStartScheduler+0xb8>)
  4006ec:	6813      	ldr	r3, [r2, #0]
  4006ee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4006f2:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4006f4:	4b09      	ldr	r3, [pc, #36]	; (40071c <xPortStartScheduler+0xbc>)
  4006f6:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  4006f8:	4b09      	ldr	r3, [pc, #36]	; (400720 <xPortStartScheduler+0xc0>)
  4006fa:	4798      	blx	r3
  4006fc:	e000e400 	.word	0xe000e400
  400700:	20400544 	.word	0x20400544
  400704:	20400548 	.word	0x20400548
  400708:	e000ed20 	.word	0xe000ed20
  40070c:	00400649 	.word	0x00400649
  400710:	20400000 	.word	0x20400000
  400714:	004004cd 	.word	0x004004cd
  400718:	e000ef34 	.word	0xe000ef34
  40071c:	004004ad 	.word	0x004004ad
  400720:	00400471 	.word	0x00400471

00400724 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400724:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400728:	2b0f      	cmp	r3, #15
  40072a:	d911      	bls.n	400750 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40072c:	4a12      	ldr	r2, [pc, #72]	; (400778 <vPortValidateInterruptPriority+0x54>)
  40072e:	5c9b      	ldrb	r3, [r3, r2]
  400730:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400732:	4a12      	ldr	r2, [pc, #72]	; (40077c <vPortValidateInterruptPriority+0x58>)
  400734:	7812      	ldrb	r2, [r2, #0]
  400736:	429a      	cmp	r2, r3
  400738:	d90a      	bls.n	400750 <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40073a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40073e:	b672      	cpsid	i
  400740:	f383 8811 	msr	BASEPRI, r3
  400744:	f3bf 8f6f 	isb	sy
  400748:	f3bf 8f4f 	dsb	sy
  40074c:	b662      	cpsie	i
  40074e:	e7fe      	b.n	40074e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400750:	4b0b      	ldr	r3, [pc, #44]	; (400780 <vPortValidateInterruptPriority+0x5c>)
  400752:	681b      	ldr	r3, [r3, #0]
  400754:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400758:	4a0a      	ldr	r2, [pc, #40]	; (400784 <vPortValidateInterruptPriority+0x60>)
  40075a:	6812      	ldr	r2, [r2, #0]
  40075c:	4293      	cmp	r3, r2
  40075e:	d90a      	bls.n	400776 <vPortValidateInterruptPriority+0x52>
  400760:	f04f 0380 	mov.w	r3, #128	; 0x80
  400764:	b672      	cpsid	i
  400766:	f383 8811 	msr	BASEPRI, r3
  40076a:	f3bf 8f6f 	isb	sy
  40076e:	f3bf 8f4f 	dsb	sy
  400772:	b662      	cpsie	i
  400774:	e7fe      	b.n	400774 <vPortValidateInterruptPriority+0x50>
  400776:	4770      	bx	lr
  400778:	e000e3f0 	.word	0xe000e3f0
  40077c:	20400544 	.word	0x20400544
  400780:	e000ed0c 	.word	0xe000ed0c
  400784:	20400548 	.word	0x20400548

00400788 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400788:	b538      	push	{r3, r4, r5, lr}
  40078a:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  40078c:	f010 0f07 	tst.w	r0, #7
  400790:	d002      	beq.n	400798 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  400792:	f020 0407 	bic.w	r4, r0, #7
  400796:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400798:	4b0e      	ldr	r3, [pc, #56]	; (4007d4 <pvPortMalloc+0x4c>)
  40079a:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  40079c:	4b0e      	ldr	r3, [pc, #56]	; (4007d8 <pvPortMalloc+0x50>)
  40079e:	681b      	ldr	r3, [r3, #0]
  4007a0:	b923      	cbnz	r3, 4007ac <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4007a2:	4b0e      	ldr	r3, [pc, #56]	; (4007dc <pvPortMalloc+0x54>)
  4007a4:	f023 0307 	bic.w	r3, r3, #7
  4007a8:	4a0b      	ldr	r2, [pc, #44]	; (4007d8 <pvPortMalloc+0x50>)
  4007aa:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4007ac:	4b0c      	ldr	r3, [pc, #48]	; (4007e0 <pvPortMalloc+0x58>)
  4007ae:	681b      	ldr	r3, [r3, #0]
  4007b0:	441c      	add	r4, r3
  4007b2:	42a3      	cmp	r3, r4
  4007b4:	d209      	bcs.n	4007ca <pvPortMalloc+0x42>
  4007b6:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4007ba:	4294      	cmp	r4, r2
  4007bc:	d805      	bhi.n	4007ca <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4007be:	4a06      	ldr	r2, [pc, #24]	; (4007d8 <pvPortMalloc+0x50>)
  4007c0:	6815      	ldr	r5, [r2, #0]
  4007c2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4007c4:	4b06      	ldr	r3, [pc, #24]	; (4007e0 <pvPortMalloc+0x58>)
  4007c6:	601c      	str	r4, [r3, #0]
  4007c8:	e000      	b.n	4007cc <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  4007ca:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4007cc:	4b05      	ldr	r3, [pc, #20]	; (4007e4 <pvPortMalloc+0x5c>)
  4007ce:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  4007d0:	4628      	mov	r0, r5
  4007d2:	bd38      	pop	{r3, r4, r5, pc}
  4007d4:	004014b5 	.word	0x004014b5
  4007d8:	2040bd50 	.word	0x2040bd50
  4007dc:	20400558 	.word	0x20400558
  4007e0:	2040054c 	.word	0x2040054c
  4007e4:	00401605 	.word	0x00401605

004007e8 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4007e8:	b150      	cbz	r0, 400800 <vPortFree+0x18>
  4007ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4007ee:	b672      	cpsid	i
  4007f0:	f383 8811 	msr	BASEPRI, r3
  4007f4:	f3bf 8f6f 	isb	sy
  4007f8:	f3bf 8f4f 	dsb	sy
  4007fc:	b662      	cpsie	i
  4007fe:	e7fe      	b.n	4007fe <vPortFree+0x16>
  400800:	4770      	bx	lr
  400802:	bf00      	nop

00400804 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400804:	f100 0308 	add.w	r3, r0, #8
  400808:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40080a:	f04f 32ff 	mov.w	r2, #4294967295
  40080e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400810:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400812:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400814:	2300      	movs	r3, #0
  400816:	6003      	str	r3, [r0, #0]
  400818:	4770      	bx	lr
  40081a:	bf00      	nop

0040081c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40081c:	2300      	movs	r3, #0
  40081e:	6103      	str	r3, [r0, #16]
  400820:	4770      	bx	lr
  400822:	bf00      	nop

00400824 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400824:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400826:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400828:	689a      	ldr	r2, [r3, #8]
  40082a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40082c:	689a      	ldr	r2, [r3, #8]
  40082e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400830:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400832:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400834:	6803      	ldr	r3, [r0, #0]
  400836:	3301      	adds	r3, #1
  400838:	6003      	str	r3, [r0, #0]
  40083a:	4770      	bx	lr

0040083c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40083c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40083e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400840:	f1b5 3fff 	cmp.w	r5, #4294967295
  400844:	d101      	bne.n	40084a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400846:	6902      	ldr	r2, [r0, #16]
  400848:	e007      	b.n	40085a <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40084a:	f100 0208 	add.w	r2, r0, #8
  40084e:	e000      	b.n	400852 <vListInsert+0x16>
  400850:	461a      	mov	r2, r3
  400852:	6853      	ldr	r3, [r2, #4]
  400854:	681c      	ldr	r4, [r3, #0]
  400856:	42a5      	cmp	r5, r4
  400858:	d2fa      	bcs.n	400850 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40085a:	6853      	ldr	r3, [r2, #4]
  40085c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40085e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400860:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400862:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400864:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400866:	6803      	ldr	r3, [r0, #0]
  400868:	3301      	adds	r3, #1
  40086a:	6003      	str	r3, [r0, #0]
}
  40086c:	bc30      	pop	{r4, r5}
  40086e:	4770      	bx	lr

00400870 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400870:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400872:	6842      	ldr	r2, [r0, #4]
  400874:	6881      	ldr	r1, [r0, #8]
  400876:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400878:	6882      	ldr	r2, [r0, #8]
  40087a:	6841      	ldr	r1, [r0, #4]
  40087c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40087e:	685a      	ldr	r2, [r3, #4]
  400880:	4290      	cmp	r0, r2
  400882:	d101      	bne.n	400888 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400884:	6882      	ldr	r2, [r0, #8]
  400886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400888:	2200      	movs	r2, #0
  40088a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40088c:	6818      	ldr	r0, [r3, #0]
  40088e:	3801      	subs	r0, #1
  400890:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400892:	4770      	bx	lr

00400894 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400894:	b538      	push	{r3, r4, r5, lr}
  400896:	4604      	mov	r4, r0
  400898:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40089a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40089c:	b942      	cbnz	r2, 4008b0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40089e:	6803      	ldr	r3, [r0, #0]
  4008a0:	2b00      	cmp	r3, #0
  4008a2:	d12b      	bne.n	4008fc <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4008a4:	6840      	ldr	r0, [r0, #4]
  4008a6:	4b1b      	ldr	r3, [pc, #108]	; (400914 <prvCopyDataToQueue+0x80>)
  4008a8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4008aa:	2300      	movs	r3, #0
  4008ac:	6063      	str	r3, [r4, #4]
  4008ae:	e02c      	b.n	40090a <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  4008b0:	b96d      	cbnz	r5, 4008ce <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4008b2:	6880      	ldr	r0, [r0, #8]
  4008b4:	4b18      	ldr	r3, [pc, #96]	; (400918 <prvCopyDataToQueue+0x84>)
  4008b6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4008b8:	68a2      	ldr	r2, [r4, #8]
  4008ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4008bc:	4413      	add	r3, r2
  4008be:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008c0:	6862      	ldr	r2, [r4, #4]
  4008c2:	4293      	cmp	r3, r2
  4008c4:	d31c      	bcc.n	400900 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4008c6:	6823      	ldr	r3, [r4, #0]
  4008c8:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4008ca:	2000      	movs	r0, #0
  4008cc:	e01d      	b.n	40090a <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4008ce:	68c0      	ldr	r0, [r0, #12]
  4008d0:	4b11      	ldr	r3, [pc, #68]	; (400918 <prvCopyDataToQueue+0x84>)
  4008d2:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4008d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4008d6:	425b      	negs	r3, r3
  4008d8:	68e2      	ldr	r2, [r4, #12]
  4008da:	441a      	add	r2, r3
  4008dc:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4008de:	6821      	ldr	r1, [r4, #0]
  4008e0:	428a      	cmp	r2, r1
  4008e2:	d202      	bcs.n	4008ea <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4008e4:	6862      	ldr	r2, [r4, #4]
  4008e6:	4413      	add	r3, r2
  4008e8:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  4008ea:	2d02      	cmp	r5, #2
  4008ec:	d10a      	bne.n	400904 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4008ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4008f0:	b153      	cbz	r3, 400908 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  4008f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4008f4:	3b01      	subs	r3, #1
  4008f6:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4008f8:	2000      	movs	r0, #0
  4008fa:	e006      	b.n	40090a <prvCopyDataToQueue+0x76>
  4008fc:	2000      	movs	r0, #0
  4008fe:	e004      	b.n	40090a <prvCopyDataToQueue+0x76>
  400900:	2000      	movs	r0, #0
  400902:	e002      	b.n	40090a <prvCopyDataToQueue+0x76>
  400904:	2000      	movs	r0, #0
  400906:	e000      	b.n	40090a <prvCopyDataToQueue+0x76>
  400908:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40090a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40090c:	3301      	adds	r3, #1
  40090e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400910:	bd38      	pop	{r3, r4, r5, pc}
  400912:	bf00      	nop
  400914:	00401c09 	.word	0x00401c09
  400918:	00402e49 	.word	0x00402e49

0040091c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40091c:	b530      	push	{r4, r5, lr}
  40091e:	b083      	sub	sp, #12
  400920:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400922:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400924:	b954      	cbnz	r4, 40093c <prvNotifyQueueSetContainer+0x20>
  400926:	f04f 0380 	mov.w	r3, #128	; 0x80
  40092a:	b672      	cpsid	i
  40092c:	f383 8811 	msr	BASEPRI, r3
  400930:	f3bf 8f6f 	isb	sy
  400934:	f3bf 8f4f 	dsb	sy
  400938:	b662      	cpsie	i
  40093a:	e7fe      	b.n	40093a <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40093c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40093e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400940:	429a      	cmp	r2, r3
  400942:	d30a      	bcc.n	40095a <prvNotifyQueueSetContainer+0x3e>
  400944:	f04f 0380 	mov.w	r3, #128	; 0x80
  400948:	b672      	cpsid	i
  40094a:	f383 8811 	msr	BASEPRI, r3
  40094e:	f3bf 8f6f 	isb	sy
  400952:	f3bf 8f4f 	dsb	sy
  400956:	b662      	cpsie	i
  400958:	e7fe      	b.n	400958 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40095a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40095c:	4293      	cmp	r3, r2
  40095e:	d917      	bls.n	400990 <prvNotifyQueueSetContainer+0x74>
  400960:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400962:	a901      	add	r1, sp, #4
  400964:	4620      	mov	r0, r4
  400966:	4b0c      	ldr	r3, [pc, #48]	; (400998 <prvNotifyQueueSetContainer+0x7c>)
  400968:	4798      	blx	r3
  40096a:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40096c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40096e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400972:	d109      	bne.n	400988 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400974:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400976:	b163      	cbz	r3, 400992 <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400978:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40097c:	4b07      	ldr	r3, [pc, #28]	; (40099c <prvNotifyQueueSetContainer+0x80>)
  40097e:	4798      	blx	r3
  400980:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400982:	bf18      	it	ne
  400984:	2501      	movne	r5, #1
  400986:	e004      	b.n	400992 <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400988:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40098a:	3301      	adds	r3, #1
  40098c:	64a3      	str	r3, [r4, #72]	; 0x48
  40098e:	e000      	b.n	400992 <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400990:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400992:	4628      	mov	r0, r5
  400994:	b003      	add	sp, #12
  400996:	bd30      	pop	{r4, r5, pc}
  400998:	00400895 	.word	0x00400895
  40099c:	004019d9 	.word	0x004019d9

004009a0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4009a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4009a2:	b172      	cbz	r2, 4009c2 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  4009a4:	b510      	push	{r4, lr}
  4009a6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4009a8:	68c4      	ldr	r4, [r0, #12]
  4009aa:	4414      	add	r4, r2
  4009ac:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4009ae:	6840      	ldr	r0, [r0, #4]
  4009b0:	4284      	cmp	r4, r0
  4009b2:	d301      	bcc.n	4009b8 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4009b4:	6818      	ldr	r0, [r3, #0]
  4009b6:	60d8      	str	r0, [r3, #12]
  4009b8:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4009ba:	68d9      	ldr	r1, [r3, #12]
  4009bc:	4b01      	ldr	r3, [pc, #4]	; (4009c4 <prvCopyDataFromQueue+0x24>)
  4009be:	4798      	blx	r3
  4009c0:	bd10      	pop	{r4, pc}
  4009c2:	4770      	bx	lr
  4009c4:	00402e49 	.word	0x00402e49

004009c8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  4009c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4009ca:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4009cc:	4b20      	ldr	r3, [pc, #128]	; (400a50 <prvUnlockQueue+0x88>)
  4009ce:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4009d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009d2:	2b00      	cmp	r3, #0
  4009d4:	dd18      	ble.n	400a08 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4009d6:	4d1f      	ldr	r5, [pc, #124]	; (400a54 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  4009d8:	4f1f      	ldr	r7, [pc, #124]	; (400a58 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009da:	4e20      	ldr	r6, [pc, #128]	; (400a5c <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  4009dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4009de:	b133      	cbz	r3, 4009ee <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4009e0:	2100      	movs	r1, #0
  4009e2:	4620      	mov	r0, r4
  4009e4:	47a8      	blx	r5
  4009e6:	2801      	cmp	r0, #1
  4009e8:	d108      	bne.n	4009fc <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  4009ea:	47b8      	blx	r7
  4009ec:	e006      	b.n	4009fc <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4009ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4009f0:	b153      	cbz	r3, 400a08 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4009f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4009f6:	47b0      	blx	r6
  4009f8:	b100      	cbz	r0, 4009fc <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  4009fa:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  4009fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009fe:	3b01      	subs	r3, #1
  400a00:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400a02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a04:	2b00      	cmp	r3, #0
  400a06:	dce9      	bgt.n	4009dc <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400a08:	f04f 33ff 	mov.w	r3, #4294967295
  400a0c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400a0e:	4b14      	ldr	r3, [pc, #80]	; (400a60 <prvUnlockQueue+0x98>)
  400a10:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400a12:	4b0f      	ldr	r3, [pc, #60]	; (400a50 <prvUnlockQueue+0x88>)
  400a14:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400a16:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a18:	2b00      	cmp	r3, #0
  400a1a:	dd13      	ble.n	400a44 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400a1c:	6923      	ldr	r3, [r4, #16]
  400a1e:	b91b      	cbnz	r3, 400a28 <prvUnlockQueue+0x60>
  400a20:	e010      	b.n	400a44 <prvUnlockQueue+0x7c>
  400a22:	6923      	ldr	r3, [r4, #16]
  400a24:	b923      	cbnz	r3, 400a30 <prvUnlockQueue+0x68>
  400a26:	e00d      	b.n	400a44 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a28:	f104 0610 	add.w	r6, r4, #16
  400a2c:	4d0b      	ldr	r5, [pc, #44]	; (400a5c <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  400a2e:	4f0a      	ldr	r7, [pc, #40]	; (400a58 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400a30:	4630      	mov	r0, r6
  400a32:	47a8      	blx	r5
  400a34:	b100      	cbz	r0, 400a38 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  400a36:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  400a38:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a3a:	3b01      	subs	r3, #1
  400a3c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400a3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400a40:	2b00      	cmp	r3, #0
  400a42:	dcee      	bgt.n	400a22 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400a44:	f04f 33ff 	mov.w	r3, #4294967295
  400a48:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400a4a:	4b05      	ldr	r3, [pc, #20]	; (400a60 <prvUnlockQueue+0x98>)
  400a4c:	4798      	blx	r3
  400a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400a50:	0040052d 	.word	0x0040052d
  400a54:	0040091d 	.word	0x0040091d
  400a58:	00401b35 	.word	0x00401b35
  400a5c:	004019d9 	.word	0x004019d9
  400a60:	00400579 	.word	0x00400579

00400a64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  400a64:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400a66:	b950      	cbnz	r0, 400a7e <xQueueGenericReset+0x1a>
  400a68:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a6c:	b672      	cpsid	i
  400a6e:	f383 8811 	msr	BASEPRI, r3
  400a72:	f3bf 8f6f 	isb	sy
  400a76:	f3bf 8f4f 	dsb	sy
  400a7a:	b662      	cpsie	i
  400a7c:	e7fe      	b.n	400a7c <xQueueGenericReset+0x18>
  400a7e:	4604      	mov	r4, r0
  400a80:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  400a82:	4b18      	ldr	r3, [pc, #96]	; (400ae4 <xQueueGenericReset+0x80>)
  400a84:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400a86:	6822      	ldr	r2, [r4, #0]
  400a88:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400a8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a8c:	fb03 f301 	mul.w	r3, r3, r1
  400a90:	18d0      	adds	r0, r2, r3
  400a92:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400a94:	2000      	movs	r0, #0
  400a96:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400a98:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400a9a:	1a5b      	subs	r3, r3, r1
  400a9c:	4413      	add	r3, r2
  400a9e:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400aa0:	f04f 33ff 	mov.w	r3, #4294967295
  400aa4:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400aa6:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400aa8:	b985      	cbnz	r5, 400acc <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400aaa:	6923      	ldr	r3, [r4, #16]
  400aac:	b1ab      	cbz	r3, 400ada <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400aae:	f104 0010 	add.w	r0, r4, #16
  400ab2:	4b0d      	ldr	r3, [pc, #52]	; (400ae8 <xQueueGenericReset+0x84>)
  400ab4:	4798      	blx	r3
  400ab6:	2801      	cmp	r0, #1
  400ab8:	d10f      	bne.n	400ada <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  400aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400abe:	4b0b      	ldr	r3, [pc, #44]	; (400aec <xQueueGenericReset+0x88>)
  400ac0:	601a      	str	r2, [r3, #0]
  400ac2:	f3bf 8f4f 	dsb	sy
  400ac6:	f3bf 8f6f 	isb	sy
  400aca:	e006      	b.n	400ada <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400acc:	f104 0010 	add.w	r0, r4, #16
  400ad0:	4d07      	ldr	r5, [pc, #28]	; (400af0 <xQueueGenericReset+0x8c>)
  400ad2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400ad4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ad8:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  400ada:	4b06      	ldr	r3, [pc, #24]	; (400af4 <xQueueGenericReset+0x90>)
  400adc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  400ade:	2001      	movs	r0, #1
  400ae0:	bd38      	pop	{r3, r4, r5, pc}
  400ae2:	bf00      	nop
  400ae4:	0040052d 	.word	0x0040052d
  400ae8:	004019d9 	.word	0x004019d9
  400aec:	e000ed04 	.word	0xe000ed04
  400af0:	00400805 	.word	0x00400805
  400af4:	00400579 	.word	0x00400579

00400af8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  400af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400afa:	b950      	cbnz	r0, 400b12 <xQueueGenericCreate+0x1a>
  400afc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b00:	b672      	cpsid	i
  400b02:	f383 8811 	msr	BASEPRI, r3
  400b06:	f3bf 8f6f 	isb	sy
  400b0a:	f3bf 8f4f 	dsb	sy
  400b0e:	b662      	cpsie	i
  400b10:	e7fe      	b.n	400b10 <xQueueGenericCreate+0x18>
  400b12:	4606      	mov	r6, r0
  400b14:	4617      	mov	r7, r2
  400b16:	460d      	mov	r5, r1

	if( uxItemSize == ( UBaseType_t ) 0 )
  400b18:	b1c1      	cbz	r1, 400b4c <xQueueGenericCreate+0x54>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400b1a:	fb01 f000 	mul.w	r0, r1, r0
  400b1e:	3059      	adds	r0, #89	; 0x59
  400b20:	4b14      	ldr	r3, [pc, #80]	; (400b74 <xQueueGenericCreate+0x7c>)
  400b22:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400b24:	4604      	mov	r4, r0
  400b26:	b910      	cbnz	r0, 400b2e <xQueueGenericCreate+0x36>
  400b28:	e005      	b.n	400b36 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400b2a:	6024      	str	r4, [r4, #0]
  400b2c:	e015      	b.n	400b5a <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400b2e:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400b32:	6003      	str	r3, [r0, #0]
  400b34:	e011      	b.n	400b5a <xQueueGenericCreate+0x62>
  400b36:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b3a:	b672      	cpsid	i
  400b3c:	f383 8811 	msr	BASEPRI, r3
  400b40:	f3bf 8f6f 	isb	sy
  400b44:	f3bf 8f4f 	dsb	sy
  400b48:	b662      	cpsie	i
  400b4a:	e7fe      	b.n	400b4a <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400b4c:	2058      	movs	r0, #88	; 0x58
  400b4e:	4b09      	ldr	r3, [pc, #36]	; (400b74 <xQueueGenericCreate+0x7c>)
  400b50:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400b52:	4604      	mov	r4, r0
  400b54:	2800      	cmp	r0, #0
  400b56:	d1e8      	bne.n	400b2a <xQueueGenericCreate+0x32>
  400b58:	e7ed      	b.n	400b36 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  400b5a:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400b5c:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400b5e:	2101      	movs	r1, #1
  400b60:	4620      	mov	r0, r4
  400b62:	4b05      	ldr	r3, [pc, #20]	; (400b78 <xQueueGenericCreate+0x80>)
  400b64:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  400b66:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  400b6a:	2300      	movs	r3, #0
  400b6c:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  400b6e:	4620      	mov	r0, r4
  400b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b72:	bf00      	nop
  400b74:	00400789 	.word	0x00400789
  400b78:	00400a65 	.word	0x00400a65

00400b7c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  400b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b80:	b085      	sub	sp, #20
  400b82:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400b84:	b950      	cbnz	r0, 400b9c <xQueueGenericSend+0x20>
  400b86:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b8a:	b672      	cpsid	i
  400b8c:	f383 8811 	msr	BASEPRI, r3
  400b90:	f3bf 8f6f 	isb	sy
  400b94:	f3bf 8f4f 	dsb	sy
  400b98:	b662      	cpsie	i
  400b9a:	e7fe      	b.n	400b9a <xQueueGenericSend+0x1e>
  400b9c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b9e:	b961      	cbnz	r1, 400bba <xQueueGenericSend+0x3e>
  400ba0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400ba2:	b152      	cbz	r2, 400bba <xQueueGenericSend+0x3e>
  400ba4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ba8:	b672      	cpsid	i
  400baa:	f383 8811 	msr	BASEPRI, r3
  400bae:	f3bf 8f6f 	isb	sy
  400bb2:	f3bf 8f4f 	dsb	sy
  400bb6:	b662      	cpsie	i
  400bb8:	e7fe      	b.n	400bb8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400bba:	2b02      	cmp	r3, #2
  400bbc:	d10d      	bne.n	400bda <xQueueGenericSend+0x5e>
  400bbe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400bc0:	2a01      	cmp	r2, #1
  400bc2:	d00a      	beq.n	400bda <xQueueGenericSend+0x5e>
  400bc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bc8:	b672      	cpsid	i
  400bca:	f383 8811 	msr	BASEPRI, r3
  400bce:	f3bf 8f6f 	isb	sy
  400bd2:	f3bf 8f4f 	dsb	sy
  400bd6:	b662      	cpsie	i
  400bd8:	e7fe      	b.n	400bd8 <xQueueGenericSend+0x5c>
  400bda:	461d      	mov	r5, r3
  400bdc:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400bde:	4b51      	ldr	r3, [pc, #324]	; (400d24 <xQueueGenericSend+0x1a8>)
  400be0:	4798      	blx	r3
  400be2:	b960      	cbnz	r0, 400bfe <xQueueGenericSend+0x82>
  400be4:	9b01      	ldr	r3, [sp, #4]
  400be6:	b163      	cbz	r3, 400c02 <xQueueGenericSend+0x86>
  400be8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bec:	b672      	cpsid	i
  400bee:	f383 8811 	msr	BASEPRI, r3
  400bf2:	f3bf 8f6f 	isb	sy
  400bf6:	f3bf 8f4f 	dsb	sy
  400bfa:	b662      	cpsie	i
  400bfc:	e7fe      	b.n	400bfc <xQueueGenericSend+0x80>
  400bfe:	2700      	movs	r7, #0
  400c00:	e000      	b.n	400c04 <xQueueGenericSend+0x88>
  400c02:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400c04:	4e48      	ldr	r6, [pc, #288]	; (400d28 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400c06:	f8df 914c 	ldr.w	r9, [pc, #332]	; 400d54 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  400c0a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 400d34 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400c0e:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400c10:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400c12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400c14:	429a      	cmp	r2, r3
  400c16:	d301      	bcc.n	400c1c <xQueueGenericSend+0xa0>
  400c18:	2d02      	cmp	r5, #2
  400c1a:	d133      	bne.n	400c84 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400c1c:	462a      	mov	r2, r5
  400c1e:	9900      	ldr	r1, [sp, #0]
  400c20:	4620      	mov	r0, r4
  400c22:	4b42      	ldr	r3, [pc, #264]	; (400d2c <xQueueGenericSend+0x1b0>)
  400c24:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400c26:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400c28:	b173      	cbz	r3, 400c48 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400c2a:	4629      	mov	r1, r5
  400c2c:	4620      	mov	r0, r4
  400c2e:	4b40      	ldr	r3, [pc, #256]	; (400d30 <xQueueGenericSend+0x1b4>)
  400c30:	4798      	blx	r3
  400c32:	2801      	cmp	r0, #1
  400c34:	d122      	bne.n	400c7c <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  400c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c3a:	4b3e      	ldr	r3, [pc, #248]	; (400d34 <xQueueGenericSend+0x1b8>)
  400c3c:	601a      	str	r2, [r3, #0]
  400c3e:	f3bf 8f4f 	dsb	sy
  400c42:	f3bf 8f6f 	isb	sy
  400c46:	e019      	b.n	400c7c <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c4a:	b173      	cbz	r3, 400c6a <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400c4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c50:	4b39      	ldr	r3, [pc, #228]	; (400d38 <xQueueGenericSend+0x1bc>)
  400c52:	4798      	blx	r3
  400c54:	2801      	cmp	r0, #1
  400c56:	d111      	bne.n	400c7c <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  400c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c5c:	4b35      	ldr	r3, [pc, #212]	; (400d34 <xQueueGenericSend+0x1b8>)
  400c5e:	601a      	str	r2, [r3, #0]
  400c60:	f3bf 8f4f 	dsb	sy
  400c64:	f3bf 8f6f 	isb	sy
  400c68:	e008      	b.n	400c7c <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  400c6a:	b138      	cbz	r0, 400c7c <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  400c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c70:	4b30      	ldr	r3, [pc, #192]	; (400d34 <xQueueGenericSend+0x1b8>)
  400c72:	601a      	str	r2, [r3, #0]
  400c74:	f3bf 8f4f 	dsb	sy
  400c78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  400c7c:	4b2f      	ldr	r3, [pc, #188]	; (400d3c <xQueueGenericSend+0x1c0>)
  400c7e:	4798      	blx	r3
				return pdPASS;
  400c80:	2001      	movs	r0, #1
  400c82:	e04b      	b.n	400d1c <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  400c84:	9b01      	ldr	r3, [sp, #4]
  400c86:	b91b      	cbnz	r3, 400c90 <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400c88:	4b2c      	ldr	r3, [pc, #176]	; (400d3c <xQueueGenericSend+0x1c0>)
  400c8a:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400c8c:	2000      	movs	r0, #0
  400c8e:	e045      	b.n	400d1c <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  400c90:	b917      	cbnz	r7, 400c98 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400c92:	a802      	add	r0, sp, #8
  400c94:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  400c96:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  400c98:	4b28      	ldr	r3, [pc, #160]	; (400d3c <xQueueGenericSend+0x1c0>)
  400c9a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400c9c:	4b28      	ldr	r3, [pc, #160]	; (400d40 <xQueueGenericSend+0x1c4>)
  400c9e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400ca0:	47b0      	blx	r6
  400ca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ca8:	d101      	bne.n	400cae <xQueueGenericSend+0x132>
  400caa:	2300      	movs	r3, #0
  400cac:	6463      	str	r3, [r4, #68]	; 0x44
  400cae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
  400cb4:	d101      	bne.n	400cba <xQueueGenericSend+0x13e>
  400cb6:	2300      	movs	r3, #0
  400cb8:	64a3      	str	r3, [r4, #72]	; 0x48
  400cba:	4b20      	ldr	r3, [pc, #128]	; (400d3c <xQueueGenericSend+0x1c0>)
  400cbc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400cbe:	a901      	add	r1, sp, #4
  400cc0:	a802      	add	r0, sp, #8
  400cc2:	4b20      	ldr	r3, [pc, #128]	; (400d44 <xQueueGenericSend+0x1c8>)
  400cc4:	4798      	blx	r3
  400cc6:	bb18      	cbnz	r0, 400d10 <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400cc8:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400cca:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400cce:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400cd2:	4b1a      	ldr	r3, [pc, #104]	; (400d3c <xQueueGenericSend+0x1c0>)
  400cd4:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400cd6:	45d3      	cmp	fp, sl
  400cd8:	d114      	bne.n	400d04 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400cda:	9901      	ldr	r1, [sp, #4]
  400cdc:	f104 0010 	add.w	r0, r4, #16
  400ce0:	4b19      	ldr	r3, [pc, #100]	; (400d48 <xQueueGenericSend+0x1cc>)
  400ce2:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400ce4:	4620      	mov	r0, r4
  400ce6:	4b19      	ldr	r3, [pc, #100]	; (400d4c <xQueueGenericSend+0x1d0>)
  400ce8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400cea:	4b19      	ldr	r3, [pc, #100]	; (400d50 <xQueueGenericSend+0x1d4>)
  400cec:	4798      	blx	r3
  400cee:	2800      	cmp	r0, #0
  400cf0:	d18d      	bne.n	400c0e <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  400cf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400cf6:	f8c8 3000 	str.w	r3, [r8]
  400cfa:	f3bf 8f4f 	dsb	sy
  400cfe:	f3bf 8f6f 	isb	sy
  400d02:	e784      	b.n	400c0e <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400d04:	4620      	mov	r0, r4
  400d06:	4b11      	ldr	r3, [pc, #68]	; (400d4c <xQueueGenericSend+0x1d0>)
  400d08:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400d0a:	4b11      	ldr	r3, [pc, #68]	; (400d50 <xQueueGenericSend+0x1d4>)
  400d0c:	4798      	blx	r3
  400d0e:	e77e      	b.n	400c0e <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400d10:	4620      	mov	r0, r4
  400d12:	4b0e      	ldr	r3, [pc, #56]	; (400d4c <xQueueGenericSend+0x1d0>)
  400d14:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400d16:	4b0e      	ldr	r3, [pc, #56]	; (400d50 <xQueueGenericSend+0x1d4>)
  400d18:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400d1a:	2000      	movs	r0, #0
		}
	}
}
  400d1c:	b005      	add	sp, #20
  400d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d22:	bf00      	nop
  400d24:	00401b41 	.word	0x00401b41
  400d28:	0040052d 	.word	0x0040052d
  400d2c:	00400895 	.word	0x00400895
  400d30:	0040091d 	.word	0x0040091d
  400d34:	e000ed04 	.word	0xe000ed04
  400d38:	004019d9 	.word	0x004019d9
  400d3c:	00400579 	.word	0x00400579
  400d40:	004014b5 	.word	0x004014b5
  400d44:	00401aa1 	.word	0x00401aa1
  400d48:	004018d5 	.word	0x004018d5
  400d4c:	004009c9 	.word	0x004009c9
  400d50:	00401605 	.word	0x00401605
  400d54:	00401a71 	.word	0x00401a71

00400d58 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400d58:	b950      	cbnz	r0, 400d70 <xQueueGenericSendFromISR+0x18>
  400d5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d5e:	b672      	cpsid	i
  400d60:	f383 8811 	msr	BASEPRI, r3
  400d64:	f3bf 8f6f 	isb	sy
  400d68:	f3bf 8f4f 	dsb	sy
  400d6c:	b662      	cpsie	i
  400d6e:	e7fe      	b.n	400d6e <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  400d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d74:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400d76:	b961      	cbnz	r1, 400d92 <xQueueGenericSendFromISR+0x3a>
  400d78:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400d7a:	b150      	cbz	r0, 400d92 <xQueueGenericSendFromISR+0x3a>
  400d7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400d80:	b672      	cpsid	i
  400d82:	f383 8811 	msr	BASEPRI, r3
  400d86:	f3bf 8f6f 	isb	sy
  400d8a:	f3bf 8f4f 	dsb	sy
  400d8e:	b662      	cpsie	i
  400d90:	e7fe      	b.n	400d90 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400d92:	2b02      	cmp	r3, #2
  400d94:	d10d      	bne.n	400db2 <xQueueGenericSendFromISR+0x5a>
  400d96:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400d98:	2801      	cmp	r0, #1
  400d9a:	d00a      	beq.n	400db2 <xQueueGenericSendFromISR+0x5a>
  400d9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400da0:	b672      	cpsid	i
  400da2:	f383 8811 	msr	BASEPRI, r3
  400da6:	f3bf 8f6f 	isb	sy
  400daa:	f3bf 8f4f 	dsb	sy
  400dae:	b662      	cpsie	i
  400db0:	e7fe      	b.n	400db0 <xQueueGenericSendFromISR+0x58>
  400db2:	461e      	mov	r6, r3
  400db4:	4615      	mov	r5, r2
  400db6:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400db8:	4b21      	ldr	r3, [pc, #132]	; (400e40 <xQueueGenericSendFromISR+0xe8>)
  400dba:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400dbc:	f3ef 8711 	mrs	r7, BASEPRI
  400dc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400dc4:	b672      	cpsid	i
  400dc6:	f383 8811 	msr	BASEPRI, r3
  400dca:	f3bf 8f6f 	isb	sy
  400dce:	f3bf 8f4f 	dsb	sy
  400dd2:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400dd4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400dd6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400dd8:	429a      	cmp	r2, r3
  400dda:	d301      	bcc.n	400de0 <xQueueGenericSendFromISR+0x88>
  400ddc:	2e02      	cmp	r6, #2
  400dde:	d123      	bne.n	400e28 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400de0:	4632      	mov	r2, r6
  400de2:	4641      	mov	r1, r8
  400de4:	4620      	mov	r0, r4
  400de6:	4b17      	ldr	r3, [pc, #92]	; (400e44 <xQueueGenericSendFromISR+0xec>)
  400de8:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400dea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400dec:	f1b3 3fff 	cmp.w	r3, #4294967295
  400df0:	d115      	bne.n	400e1e <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400df2:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400df4:	b143      	cbz	r3, 400e08 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400df6:	4631      	mov	r1, r6
  400df8:	4620      	mov	r0, r4
  400dfa:	4b13      	ldr	r3, [pc, #76]	; (400e48 <xQueueGenericSendFromISR+0xf0>)
  400dfc:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  400dfe:	b1ad      	cbz	r5, 400e2c <xQueueGenericSendFromISR+0xd4>
  400e00:	2801      	cmp	r0, #1
  400e02:	d113      	bne.n	400e2c <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  400e04:	6028      	str	r0, [r5, #0]
  400e06:	e016      	b.n	400e36 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400e08:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400e0a:	b18b      	cbz	r3, 400e30 <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400e0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400e10:	4b0e      	ldr	r3, [pc, #56]	; (400e4c <xQueueGenericSendFromISR+0xf4>)
  400e12:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  400e14:	b175      	cbz	r5, 400e34 <xQueueGenericSendFromISR+0xdc>
  400e16:	b168      	cbz	r0, 400e34 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  400e18:	2001      	movs	r0, #1
  400e1a:	6028      	str	r0, [r5, #0]
  400e1c:	e00b      	b.n	400e36 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400e1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400e20:	3301      	adds	r3, #1
  400e22:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400e24:	2001      	movs	r0, #1
  400e26:	e006      	b.n	400e36 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400e28:	2000      	movs	r0, #0
  400e2a:	e004      	b.n	400e36 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400e2c:	2001      	movs	r0, #1
  400e2e:	e002      	b.n	400e36 <xQueueGenericSendFromISR+0xde>
  400e30:	2001      	movs	r0, #1
  400e32:	e000      	b.n	400e36 <xQueueGenericSendFromISR+0xde>
  400e34:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400e36:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  400e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e3e:	bf00      	nop
  400e40:	00400725 	.word	0x00400725
  400e44:	00400895 	.word	0x00400895
  400e48:	0040091d 	.word	0x0040091d
  400e4c:	004019d9 	.word	0x004019d9

00400e50 <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  400e50:	b950      	cbnz	r0, 400e68 <xQueueGiveFromISR+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400e52:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e56:	b672      	cpsid	i
  400e58:	f383 8811 	msr	BASEPRI, r3
  400e5c:	f3bf 8f6f 	isb	sy
  400e60:	f3bf 8f4f 	dsb	sy
  400e64:	b662      	cpsie	i
  400e66:	e7fe      	b.n	400e66 <xQueueGiveFromISR+0x16>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  400e68:	b570      	push	{r4, r5, r6, lr}
  400e6a:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  400e6c:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400e6e:	b153      	cbz	r3, 400e86 <xQueueGiveFromISR+0x36>
  400e70:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e74:	b672      	cpsid	i
  400e76:	f383 8811 	msr	BASEPRI, r3
  400e7a:	f3bf 8f6f 	isb	sy
  400e7e:	f3bf 8f4f 	dsb	sy
  400e82:	b662      	cpsie	i
  400e84:	e7fe      	b.n	400e84 <xQueueGiveFromISR+0x34>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  400e86:	6803      	ldr	r3, [r0, #0]
  400e88:	b963      	cbnz	r3, 400ea4 <xQueueGiveFromISR+0x54>
  400e8a:	6843      	ldr	r3, [r0, #4]
  400e8c:	b153      	cbz	r3, 400ea4 <xQueueGiveFromISR+0x54>
  400e8e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e92:	b672      	cpsid	i
  400e94:	f383 8811 	msr	BASEPRI, r3
  400e98:	f3bf 8f6f 	isb	sy
  400e9c:	f3bf 8f4f 	dsb	sy
  400ea0:	b662      	cpsie	i
  400ea2:	e7fe      	b.n	400ea2 <xQueueGiveFromISR+0x52>
  400ea4:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400ea6:	4b1f      	ldr	r3, [pc, #124]	; (400f24 <xQueueGiveFromISR+0xd4>)
  400ea8:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400eaa:	f3ef 8611 	mrs	r6, BASEPRI
  400eae:	f04f 0380 	mov.w	r3, #128	; 0x80
  400eb2:	b672      	cpsid	i
  400eb4:	f383 8811 	msr	BASEPRI, r3
  400eb8:	f3bf 8f6f 	isb	sy
  400ebc:	f3bf 8f4f 	dsb	sy
  400ec0:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400ec2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400ec4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400ec6:	429a      	cmp	r2, r3
  400ec8:	d221      	bcs.n	400f0e <xQueueGiveFromISR+0xbe>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  400eca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400ecc:	3301      	adds	r3, #1
  400ece:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400ed0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ed6:	d115      	bne.n	400f04 <xQueueGiveFromISR+0xb4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400ed8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400eda:	b143      	cbz	r3, 400eee <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400edc:	2100      	movs	r1, #0
  400ede:	4620      	mov	r0, r4
  400ee0:	4b11      	ldr	r3, [pc, #68]	; (400f28 <xQueueGiveFromISR+0xd8>)
  400ee2:	4798      	blx	r3
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  400ee4:	b1ad      	cbz	r5, 400f12 <xQueueGiveFromISR+0xc2>
  400ee6:	2801      	cmp	r0, #1
  400ee8:	d113      	bne.n	400f12 <xQueueGiveFromISR+0xc2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  400eea:	6028      	str	r0, [r5, #0]
  400eec:	e016      	b.n	400f1c <xQueueGiveFromISR+0xcc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400eee:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ef0:	b18b      	cbz	r3, 400f16 <xQueueGiveFromISR+0xc6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ef2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ef6:	4b0d      	ldr	r3, [pc, #52]	; (400f2c <xQueueGiveFromISR+0xdc>)
  400ef8:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  400efa:	b175      	cbz	r5, 400f1a <xQueueGiveFromISR+0xca>
  400efc:	b168      	cbz	r0, 400f1a <xQueueGiveFromISR+0xca>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  400efe:	2001      	movs	r0, #1
  400f00:	6028      	str	r0, [r5, #0]
  400f02:	e00b      	b.n	400f1c <xQueueGiveFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400f04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400f06:	3301      	adds	r3, #1
  400f08:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400f0a:	2001      	movs	r0, #1
  400f0c:	e006      	b.n	400f1c <xQueueGiveFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400f0e:	2000      	movs	r0, #0
  400f10:	e004      	b.n	400f1c <xQueueGiveFromISR+0xcc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400f12:	2001      	movs	r0, #1
  400f14:	e002      	b.n	400f1c <xQueueGiveFromISR+0xcc>
  400f16:	2001      	movs	r0, #1
  400f18:	e000      	b.n	400f1c <xQueueGiveFromISR+0xcc>
  400f1a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400f1c:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  400f20:	bd70      	pop	{r4, r5, r6, pc}
  400f22:	bf00      	nop
  400f24:	00400725 	.word	0x00400725
  400f28:	0040091d 	.word	0x0040091d
  400f2c:	004019d9 	.word	0x004019d9

00400f30 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  400f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f34:	b085      	sub	sp, #20
  400f36:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400f38:	b950      	cbnz	r0, 400f50 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400f3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f3e:	b672      	cpsid	i
  400f40:	f383 8811 	msr	BASEPRI, r3
  400f44:	f3bf 8f6f 	isb	sy
  400f48:	f3bf 8f4f 	dsb	sy
  400f4c:	b662      	cpsie	i
  400f4e:	e7fe      	b.n	400f4e <xQueueGenericReceive+0x1e>
  400f50:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400f52:	b961      	cbnz	r1, 400f6e <xQueueGenericReceive+0x3e>
  400f54:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400f56:	b152      	cbz	r2, 400f6e <xQueueGenericReceive+0x3e>
  400f58:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f5c:	b672      	cpsid	i
  400f5e:	f383 8811 	msr	BASEPRI, r3
  400f62:	f3bf 8f6f 	isb	sy
  400f66:	f3bf 8f4f 	dsb	sy
  400f6a:	b662      	cpsie	i
  400f6c:	e7fe      	b.n	400f6c <xQueueGenericReceive+0x3c>
  400f6e:	4698      	mov	r8, r3
  400f70:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400f72:	4b52      	ldr	r3, [pc, #328]	; (4010bc <xQueueGenericReceive+0x18c>)
  400f74:	4798      	blx	r3
  400f76:	b960      	cbnz	r0, 400f92 <xQueueGenericReceive+0x62>
  400f78:	9b01      	ldr	r3, [sp, #4]
  400f7a:	b163      	cbz	r3, 400f96 <xQueueGenericReceive+0x66>
  400f7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f80:	b672      	cpsid	i
  400f82:	f383 8811 	msr	BASEPRI, r3
  400f86:	f3bf 8f6f 	isb	sy
  400f8a:	f3bf 8f4f 	dsb	sy
  400f8e:	b662      	cpsie	i
  400f90:	e7fe      	b.n	400f90 <xQueueGenericReceive+0x60>
  400f92:	2600      	movs	r6, #0
  400f94:	e000      	b.n	400f98 <xQueueGenericReceive+0x68>
  400f96:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400f98:	4d49      	ldr	r5, [pc, #292]	; (4010c0 <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400f9a:	f8df a154 	ldr.w	sl, [pc, #340]	; 4010f0 <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  400f9e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4010d0 <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400fa2:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400fa4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400fa6:	2b00      	cmp	r3, #0
  400fa8:	d034      	beq.n	401014 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  400faa:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400fac:	4659      	mov	r1, fp
  400fae:	4620      	mov	r0, r4
  400fb0:	4b44      	ldr	r3, [pc, #272]	; (4010c4 <xQueueGenericReceive+0x194>)
  400fb2:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400fb4:	f1b8 0f00 	cmp.w	r8, #0
  400fb8:	d118      	bne.n	400fec <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  400fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400fbc:	3b01      	subs	r3, #1
  400fbe:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400fc0:	6823      	ldr	r3, [r4, #0]
  400fc2:	b913      	cbnz	r3, 400fca <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400fc4:	4b40      	ldr	r3, [pc, #256]	; (4010c8 <xQueueGenericReceive+0x198>)
  400fc6:	4798      	blx	r3
  400fc8:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400fca:	6923      	ldr	r3, [r4, #16]
  400fcc:	b1f3      	cbz	r3, 40100c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400fce:	f104 0010 	add.w	r0, r4, #16
  400fd2:	4b3e      	ldr	r3, [pc, #248]	; (4010cc <xQueueGenericReceive+0x19c>)
  400fd4:	4798      	blx	r3
  400fd6:	2801      	cmp	r0, #1
  400fd8:	d118      	bne.n	40100c <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  400fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fde:	4b3c      	ldr	r3, [pc, #240]	; (4010d0 <xQueueGenericReceive+0x1a0>)
  400fe0:	601a      	str	r2, [r3, #0]
  400fe2:	f3bf 8f4f 	dsb	sy
  400fe6:	f3bf 8f6f 	isb	sy
  400fea:	e00f      	b.n	40100c <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  400fec:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ff0:	b163      	cbz	r3, 40100c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ff2:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ff6:	4b35      	ldr	r3, [pc, #212]	; (4010cc <xQueueGenericReceive+0x19c>)
  400ff8:	4798      	blx	r3
  400ffa:	b138      	cbz	r0, 40100c <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  400ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401000:	4b33      	ldr	r3, [pc, #204]	; (4010d0 <xQueueGenericReceive+0x1a0>)
  401002:	601a      	str	r2, [r3, #0]
  401004:	f3bf 8f4f 	dsb	sy
  401008:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  40100c:	4b31      	ldr	r3, [pc, #196]	; (4010d4 <xQueueGenericReceive+0x1a4>)
  40100e:	4798      	blx	r3
				return pdPASS;
  401010:	2001      	movs	r0, #1
  401012:	e04f      	b.n	4010b4 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  401014:	9b01      	ldr	r3, [sp, #4]
  401016:	b91b      	cbnz	r3, 401020 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  401018:	4b2e      	ldr	r3, [pc, #184]	; (4010d4 <xQueueGenericReceive+0x1a4>)
  40101a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  40101c:	2000      	movs	r0, #0
  40101e:	e049      	b.n	4010b4 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  401020:	b916      	cbnz	r6, 401028 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401022:	a802      	add	r0, sp, #8
  401024:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401026:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401028:	4b2a      	ldr	r3, [pc, #168]	; (4010d4 <xQueueGenericReceive+0x1a4>)
  40102a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  40102c:	4b2a      	ldr	r3, [pc, #168]	; (4010d8 <xQueueGenericReceive+0x1a8>)
  40102e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401030:	47a8      	blx	r5
  401032:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401034:	f1b3 3fff 	cmp.w	r3, #4294967295
  401038:	d101      	bne.n	40103e <xQueueGenericReceive+0x10e>
  40103a:	2300      	movs	r3, #0
  40103c:	6463      	str	r3, [r4, #68]	; 0x44
  40103e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401040:	f1b3 3fff 	cmp.w	r3, #4294967295
  401044:	d101      	bne.n	40104a <xQueueGenericReceive+0x11a>
  401046:	2300      	movs	r3, #0
  401048:	64a3      	str	r3, [r4, #72]	; 0x48
  40104a:	4b22      	ldr	r3, [pc, #136]	; (4010d4 <xQueueGenericReceive+0x1a4>)
  40104c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40104e:	a901      	add	r1, sp, #4
  401050:	a802      	add	r0, sp, #8
  401052:	4b22      	ldr	r3, [pc, #136]	; (4010dc <xQueueGenericReceive+0x1ac>)
  401054:	4798      	blx	r3
  401056:	bb38      	cbnz	r0, 4010a8 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401058:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40105a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40105c:	4b1d      	ldr	r3, [pc, #116]	; (4010d4 <xQueueGenericReceive+0x1a4>)
  40105e:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401060:	b9e7      	cbnz	r7, 40109c <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401062:	6823      	ldr	r3, [r4, #0]
  401064:	b92b      	cbnz	r3, 401072 <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401066:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401068:	6860      	ldr	r0, [r4, #4]
  40106a:	4b1d      	ldr	r3, [pc, #116]	; (4010e0 <xQueueGenericReceive+0x1b0>)
  40106c:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40106e:	4b19      	ldr	r3, [pc, #100]	; (4010d4 <xQueueGenericReceive+0x1a4>)
  401070:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401072:	9901      	ldr	r1, [sp, #4]
  401074:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401078:	4b1a      	ldr	r3, [pc, #104]	; (4010e4 <xQueueGenericReceive+0x1b4>)
  40107a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40107c:	4620      	mov	r0, r4
  40107e:	4b1a      	ldr	r3, [pc, #104]	; (4010e8 <xQueueGenericReceive+0x1b8>)
  401080:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401082:	4b1a      	ldr	r3, [pc, #104]	; (4010ec <xQueueGenericReceive+0x1bc>)
  401084:	4798      	blx	r3
  401086:	2800      	cmp	r0, #0
  401088:	d18b      	bne.n	400fa2 <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  40108a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40108e:	f8c9 3000 	str.w	r3, [r9]
  401092:	f3bf 8f4f 	dsb	sy
  401096:	f3bf 8f6f 	isb	sy
  40109a:	e782      	b.n	400fa2 <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  40109c:	4620      	mov	r0, r4
  40109e:	4b12      	ldr	r3, [pc, #72]	; (4010e8 <xQueueGenericReceive+0x1b8>)
  4010a0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4010a2:	4b12      	ldr	r3, [pc, #72]	; (4010ec <xQueueGenericReceive+0x1bc>)
  4010a4:	4798      	blx	r3
  4010a6:	e77c      	b.n	400fa2 <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  4010a8:	4620      	mov	r0, r4
  4010aa:	4b0f      	ldr	r3, [pc, #60]	; (4010e8 <xQueueGenericReceive+0x1b8>)
  4010ac:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4010ae:	4b0f      	ldr	r3, [pc, #60]	; (4010ec <xQueueGenericReceive+0x1bc>)
  4010b0:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  4010b2:	2000      	movs	r0, #0
		}
	}
}
  4010b4:	b005      	add	sp, #20
  4010b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4010ba:	bf00      	nop
  4010bc:	00401b41 	.word	0x00401b41
  4010c0:	0040052d 	.word	0x0040052d
  4010c4:	004009a1 	.word	0x004009a1
  4010c8:	00401cc9 	.word	0x00401cc9
  4010cc:	004019d9 	.word	0x004019d9
  4010d0:	e000ed04 	.word	0xe000ed04
  4010d4:	00400579 	.word	0x00400579
  4010d8:	004014b5 	.word	0x004014b5
  4010dc:	00401aa1 	.word	0x00401aa1
  4010e0:	00401b61 	.word	0x00401b61
  4010e4:	004018d5 	.word	0x004018d5
  4010e8:	004009c9 	.word	0x004009c9
  4010ec:	00401605 	.word	0x00401605
  4010f0:	00401a71 	.word	0x00401a71

004010f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  4010f4:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4010f6:	4b0b      	ldr	r3, [pc, #44]	; (401124 <vQueueAddToRegistry+0x30>)
  4010f8:	681b      	ldr	r3, [r3, #0]
  4010fa:	b12b      	cbz	r3, 401108 <vQueueAddToRegistry+0x14>
  4010fc:	2301      	movs	r3, #1
  4010fe:	4c09      	ldr	r4, [pc, #36]	; (401124 <vQueueAddToRegistry+0x30>)
  401100:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401104:	b942      	cbnz	r2, 401118 <vQueueAddToRegistry+0x24>
  401106:	e000      	b.n	40110a <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401108:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40110a:	4a06      	ldr	r2, [pc, #24]	; (401124 <vQueueAddToRegistry+0x30>)
  40110c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401110:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401114:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  401116:	e002      	b.n	40111e <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401118:	3301      	adds	r3, #1
  40111a:	2b08      	cmp	r3, #8
  40111c:	d1f0      	bne.n	401100 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  40111e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401122:	4770      	bx	lr
  401124:	2040bef4 	.word	0x2040bef4

00401128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401128:	b570      	push	{r4, r5, r6, lr}
  40112a:	4604      	mov	r4, r0
  40112c:	460d      	mov	r5, r1
  40112e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401130:	4b0d      	ldr	r3, [pc, #52]	; (401168 <vQueueWaitForMessageRestricted+0x40>)
  401132:	4798      	blx	r3
  401134:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401136:	f1b3 3fff 	cmp.w	r3, #4294967295
  40113a:	d101      	bne.n	401140 <vQueueWaitForMessageRestricted+0x18>
  40113c:	2300      	movs	r3, #0
  40113e:	6463      	str	r3, [r4, #68]	; 0x44
  401140:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401142:	f1b3 3fff 	cmp.w	r3, #4294967295
  401146:	d101      	bne.n	40114c <vQueueWaitForMessageRestricted+0x24>
  401148:	2300      	movs	r3, #0
  40114a:	64a3      	str	r3, [r4, #72]	; 0x48
  40114c:	4b07      	ldr	r3, [pc, #28]	; (40116c <vQueueWaitForMessageRestricted+0x44>)
  40114e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401150:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401152:	b92b      	cbnz	r3, 401160 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401154:	4632      	mov	r2, r6
  401156:	4629      	mov	r1, r5
  401158:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40115c:	4b04      	ldr	r3, [pc, #16]	; (401170 <vQueueWaitForMessageRestricted+0x48>)
  40115e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  401160:	4620      	mov	r0, r4
  401162:	4b04      	ldr	r3, [pc, #16]	; (401174 <vQueueWaitForMessageRestricted+0x4c>)
  401164:	4798      	blx	r3
  401166:	bd70      	pop	{r4, r5, r6, pc}
  401168:	0040052d 	.word	0x0040052d
  40116c:	00400579 	.word	0x00400579
  401170:	00401959 	.word	0x00401959
  401174:	004009c9 	.word	0x004009c9

00401178 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401178:	4b08      	ldr	r3, [pc, #32]	; (40119c <prvResetNextTaskUnblockTime+0x24>)
  40117a:	681b      	ldr	r3, [r3, #0]
  40117c:	681b      	ldr	r3, [r3, #0]
  40117e:	b923      	cbnz	r3, 40118a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  401180:	f04f 32ff 	mov.w	r2, #4294967295
  401184:	4b06      	ldr	r3, [pc, #24]	; (4011a0 <prvResetNextTaskUnblockTime+0x28>)
  401186:	601a      	str	r2, [r3, #0]
  401188:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40118a:	4b04      	ldr	r3, [pc, #16]	; (40119c <prvResetNextTaskUnblockTime+0x24>)
  40118c:	681b      	ldr	r3, [r3, #0]
  40118e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401190:	68db      	ldr	r3, [r3, #12]
  401192:	685a      	ldr	r2, [r3, #4]
  401194:	4b02      	ldr	r3, [pc, #8]	; (4011a0 <prvResetNextTaskUnblockTime+0x28>)
  401196:	601a      	str	r2, [r3, #0]
  401198:	4770      	bx	lr
  40119a:	bf00      	nop
  40119c:	2040bd58 	.word	0x2040bd58
  4011a0:	2040be7c 	.word	0x2040be7c

004011a4 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  4011a4:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  4011a6:	4b0f      	ldr	r3, [pc, #60]	; (4011e4 <prvAddCurrentTaskToDelayedList+0x40>)
  4011a8:	681b      	ldr	r3, [r3, #0]
  4011aa:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  4011ac:	4b0e      	ldr	r3, [pc, #56]	; (4011e8 <prvAddCurrentTaskToDelayedList+0x44>)
  4011ae:	681b      	ldr	r3, [r3, #0]
  4011b0:	4298      	cmp	r0, r3
  4011b2:	d207      	bcs.n	4011c4 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4011b4:	4b0d      	ldr	r3, [pc, #52]	; (4011ec <prvAddCurrentTaskToDelayedList+0x48>)
  4011b6:	6818      	ldr	r0, [r3, #0]
  4011b8:	4b0a      	ldr	r3, [pc, #40]	; (4011e4 <prvAddCurrentTaskToDelayedList+0x40>)
  4011ba:	6819      	ldr	r1, [r3, #0]
  4011bc:	3104      	adds	r1, #4
  4011be:	4b0c      	ldr	r3, [pc, #48]	; (4011f0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4011c0:	4798      	blx	r3
  4011c2:	bd10      	pop	{r4, pc}
  4011c4:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4011c6:	4b0b      	ldr	r3, [pc, #44]	; (4011f4 <prvAddCurrentTaskToDelayedList+0x50>)
  4011c8:	6818      	ldr	r0, [r3, #0]
  4011ca:	4b06      	ldr	r3, [pc, #24]	; (4011e4 <prvAddCurrentTaskToDelayedList+0x40>)
  4011cc:	6819      	ldr	r1, [r3, #0]
  4011ce:	3104      	adds	r1, #4
  4011d0:	4b07      	ldr	r3, [pc, #28]	; (4011f0 <prvAddCurrentTaskToDelayedList+0x4c>)
  4011d2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4011d4:	4b08      	ldr	r3, [pc, #32]	; (4011f8 <prvAddCurrentTaskToDelayedList+0x54>)
  4011d6:	681b      	ldr	r3, [r3, #0]
  4011d8:	429c      	cmp	r4, r3
  4011da:	d201      	bcs.n	4011e0 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4011dc:	4b06      	ldr	r3, [pc, #24]	; (4011f8 <prvAddCurrentTaskToDelayedList+0x54>)
  4011de:	601c      	str	r4, [r3, #0]
  4011e0:	bd10      	pop	{r4, pc}
  4011e2:	bf00      	nop
  4011e4:	2040be5c 	.word	0x2040be5c
  4011e8:	2040be78 	.word	0x2040be78
  4011ec:	2040bd78 	.word	0x2040bd78
  4011f0:	0040083d 	.word	0x0040083d
  4011f4:	2040bd58 	.word	0x2040bd58
  4011f8:	2040be7c 	.word	0x2040be7c

004011fc <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  4011fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401200:	b083      	sub	sp, #12
  401202:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  401204:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401208:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  40120a:	b950      	cbnz	r0, 401222 <xTaskGenericCreate+0x26>
  40120c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401210:	b672      	cpsid	i
  401212:	f383 8811 	msr	BASEPRI, r3
  401216:	f3bf 8f6f 	isb	sy
  40121a:	f3bf 8f4f 	dsb	sy
  40121e:	b662      	cpsie	i
  401220:	e7fe      	b.n	401220 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401222:	2f09      	cmp	r7, #9
  401224:	d90a      	bls.n	40123c <xTaskGenericCreate+0x40>
  401226:	f04f 0380 	mov.w	r3, #128	; 0x80
  40122a:	b672      	cpsid	i
  40122c:	f383 8811 	msr	BASEPRI, r3
  401230:	f3bf 8f6f 	isb	sy
  401234:	f3bf 8f4f 	dsb	sy
  401238:	b662      	cpsie	i
  40123a:	e7fe      	b.n	40123a <xTaskGenericCreate+0x3e>
  40123c:	9001      	str	r0, [sp, #4]
  40123e:	9300      	str	r3, [sp, #0]
  401240:	4690      	mov	r8, r2
  401242:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401244:	b935      	cbnz	r5, 401254 <xTaskGenericCreate+0x58>
  401246:	0090      	lsls	r0, r2, #2
  401248:	4b5f      	ldr	r3, [pc, #380]	; (4013c8 <xTaskGenericCreate+0x1cc>)
  40124a:	4798      	blx	r3

		if( pxStack != NULL )
  40124c:	4605      	mov	r5, r0
  40124e:	2800      	cmp	r0, #0
  401250:	f000 80b4 	beq.w	4013bc <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401254:	2058      	movs	r0, #88	; 0x58
  401256:	4b5c      	ldr	r3, [pc, #368]	; (4013c8 <xTaskGenericCreate+0x1cc>)
  401258:	4798      	blx	r3

			if( pxNewTCB != NULL )
  40125a:	4604      	mov	r4, r0
  40125c:	b1a0      	cbz	r0, 401288 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40125e:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401260:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401264:	21a5      	movs	r1, #165	; 0xa5
  401266:	4628      	mov	r0, r5
  401268:	4b58      	ldr	r3, [pc, #352]	; (4013cc <xTaskGenericCreate+0x1d0>)
  40126a:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40126c:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  401270:	4445      	add	r5, r8
  401272:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401274:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  401278:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40127c:	7833      	ldrb	r3, [r6, #0]
  40127e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  401282:	7833      	ldrb	r3, [r6, #0]
  401284:	b923      	cbnz	r3, 401290 <xTaskGenericCreate+0x94>
  401286:	e00f      	b.n	4012a8 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  401288:	4628      	mov	r0, r5
  40128a:	4b51      	ldr	r3, [pc, #324]	; (4013d0 <xTaskGenericCreate+0x1d4>)
  40128c:	4798      	blx	r3
  40128e:	e095      	b.n	4013bc <xTaskGenericCreate+0x1c0>
  401290:	4633      	mov	r3, r6
  401292:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401296:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401298:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  40129c:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  4012a0:	7819      	ldrb	r1, [r3, #0]
  4012a2:	b109      	cbz	r1, 4012a8 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  4012a4:	429e      	cmp	r6, r3
  4012a6:	d1f7      	bne.n	401298 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4012a8:	f04f 0800 	mov.w	r8, #0
  4012ac:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  4012b0:	463e      	mov	r6, r7
  4012b2:	2f09      	cmp	r7, #9
  4012b4:	bf28      	it	cs
  4012b6:	2609      	movcs	r6, #9
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  4012b8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  4012ba:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  4012bc:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  4012c0:	f104 0904 	add.w	r9, r4, #4
  4012c4:	4648      	mov	r0, r9
  4012c6:	f8df b154 	ldr.w	fp, [pc, #340]	; 40141c <xTaskGenericCreate+0x220>
  4012ca:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4012cc:	f104 0018 	add.w	r0, r4, #24
  4012d0:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4012d2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4012d4:	f1c6 060a 	rsb	r6, r6, #10
  4012d8:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4012da:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  4012dc:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4012e0:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4012e4:	9a00      	ldr	r2, [sp, #0]
  4012e6:	9901      	ldr	r1, [sp, #4]
  4012e8:	4628      	mov	r0, r5
  4012ea:	4b3a      	ldr	r3, [pc, #232]	; (4013d4 <xTaskGenericCreate+0x1d8>)
  4012ec:	4798      	blx	r3
  4012ee:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  4012f0:	f1ba 0f00 	cmp.w	sl, #0
  4012f4:	d001      	beq.n	4012fa <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4012f6:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  4012fa:	4b37      	ldr	r3, [pc, #220]	; (4013d8 <xTaskGenericCreate+0x1dc>)
  4012fc:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4012fe:	4a37      	ldr	r2, [pc, #220]	; (4013dc <xTaskGenericCreate+0x1e0>)
  401300:	6813      	ldr	r3, [r2, #0]
  401302:	3301      	adds	r3, #1
  401304:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401306:	4b36      	ldr	r3, [pc, #216]	; (4013e0 <xTaskGenericCreate+0x1e4>)
  401308:	681b      	ldr	r3, [r3, #0]
  40130a:	bb0b      	cbnz	r3, 401350 <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  40130c:	4b34      	ldr	r3, [pc, #208]	; (4013e0 <xTaskGenericCreate+0x1e4>)
  40130e:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401310:	6813      	ldr	r3, [r2, #0]
  401312:	2b01      	cmp	r3, #1
  401314:	d126      	bne.n	401364 <xTaskGenericCreate+0x168>
  401316:	4d33      	ldr	r5, [pc, #204]	; (4013e4 <xTaskGenericCreate+0x1e8>)
  401318:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  40131c:	4e32      	ldr	r6, [pc, #200]	; (4013e8 <xTaskGenericCreate+0x1ec>)
  40131e:	4628      	mov	r0, r5
  401320:	47b0      	blx	r6
  401322:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401324:	4545      	cmp	r5, r8
  401326:	d1fa      	bne.n	40131e <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401328:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401420 <xTaskGenericCreate+0x224>
  40132c:	4640      	mov	r0, r8
  40132e:	4d2e      	ldr	r5, [pc, #184]	; (4013e8 <xTaskGenericCreate+0x1ec>)
  401330:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401332:	4e2e      	ldr	r6, [pc, #184]	; (4013ec <xTaskGenericCreate+0x1f0>)
  401334:	4630      	mov	r0, r6
  401336:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401338:	482d      	ldr	r0, [pc, #180]	; (4013f0 <xTaskGenericCreate+0x1f4>)
  40133a:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  40133c:	482d      	ldr	r0, [pc, #180]	; (4013f4 <xTaskGenericCreate+0x1f8>)
  40133e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  401340:	482d      	ldr	r0, [pc, #180]	; (4013f8 <xTaskGenericCreate+0x1fc>)
  401342:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401344:	4b2d      	ldr	r3, [pc, #180]	; (4013fc <xTaskGenericCreate+0x200>)
  401346:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  40134a:	4b2d      	ldr	r3, [pc, #180]	; (401400 <xTaskGenericCreate+0x204>)
  40134c:	601e      	str	r6, [r3, #0]
  40134e:	e009      	b.n	401364 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  401350:	4b2c      	ldr	r3, [pc, #176]	; (401404 <xTaskGenericCreate+0x208>)
  401352:	681b      	ldr	r3, [r3, #0]
  401354:	b933      	cbnz	r3, 401364 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401356:	4b22      	ldr	r3, [pc, #136]	; (4013e0 <xTaskGenericCreate+0x1e4>)
  401358:	681b      	ldr	r3, [r3, #0]
  40135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40135c:	429f      	cmp	r7, r3
  40135e:	d301      	bcc.n	401364 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  401360:	4b1f      	ldr	r3, [pc, #124]	; (4013e0 <xTaskGenericCreate+0x1e4>)
  401362:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401364:	4a28      	ldr	r2, [pc, #160]	; (401408 <xTaskGenericCreate+0x20c>)
  401366:	6813      	ldr	r3, [r2, #0]
  401368:	3301      	adds	r3, #1
  40136a:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40136c:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40136e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401370:	4926      	ldr	r1, [pc, #152]	; (40140c <xTaskGenericCreate+0x210>)
  401372:	680b      	ldr	r3, [r1, #0]
  401374:	2201      	movs	r2, #1
  401376:	4082      	lsls	r2, r0
  401378:	4313      	orrs	r3, r2
  40137a:	600b      	str	r3, [r1, #0]
  40137c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401380:	4649      	mov	r1, r9
  401382:	4b18      	ldr	r3, [pc, #96]	; (4013e4 <xTaskGenericCreate+0x1e8>)
  401384:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401388:	4b21      	ldr	r3, [pc, #132]	; (401410 <xTaskGenericCreate+0x214>)
  40138a:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  40138c:	4b21      	ldr	r3, [pc, #132]	; (401414 <xTaskGenericCreate+0x218>)
  40138e:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  401390:	4b1c      	ldr	r3, [pc, #112]	; (401404 <xTaskGenericCreate+0x208>)
  401392:	681b      	ldr	r3, [r3, #0]
  401394:	b173      	cbz	r3, 4013b4 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401396:	4b12      	ldr	r3, [pc, #72]	; (4013e0 <xTaskGenericCreate+0x1e4>)
  401398:	681b      	ldr	r3, [r3, #0]
  40139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40139c:	429f      	cmp	r7, r3
  40139e:	d90b      	bls.n	4013b8 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  4013a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013a4:	4b1c      	ldr	r3, [pc, #112]	; (401418 <xTaskGenericCreate+0x21c>)
  4013a6:	601a      	str	r2, [r3, #0]
  4013a8:	f3bf 8f4f 	dsb	sy
  4013ac:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  4013b0:	2001      	movs	r0, #1
  4013b2:	e005      	b.n	4013c0 <xTaskGenericCreate+0x1c4>
  4013b4:	2001      	movs	r0, #1
  4013b6:	e003      	b.n	4013c0 <xTaskGenericCreate+0x1c4>
  4013b8:	2001      	movs	r0, #1
  4013ba:	e001      	b.n	4013c0 <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  4013bc:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  4013c0:	b003      	add	sp, #12
  4013c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4013c6:	bf00      	nop
  4013c8:	00400789 	.word	0x00400789
  4013cc:	00402f7d 	.word	0x00402f7d
  4013d0:	004007e9 	.word	0x004007e9
  4013d4:	004004e1 	.word	0x004004e1
  4013d8:	0040052d 	.word	0x0040052d
  4013dc:	2040be84 	.word	0x2040be84
  4013e0:	2040be5c 	.word	0x2040be5c
  4013e4:	2040bd80 	.word	0x2040bd80
  4013e8:	00400805 	.word	0x00400805
  4013ec:	2040be88 	.word	0x2040be88
  4013f0:	2040be60 	.word	0x2040be60
  4013f4:	2040be48 	.word	0x2040be48
  4013f8:	2040be9c 	.word	0x2040be9c
  4013fc:	2040bd58 	.word	0x2040bd58
  401400:	2040bd78 	.word	0x2040bd78
  401404:	2040bd5c 	.word	0x2040bd5c
  401408:	2040be80 	.word	0x2040be80
  40140c:	2040beb0 	.word	0x2040beb0
  401410:	00400825 	.word	0x00400825
  401414:	00400579 	.word	0x00400579
  401418:	e000ed04 	.word	0xe000ed04
  40141c:	0040081d 	.word	0x0040081d
  401420:	2040bd64 	.word	0x2040bd64

00401424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401424:	b510      	push	{r4, lr}
  401426:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401428:	2300      	movs	r3, #0
  40142a:	9303      	str	r3, [sp, #12]
  40142c:	9302      	str	r3, [sp, #8]
  40142e:	9301      	str	r3, [sp, #4]
  401430:	9300      	str	r3, [sp, #0]
  401432:	2282      	movs	r2, #130	; 0x82
  401434:	4917      	ldr	r1, [pc, #92]	; (401494 <vTaskStartScheduler+0x70>)
  401436:	4818      	ldr	r0, [pc, #96]	; (401498 <vTaskStartScheduler+0x74>)
  401438:	4c18      	ldr	r4, [pc, #96]	; (40149c <vTaskStartScheduler+0x78>)
  40143a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  40143c:	2801      	cmp	r0, #1
  40143e:	d11a      	bne.n	401476 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401440:	4b17      	ldr	r3, [pc, #92]	; (4014a0 <vTaskStartScheduler+0x7c>)
  401442:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401444:	2801      	cmp	r0, #1
  401446:	d116      	bne.n	401476 <vTaskStartScheduler+0x52>
  401448:	f04f 0380 	mov.w	r3, #128	; 0x80
  40144c:	b672      	cpsid	i
  40144e:	f383 8811 	msr	BASEPRI, r3
  401452:	f3bf 8f6f 	isb	sy
  401456:	f3bf 8f4f 	dsb	sy
  40145a:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  40145c:	f04f 32ff 	mov.w	r2, #4294967295
  401460:	4b10      	ldr	r3, [pc, #64]	; (4014a4 <vTaskStartScheduler+0x80>)
  401462:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401464:	2201      	movs	r2, #1
  401466:	4b10      	ldr	r3, [pc, #64]	; (4014a8 <vTaskStartScheduler+0x84>)
  401468:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  40146a:	2200      	movs	r2, #0
  40146c:	4b0f      	ldr	r3, [pc, #60]	; (4014ac <vTaskStartScheduler+0x88>)
  40146e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401470:	4b0f      	ldr	r3, [pc, #60]	; (4014b0 <vTaskStartScheduler+0x8c>)
  401472:	4798      	blx	r3
  401474:	e00b      	b.n	40148e <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401476:	b950      	cbnz	r0, 40148e <vTaskStartScheduler+0x6a>
  401478:	f04f 0380 	mov.w	r3, #128	; 0x80
  40147c:	b672      	cpsid	i
  40147e:	f383 8811 	msr	BASEPRI, r3
  401482:	f3bf 8f6f 	isb	sy
  401486:	f3bf 8f4f 	dsb	sy
  40148a:	b662      	cpsie	i
  40148c:	e7fe      	b.n	40148c <vTaskStartScheduler+0x68>
	}
}
  40148e:	b004      	add	sp, #16
  401490:	bd10      	pop	{r4, pc}
  401492:	bf00      	nop
  401494:	00403208 	.word	0x00403208
  401498:	004017ad 	.word	0x004017ad
  40149c:	004011fd 	.word	0x004011fd
  4014a0:	00401db1 	.word	0x00401db1
  4014a4:	2040be7c 	.word	0x2040be7c
  4014a8:	2040bd5c 	.word	0x2040bd5c
  4014ac:	2040be78 	.word	0x2040be78
  4014b0:	00400661 	.word	0x00400661

004014b4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  4014b4:	4a02      	ldr	r2, [pc, #8]	; (4014c0 <vTaskSuspendAll+0xc>)
  4014b6:	6813      	ldr	r3, [r2, #0]
  4014b8:	3301      	adds	r3, #1
  4014ba:	6013      	str	r3, [r2, #0]
  4014bc:	4770      	bx	lr
  4014be:	bf00      	nop
  4014c0:	2040be74 	.word	0x2040be74

004014c4 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  4014c4:	4b01      	ldr	r3, [pc, #4]	; (4014cc <xTaskGetTickCount+0x8>)
  4014c6:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  4014c8:	4770      	bx	lr
  4014ca:	bf00      	nop
  4014cc:	2040be78 	.word	0x2040be78

004014d0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  4014d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4014d4:	4b3d      	ldr	r3, [pc, #244]	; (4015cc <xTaskIncrementTick+0xfc>)
  4014d6:	681b      	ldr	r3, [r3, #0]
  4014d8:	2b00      	cmp	r3, #0
  4014da:	d16a      	bne.n	4015b2 <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  4014dc:	4b3c      	ldr	r3, [pc, #240]	; (4015d0 <xTaskIncrementTick+0x100>)
  4014de:	681a      	ldr	r2, [r3, #0]
  4014e0:	3201      	adds	r2, #1
  4014e2:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  4014e4:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  4014e6:	b9d6      	cbnz	r6, 40151e <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  4014e8:	4b3a      	ldr	r3, [pc, #232]	; (4015d4 <xTaskIncrementTick+0x104>)
  4014ea:	681b      	ldr	r3, [r3, #0]
  4014ec:	681b      	ldr	r3, [r3, #0]
  4014ee:	b153      	cbz	r3, 401506 <xTaskIncrementTick+0x36>
  4014f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014f4:	b672      	cpsid	i
  4014f6:	f383 8811 	msr	BASEPRI, r3
  4014fa:	f3bf 8f6f 	isb	sy
  4014fe:	f3bf 8f4f 	dsb	sy
  401502:	b662      	cpsie	i
  401504:	e7fe      	b.n	401504 <xTaskIncrementTick+0x34>
  401506:	4a33      	ldr	r2, [pc, #204]	; (4015d4 <xTaskIncrementTick+0x104>)
  401508:	6811      	ldr	r1, [r2, #0]
  40150a:	4b33      	ldr	r3, [pc, #204]	; (4015d8 <xTaskIncrementTick+0x108>)
  40150c:	6818      	ldr	r0, [r3, #0]
  40150e:	6010      	str	r0, [r2, #0]
  401510:	6019      	str	r1, [r3, #0]
  401512:	4a32      	ldr	r2, [pc, #200]	; (4015dc <xTaskIncrementTick+0x10c>)
  401514:	6813      	ldr	r3, [r2, #0]
  401516:	3301      	adds	r3, #1
  401518:	6013      	str	r3, [r2, #0]
  40151a:	4b31      	ldr	r3, [pc, #196]	; (4015e0 <xTaskIncrementTick+0x110>)
  40151c:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  40151e:	4b31      	ldr	r3, [pc, #196]	; (4015e4 <xTaskIncrementTick+0x114>)
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	429e      	cmp	r6, r3
  401524:	d201      	bcs.n	40152a <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401526:	2400      	movs	r4, #0
  401528:	e037      	b.n	40159a <xTaskIncrementTick+0xca>
  40152a:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40152c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4015d4 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401530:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 401600 <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401534:	4f2c      	ldr	r7, [pc, #176]	; (4015e8 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401536:	f8d9 3000 	ldr.w	r3, [r9]
  40153a:	681b      	ldr	r3, [r3, #0]
  40153c:	b923      	cbnz	r3, 401548 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  40153e:	f04f 32ff 	mov.w	r2, #4294967295
  401542:	4b28      	ldr	r3, [pc, #160]	; (4015e4 <xTaskIncrementTick+0x114>)
  401544:	601a      	str	r2, [r3, #0]
						break;
  401546:	e028      	b.n	40159a <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401548:	f8d9 3000 	ldr.w	r3, [r9]
  40154c:	68db      	ldr	r3, [r3, #12]
  40154e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401550:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401552:	429e      	cmp	r6, r3
  401554:	d202      	bcs.n	40155c <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401556:	4a23      	ldr	r2, [pc, #140]	; (4015e4 <xTaskIncrementTick+0x114>)
  401558:	6013      	str	r3, [r2, #0]
							break;
  40155a:	e01e      	b.n	40159a <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40155c:	f105 0a04 	add.w	sl, r5, #4
  401560:	4650      	mov	r0, sl
  401562:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401564:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401566:	b113      	cbz	r3, 40156e <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401568:	f105 0018 	add.w	r0, r5, #24
  40156c:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  40156e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401570:	683b      	ldr	r3, [r7, #0]
  401572:	2201      	movs	r2, #1
  401574:	4082      	lsls	r2, r0
  401576:	4313      	orrs	r3, r2
  401578:	603b      	str	r3, [r7, #0]
  40157a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40157e:	4651      	mov	r1, sl
  401580:	4b1a      	ldr	r3, [pc, #104]	; (4015ec <xTaskIncrementTick+0x11c>)
  401582:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401586:	4b1a      	ldr	r3, [pc, #104]	; (4015f0 <xTaskIncrementTick+0x120>)
  401588:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40158a:	4b1a      	ldr	r3, [pc, #104]	; (4015f4 <xTaskIncrementTick+0x124>)
  40158c:	681b      	ldr	r3, [r3, #0]
  40158e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  401592:	429a      	cmp	r2, r3
  401594:	bf28      	it	cs
  401596:	2401      	movcs	r4, #1
  401598:	e7cd      	b.n	401536 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40159a:	4b16      	ldr	r3, [pc, #88]	; (4015f4 <xTaskIncrementTick+0x124>)
  40159c:	681b      	ldr	r3, [r3, #0]
  40159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4015a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4015a4:	4a11      	ldr	r2, [pc, #68]	; (4015ec <xTaskIncrementTick+0x11c>)
  4015a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  4015aa:	2b02      	cmp	r3, #2
  4015ac:	bf28      	it	cs
  4015ae:	2401      	movcs	r4, #1
  4015b0:	e004      	b.n	4015bc <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  4015b2:	4a11      	ldr	r2, [pc, #68]	; (4015f8 <xTaskIncrementTick+0x128>)
  4015b4:	6813      	ldr	r3, [r2, #0]
  4015b6:	3301      	adds	r3, #1
  4015b8:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4015ba:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  4015bc:	4b0f      	ldr	r3, [pc, #60]	; (4015fc <xTaskIncrementTick+0x12c>)
  4015be:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  4015c0:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  4015c2:	bf0c      	ite	eq
  4015c4:	4620      	moveq	r0, r4
  4015c6:	2001      	movne	r0, #1
  4015c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4015cc:	2040be74 	.word	0x2040be74
  4015d0:	2040be78 	.word	0x2040be78
  4015d4:	2040bd58 	.word	0x2040bd58
  4015d8:	2040bd78 	.word	0x2040bd78
  4015dc:	2040bd54 	.word	0x2040bd54
  4015e0:	00401179 	.word	0x00401179
  4015e4:	2040be7c 	.word	0x2040be7c
  4015e8:	2040beb0 	.word	0x2040beb0
  4015ec:	2040bd80 	.word	0x2040bd80
  4015f0:	00400825 	.word	0x00400825
  4015f4:	2040be5c 	.word	0x2040be5c
  4015f8:	2040bd7c 	.word	0x2040bd7c
  4015fc:	2040beb4 	.word	0x2040beb4
  401600:	00400871 	.word	0x00400871

00401604 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401608:	4b36      	ldr	r3, [pc, #216]	; (4016e4 <xTaskResumeAll+0xe0>)
  40160a:	681b      	ldr	r3, [r3, #0]
  40160c:	b953      	cbnz	r3, 401624 <xTaskResumeAll+0x20>
  40160e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401612:	b672      	cpsid	i
  401614:	f383 8811 	msr	BASEPRI, r3
  401618:	f3bf 8f6f 	isb	sy
  40161c:	f3bf 8f4f 	dsb	sy
  401620:	b662      	cpsie	i
  401622:	e7fe      	b.n	401622 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401624:	4b30      	ldr	r3, [pc, #192]	; (4016e8 <xTaskResumeAll+0xe4>)
  401626:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401628:	4b2e      	ldr	r3, [pc, #184]	; (4016e4 <xTaskResumeAll+0xe0>)
  40162a:	681a      	ldr	r2, [r3, #0]
  40162c:	3a01      	subs	r2, #1
  40162e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401630:	681b      	ldr	r3, [r3, #0]
  401632:	2b00      	cmp	r3, #0
  401634:	d14d      	bne.n	4016d2 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401636:	4b2d      	ldr	r3, [pc, #180]	; (4016ec <xTaskResumeAll+0xe8>)
  401638:	681b      	ldr	r3, [r3, #0]
  40163a:	bb0b      	cbnz	r3, 401680 <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  40163c:	2400      	movs	r4, #0
  40163e:	e04b      	b.n	4016d8 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401640:	68fb      	ldr	r3, [r7, #12]
  401642:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401644:	f104 0018 	add.w	r0, r4, #24
  401648:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40164a:	f104 0804 	add.w	r8, r4, #4
  40164e:	4640      	mov	r0, r8
  401650:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401652:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401654:	682b      	ldr	r3, [r5, #0]
  401656:	2201      	movs	r2, #1
  401658:	4082      	lsls	r2, r0
  40165a:	4313      	orrs	r3, r2
  40165c:	602b      	str	r3, [r5, #0]
  40165e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401662:	4641      	mov	r1, r8
  401664:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401668:	4b21      	ldr	r3, [pc, #132]	; (4016f0 <xTaskResumeAll+0xec>)
  40166a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40166c:	4b21      	ldr	r3, [pc, #132]	; (4016f4 <xTaskResumeAll+0xf0>)
  40166e:	681b      	ldr	r3, [r3, #0]
  401670:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401674:	429a      	cmp	r2, r3
  401676:	d308      	bcc.n	40168a <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401678:	2201      	movs	r2, #1
  40167a:	4b1f      	ldr	r3, [pc, #124]	; (4016f8 <xTaskResumeAll+0xf4>)
  40167c:	601a      	str	r2, [r3, #0]
  40167e:	e004      	b.n	40168a <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401680:	4f1e      	ldr	r7, [pc, #120]	; (4016fc <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401682:	4e1f      	ldr	r6, [pc, #124]	; (401700 <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401684:	4d1f      	ldr	r5, [pc, #124]	; (401704 <xTaskResumeAll+0x100>)
  401686:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401718 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40168a:	683b      	ldr	r3, [r7, #0]
  40168c:	2b00      	cmp	r3, #0
  40168e:	d1d7      	bne.n	401640 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401690:	4b1d      	ldr	r3, [pc, #116]	; (401708 <xTaskResumeAll+0x104>)
  401692:	681b      	ldr	r3, [r3, #0]
  401694:	b17b      	cbz	r3, 4016b6 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401696:	4b1c      	ldr	r3, [pc, #112]	; (401708 <xTaskResumeAll+0x104>)
  401698:	681b      	ldr	r3, [r3, #0]
  40169a:	b163      	cbz	r3, 4016b6 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  40169c:	4e1b      	ldr	r6, [pc, #108]	; (40170c <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  40169e:	4d16      	ldr	r5, [pc, #88]	; (4016f8 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4016a0:	4c19      	ldr	r4, [pc, #100]	; (401708 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  4016a2:	47b0      	blx	r6
  4016a4:	b108      	cbz	r0, 4016aa <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  4016a6:	2301      	movs	r3, #1
  4016a8:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4016aa:	6823      	ldr	r3, [r4, #0]
  4016ac:	3b01      	subs	r3, #1
  4016ae:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4016b0:	6823      	ldr	r3, [r4, #0]
  4016b2:	2b00      	cmp	r3, #0
  4016b4:	d1f5      	bne.n	4016a2 <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  4016b6:	4b10      	ldr	r3, [pc, #64]	; (4016f8 <xTaskResumeAll+0xf4>)
  4016b8:	681b      	ldr	r3, [r3, #0]
  4016ba:	2b01      	cmp	r3, #1
  4016bc:	d10b      	bne.n	4016d6 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  4016be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4016c2:	4b13      	ldr	r3, [pc, #76]	; (401710 <xTaskResumeAll+0x10c>)
  4016c4:	601a      	str	r2, [r3, #0]
  4016c6:	f3bf 8f4f 	dsb	sy
  4016ca:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  4016ce:	2401      	movs	r4, #1
  4016d0:	e002      	b.n	4016d8 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  4016d2:	2400      	movs	r4, #0
  4016d4:	e000      	b.n	4016d8 <xTaskResumeAll+0xd4>
  4016d6:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4016d8:	4b0e      	ldr	r3, [pc, #56]	; (401714 <xTaskResumeAll+0x110>)
  4016da:	4798      	blx	r3

	return xAlreadyYielded;
}
  4016dc:	4620      	mov	r0, r4
  4016de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4016e2:	bf00      	nop
  4016e4:	2040be74 	.word	0x2040be74
  4016e8:	0040052d 	.word	0x0040052d
  4016ec:	2040be84 	.word	0x2040be84
  4016f0:	00400825 	.word	0x00400825
  4016f4:	2040be5c 	.word	0x2040be5c
  4016f8:	2040beb4 	.word	0x2040beb4
  4016fc:	2040be60 	.word	0x2040be60
  401700:	00400871 	.word	0x00400871
  401704:	2040beb0 	.word	0x2040beb0
  401708:	2040bd7c 	.word	0x2040bd7c
  40170c:	004014d1 	.word	0x004014d1
  401710:	e000ed04 	.word	0xe000ed04
  401714:	00400579 	.word	0x00400579
  401718:	2040bd80 	.word	0x2040bd80

0040171c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  40171c:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  40171e:	2800      	cmp	r0, #0
  401720:	d029      	beq.n	401776 <vTaskDelay+0x5a>
  401722:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401724:	4b18      	ldr	r3, [pc, #96]	; (401788 <vTaskDelay+0x6c>)
  401726:	681b      	ldr	r3, [r3, #0]
  401728:	b153      	cbz	r3, 401740 <vTaskDelay+0x24>
  40172a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40172e:	b672      	cpsid	i
  401730:	f383 8811 	msr	BASEPRI, r3
  401734:	f3bf 8f6f 	isb	sy
  401738:	f3bf 8f4f 	dsb	sy
  40173c:	b662      	cpsie	i
  40173e:	e7fe      	b.n	40173e <vTaskDelay+0x22>
			vTaskSuspendAll();
  401740:	4b12      	ldr	r3, [pc, #72]	; (40178c <vTaskDelay+0x70>)
  401742:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401744:	4b12      	ldr	r3, [pc, #72]	; (401790 <vTaskDelay+0x74>)
  401746:	681b      	ldr	r3, [r3, #0]
  401748:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40174a:	4b12      	ldr	r3, [pc, #72]	; (401794 <vTaskDelay+0x78>)
  40174c:	6818      	ldr	r0, [r3, #0]
  40174e:	3004      	adds	r0, #4
  401750:	4b11      	ldr	r3, [pc, #68]	; (401798 <vTaskDelay+0x7c>)
  401752:	4798      	blx	r3
  401754:	b948      	cbnz	r0, 40176a <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401756:	4b0f      	ldr	r3, [pc, #60]	; (401794 <vTaskDelay+0x78>)
  401758:	681a      	ldr	r2, [r3, #0]
  40175a:	4910      	ldr	r1, [pc, #64]	; (40179c <vTaskDelay+0x80>)
  40175c:	680b      	ldr	r3, [r1, #0]
  40175e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401760:	2201      	movs	r2, #1
  401762:	4082      	lsls	r2, r0
  401764:	ea23 0302 	bic.w	r3, r3, r2
  401768:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40176a:	4620      	mov	r0, r4
  40176c:	4b0c      	ldr	r3, [pc, #48]	; (4017a0 <vTaskDelay+0x84>)
  40176e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401770:	4b0c      	ldr	r3, [pc, #48]	; (4017a4 <vTaskDelay+0x88>)
  401772:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401774:	b938      	cbnz	r0, 401786 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40177a:	4b0b      	ldr	r3, [pc, #44]	; (4017a8 <vTaskDelay+0x8c>)
  40177c:	601a      	str	r2, [r3, #0]
  40177e:	f3bf 8f4f 	dsb	sy
  401782:	f3bf 8f6f 	isb	sy
  401786:	bd10      	pop	{r4, pc}
  401788:	2040be74 	.word	0x2040be74
  40178c:	004014b5 	.word	0x004014b5
  401790:	2040be78 	.word	0x2040be78
  401794:	2040be5c 	.word	0x2040be5c
  401798:	00400871 	.word	0x00400871
  40179c:	2040beb0 	.word	0x2040beb0
  4017a0:	004011a5 	.word	0x004011a5
  4017a4:	00401605 	.word	0x00401605
  4017a8:	e000ed04 	.word	0xe000ed04

004017ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  4017ac:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4017ae:	4d18      	ldr	r5, [pc, #96]	; (401810 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4017b0:	4f18      	ldr	r7, [pc, #96]	; (401814 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  4017b2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401834 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  4017b6:	4e18      	ldr	r6, [pc, #96]	; (401818 <prvIdleTask+0x6c>)
  4017b8:	e019      	b.n	4017ee <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  4017ba:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4017bc:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
  4017be:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  4017c0:	b1ac      	cbz	r4, 4017ee <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  4017c2:	4b16      	ldr	r3, [pc, #88]	; (40181c <prvIdleTask+0x70>)
  4017c4:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4017c6:	68fb      	ldr	r3, [r7, #12]
  4017c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4017ca:	1d20      	adds	r0, r4, #4
  4017cc:	4b14      	ldr	r3, [pc, #80]	; (401820 <prvIdleTask+0x74>)
  4017ce:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4017d0:	4a14      	ldr	r2, [pc, #80]	; (401824 <prvIdleTask+0x78>)
  4017d2:	6813      	ldr	r3, [r2, #0]
  4017d4:	3b01      	subs	r3, #1
  4017d6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4017d8:	682b      	ldr	r3, [r5, #0]
  4017da:	3b01      	subs	r3, #1
  4017dc:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  4017de:	4b12      	ldr	r3, [pc, #72]	; (401828 <prvIdleTask+0x7c>)
  4017e0:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  4017e2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4017e4:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401838 <prvIdleTask+0x8c>
  4017e8:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  4017ea:	4620      	mov	r0, r4
  4017ec:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4017ee:	682b      	ldr	r3, [r5, #0]
  4017f0:	2b00      	cmp	r3, #0
  4017f2:	d1e2      	bne.n	4017ba <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4017f4:	4b0d      	ldr	r3, [pc, #52]	; (40182c <prvIdleTask+0x80>)
  4017f6:	681b      	ldr	r3, [r3, #0]
  4017f8:	2b01      	cmp	r3, #1
  4017fa:	d9dc      	bls.n	4017b6 <prvIdleTask+0xa>
			{
				taskYIELD();
  4017fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401800:	4b0b      	ldr	r3, [pc, #44]	; (401830 <prvIdleTask+0x84>)
  401802:	601a      	str	r2, [r3, #0]
  401804:	f3bf 8f4f 	dsb	sy
  401808:	f3bf 8f6f 	isb	sy
  40180c:	e7d1      	b.n	4017b2 <prvIdleTask+0x6>
  40180e:	bf00      	nop
  401810:	2040bd60 	.word	0x2040bd60
  401814:	2040be48 	.word	0x2040be48
  401818:	00401605 	.word	0x00401605
  40181c:	0040052d 	.word	0x0040052d
  401820:	00400871 	.word	0x00400871
  401824:	2040be84 	.word	0x2040be84
  401828:	00400579 	.word	0x00400579
  40182c:	2040bd80 	.word	0x2040bd80
  401830:	e000ed04 	.word	0xe000ed04
  401834:	004014b5 	.word	0x004014b5
  401838:	004007e9 	.word	0x004007e9

0040183c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40183c:	4b20      	ldr	r3, [pc, #128]	; (4018c0 <vTaskSwitchContext+0x84>)
  40183e:	681b      	ldr	r3, [r3, #0]
  401840:	b11b      	cbz	r3, 40184a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  401842:	2201      	movs	r2, #1
  401844:	4b1f      	ldr	r3, [pc, #124]	; (4018c4 <vTaskSwitchContext+0x88>)
  401846:	601a      	str	r2, [r3, #0]
  401848:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  40184a:	2200      	movs	r2, #0
  40184c:	4b1d      	ldr	r3, [pc, #116]	; (4018c4 <vTaskSwitchContext+0x88>)
  40184e:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401850:	4b1d      	ldr	r3, [pc, #116]	; (4018c8 <vTaskSwitchContext+0x8c>)
  401852:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401854:	fab3 f383 	clz	r3, r3
  401858:	b2db      	uxtb	r3, r3
  40185a:	f1c3 031f 	rsb	r3, r3, #31
  40185e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401862:	4a1a      	ldr	r2, [pc, #104]	; (4018cc <vTaskSwitchContext+0x90>)
  401864:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401868:	b952      	cbnz	r2, 401880 <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40186a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40186e:	b672      	cpsid	i
  401870:	f383 8811 	msr	BASEPRI, r3
  401874:	f3bf 8f6f 	isb	sy
  401878:	f3bf 8f4f 	dsb	sy
  40187c:	b662      	cpsie	i
  40187e:	e7fe      	b.n	40187e <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401880:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401882:	4a12      	ldr	r2, [pc, #72]	; (4018cc <vTaskSwitchContext+0x90>)
  401884:	0099      	lsls	r1, r3, #2
  401886:	18c8      	adds	r0, r1, r3
  401888:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40188c:	6844      	ldr	r4, [r0, #4]
  40188e:	6864      	ldr	r4, [r4, #4]
  401890:	6044      	str	r4, [r0, #4]
  401892:	4602      	mov	r2, r0
  401894:	3208      	adds	r2, #8
  401896:	4294      	cmp	r4, r2
  401898:	d106      	bne.n	4018a8 <vTaskSwitchContext+0x6c>
  40189a:	6860      	ldr	r0, [r4, #4]
  40189c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4018a0:	4a0a      	ldr	r2, [pc, #40]	; (4018cc <vTaskSwitchContext+0x90>)
  4018a2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4018a6:	6050      	str	r0, [r2, #4]
  4018a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4018ac:	4a07      	ldr	r2, [pc, #28]	; (4018cc <vTaskSwitchContext+0x90>)
  4018ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4018b2:	685b      	ldr	r3, [r3, #4]
  4018b4:	68da      	ldr	r2, [r3, #12]
  4018b6:	4b06      	ldr	r3, [pc, #24]	; (4018d0 <vTaskSwitchContext+0x94>)
  4018b8:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  4018ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  4018be:	4770      	bx	lr
  4018c0:	2040be74 	.word	0x2040be74
  4018c4:	2040beb4 	.word	0x2040beb4
  4018c8:	2040beb0 	.word	0x2040beb0
  4018cc:	2040bd80 	.word	0x2040bd80
  4018d0:	2040be5c 	.word	0x2040be5c

004018d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  4018d4:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  4018d6:	b950      	cbnz	r0, 4018ee <vTaskPlaceOnEventList+0x1a>
  4018d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018dc:	b672      	cpsid	i
  4018de:	f383 8811 	msr	BASEPRI, r3
  4018e2:	f3bf 8f6f 	isb	sy
  4018e6:	f3bf 8f4f 	dsb	sy
  4018ea:	b662      	cpsie	i
  4018ec:	e7fe      	b.n	4018ec <vTaskPlaceOnEventList+0x18>
  4018ee:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4018f0:	4d11      	ldr	r5, [pc, #68]	; (401938 <vTaskPlaceOnEventList+0x64>)
  4018f2:	6829      	ldr	r1, [r5, #0]
  4018f4:	3118      	adds	r1, #24
  4018f6:	4b11      	ldr	r3, [pc, #68]	; (40193c <vTaskPlaceOnEventList+0x68>)
  4018f8:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4018fa:	6828      	ldr	r0, [r5, #0]
  4018fc:	3004      	adds	r0, #4
  4018fe:	4b10      	ldr	r3, [pc, #64]	; (401940 <vTaskPlaceOnEventList+0x6c>)
  401900:	4798      	blx	r3
  401902:	b940      	cbnz	r0, 401916 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401904:	682a      	ldr	r2, [r5, #0]
  401906:	490f      	ldr	r1, [pc, #60]	; (401944 <vTaskPlaceOnEventList+0x70>)
  401908:	680b      	ldr	r3, [r1, #0]
  40190a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40190c:	2201      	movs	r2, #1
  40190e:	4082      	lsls	r2, r0
  401910:	ea23 0302 	bic.w	r3, r3, r2
  401914:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  401916:	f1b4 3fff 	cmp.w	r4, #4294967295
  40191a:	d106      	bne.n	40192a <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40191c:	4b06      	ldr	r3, [pc, #24]	; (401938 <vTaskPlaceOnEventList+0x64>)
  40191e:	6819      	ldr	r1, [r3, #0]
  401920:	3104      	adds	r1, #4
  401922:	4809      	ldr	r0, [pc, #36]	; (401948 <vTaskPlaceOnEventList+0x74>)
  401924:	4b09      	ldr	r3, [pc, #36]	; (40194c <vTaskPlaceOnEventList+0x78>)
  401926:	4798      	blx	r3
  401928:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  40192a:	4b09      	ldr	r3, [pc, #36]	; (401950 <vTaskPlaceOnEventList+0x7c>)
  40192c:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  40192e:	4420      	add	r0, r4
  401930:	4b08      	ldr	r3, [pc, #32]	; (401954 <vTaskPlaceOnEventList+0x80>)
  401932:	4798      	blx	r3
  401934:	bd38      	pop	{r3, r4, r5, pc}
  401936:	bf00      	nop
  401938:	2040be5c 	.word	0x2040be5c
  40193c:	0040083d 	.word	0x0040083d
  401940:	00400871 	.word	0x00400871
  401944:	2040beb0 	.word	0x2040beb0
  401948:	2040be9c 	.word	0x2040be9c
  40194c:	00400825 	.word	0x00400825
  401950:	2040be78 	.word	0x2040be78
  401954:	004011a5 	.word	0x004011a5

00401958 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401958:	b950      	cbnz	r0, 401970 <vTaskPlaceOnEventListRestricted+0x18>
  40195a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40195e:	b672      	cpsid	i
  401960:	f383 8811 	msr	BASEPRI, r3
  401964:	f3bf 8f6f 	isb	sy
  401968:	f3bf 8f4f 	dsb	sy
  40196c:	b662      	cpsie	i
  40196e:	e7fe      	b.n	40196e <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401970:	b570      	push	{r4, r5, r6, lr}
  401972:	4615      	mov	r5, r2
  401974:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401976:	4e11      	ldr	r6, [pc, #68]	; (4019bc <vTaskPlaceOnEventListRestricted+0x64>)
  401978:	6831      	ldr	r1, [r6, #0]
  40197a:	3118      	adds	r1, #24
  40197c:	4b10      	ldr	r3, [pc, #64]	; (4019c0 <vTaskPlaceOnEventListRestricted+0x68>)
  40197e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401980:	6830      	ldr	r0, [r6, #0]
  401982:	3004      	adds	r0, #4
  401984:	4b0f      	ldr	r3, [pc, #60]	; (4019c4 <vTaskPlaceOnEventListRestricted+0x6c>)
  401986:	4798      	blx	r3
  401988:	b940      	cbnz	r0, 40199c <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40198a:	6832      	ldr	r2, [r6, #0]
  40198c:	490e      	ldr	r1, [pc, #56]	; (4019c8 <vTaskPlaceOnEventListRestricted+0x70>)
  40198e:	680b      	ldr	r3, [r1, #0]
  401990:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401992:	2201      	movs	r2, #1
  401994:	4082      	lsls	r2, r0
  401996:	ea23 0302 	bic.w	r3, r3, r2
  40199a:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  40199c:	2d01      	cmp	r5, #1
  40199e:	d106      	bne.n	4019ae <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4019a0:	4b06      	ldr	r3, [pc, #24]	; (4019bc <vTaskPlaceOnEventListRestricted+0x64>)
  4019a2:	6819      	ldr	r1, [r3, #0]
  4019a4:	3104      	adds	r1, #4
  4019a6:	4809      	ldr	r0, [pc, #36]	; (4019cc <vTaskPlaceOnEventListRestricted+0x74>)
  4019a8:	4b05      	ldr	r3, [pc, #20]	; (4019c0 <vTaskPlaceOnEventListRestricted+0x68>)
  4019aa:	4798      	blx	r3
  4019ac:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  4019ae:	4b08      	ldr	r3, [pc, #32]	; (4019d0 <vTaskPlaceOnEventListRestricted+0x78>)
  4019b0:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4019b2:	4420      	add	r0, r4
  4019b4:	4b07      	ldr	r3, [pc, #28]	; (4019d4 <vTaskPlaceOnEventListRestricted+0x7c>)
  4019b6:	4798      	blx	r3
  4019b8:	bd70      	pop	{r4, r5, r6, pc}
  4019ba:	bf00      	nop
  4019bc:	2040be5c 	.word	0x2040be5c
  4019c0:	00400825 	.word	0x00400825
  4019c4:	00400871 	.word	0x00400871
  4019c8:	2040beb0 	.word	0x2040beb0
  4019cc:	2040be9c 	.word	0x2040be9c
  4019d0:	2040be78 	.word	0x2040be78
  4019d4:	004011a5 	.word	0x004011a5

004019d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  4019d8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4019da:	68c3      	ldr	r3, [r0, #12]
  4019dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4019de:	b954      	cbnz	r4, 4019f6 <xTaskRemoveFromEventList+0x1e>
  4019e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019e4:	b672      	cpsid	i
  4019e6:	f383 8811 	msr	BASEPRI, r3
  4019ea:	f3bf 8f6f 	isb	sy
  4019ee:	f3bf 8f4f 	dsb	sy
  4019f2:	b662      	cpsie	i
  4019f4:	e7fe      	b.n	4019f4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4019f6:	f104 0518 	add.w	r5, r4, #24
  4019fa:	4628      	mov	r0, r5
  4019fc:	4b14      	ldr	r3, [pc, #80]	; (401a50 <xTaskRemoveFromEventList+0x78>)
  4019fe:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401a00:	4b14      	ldr	r3, [pc, #80]	; (401a54 <xTaskRemoveFromEventList+0x7c>)
  401a02:	681b      	ldr	r3, [r3, #0]
  401a04:	b99b      	cbnz	r3, 401a2e <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401a06:	1d25      	adds	r5, r4, #4
  401a08:	4628      	mov	r0, r5
  401a0a:	4b11      	ldr	r3, [pc, #68]	; (401a50 <xTaskRemoveFromEventList+0x78>)
  401a0c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401a0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401a10:	4911      	ldr	r1, [pc, #68]	; (401a58 <xTaskRemoveFromEventList+0x80>)
  401a12:	680b      	ldr	r3, [r1, #0]
  401a14:	2201      	movs	r2, #1
  401a16:	4082      	lsls	r2, r0
  401a18:	4313      	orrs	r3, r2
  401a1a:	600b      	str	r3, [r1, #0]
  401a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401a20:	4629      	mov	r1, r5
  401a22:	4b0e      	ldr	r3, [pc, #56]	; (401a5c <xTaskRemoveFromEventList+0x84>)
  401a24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401a28:	4b0d      	ldr	r3, [pc, #52]	; (401a60 <xTaskRemoveFromEventList+0x88>)
  401a2a:	4798      	blx	r3
  401a2c:	e003      	b.n	401a36 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401a2e:	4629      	mov	r1, r5
  401a30:	480c      	ldr	r0, [pc, #48]	; (401a64 <xTaskRemoveFromEventList+0x8c>)
  401a32:	4b0b      	ldr	r3, [pc, #44]	; (401a60 <xTaskRemoveFromEventList+0x88>)
  401a34:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401a36:	4b0c      	ldr	r3, [pc, #48]	; (401a68 <xTaskRemoveFromEventList+0x90>)
  401a38:	681b      	ldr	r3, [r3, #0]
  401a3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401a3e:	429a      	cmp	r2, r3
  401a40:	d903      	bls.n	401a4a <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  401a42:	2001      	movs	r0, #1
  401a44:	4b09      	ldr	r3, [pc, #36]	; (401a6c <xTaskRemoveFromEventList+0x94>)
  401a46:	6018      	str	r0, [r3, #0]
  401a48:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  401a4a:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  401a4c:	bd38      	pop	{r3, r4, r5, pc}
  401a4e:	bf00      	nop
  401a50:	00400871 	.word	0x00400871
  401a54:	2040be74 	.word	0x2040be74
  401a58:	2040beb0 	.word	0x2040beb0
  401a5c:	2040bd80 	.word	0x2040bd80
  401a60:	00400825 	.word	0x00400825
  401a64:	2040be60 	.word	0x2040be60
  401a68:	2040be5c 	.word	0x2040be5c
  401a6c:	2040beb4 	.word	0x2040beb4

00401a70 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  401a70:	b950      	cbnz	r0, 401a88 <vTaskSetTimeOutState+0x18>
  401a72:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a76:	b672      	cpsid	i
  401a78:	f383 8811 	msr	BASEPRI, r3
  401a7c:	f3bf 8f6f 	isb	sy
  401a80:	f3bf 8f4f 	dsb	sy
  401a84:	b662      	cpsie	i
  401a86:	e7fe      	b.n	401a86 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401a88:	4a03      	ldr	r2, [pc, #12]	; (401a98 <vTaskSetTimeOutState+0x28>)
  401a8a:	6812      	ldr	r2, [r2, #0]
  401a8c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401a8e:	4a03      	ldr	r2, [pc, #12]	; (401a9c <vTaskSetTimeOutState+0x2c>)
  401a90:	6812      	ldr	r2, [r2, #0]
  401a92:	6042      	str	r2, [r0, #4]
  401a94:	4770      	bx	lr
  401a96:	bf00      	nop
  401a98:	2040bd54 	.word	0x2040bd54
  401a9c:	2040be78 	.word	0x2040be78

00401aa0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  401aa0:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  401aa2:	b950      	cbnz	r0, 401aba <xTaskCheckForTimeOut+0x1a>
  401aa4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aa8:	b672      	cpsid	i
  401aaa:	f383 8811 	msr	BASEPRI, r3
  401aae:	f3bf 8f6f 	isb	sy
  401ab2:	f3bf 8f4f 	dsb	sy
  401ab6:	b662      	cpsie	i
  401ab8:	e7fe      	b.n	401ab8 <xTaskCheckForTimeOut+0x18>
  401aba:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401abc:	b951      	cbnz	r1, 401ad4 <xTaskCheckForTimeOut+0x34>
  401abe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac2:	b672      	cpsid	i
  401ac4:	f383 8811 	msr	BASEPRI, r3
  401ac8:	f3bf 8f6f 	isb	sy
  401acc:	f3bf 8f4f 	dsb	sy
  401ad0:	b662      	cpsie	i
  401ad2:	e7fe      	b.n	401ad2 <xTaskCheckForTimeOut+0x32>
  401ad4:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  401ad6:	4b12      	ldr	r3, [pc, #72]	; (401b20 <xTaskCheckForTimeOut+0x80>)
  401ad8:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  401ada:	4b12      	ldr	r3, [pc, #72]	; (401b24 <xTaskCheckForTimeOut+0x84>)
  401adc:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401ade:	682b      	ldr	r3, [r5, #0]
  401ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ae4:	d013      	beq.n	401b0e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401ae6:	4a10      	ldr	r2, [pc, #64]	; (401b28 <xTaskCheckForTimeOut+0x88>)
  401ae8:	6812      	ldr	r2, [r2, #0]
  401aea:	6820      	ldr	r0, [r4, #0]
  401aec:	4290      	cmp	r0, r2
  401aee:	d002      	beq.n	401af6 <xTaskCheckForTimeOut+0x56>
  401af0:	6862      	ldr	r2, [r4, #4]
  401af2:	4291      	cmp	r1, r2
  401af4:	d20d      	bcs.n	401b12 <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401af6:	6862      	ldr	r2, [r4, #4]
  401af8:	1a88      	subs	r0, r1, r2
  401afa:	4283      	cmp	r3, r0
  401afc:	d90b      	bls.n	401b16 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401afe:	1a52      	subs	r2, r2, r1
  401b00:	4413      	add	r3, r2
  401b02:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401b04:	4620      	mov	r0, r4
  401b06:	4b09      	ldr	r3, [pc, #36]	; (401b2c <xTaskCheckForTimeOut+0x8c>)
  401b08:	4798      	blx	r3
			xReturn = pdFALSE;
  401b0a:	2400      	movs	r4, #0
  401b0c:	e004      	b.n	401b18 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401b0e:	2400      	movs	r4, #0
  401b10:	e002      	b.n	401b18 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401b12:	2401      	movs	r4, #1
  401b14:	e000      	b.n	401b18 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401b16:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401b18:	4b05      	ldr	r3, [pc, #20]	; (401b30 <xTaskCheckForTimeOut+0x90>)
  401b1a:	4798      	blx	r3

	return xReturn;
}
  401b1c:	4620      	mov	r0, r4
  401b1e:	bd38      	pop	{r3, r4, r5, pc}
  401b20:	0040052d 	.word	0x0040052d
  401b24:	2040be78 	.word	0x2040be78
  401b28:	2040bd54 	.word	0x2040bd54
  401b2c:	00401a71 	.word	0x00401a71
  401b30:	00400579 	.word	0x00400579

00401b34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  401b34:	2201      	movs	r2, #1
  401b36:	4b01      	ldr	r3, [pc, #4]	; (401b3c <vTaskMissedYield+0x8>)
  401b38:	601a      	str	r2, [r3, #0]
  401b3a:	4770      	bx	lr
  401b3c:	2040beb4 	.word	0x2040beb4

00401b40 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401b40:	4b05      	ldr	r3, [pc, #20]	; (401b58 <xTaskGetSchedulerState+0x18>)
  401b42:	681b      	ldr	r3, [r3, #0]
  401b44:	b133      	cbz	r3, 401b54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401b46:	4b05      	ldr	r3, [pc, #20]	; (401b5c <xTaskGetSchedulerState+0x1c>)
  401b48:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401b4a:	2b00      	cmp	r3, #0
  401b4c:	bf0c      	ite	eq
  401b4e:	2002      	moveq	r0, #2
  401b50:	2000      	movne	r0, #0
  401b52:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401b54:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  401b56:	4770      	bx	lr
  401b58:	2040bd5c 	.word	0x2040bd5c
  401b5c:	2040be74 	.word	0x2040be74

00401b60 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401b60:	2800      	cmp	r0, #0
  401b62:	d045      	beq.n	401bf0 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  401b64:	b538      	push	{r3, r4, r5, lr}
  401b66:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401b68:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401b6a:	4922      	ldr	r1, [pc, #136]	; (401bf4 <vTaskPriorityInherit+0x94>)
  401b6c:	6809      	ldr	r1, [r1, #0]
  401b6e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401b70:	428a      	cmp	r2, r1
  401b72:	d23c      	bcs.n	401bee <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401b74:	6981      	ldr	r1, [r0, #24]
  401b76:	2900      	cmp	r1, #0
  401b78:	db05      	blt.n	401b86 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b7a:	491e      	ldr	r1, [pc, #120]	; (401bf4 <vTaskPriorityInherit+0x94>)
  401b7c:	6809      	ldr	r1, [r1, #0]
  401b7e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401b80:	f1c1 010a 	rsb	r1, r1, #10
  401b84:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401b86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401b8a:	491b      	ldr	r1, [pc, #108]	; (401bf8 <vTaskPriorityInherit+0x98>)
  401b8c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401b90:	6959      	ldr	r1, [r3, #20]
  401b92:	4291      	cmp	r1, r2
  401b94:	d127      	bne.n	401be6 <vTaskPriorityInherit+0x86>
  401b96:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401b98:	1d1d      	adds	r5, r3, #4
  401b9a:	4628      	mov	r0, r5
  401b9c:	4b17      	ldr	r3, [pc, #92]	; (401bfc <vTaskPriorityInherit+0x9c>)
  401b9e:	4798      	blx	r3
  401ba0:	b970      	cbnz	r0, 401bc0 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401ba2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401ba4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401ba8:	4a13      	ldr	r2, [pc, #76]	; (401bf8 <vTaskPriorityInherit+0x98>)
  401baa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401bae:	b93a      	cbnz	r2, 401bc0 <vTaskPriorityInherit+0x60>
  401bb0:	4813      	ldr	r0, [pc, #76]	; (401c00 <vTaskPriorityInherit+0xa0>)
  401bb2:	6802      	ldr	r2, [r0, #0]
  401bb4:	2101      	movs	r1, #1
  401bb6:	fa01 f303 	lsl.w	r3, r1, r3
  401bba:	ea22 0303 	bic.w	r3, r2, r3
  401bbe:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401bc0:	4b0c      	ldr	r3, [pc, #48]	; (401bf4 <vTaskPriorityInherit+0x94>)
  401bc2:	681b      	ldr	r3, [r3, #0]
  401bc4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401bc6:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401bc8:	490d      	ldr	r1, [pc, #52]	; (401c00 <vTaskPriorityInherit+0xa0>)
  401bca:	680a      	ldr	r2, [r1, #0]
  401bcc:	2301      	movs	r3, #1
  401bce:	4083      	lsls	r3, r0
  401bd0:	4313      	orrs	r3, r2
  401bd2:	600b      	str	r3, [r1, #0]
  401bd4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401bd8:	4629      	mov	r1, r5
  401bda:	4b07      	ldr	r3, [pc, #28]	; (401bf8 <vTaskPriorityInherit+0x98>)
  401bdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401be0:	4b08      	ldr	r3, [pc, #32]	; (401c04 <vTaskPriorityInherit+0xa4>)
  401be2:	4798      	blx	r3
  401be4:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401be6:	4a03      	ldr	r2, [pc, #12]	; (401bf4 <vTaskPriorityInherit+0x94>)
  401be8:	6812      	ldr	r2, [r2, #0]
  401bea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401bec:	62da      	str	r2, [r3, #44]	; 0x2c
  401bee:	bd38      	pop	{r3, r4, r5, pc}
  401bf0:	4770      	bx	lr
  401bf2:	bf00      	nop
  401bf4:	2040be5c 	.word	0x2040be5c
  401bf8:	2040bd80 	.word	0x2040bd80
  401bfc:	00400871 	.word	0x00400871
  401c00:	2040beb0 	.word	0x2040beb0
  401c04:	00400825 	.word	0x00400825

00401c08 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401c08:	2800      	cmp	r0, #0
  401c0a:	d04e      	beq.n	401caa <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  401c0c:	b538      	push	{r3, r4, r5, lr}
  401c0e:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401c10:	4a28      	ldr	r2, [pc, #160]	; (401cb4 <xTaskPriorityDisinherit+0xac>)
  401c12:	6812      	ldr	r2, [r2, #0]
  401c14:	4290      	cmp	r0, r2
  401c16:	d00a      	beq.n	401c2e <xTaskPriorityDisinherit+0x26>
  401c18:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c1c:	b672      	cpsid	i
  401c1e:	f383 8811 	msr	BASEPRI, r3
  401c22:	f3bf 8f6f 	isb	sy
  401c26:	f3bf 8f4f 	dsb	sy
  401c2a:	b662      	cpsie	i
  401c2c:	e7fe      	b.n	401c2c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401c2e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401c30:	b952      	cbnz	r2, 401c48 <xTaskPriorityDisinherit+0x40>
  401c32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c36:	b672      	cpsid	i
  401c38:	f383 8811 	msr	BASEPRI, r3
  401c3c:	f3bf 8f6f 	isb	sy
  401c40:	f3bf 8f4f 	dsb	sy
  401c44:	b662      	cpsie	i
  401c46:	e7fe      	b.n	401c46 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401c48:	3a01      	subs	r2, #1
  401c4a:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401c4c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401c4e:	6c99      	ldr	r1, [r3, #72]	; 0x48
  401c50:	4288      	cmp	r0, r1
  401c52:	d02c      	beq.n	401cae <xTaskPriorityDisinherit+0xa6>
  401c54:	bb5a      	cbnz	r2, 401cae <xTaskPriorityDisinherit+0xa6>
  401c56:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401c58:	1d1d      	adds	r5, r3, #4
  401c5a:	4628      	mov	r0, r5
  401c5c:	4b16      	ldr	r3, [pc, #88]	; (401cb8 <xTaskPriorityDisinherit+0xb0>)
  401c5e:	4798      	blx	r3
  401c60:	b968      	cbnz	r0, 401c7e <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401c62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401c64:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401c68:	4b14      	ldr	r3, [pc, #80]	; (401cbc <xTaskPriorityDisinherit+0xb4>)
  401c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401c6e:	b933      	cbnz	r3, 401c7e <xTaskPriorityDisinherit+0x76>
  401c70:	4813      	ldr	r0, [pc, #76]	; (401cc0 <xTaskPriorityDisinherit+0xb8>)
  401c72:	6803      	ldr	r3, [r0, #0]
  401c74:	2201      	movs	r2, #1
  401c76:	408a      	lsls	r2, r1
  401c78:	ea23 0302 	bic.w	r3, r3, r2
  401c7c:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401c7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401c80:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c82:	f1c0 030a 	rsb	r3, r0, #10
  401c86:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401c88:	4a0d      	ldr	r2, [pc, #52]	; (401cc0 <xTaskPriorityDisinherit+0xb8>)
  401c8a:	6813      	ldr	r3, [r2, #0]
  401c8c:	2401      	movs	r4, #1
  401c8e:	fa04 f100 	lsl.w	r1, r4, r0
  401c92:	430b      	orrs	r3, r1
  401c94:	6013      	str	r3, [r2, #0]
  401c96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c9a:	4629      	mov	r1, r5
  401c9c:	4b07      	ldr	r3, [pc, #28]	; (401cbc <xTaskPriorityDisinherit+0xb4>)
  401c9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ca2:	4b08      	ldr	r3, [pc, #32]	; (401cc4 <xTaskPriorityDisinherit+0xbc>)
  401ca4:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401ca6:	4620      	mov	r0, r4
  401ca8:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401caa:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401cac:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401cae:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401cb0:	bd38      	pop	{r3, r4, r5, pc}
  401cb2:	bf00      	nop
  401cb4:	2040be5c 	.word	0x2040be5c
  401cb8:	00400871 	.word	0x00400871
  401cbc:	2040bd80 	.word	0x2040bd80
  401cc0:	2040beb0 	.word	0x2040beb0
  401cc4:	00400825 	.word	0x00400825

00401cc8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401cc8:	4b05      	ldr	r3, [pc, #20]	; (401ce0 <pvTaskIncrementMutexHeldCount+0x18>)
  401cca:	681b      	ldr	r3, [r3, #0]
  401ccc:	b123      	cbz	r3, 401cd8 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401cce:	4b04      	ldr	r3, [pc, #16]	; (401ce0 <pvTaskIncrementMutexHeldCount+0x18>)
  401cd0:	681a      	ldr	r2, [r3, #0]
  401cd2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401cd4:	3301      	adds	r3, #1
  401cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401cd8:	4b01      	ldr	r3, [pc, #4]	; (401ce0 <pvTaskIncrementMutexHeldCount+0x18>)
  401cda:	6818      	ldr	r0, [r3, #0]
	}
  401cdc:	4770      	bx	lr
  401cde:	bf00      	nop
  401ce0:	2040be5c 	.word	0x2040be5c

00401ce4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401ce4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401ce6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401ce8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401cea:	4291      	cmp	r1, r2
  401cec:	d80a      	bhi.n	401d04 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401cee:	1ad2      	subs	r2, r2, r3
  401cf0:	6983      	ldr	r3, [r0, #24]
  401cf2:	429a      	cmp	r2, r3
  401cf4:	d211      	bcs.n	401d1a <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401cf6:	1d01      	adds	r1, r0, #4
  401cf8:	4b0a      	ldr	r3, [pc, #40]	; (401d24 <prvInsertTimerInActiveList+0x40>)
  401cfa:	6818      	ldr	r0, [r3, #0]
  401cfc:	4b0a      	ldr	r3, [pc, #40]	; (401d28 <prvInsertTimerInActiveList+0x44>)
  401cfe:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401d00:	2000      	movs	r0, #0
  401d02:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401d04:	429a      	cmp	r2, r3
  401d06:	d201      	bcs.n	401d0c <prvInsertTimerInActiveList+0x28>
  401d08:	4299      	cmp	r1, r3
  401d0a:	d208      	bcs.n	401d1e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401d0c:	1d01      	adds	r1, r0, #4
  401d0e:	4b07      	ldr	r3, [pc, #28]	; (401d2c <prvInsertTimerInActiveList+0x48>)
  401d10:	6818      	ldr	r0, [r3, #0]
  401d12:	4b05      	ldr	r3, [pc, #20]	; (401d28 <prvInsertTimerInActiveList+0x44>)
  401d14:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401d16:	2000      	movs	r0, #0
  401d18:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401d1a:	2001      	movs	r0, #1
  401d1c:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401d1e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401d20:	bd08      	pop	{r3, pc}
  401d22:	bf00      	nop
  401d24:	2040beec 	.word	0x2040beec
  401d28:	0040083d 	.word	0x0040083d
  401d2c:	2040beb8 	.word	0x2040beb8

00401d30 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401d30:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401d32:	4b14      	ldr	r3, [pc, #80]	; (401d84 <prvCheckForValidListAndQueue+0x54>)
  401d34:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401d36:	4b14      	ldr	r3, [pc, #80]	; (401d88 <prvCheckForValidListAndQueue+0x58>)
  401d38:	681b      	ldr	r3, [r3, #0]
  401d3a:	bb03      	cbnz	r3, 401d7e <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  401d3c:	4d13      	ldr	r5, [pc, #76]	; (401d8c <prvCheckForValidListAndQueue+0x5c>)
  401d3e:	4628      	mov	r0, r5
  401d40:	4e13      	ldr	r6, [pc, #76]	; (401d90 <prvCheckForValidListAndQueue+0x60>)
  401d42:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401d44:	4c13      	ldr	r4, [pc, #76]	; (401d94 <prvCheckForValidListAndQueue+0x64>)
  401d46:	4620      	mov	r0, r4
  401d48:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401d4a:	4b13      	ldr	r3, [pc, #76]	; (401d98 <prvCheckForValidListAndQueue+0x68>)
  401d4c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401d4e:	4b13      	ldr	r3, [pc, #76]	; (401d9c <prvCheckForValidListAndQueue+0x6c>)
  401d50:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401d52:	2200      	movs	r2, #0
  401d54:	2110      	movs	r1, #16
  401d56:	2005      	movs	r0, #5
  401d58:	4b11      	ldr	r3, [pc, #68]	; (401da0 <prvCheckForValidListAndQueue+0x70>)
  401d5a:	4798      	blx	r3
  401d5c:	4b0a      	ldr	r3, [pc, #40]	; (401d88 <prvCheckForValidListAndQueue+0x58>)
  401d5e:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401d60:	b950      	cbnz	r0, 401d78 <prvCheckForValidListAndQueue+0x48>
  401d62:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d66:	b672      	cpsid	i
  401d68:	f383 8811 	msr	BASEPRI, r3
  401d6c:	f3bf 8f6f 	isb	sy
  401d70:	f3bf 8f4f 	dsb	sy
  401d74:	b662      	cpsie	i
  401d76:	e7fe      	b.n	401d76 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401d78:	490a      	ldr	r1, [pc, #40]	; (401da4 <prvCheckForValidListAndQueue+0x74>)
  401d7a:	4b0b      	ldr	r3, [pc, #44]	; (401da8 <prvCheckForValidListAndQueue+0x78>)
  401d7c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401d7e:	4b0b      	ldr	r3, [pc, #44]	; (401dac <prvCheckForValidListAndQueue+0x7c>)
  401d80:	4798      	blx	r3
  401d82:	bd70      	pop	{r4, r5, r6, pc}
  401d84:	0040052d 	.word	0x0040052d
  401d88:	2040bee8 	.word	0x2040bee8
  401d8c:	2040bebc 	.word	0x2040bebc
  401d90:	00400805 	.word	0x00400805
  401d94:	2040bed0 	.word	0x2040bed0
  401d98:	2040beb8 	.word	0x2040beb8
  401d9c:	2040beec 	.word	0x2040beec
  401da0:	00400af9 	.word	0x00400af9
  401da4:	00403220 	.word	0x00403220
  401da8:	004010f5 	.word	0x004010f5
  401dac:	00400579 	.word	0x00400579

00401db0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  401db0:	b510      	push	{r4, lr}
  401db2:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401db4:	4b0f      	ldr	r3, [pc, #60]	; (401df4 <xTimerCreateTimerTask+0x44>)
  401db6:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401db8:	4b0f      	ldr	r3, [pc, #60]	; (401df8 <xTimerCreateTimerTask+0x48>)
  401dba:	681b      	ldr	r3, [r3, #0]
  401dbc:	b163      	cbz	r3, 401dd8 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401dbe:	2300      	movs	r3, #0
  401dc0:	9303      	str	r3, [sp, #12]
  401dc2:	9302      	str	r3, [sp, #8]
  401dc4:	9301      	str	r3, [sp, #4]
  401dc6:	2209      	movs	r2, #9
  401dc8:	9200      	str	r2, [sp, #0]
  401dca:	f44f 7282 	mov.w	r2, #260	; 0x104
  401dce:	490b      	ldr	r1, [pc, #44]	; (401dfc <xTimerCreateTimerTask+0x4c>)
  401dd0:	480b      	ldr	r0, [pc, #44]	; (401e00 <xTimerCreateTimerTask+0x50>)
  401dd2:	4c0c      	ldr	r4, [pc, #48]	; (401e04 <xTimerCreateTimerTask+0x54>)
  401dd4:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  401dd6:	b950      	cbnz	r0, 401dee <xTimerCreateTimerTask+0x3e>
  401dd8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ddc:	b672      	cpsid	i
  401dde:	f383 8811 	msr	BASEPRI, r3
  401de2:	f3bf 8f6f 	isb	sy
  401de6:	f3bf 8f4f 	dsb	sy
  401dea:	b662      	cpsie	i
  401dec:	e7fe      	b.n	401dec <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  401dee:	b004      	add	sp, #16
  401df0:	bd10      	pop	{r4, pc}
  401df2:	bf00      	nop
  401df4:	00401d31 	.word	0x00401d31
  401df8:	2040bee8 	.word	0x2040bee8
  401dfc:	00403228 	.word	0x00403228
  401e00:	00401f35 	.word	0x00401f35
  401e04:	004011fd 	.word	0x004011fd

00401e08 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  401e08:	b950      	cbnz	r0, 401e20 <xTimerGenericCommand+0x18>
  401e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e0e:	b672      	cpsid	i
  401e10:	f383 8811 	msr	BASEPRI, r3
  401e14:	f3bf 8f6f 	isb	sy
  401e18:	f3bf 8f4f 	dsb	sy
  401e1c:	b662      	cpsie	i
  401e1e:	e7fe      	b.n	401e1e <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  401e20:	b530      	push	{r4, r5, lr}
  401e22:	b085      	sub	sp, #20
  401e24:	4615      	mov	r5, r2
  401e26:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401e28:	4a0f      	ldr	r2, [pc, #60]	; (401e68 <xTimerGenericCommand+0x60>)
  401e2a:	6810      	ldr	r0, [r2, #0]
  401e2c:	b1c0      	cbz	r0, 401e60 <xTimerGenericCommand+0x58>
  401e2e:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401e30:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401e32:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401e34:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401e36:	2905      	cmp	r1, #5
  401e38:	dc0d      	bgt.n	401e56 <xTimerGenericCommand+0x4e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401e3a:	4b0c      	ldr	r3, [pc, #48]	; (401e6c <xTimerGenericCommand+0x64>)
  401e3c:	4798      	blx	r3
  401e3e:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401e40:	f04f 0300 	mov.w	r3, #0
  401e44:	bf0c      	ite	eq
  401e46:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401e48:	461a      	movne	r2, r3
  401e4a:	4669      	mov	r1, sp
  401e4c:	4806      	ldr	r0, [pc, #24]	; (401e68 <xTimerGenericCommand+0x60>)
  401e4e:	6800      	ldr	r0, [r0, #0]
  401e50:	4c07      	ldr	r4, [pc, #28]	; (401e70 <xTimerGenericCommand+0x68>)
  401e52:	47a0      	blx	r4
  401e54:	e005      	b.n	401e62 <xTimerGenericCommand+0x5a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401e56:	2300      	movs	r3, #0
  401e58:	4669      	mov	r1, sp
  401e5a:	4c06      	ldr	r4, [pc, #24]	; (401e74 <xTimerGenericCommand+0x6c>)
  401e5c:	47a0      	blx	r4
  401e5e:	e000      	b.n	401e62 <xTimerGenericCommand+0x5a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  401e60:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  401e62:	b005      	add	sp, #20
  401e64:	bd30      	pop	{r4, r5, pc}
  401e66:	bf00      	nop
  401e68:	2040bee8 	.word	0x2040bee8
  401e6c:	00401b41 	.word	0x00401b41
  401e70:	00400b7d 	.word	0x00400b7d
  401e74:	00400d59 	.word	0x00400d59

00401e78 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  401e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401e7c:	b082      	sub	sp, #8
  401e7e:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  401e80:	4b25      	ldr	r3, [pc, #148]	; (401f18 <prvSampleTimeNow+0xa0>)
  401e82:	4798      	blx	r3
  401e84:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  401e86:	4b25      	ldr	r3, [pc, #148]	; (401f1c <prvSampleTimeNow+0xa4>)
  401e88:	681b      	ldr	r3, [r3, #0]
  401e8a:	4298      	cmp	r0, r3
  401e8c:	d23b      	bcs.n	401f06 <prvSampleTimeNow+0x8e>
  401e8e:	e02b      	b.n	401ee8 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401e90:	68db      	ldr	r3, [r3, #12]
  401e92:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401e96:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401e98:	f104 0904 	add.w	r9, r4, #4
  401e9c:	4648      	mov	r0, r9
  401e9e:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401ea2:	4620      	mov	r0, r4
  401ea4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401ea6:	69e3      	ldr	r3, [r4, #28]
  401ea8:	2b01      	cmp	r3, #1
  401eaa:	d11f      	bne.n	401eec <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401eac:	69a3      	ldr	r3, [r4, #24]
  401eae:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401eb0:	459a      	cmp	sl, r3
  401eb2:	d206      	bcs.n	401ec2 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401eb4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401eb6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401eb8:	4649      	mov	r1, r9
  401eba:	6828      	ldr	r0, [r5, #0]
  401ebc:	4b18      	ldr	r3, [pc, #96]	; (401f20 <prvSampleTimeNow+0xa8>)
  401ebe:	4798      	blx	r3
  401ec0:	e014      	b.n	401eec <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401ec2:	2100      	movs	r1, #0
  401ec4:	9100      	str	r1, [sp, #0]
  401ec6:	460b      	mov	r3, r1
  401ec8:	4652      	mov	r2, sl
  401eca:	4620      	mov	r0, r4
  401ecc:	4c15      	ldr	r4, [pc, #84]	; (401f24 <prvSampleTimeNow+0xac>)
  401ece:	47a0      	blx	r4
				configASSERT( xResult );
  401ed0:	b960      	cbnz	r0, 401eec <prvSampleTimeNow+0x74>
  401ed2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ed6:	b672      	cpsid	i
  401ed8:	f383 8811 	msr	BASEPRI, r3
  401edc:	f3bf 8f6f 	isb	sy
  401ee0:	f3bf 8f4f 	dsb	sy
  401ee4:	b662      	cpsie	i
  401ee6:	e7fe      	b.n	401ee6 <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401ee8:	4d0f      	ldr	r5, [pc, #60]	; (401f28 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401eea:	4e10      	ldr	r6, [pc, #64]	; (401f2c <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401eec:	682b      	ldr	r3, [r5, #0]
  401eee:	681a      	ldr	r2, [r3, #0]
  401ef0:	2a00      	cmp	r2, #0
  401ef2:	d1cd      	bne.n	401e90 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  401ef4:	4a0e      	ldr	r2, [pc, #56]	; (401f30 <prvSampleTimeNow+0xb8>)
  401ef6:	6810      	ldr	r0, [r2, #0]
  401ef8:	490b      	ldr	r1, [pc, #44]	; (401f28 <prvSampleTimeNow+0xb0>)
  401efa:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401efc:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  401efe:	2301      	movs	r3, #1
  401f00:	f8c8 3000 	str.w	r3, [r8]
  401f04:	e002      	b.n	401f0c <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  401f06:	2300      	movs	r3, #0
  401f08:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  401f0c:	4b03      	ldr	r3, [pc, #12]	; (401f1c <prvSampleTimeNow+0xa4>)
  401f0e:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  401f10:	4638      	mov	r0, r7
  401f12:	b002      	add	sp, #8
  401f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f18:	004014c5 	.word	0x004014c5
  401f1c:	2040bee4 	.word	0x2040bee4
  401f20:	0040083d 	.word	0x0040083d
  401f24:	00401e09 	.word	0x00401e09
  401f28:	2040beb8 	.word	0x2040beb8
  401f2c:	00400871 	.word	0x00400871
  401f30:	2040beec 	.word	0x2040beec

00401f34 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401f38:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401f3a:	4c68      	ldr	r4, [pc, #416]	; (4020dc <prvTimerTask+0x1a8>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  401f3c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 40210c <prvTimerTask+0x1d8>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401f40:	4d67      	ldr	r5, [pc, #412]	; (4020e0 <prvTimerTask+0x1ac>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401f42:	4b68      	ldr	r3, [pc, #416]	; (4020e4 <prvTimerTask+0x1b0>)
  401f44:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401f46:	681a      	ldr	r2, [r3, #0]
  401f48:	2a00      	cmp	r2, #0
  401f4a:	f000 80b5 	beq.w	4020b8 <prvTimerTask+0x184>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f4e:	68db      	ldr	r3, [r3, #12]
  401f50:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  401f52:	4b65      	ldr	r3, [pc, #404]	; (4020e8 <prvTimerTask+0x1b4>)
  401f54:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401f56:	a804      	add	r0, sp, #16
  401f58:	4b64      	ldr	r3, [pc, #400]	; (4020ec <prvTimerTask+0x1b8>)
  401f5a:	4798      	blx	r3
  401f5c:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401f5e:	9b04      	ldr	r3, [sp, #16]
  401f60:	2b00      	cmp	r3, #0
  401f62:	d144      	bne.n	401fee <prvTimerTask+0xba>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401f64:	42b0      	cmp	r0, r6
  401f66:	d330      	bcc.n	401fca <prvTimerTask+0x96>
			{
				( void ) xTaskResumeAll();
  401f68:	4b61      	ldr	r3, [pc, #388]	; (4020f0 <prvTimerTask+0x1bc>)
  401f6a:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f6c:	4b5d      	ldr	r3, [pc, #372]	; (4020e4 <prvTimerTask+0x1b0>)
  401f6e:	681b      	ldr	r3, [r3, #0]
  401f70:	68db      	ldr	r3, [r3, #12]
  401f72:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f76:	f109 0004 	add.w	r0, r9, #4
  401f7a:	4b5e      	ldr	r3, [pc, #376]	; (4020f4 <prvTimerTask+0x1c0>)
  401f7c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401f7e:	f8d9 301c 	ldr.w	r3, [r9, #28]
  401f82:	2b01      	cmp	r3, #1
  401f84:	d11c      	bne.n	401fc0 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401f86:	f8d9 1018 	ldr.w	r1, [r9, #24]
  401f8a:	4633      	mov	r3, r6
  401f8c:	463a      	mov	r2, r7
  401f8e:	4431      	add	r1, r6
  401f90:	4648      	mov	r0, r9
  401f92:	4f59      	ldr	r7, [pc, #356]	; (4020f8 <prvTimerTask+0x1c4>)
  401f94:	47b8      	blx	r7
  401f96:	2801      	cmp	r0, #1
  401f98:	d112      	bne.n	401fc0 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401f9a:	2100      	movs	r1, #0
  401f9c:	9100      	str	r1, [sp, #0]
  401f9e:	460b      	mov	r3, r1
  401fa0:	4632      	mov	r2, r6
  401fa2:	4648      	mov	r0, r9
  401fa4:	4e55      	ldr	r6, [pc, #340]	; (4020fc <prvTimerTask+0x1c8>)
  401fa6:	47b0      	blx	r6
			configASSERT( xResult );
  401fa8:	b950      	cbnz	r0, 401fc0 <prvTimerTask+0x8c>
  401faa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fae:	b672      	cpsid	i
  401fb0:	f383 8811 	msr	BASEPRI, r3
  401fb4:	f3bf 8f6f 	isb	sy
  401fb8:	f3bf 8f4f 	dsb	sy
  401fbc:	b662      	cpsie	i
  401fbe:	e7fe      	b.n	401fbe <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401fc0:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  401fc4:	4648      	mov	r0, r9
  401fc6:	4798      	blx	r3
  401fc8:	e06d      	b.n	4020a6 <prvTimerTask+0x172>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401fca:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401fcc:	1bf1      	subs	r1, r6, r7
  401fce:	6820      	ldr	r0, [r4, #0]
  401fd0:	4b4b      	ldr	r3, [pc, #300]	; (402100 <prvTimerTask+0x1cc>)
  401fd2:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  401fd4:	4b46      	ldr	r3, [pc, #280]	; (4020f0 <prvTimerTask+0x1bc>)
  401fd6:	4798      	blx	r3
  401fd8:	2800      	cmp	r0, #0
  401fda:	d164      	bne.n	4020a6 <prvTimerTask+0x172>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  401fdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401fe0:	f8c8 3000 	str.w	r3, [r8]
  401fe4:	f3bf 8f4f 	dsb	sy
  401fe8:	f3bf 8f6f 	isb	sy
  401fec:	e05b      	b.n	4020a6 <prvTimerTask+0x172>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  401fee:	4b40      	ldr	r3, [pc, #256]	; (4020f0 <prvTimerTask+0x1bc>)
  401ff0:	4798      	blx	r3
  401ff2:	e058      	b.n	4020a6 <prvTimerTask+0x172>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401ff4:	9b04      	ldr	r3, [sp, #16]
  401ff6:	2b00      	cmp	r3, #0
  401ff8:	da06      	bge.n	402008 <prvTimerTask+0xd4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401ffa:	9907      	ldr	r1, [sp, #28]
  401ffc:	9806      	ldr	r0, [sp, #24]
  401ffe:	9b05      	ldr	r3, [sp, #20]
  402000:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402002:	9b04      	ldr	r3, [sp, #16]
  402004:	2b00      	cmp	r3, #0
  402006:	db4f      	blt.n	4020a8 <prvTimerTask+0x174>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402008:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40200a:	6973      	ldr	r3, [r6, #20]
  40200c:	b10b      	cbz	r3, 402012 <prvTimerTask+0xde>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40200e:	1d30      	adds	r0, r6, #4
  402010:	47b8      	blx	r7
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402012:	a803      	add	r0, sp, #12
  402014:	4b35      	ldr	r3, [pc, #212]	; (4020ec <prvTimerTask+0x1b8>)
  402016:	4798      	blx	r3

			switch( xMessage.xMessageID )
  402018:	9b04      	ldr	r3, [sp, #16]
  40201a:	2b09      	cmp	r3, #9
  40201c:	d844      	bhi.n	4020a8 <prvTimerTask+0x174>
  40201e:	e8df f003 	tbb	[pc, r3]
  402022:	0505      	.short	0x0505
  402024:	3f2a4305 	.word	0x3f2a4305
  402028:	2a430505 	.word	0x2a430505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  40202c:	9f05      	ldr	r7, [sp, #20]
  40202e:	69b1      	ldr	r1, [r6, #24]
  402030:	463b      	mov	r3, r7
  402032:	4602      	mov	r2, r0
  402034:	4439      	add	r1, r7
  402036:	4630      	mov	r0, r6
  402038:	4f2f      	ldr	r7, [pc, #188]	; (4020f8 <prvTimerTask+0x1c4>)
  40203a:	47b8      	blx	r7
  40203c:	2801      	cmp	r0, #1
  40203e:	d132      	bne.n	4020a6 <prvTimerTask+0x172>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402040:	6a73      	ldr	r3, [r6, #36]	; 0x24
  402042:	4630      	mov	r0, r6
  402044:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402046:	69f3      	ldr	r3, [r6, #28]
  402048:	2b01      	cmp	r3, #1
  40204a:	d12c      	bne.n	4020a6 <prvTimerTask+0x172>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40204c:	69b2      	ldr	r2, [r6, #24]
  40204e:	2100      	movs	r1, #0
  402050:	9100      	str	r1, [sp, #0]
  402052:	460b      	mov	r3, r1
  402054:	9805      	ldr	r0, [sp, #20]
  402056:	4402      	add	r2, r0
  402058:	4630      	mov	r0, r6
  40205a:	4e28      	ldr	r6, [pc, #160]	; (4020fc <prvTimerTask+0x1c8>)
  40205c:	47b0      	blx	r6
							configASSERT( xResult );
  40205e:	bb10      	cbnz	r0, 4020a6 <prvTimerTask+0x172>
  402060:	f04f 0380 	mov.w	r3, #128	; 0x80
  402064:	b672      	cpsid	i
  402066:	f383 8811 	msr	BASEPRI, r3
  40206a:	f3bf 8f6f 	isb	sy
  40206e:	f3bf 8f4f 	dsb	sy
  402072:	b662      	cpsie	i
  402074:	e7fe      	b.n	402074 <prvTimerTask+0x140>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402076:	9905      	ldr	r1, [sp, #20]
  402078:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40207a:	b951      	cbnz	r1, 402092 <prvTimerTask+0x15e>
  40207c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402080:	b672      	cpsid	i
  402082:	f383 8811 	msr	BASEPRI, r3
  402086:	f3bf 8f6f 	isb	sy
  40208a:	f3bf 8f4f 	dsb	sy
  40208e:	b662      	cpsie	i
  402090:	e7fe      	b.n	402090 <prvTimerTask+0x15c>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402092:	4603      	mov	r3, r0
  402094:	4602      	mov	r2, r0
  402096:	4401      	add	r1, r0
  402098:	4630      	mov	r0, r6
  40209a:	4e17      	ldr	r6, [pc, #92]	; (4020f8 <prvTimerTask+0x1c4>)
  40209c:	47b0      	blx	r6
  40209e:	e002      	b.n	4020a6 <prvTimerTask+0x172>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  4020a0:	4630      	mov	r0, r6
  4020a2:	4b18      	ldr	r3, [pc, #96]	; (402104 <prvTimerTask+0x1d0>)
  4020a4:	4798      	blx	r3
			pxTimer = xMessage.u.xTimerParameters.pxTimer;

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4020a6:	4f13      	ldr	r7, [pc, #76]	; (4020f4 <prvTimerTask+0x1c0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4020a8:	2300      	movs	r3, #0
  4020aa:	461a      	mov	r2, r3
  4020ac:	a904      	add	r1, sp, #16
  4020ae:	6820      	ldr	r0, [r4, #0]
  4020b0:	47a8      	blx	r5
  4020b2:	2800      	cmp	r0, #0
  4020b4:	d19e      	bne.n	401ff4 <prvTimerTask+0xc0>
  4020b6:	e744      	b.n	401f42 <prvTimerTask+0xe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  4020b8:	4b0b      	ldr	r3, [pc, #44]	; (4020e8 <prvTimerTask+0x1b4>)
  4020ba:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4020bc:	a804      	add	r0, sp, #16
  4020be:	4b0b      	ldr	r3, [pc, #44]	; (4020ec <prvTimerTask+0x1b8>)
  4020c0:	4798      	blx	r3
  4020c2:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4020c4:	9b04      	ldr	r3, [sp, #16]
  4020c6:	2b00      	cmp	r3, #0
  4020c8:	d191      	bne.n	401fee <prvTimerTask+0xba>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4020ca:	4b0f      	ldr	r3, [pc, #60]	; (402108 <prvTimerTask+0x1d4>)
  4020cc:	681b      	ldr	r3, [r3, #0]
  4020ce:	681a      	ldr	r2, [r3, #0]
  4020d0:	fab2 f282 	clz	r2, r2
  4020d4:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  4020d6:	2600      	movs	r6, #0
  4020d8:	e778      	b.n	401fcc <prvTimerTask+0x98>
  4020da:	bf00      	nop
  4020dc:	2040bee8 	.word	0x2040bee8
  4020e0:	00400f31 	.word	0x00400f31
  4020e4:	2040beb8 	.word	0x2040beb8
  4020e8:	004014b5 	.word	0x004014b5
  4020ec:	00401e79 	.word	0x00401e79
  4020f0:	00401605 	.word	0x00401605
  4020f4:	00400871 	.word	0x00400871
  4020f8:	00401ce5 	.word	0x00401ce5
  4020fc:	00401e09 	.word	0x00401e09
  402100:	00401129 	.word	0x00401129
  402104:	004007e9 	.word	0x004007e9
  402108:	2040beec 	.word	0x2040beec
  40210c:	e000ed04 	.word	0xe000ed04

00402110 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  402110:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  402112:	4810      	ldr	r0, [pc, #64]	; (402154 <sysclk_init+0x44>)
  402114:	4b10      	ldr	r3, [pc, #64]	; (402158 <sysclk_init+0x48>)
  402116:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402118:	213e      	movs	r1, #62	; 0x3e
  40211a:	2000      	movs	r0, #0
  40211c:	4b0f      	ldr	r3, [pc, #60]	; (40215c <sysclk_init+0x4c>)
  40211e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  402120:	4c0f      	ldr	r4, [pc, #60]	; (402160 <sysclk_init+0x50>)
  402122:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402124:	2800      	cmp	r0, #0
  402126:	d0fc      	beq.n	402122 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402128:	4b0e      	ldr	r3, [pc, #56]	; (402164 <sysclk_init+0x54>)
  40212a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40212c:	4a0e      	ldr	r2, [pc, #56]	; (402168 <sysclk_init+0x58>)
  40212e:	4b0f      	ldr	r3, [pc, #60]	; (40216c <sysclk_init+0x5c>)
  402130:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  402132:	4c0f      	ldr	r4, [pc, #60]	; (402170 <sysclk_init+0x60>)
  402134:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402136:	2800      	cmp	r0, #0
  402138:	d0fc      	beq.n	402134 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40213a:	2002      	movs	r0, #2
  40213c:	4b0d      	ldr	r3, [pc, #52]	; (402174 <sysclk_init+0x64>)
  40213e:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402140:	2000      	movs	r0, #0
  402142:	4b0d      	ldr	r3, [pc, #52]	; (402178 <sysclk_init+0x68>)
  402144:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402146:	4b0d      	ldr	r3, [pc, #52]	; (40217c <sysclk_init+0x6c>)
  402148:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40214a:	4802      	ldr	r0, [pc, #8]	; (402154 <sysclk_init+0x44>)
  40214c:	4b02      	ldr	r3, [pc, #8]	; (402158 <sysclk_init+0x48>)
  40214e:	4798      	blx	r3
  402150:	bd10      	pop	{r4, pc}
  402152:	bf00      	nop
  402154:	11e1a300 	.word	0x11e1a300
  402158:	00402931 	.word	0x00402931
  40215c:	00402429 	.word	0x00402429
  402160:	0040247d 	.word	0x0040247d
  402164:	0040248d 	.word	0x0040248d
  402168:	20183f01 	.word	0x20183f01
  40216c:	400e0600 	.word	0x400e0600
  402170:	0040249d 	.word	0x0040249d
  402174:	00402385 	.word	0x00402385
  402178:	004023c1 	.word	0x004023c1
  40217c:	00402821 	.word	0x00402821

00402180 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  402180:	b570      	push	{r4, r5, r6, lr}
  402182:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  402184:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  402186:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  402188:	4013      	ands	r3, r2
  40218a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  40218c:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40218e:	4e1a      	ldr	r6, [pc, #104]	; (4021f8 <afec_process_callback+0x78>)
  402190:	4d1a      	ldr	r5, [pc, #104]	; (4021fc <afec_process_callback+0x7c>)
  402192:	42a8      	cmp	r0, r5
  402194:	bf14      	ite	ne
  402196:	2000      	movne	r0, #0
  402198:	2001      	moveq	r0, #1
  40219a:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40219c:	2c0b      	cmp	r4, #11
  40219e:	d80a      	bhi.n	4021b6 <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  4021a0:	9a01      	ldr	r2, [sp, #4]
  4021a2:	2301      	movs	r3, #1
  4021a4:	40a3      	lsls	r3, r4
  4021a6:	4213      	tst	r3, r2
  4021a8:	d020      	beq.n	4021ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4021aa:	192b      	adds	r3, r5, r4
  4021ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4021b0:	b1e3      	cbz	r3, 4021ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4021b2:	4798      	blx	r3
  4021b4:	e01a      	b.n	4021ec <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4021b6:	2c0e      	cmp	r4, #14
  4021b8:	d80c      	bhi.n	4021d4 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4021ba:	9a01      	ldr	r2, [sp, #4]
  4021bc:	f104 010c 	add.w	r1, r4, #12
  4021c0:	2301      	movs	r3, #1
  4021c2:	408b      	lsls	r3, r1
  4021c4:	4213      	tst	r3, r2
  4021c6:	d011      	beq.n	4021ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4021c8:	192b      	adds	r3, r5, r4
  4021ca:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4021ce:	b16b      	cbz	r3, 4021ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4021d0:	4798      	blx	r3
  4021d2:	e00b      	b.n	4021ec <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4021d4:	9a01      	ldr	r2, [sp, #4]
  4021d6:	f104 010f 	add.w	r1, r4, #15
  4021da:	2301      	movs	r3, #1
  4021dc:	408b      	lsls	r3, r1
  4021de:	4213      	tst	r3, r2
  4021e0:	d004      	beq.n	4021ec <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4021e2:	192b      	adds	r3, r5, r4
  4021e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4021e8:	b103      	cbz	r3, 4021ec <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4021ea:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4021ec:	3401      	adds	r4, #1
  4021ee:	2c10      	cmp	r4, #16
  4021f0:	d1d4      	bne.n	40219c <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4021f2:	b002      	add	sp, #8
  4021f4:	bd70      	pop	{r4, r5, r6, pc}
  4021f6:	bf00      	nop
  4021f8:	2040bf34 	.word	0x2040bf34
  4021fc:	40064000 	.word	0x40064000

00402200 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  402200:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  402202:	4802      	ldr	r0, [pc, #8]	; (40220c <AFEC0_Handler+0xc>)
  402204:	4b02      	ldr	r3, [pc, #8]	; (402210 <AFEC0_Handler+0x10>)
  402206:	4798      	blx	r3
  402208:	bd08      	pop	{r3, pc}
  40220a:	bf00      	nop
  40220c:	4003c000 	.word	0x4003c000
  402210:	00402181 	.word	0x00402181

00402214 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  402214:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  402216:	4802      	ldr	r0, [pc, #8]	; (402220 <AFEC1_Handler+0xc>)
  402218:	4b02      	ldr	r3, [pc, #8]	; (402224 <AFEC1_Handler+0x10>)
  40221a:	4798      	blx	r3
  40221c:	bd08      	pop	{r3, pc}
  40221e:	bf00      	nop
  402220:	40064000 	.word	0x40064000
  402224:	00402181 	.word	0x00402181

00402228 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  402228:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40222c:	0052      	lsls	r2, r2, #1
  40222e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402232:	fbb3 f2f2 	udiv	r2, r3, r2
  402236:	3a01      	subs	r2, #1
  402238:	f3c2 020d 	ubfx	r2, r2, #0, #14
  40223c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  402240:	4770      	bx	lr
  402242:	bf00      	nop

00402244 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402244:	6301      	str	r1, [r0, #48]	; 0x30
  402246:	4770      	bx	lr

00402248 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402248:	6341      	str	r1, [r0, #52]	; 0x34
  40224a:	4770      	bx	lr

0040224c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40224c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40224e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  402252:	d02f      	beq.n	4022b4 <pio_set_peripheral+0x68>
  402254:	d807      	bhi.n	402266 <pio_set_peripheral+0x1a>
  402256:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40225a:	d014      	beq.n	402286 <pio_set_peripheral+0x3a>
  40225c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402260:	d01e      	beq.n	4022a0 <pio_set_peripheral+0x54>
  402262:	b939      	cbnz	r1, 402274 <pio_set_peripheral+0x28>
  402264:	4770      	bx	lr
  402266:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40226a:	d037      	beq.n	4022dc <pio_set_peripheral+0x90>
  40226c:	d804      	bhi.n	402278 <pio_set_peripheral+0x2c>
  40226e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  402272:	d029      	beq.n	4022c8 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402274:	6042      	str	r2, [r0, #4]
  402276:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402278:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40227c:	d02e      	beq.n	4022dc <pio_set_peripheral+0x90>
  40227e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  402282:	d02b      	beq.n	4022dc <pio_set_peripheral+0x90>
  402284:	e7f6      	b.n	402274 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  402286:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402288:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40228a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40228c:	43d3      	mvns	r3, r2
  40228e:	4021      	ands	r1, r4
  402290:	4019      	ands	r1, r3
  402292:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402294:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402296:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402298:	4021      	ands	r1, r4
  40229a:	400b      	ands	r3, r1
  40229c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40229e:	e01a      	b.n	4022d6 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4022a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4022a2:	4313      	orrs	r3, r2
  4022a4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4022a6:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4022a8:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4022aa:	400b      	ands	r3, r1
  4022ac:	ea23 0302 	bic.w	r3, r3, r2
  4022b0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4022b2:	e7df      	b.n	402274 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4022b4:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4022b6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4022b8:	400b      	ands	r3, r1
  4022ba:	ea23 0302 	bic.w	r3, r3, r2
  4022be:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4022c0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4022c2:	4313      	orrs	r3, r2
  4022c4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4022c6:	e7d5      	b.n	402274 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4022c8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4022ca:	4313      	orrs	r3, r2
  4022cc:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4022ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4022d0:	4313      	orrs	r3, r2
  4022d2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4022d4:	e7ce      	b.n	402274 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4022d6:	6042      	str	r2, [r0, #4]
}
  4022d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4022dc:	4770      	bx	lr
  4022de:	bf00      	nop

004022e0 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4022e0:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4022e2:	f012 0f01 	tst.w	r2, #1
  4022e6:	d001      	beq.n	4022ec <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  4022e8:	6641      	str	r1, [r0, #100]	; 0x64
  4022ea:	e000      	b.n	4022ee <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4022ec:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4022ee:	f012 0f0a 	tst.w	r2, #10
  4022f2:	d001      	beq.n	4022f8 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  4022f4:	6201      	str	r1, [r0, #32]
  4022f6:	e000      	b.n	4022fa <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4022f8:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4022fa:	f012 0f02 	tst.w	r2, #2
  4022fe:	d002      	beq.n	402306 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402300:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402304:	e004      	b.n	402310 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402306:	f012 0f08 	tst.w	r2, #8
  40230a:	d001      	beq.n	402310 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40230c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402310:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402312:	6001      	str	r1, [r0, #0]
  402314:	4770      	bx	lr
  402316:	bf00      	nop

00402318 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402318:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40231a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40231c:	9c01      	ldr	r4, [sp, #4]
  40231e:	b10c      	cbz	r4, 402324 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402320:	6641      	str	r1, [r0, #100]	; 0x64
  402322:	e000      	b.n	402326 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402324:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402326:	b10b      	cbz	r3, 40232c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402328:	6501      	str	r1, [r0, #80]	; 0x50
  40232a:	e000      	b.n	40232e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40232c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40232e:	b10a      	cbz	r2, 402334 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402330:	6301      	str	r1, [r0, #48]	; 0x30
  402332:	e000      	b.n	402336 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402334:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402336:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402338:	6001      	str	r1, [r0, #0]
}
  40233a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40233e:	4770      	bx	lr

00402340 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402340:	f012 0f10 	tst.w	r2, #16
  402344:	d012      	beq.n	40236c <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402346:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40234a:	f012 0f20 	tst.w	r2, #32
  40234e:	d002      	beq.n	402356 <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402350:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  402354:	e001      	b.n	40235a <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  402356:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  40235a:	f012 0f40 	tst.w	r2, #64	; 0x40
  40235e:	d002      	beq.n	402366 <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402360:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  402364:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  402366:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  40236a:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  40236c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402370:	4770      	bx	lr
  402372:	bf00      	nop

00402374 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  402374:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  402376:	6401      	str	r1, [r0, #64]	; 0x40
  402378:	4770      	bx	lr
  40237a:	bf00      	nop

0040237c <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40237c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40237e:	4770      	bx	lr

00402380 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402380:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  402382:	4770      	bx	lr

00402384 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  402384:	2803      	cmp	r0, #3
  402386:	d007      	beq.n	402398 <pmc_mck_set_division+0x14>
  402388:	2804      	cmp	r0, #4
  40238a:	d008      	beq.n	40239e <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40238c:	2802      	cmp	r0, #2
  40238e:	bf0c      	ite	eq
  402390:	f44f 7280 	moveq.w	r2, #256	; 0x100
  402394:	2200      	movne	r2, #0
  402396:	e004      	b.n	4023a2 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402398:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  40239c:	e001      	b.n	4023a2 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40239e:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4023a2:	4906      	ldr	r1, [pc, #24]	; (4023bc <pmc_mck_set_division+0x38>)
  4023a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4023a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4023aa:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4023ac:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4023ae:	460a      	mov	r2, r1
  4023b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023b2:	f013 0f08 	tst.w	r3, #8
  4023b6:	d0fb      	beq.n	4023b0 <pmc_mck_set_division+0x2c>
}
  4023b8:	4770      	bx	lr
  4023ba:	bf00      	nop
  4023bc:	400e0600 	.word	0x400e0600

004023c0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4023c0:	4a18      	ldr	r2, [pc, #96]	; (402424 <pmc_switch_mck_to_pllack+0x64>)
  4023c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4023c8:	4318      	orrs	r0, r3
  4023ca:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4023cc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4023ce:	f013 0f08 	tst.w	r3, #8
  4023d2:	d003      	beq.n	4023dc <pmc_switch_mck_to_pllack+0x1c>
  4023d4:	e009      	b.n	4023ea <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4023d6:	3b01      	subs	r3, #1
  4023d8:	d103      	bne.n	4023e2 <pmc_switch_mck_to_pllack+0x22>
  4023da:	e01e      	b.n	40241a <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4023dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4023e0:	4910      	ldr	r1, [pc, #64]	; (402424 <pmc_switch_mck_to_pllack+0x64>)
  4023e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4023e4:	f012 0f08 	tst.w	r2, #8
  4023e8:	d0f5      	beq.n	4023d6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4023ea:	4a0e      	ldr	r2, [pc, #56]	; (402424 <pmc_switch_mck_to_pllack+0x64>)
  4023ec:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4023ee:	f023 0303 	bic.w	r3, r3, #3
  4023f2:	f043 0302 	orr.w	r3, r3, #2
  4023f6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4023f8:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4023fa:	f010 0008 	ands.w	r0, r0, #8
  4023fe:	d004      	beq.n	40240a <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  402400:	2000      	movs	r0, #0
  402402:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402404:	3b01      	subs	r3, #1
  402406:	d103      	bne.n	402410 <pmc_switch_mck_to_pllack+0x50>
  402408:	e009      	b.n	40241e <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40240a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40240e:	4905      	ldr	r1, [pc, #20]	; (402424 <pmc_switch_mck_to_pllack+0x64>)
  402410:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402412:	f012 0f08 	tst.w	r2, #8
  402416:	d0f5      	beq.n	402404 <pmc_switch_mck_to_pllack+0x44>
  402418:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40241a:	2001      	movs	r0, #1
  40241c:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40241e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  402420:	4770      	bx	lr
  402422:	bf00      	nop
  402424:	400e0600 	.word	0x400e0600

00402428 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402428:	b138      	cbz	r0, 40243a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40242a:	490e      	ldr	r1, [pc, #56]	; (402464 <pmc_switch_mainck_to_xtal+0x3c>)
  40242c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40242e:	4a0e      	ldr	r2, [pc, #56]	; (402468 <pmc_switch_mainck_to_xtal+0x40>)
  402430:	401a      	ands	r2, r3
  402432:	4b0e      	ldr	r3, [pc, #56]	; (40246c <pmc_switch_mainck_to_xtal+0x44>)
  402434:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402436:	620b      	str	r3, [r1, #32]
  402438:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40243a:	480a      	ldr	r0, [pc, #40]	; (402464 <pmc_switch_mainck_to_xtal+0x3c>)
  40243c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40243e:	0209      	lsls	r1, r1, #8
  402440:	b289      	uxth	r1, r1
  402442:	4a0b      	ldr	r2, [pc, #44]	; (402470 <pmc_switch_mainck_to_xtal+0x48>)
  402444:	401a      	ands	r2, r3
  402446:	4b0b      	ldr	r3, [pc, #44]	; (402474 <pmc_switch_mainck_to_xtal+0x4c>)
  402448:	4313      	orrs	r3, r2
  40244a:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40244c:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40244e:	4602      	mov	r2, r0
  402450:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402452:	f013 0f01 	tst.w	r3, #1
  402456:	d0fb      	beq.n	402450 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402458:	4a02      	ldr	r2, [pc, #8]	; (402464 <pmc_switch_mainck_to_xtal+0x3c>)
  40245a:	6a11      	ldr	r1, [r2, #32]
  40245c:	4b06      	ldr	r3, [pc, #24]	; (402478 <pmc_switch_mainck_to_xtal+0x50>)
  40245e:	430b      	orrs	r3, r1
  402460:	6213      	str	r3, [r2, #32]
  402462:	4770      	bx	lr
  402464:	400e0600 	.word	0x400e0600
  402468:	fec8fffc 	.word	0xfec8fffc
  40246c:	01370002 	.word	0x01370002
  402470:	ffc8fffc 	.word	0xffc8fffc
  402474:	00370001 	.word	0x00370001
  402478:	01370000 	.word	0x01370000

0040247c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40247c:	4b02      	ldr	r3, [pc, #8]	; (402488 <pmc_osc_is_ready_mainck+0xc>)
  40247e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402480:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  402484:	4770      	bx	lr
  402486:	bf00      	nop
  402488:	400e0600 	.word	0x400e0600

0040248c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40248c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402490:	4b01      	ldr	r3, [pc, #4]	; (402498 <pmc_disable_pllack+0xc>)
  402492:	629a      	str	r2, [r3, #40]	; 0x28
  402494:	4770      	bx	lr
  402496:	bf00      	nop
  402498:	400e0600 	.word	0x400e0600

0040249c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40249c:	4b02      	ldr	r3, [pc, #8]	; (4024a8 <pmc_is_locked_pllack+0xc>)
  40249e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4024a0:	f000 0002 	and.w	r0, r0, #2
  4024a4:	4770      	bx	lr
  4024a6:	bf00      	nop
  4024a8:	400e0600 	.word	0x400e0600

004024ac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4024ac:	283f      	cmp	r0, #63	; 0x3f
  4024ae:	d81e      	bhi.n	4024ee <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4024b0:	281f      	cmp	r0, #31
  4024b2:	d80c      	bhi.n	4024ce <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4024b4:	4b11      	ldr	r3, [pc, #68]	; (4024fc <pmc_enable_periph_clk+0x50>)
  4024b6:	699a      	ldr	r2, [r3, #24]
  4024b8:	2301      	movs	r3, #1
  4024ba:	4083      	lsls	r3, r0
  4024bc:	4393      	bics	r3, r2
  4024be:	d018      	beq.n	4024f2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4024c0:	2301      	movs	r3, #1
  4024c2:	fa03 f000 	lsl.w	r0, r3, r0
  4024c6:	4b0d      	ldr	r3, [pc, #52]	; (4024fc <pmc_enable_periph_clk+0x50>)
  4024c8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4024ca:	2000      	movs	r0, #0
  4024cc:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4024ce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4024d0:	4b0a      	ldr	r3, [pc, #40]	; (4024fc <pmc_enable_periph_clk+0x50>)
  4024d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4024d6:	2301      	movs	r3, #1
  4024d8:	4083      	lsls	r3, r0
  4024da:	4393      	bics	r3, r2
  4024dc:	d00b      	beq.n	4024f6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4024de:	2301      	movs	r3, #1
  4024e0:	fa03 f000 	lsl.w	r0, r3, r0
  4024e4:	4b05      	ldr	r3, [pc, #20]	; (4024fc <pmc_enable_periph_clk+0x50>)
  4024e6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4024ea:	2000      	movs	r0, #0
  4024ec:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4024ee:	2001      	movs	r0, #1
  4024f0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4024f2:	2000      	movs	r0, #0
  4024f4:	4770      	bx	lr
  4024f6:	2000      	movs	r0, #0
}
  4024f8:	4770      	bx	lr
  4024fa:	bf00      	nop
  4024fc:	400e0600 	.word	0x400e0600

00402500 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  402500:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  402502:	23ac      	movs	r3, #172	; 0xac
  402504:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402506:	680b      	ldr	r3, [r1, #0]
  402508:	684a      	ldr	r2, [r1, #4]
  40250a:	fbb3 f3f2 	udiv	r3, r3, r2
  40250e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  402510:	1e5c      	subs	r4, r3, #1
  402512:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402516:	4294      	cmp	r4, r2
  402518:	d806      	bhi.n	402528 <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  40251a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  40251c:	688b      	ldr	r3, [r1, #8]
  40251e:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402520:	2350      	movs	r3, #80	; 0x50
  402522:	6003      	str	r3, [r0, #0]

	return 0;
  402524:	2000      	movs	r0, #0
  402526:	e000      	b.n	40252a <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402528:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  40252a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40252e:	4770      	bx	lr

00402530 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402530:	2340      	movs	r3, #64	; 0x40
  402532:	6003      	str	r3, [r0, #0]
  402534:	4770      	bx	lr
  402536:	bf00      	nop

00402538 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402538:	2310      	movs	r3, #16
  40253a:	6003      	str	r3, [r0, #0]
  40253c:	4770      	bx	lr
  40253e:	bf00      	nop

00402540 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402540:	2350      	movs	r3, #80	; 0x50
  402542:	6003      	str	r3, [r0, #0]
  402544:	4770      	bx	lr
  402546:	bf00      	nop

00402548 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402548:	6081      	str	r1, [r0, #8]
  40254a:	4770      	bx	lr

0040254c <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  40254c:	6940      	ldr	r0, [r0, #20]
}
  40254e:	f3c0 0040 	ubfx	r0, r0, #1, #1
  402552:	4770      	bx	lr

00402554 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  402554:	6201      	str	r1, [r0, #32]
  402556:	4770      	bx	lr

00402558 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402558:	6943      	ldr	r3, [r0, #20]
  40255a:	f013 0f02 	tst.w	r3, #2
  40255e:	d002      	beq.n	402566 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402560:	61c1      	str	r1, [r0, #28]
	return 0;
  402562:	2000      	movs	r0, #0
  402564:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  402566:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402568:	4770      	bx	lr
  40256a:	bf00      	nop

0040256c <board_init>:
#define PIOA_BUTTONS				PIO_PA11|PIO_PA12|PIO_PA13|PIO_PA14|PIO_PA15|PIO_PA16|PIO_PA17|PIO_PA18|PIO_PA19|PIO_PA20|PIO_PA22|PIO_PA23|PIO_PA24
#define PIOD_SPI					PIO_PD20|PIO_PD21|PIO_PD22
#define PIOB_SPI					PIO_PB2

void board_init(void)
{
  40256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402570:	b087      	sub	sp, #28
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  402572:	2100      	movs	r1, #0
  402574:	4859      	ldr	r0, [pc, #356]	; (4026dc <board_init+0x170>)
  402576:	4b5a      	ldr	r3, [pc, #360]	; (4026e0 <board_init+0x174>)
  402578:	4798      	blx	r3
	sysclk_init();
  40257a:	4b5a      	ldr	r3, [pc, #360]	; (4026e4 <board_init+0x178>)
  40257c:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  40257e:	4b5a      	ldr	r3, [pc, #360]	; (4026e8 <board_init+0x17c>)
  402580:	ac03      	add	r4, sp, #12
  402582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  402586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  40258a:	2008      	movs	r0, #8
  40258c:	4d57      	ldr	r5, [pc, #348]	; (4026ec <board_init+0x180>)
  40258e:	47a8      	blx	r5
		UART_SERIAL_PARITY,
		UART_SERIAL_STOP_BIT,
		UART_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(ID_UART1);
	pmc_enable_periph_clk(ID_UART1);
  402590:	2008      	movs	r0, #8
  402592:	47a8      	blx	r5
	uart_init(UART1, &usart_console_settings);
  402594:	4f56      	ldr	r7, [pc, #344]	; (4026f0 <board_init+0x184>)
  402596:	4621      	mov	r1, r4
  402598:	4638      	mov	r0, r7
  40259a:	4b56      	ldr	r3, [pc, #344]	; (4026f4 <board_init+0x188>)
  40259c:	4798      	blx	r3
	uart_enable(UART1);
  40259e:	4638      	mov	r0, r7
  4025a0:	4b55      	ldr	r3, [pc, #340]	; (4026f8 <board_init+0x18c>)
  4025a2:	4798      	blx	r3
	uart_enable_tx(UART1);
  4025a4:	4638      	mov	r0, r7
  4025a6:	4b55      	ldr	r3, [pc, #340]	; (4026fc <board_init+0x190>)
  4025a8:	4798      	blx	r3
	uart_enable_rx(UART1);
  4025aa:	4638      	mov	r0, r7
  4025ac:	4b54      	ldr	r3, [pc, #336]	; (402700 <board_init+0x194>)
  4025ae:	4798      	blx	r3
	uart_set_clock_divisor(UART1,(83/1)); //Pippin had GLOBAL_SLOWDOWN IT WAS VALUED 1
  4025b0:	2153      	movs	r1, #83	; 0x53
  4025b2:	4638      	mov	r0, r7
  4025b4:	4b53      	ldr	r3, [pc, #332]	; (402704 <board_init+0x198>)
  4025b6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  4025b8:	200a      	movs	r0, #10
  4025ba:	47a8      	blx	r5
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,1<<4 | 1<<5);
  4025bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 402770 <board_init+0x204>
  4025c0:	2230      	movs	r2, #48	; 0x30
  4025c2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4025c6:	4640      	mov	r0, r8
  4025c8:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 402774 <board_init+0x208>
  4025cc:	47c8      	blx	r9
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 115200\nBits: 8\nNo stop bits \n");
  4025ce:	484e      	ldr	r0, [pc, #312]	; (402708 <board_init+0x19c>)
  4025d0:	4c4e      	ldr	r4, [pc, #312]	; (40270c <board_init+0x1a0>)
  4025d2:	47a0      	blx	r4
	   ######################################
	   ###################################### */
	//sendDebugString("LED INITIALIZATION - STARTED\n");
		//pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
		//pmc_enable_periph_clk(ID_PIOA);
		pmc_enable_periph_clk(ID_PIOD);
  4025d4:	2010      	movs	r0, #16
  4025d6:	47a8      	blx	r5
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  4025d8:	2600      	movs	r6, #0
  4025da:	9600      	str	r6, [sp, #0]
  4025dc:	4633      	mov	r3, r6
  4025de:	4632      	mov	r2, r6
  4025e0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4025e4:	484a      	ldr	r0, [pc, #296]	; (402710 <board_init+0x1a4>)
  4025e6:	f8df a190 	ldr.w	sl, [pc, #400]	; 402778 <board_init+0x20c>
  4025ea:	47d0      	blx	sl
		pio_set_output(LED2,LOW,DISABLE,DISABLE);
  4025ec:	9600      	str	r6, [sp, #0]
  4025ee:	4633      	mov	r3, r6
  4025f0:	4632      	mov	r2, r6
  4025f2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4025f6:	4846      	ldr	r0, [pc, #280]	; (402710 <board_init+0x1a4>)
  4025f8:	47d0      	blx	sl
	/* ######################################
	   ######################################
					Enable SPI
	   ######################################
	   ###################################### */
		sendDebugString("SPI INITIALIZATION - STARTED\n");
  4025fa:	4846      	ldr	r0, [pc, #280]	; (402714 <board_init+0x1a8>)
  4025fc:	47a0      	blx	r4
  4025fe:	2015      	movs	r0, #21
  402600:	47a8      	blx	r5
		sysclk_enable_peripheral_clock(ID_SPI0);
		pmc_enable_periph_clk(ID_PIOD);
  402602:	2010      	movs	r0, #16
  402604:	47a8      	blx	r5
		pmc_enable_periph_clk(ID_PIOB);
  402606:	200b      	movs	r0, #11
  402608:	47a8      	blx	r5
		
		struct spi_device spidevice;
		spidevice.id = ID_SPI0;
  40260a:	f10d 0b18 	add.w	fp, sp, #24
  40260e:	2315      	movs	r3, #21
  402610:	f84b 3d10 	str.w	r3, [fp, #-16]!
		
		//Set up SPI
		spi_master_init(SPI0);
  402614:	f8df a164 	ldr.w	sl, [pc, #356]	; 40277c <board_init+0x210>
  402618:	4650      	mov	r0, sl
  40261a:	4b3f      	ldr	r3, [pc, #252]	; (402718 <board_init+0x1ac>)
  40261c:	4798      	blx	r3
		spi_master_setup_device(SPI0,&spidevice,SPI_MODE_0,16000000,0);
  40261e:	9600      	str	r6, [sp, #0]
  402620:	4b3e      	ldr	r3, [pc, #248]	; (40271c <board_init+0x1b0>)
  402622:	4632      	mov	r2, r6
  402624:	4659      	mov	r1, fp
  402626:	4650      	mov	r0, sl
  402628:	4e3d      	ldr	r6, [pc, #244]	; (402720 <board_init+0x1b4>)
  40262a:	47b0      	blx	r6
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  40262c:	2601      	movs	r6, #1
  40262e:	f8ca 6000 	str.w	r6, [sl]
		spi_disable_loopback(SPI0);
		spi_set_peripheral_chip_select_value(SPI0,spi_get_pcs(DEFAULT_CHIP_ID))*/
		
		
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_B,PIOD_SPI);
  402632:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
  402636:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40263a:	4835      	ldr	r0, [pc, #212]	; (402710 <board_init+0x1a4>)
  40263c:	47c8      	blx	r9
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,PIOB_SPI);
  40263e:	2204      	movs	r2, #4
  402640:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402644:	4837      	ldr	r0, [pc, #220]	; (402724 <board_init+0x1b8>)
  402646:	47c8      	blx	r9
		sendDebugString("SPI INITIALIZATION - FINISHED\n");
  402648:	4837      	ldr	r0, [pc, #220]	; (402728 <board_init+0x1bc>)
  40264a:	47a0      	blx	r4
		sendDebugString("DWM1000 INITIALIZATION - STARTED\n");
  40264c:	4837      	ldr	r0, [pc, #220]	; (40272c <board_init+0x1c0>)
  40264e:	47a0      	blx	r4
		sendDebugString("DWM1000 INITIALIZATION - FINISHED\n");
  402650:	4837      	ldr	r0, [pc, #220]	; (402730 <board_init+0x1c4>)
  402652:	47a0      	blx	r4
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  402654:	4837      	ldr	r0, [pc, #220]	; (402734 <board_init+0x1c8>)
  402656:	47a0      	blx	r4
		wdt_disable(WDT);
  402658:	4837      	ldr	r0, [pc, #220]	; (402738 <board_init+0x1cc>)
  40265a:	4b38      	ldr	r3, [pc, #224]	; (40273c <board_init+0x1d0>)
  40265c:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  40265e:	4838      	ldr	r0, [pc, #224]	; (402740 <board_init+0x1d4>)
  402660:	47a0      	blx	r4
		/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  402662:	4838      	ldr	r0, [pc, #224]	; (402744 <board_init+0x1d8>)
  402664:	47a0      	blx	r4
		cpu_irq_enable();
  402666:	4b38      	ldr	r3, [pc, #224]	; (402748 <board_init+0x1dc>)
  402668:	701e      	strb	r6, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40266a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40266e:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  402670:	4836      	ldr	r0, [pc, #216]	; (40274c <board_init+0x1e0>)
  402672:	47a0      	blx	r4
	/* ######################################
	   ######################################
                  Setup Switches
	   ######################################
	   ###################################### */
		pmc_enable_periph_clk(ID_PIOA);
  402674:	200a      	movs	r0, #10
  402676:	47a8      	blx	r5
		pio_set_input(PIOA,PIOA_BUTTONS,PIO_PULLUP|PIO_DEBOUNCE);
  402678:	f8df 9104 	ldr.w	r9, [pc, #260]	; 402780 <board_init+0x214>
  40267c:	2209      	movs	r2, #9
  40267e:	4649      	mov	r1, r9
  402680:	4640      	mov	r0, r8
  402682:	4b33      	ldr	r3, [pc, #204]	; (402750 <board_init+0x1e4>)
  402684:	4798      	blx	r3
		pio_set_debounce_filter(PIOA,PIOA_BUTTONS,100);
  402686:	2264      	movs	r2, #100	; 0x64
  402688:	4649      	mov	r1, r9
  40268a:	4640      	mov	r0, r8
  40268c:	4b31      	ldr	r3, [pc, #196]	; (402754 <board_init+0x1e8>)
  40268e:	4798      	blx	r3
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIPHERAL IRQ INITIALIZATION - STARTED\n");
  402690:	4831      	ldr	r0, [pc, #196]	; (402758 <board_init+0x1ec>)
  402692:	47a0      	blx	r4
		//NVIC_ClearPendingIRQ(ISI_IRQn);
		//NVIC_SetPriority(ISI_IRQn,7);
		//NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART1,UART_IER_RXRDY);
  402694:	4631      	mov	r1, r6
  402696:	4638      	mov	r0, r7
  402698:	4b30      	ldr	r3, [pc, #192]	; (40275c <board_init+0x1f0>)
  40269a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  40269c:	4d30      	ldr	r5, [pc, #192]	; (402760 <board_init+0x1f4>)
  40269e:	f44f 7380 	mov.w	r3, #256	; 0x100
  4026a2:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4026a6:	26c0      	movs	r6, #192	; 0xc0
  4026a8:	f885 6308 	strb.w	r6, [r5, #776]	; 0x308
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4026ac:	602b      	str	r3, [r5, #0]
		NVIC_ClearPendingIRQ(UART1_IRQn);
		NVIC_SetPriority(UART1_IRQn,6);
		NVIC_EnableIRQ(UART1_IRQn);
		sendDebugString("PERIPHERAL IRQ INITIALIZATION - FINISHED\n");
  4026ae:	482d      	ldr	r0, [pc, #180]	; (402764 <board_init+0x1f8>)
  4026b0:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4026b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4026b6:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4026ba:	f8c5 4180 	str.w	r4, [r5, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4026be:	f885 630a 	strb.w	r6, [r5, #778]	; 0x30a

		NVIC_DisableIRQ(PIOA_IRQn);
		NVIC_ClearPendingIRQ(PIOA_IRQn);
		NVIC_SetPriority(PIOA_IRQn, 6);
		pio_enable_interrupt(PIOA,PIOA_BUTTONS);
  4026c2:	4649      	mov	r1, r9
  4026c4:	4640      	mov	r0, r8
  4026c6:	4b28      	ldr	r3, [pc, #160]	; (402768 <board_init+0x1fc>)
  4026c8:	4798      	blx	r3
		pio_configure_interrupt(PIOA,PIOA_BUTTONS, PIO_IT_FALL_EDGE);
  4026ca:	2250      	movs	r2, #80	; 0x50
  4026cc:	4649      	mov	r1, r9
  4026ce:	4640      	mov	r0, r8
  4026d0:	4b26      	ldr	r3, [pc, #152]	; (40276c <board_init+0x200>)
  4026d2:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4026d4:	602c      	str	r4, [r5, #0]
		NVIC_EnableIRQ(PIOA_IRQn);
		
		 
}
  4026d6:	b007      	add	sp, #28
  4026d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4026dc:	400e1810 	.word	0x400e1810
  4026e0:	0040043d 	.word	0x0040043d
  4026e4:	00402111 	.word	0x00402111
  4026e8:	00403230 	.word	0x00403230
  4026ec:	004024ad 	.word	0x004024ad
  4026f0:	400e0a00 	.word	0x400e0a00
  4026f4:	00402501 	.word	0x00402501
  4026f8:	00402541 	.word	0x00402541
  4026fc:	00402531 	.word	0x00402531
  402700:	00402539 	.word	0x00402539
  402704:	00402555 	.word	0x00402555
  402708:	0040323c 	.word	0x0040323c
  40270c:	004029a5 	.word	0x004029a5
  402710:	400e1400 	.word	0x400e1400
  402714:	004032a0 	.word	0x004032a0
  402718:	0040019d 	.word	0x0040019d
  40271c:	00f42400 	.word	0x00f42400
  402720:	004001f1 	.word	0x004001f1
  402724:	400e1000 	.word	0x400e1000
  402728:	004032c0 	.word	0x004032c0
  40272c:	004032e0 	.word	0x004032e0
  402730:	00403304 	.word	0x00403304
  402734:	00403328 	.word	0x00403328
  402738:	400e1850 	.word	0x400e1850
  40273c:	00400469 	.word	0x00400469
  402740:	0040334c 	.word	0x0040334c
  402744:	00403370 	.word	0x00403370
  402748:	20400004 	.word	0x20400004
  40274c:	00403398 	.word	0x00403398
  402750:	004022e1 	.word	0x004022e1
  402754:	00402229 	.word	0x00402229
  402758:	004033c0 	.word	0x004033c0
  40275c:	00402549 	.word	0x00402549
  402760:	e000e100 	.word	0xe000e100
  402764:	004033ec 	.word	0x004033ec
  402768:	00402375 	.word	0x00402375
  40276c:	00402341 	.word	0x00402341
  402770:	400e0e00 	.word	0x400e0e00
  402774:	0040224d 	.word	0x0040224d
  402778:	00402319 	.word	0x00402319
  40277c:	40008000 	.word	0x40008000
  402780:	01dff800 	.word	0x01dff800

00402784 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402784:	e7fe      	b.n	402784 <Dummy_Handler>
  402786:	bf00      	nop

00402788 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402788:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  40278a:	4b19      	ldr	r3, [pc, #100]	; (4027f0 <Reset_Handler+0x68>)
  40278c:	4a19      	ldr	r2, [pc, #100]	; (4027f4 <Reset_Handler+0x6c>)
  40278e:	429a      	cmp	r2, r3
  402790:	d003      	beq.n	40279a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  402792:	4b19      	ldr	r3, [pc, #100]	; (4027f8 <Reset_Handler+0x70>)
  402794:	4a16      	ldr	r2, [pc, #88]	; (4027f0 <Reset_Handler+0x68>)
  402796:	429a      	cmp	r2, r3
  402798:	d304      	bcc.n	4027a4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40279a:	4b18      	ldr	r3, [pc, #96]	; (4027fc <Reset_Handler+0x74>)
  40279c:	4a18      	ldr	r2, [pc, #96]	; (402800 <Reset_Handler+0x78>)
  40279e:	429a      	cmp	r2, r3
  4027a0:	d30f      	bcc.n	4027c2 <Reset_Handler+0x3a>
  4027a2:	e01a      	b.n	4027da <Reset_Handler+0x52>
  4027a4:	4912      	ldr	r1, [pc, #72]	; (4027f0 <Reset_Handler+0x68>)
  4027a6:	4b17      	ldr	r3, [pc, #92]	; (402804 <Reset_Handler+0x7c>)
  4027a8:	1a5b      	subs	r3, r3, r1
  4027aa:	f023 0303 	bic.w	r3, r3, #3
  4027ae:	3304      	adds	r3, #4
  4027b0:	4a10      	ldr	r2, [pc, #64]	; (4027f4 <Reset_Handler+0x6c>)
  4027b2:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4027b4:	f852 0b04 	ldr.w	r0, [r2], #4
  4027b8:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4027bc:	429a      	cmp	r2, r3
  4027be:	d1f9      	bne.n	4027b4 <Reset_Handler+0x2c>
  4027c0:	e7eb      	b.n	40279a <Reset_Handler+0x12>
  4027c2:	4b11      	ldr	r3, [pc, #68]	; (402808 <Reset_Handler+0x80>)
  4027c4:	4a11      	ldr	r2, [pc, #68]	; (40280c <Reset_Handler+0x84>)
  4027c6:	1ad2      	subs	r2, r2, r3
  4027c8:	f022 0203 	bic.w	r2, r2, #3
  4027cc:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4027ce:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4027d0:	2100      	movs	r1, #0
  4027d2:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4027d6:	4293      	cmp	r3, r2
  4027d8:	d1fb      	bne.n	4027d2 <Reset_Handler+0x4a>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4027da:	4a0d      	ldr	r2, [pc, #52]	; (402810 <Reset_Handler+0x88>)
  4027dc:	4b0d      	ldr	r3, [pc, #52]	; (402814 <Reset_Handler+0x8c>)
  4027de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4027e2:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4027e4:	4b0c      	ldr	r3, [pc, #48]	; (402818 <Reset_Handler+0x90>)
  4027e6:	4798      	blx	r3

        /* Branch to main function */
        main();
  4027e8:	4b0c      	ldr	r3, [pc, #48]	; (40281c <Reset_Handler+0x94>)
  4027ea:	4798      	blx	r3
  4027ec:	e7fe      	b.n	4027ec <Reset_Handler+0x64>
  4027ee:	bf00      	nop
  4027f0:	20400000 	.word	0x20400000
  4027f4:	00403520 	.word	0x00403520
  4027f8:	20400438 	.word	0x20400438
  4027fc:	2040bfb8 	.word	0x2040bfb8
  402800:	20400438 	.word	0x20400438
  402804:	20400437 	.word	0x20400437
  402808:	2040043c 	.word	0x2040043c
  40280c:	2040bfbb 	.word	0x2040bfbb
  402810:	e000ed00 	.word	0xe000ed00
  402814:	00400000 	.word	0x00400000
  402818:	00402df9 	.word	0x00402df9
  40281c:	00402d35 	.word	0x00402d35

00402820 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402820:	4b3c      	ldr	r3, [pc, #240]	; (402914 <SystemCoreClockUpdate+0xf4>)
  402822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402824:	f003 0303 	and.w	r3, r3, #3
  402828:	2b01      	cmp	r3, #1
  40282a:	d00f      	beq.n	40284c <SystemCoreClockUpdate+0x2c>
  40282c:	b113      	cbz	r3, 402834 <SystemCoreClockUpdate+0x14>
  40282e:	2b02      	cmp	r3, #2
  402830:	d029      	beq.n	402886 <SystemCoreClockUpdate+0x66>
  402832:	e057      	b.n	4028e4 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402834:	4b38      	ldr	r3, [pc, #224]	; (402918 <SystemCoreClockUpdate+0xf8>)
  402836:	695b      	ldr	r3, [r3, #20]
  402838:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40283c:	bf14      	ite	ne
  40283e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402842:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402846:	4b35      	ldr	r3, [pc, #212]	; (40291c <SystemCoreClockUpdate+0xfc>)
  402848:	601a      	str	r2, [r3, #0]
  40284a:	e04b      	b.n	4028e4 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40284c:	4b31      	ldr	r3, [pc, #196]	; (402914 <SystemCoreClockUpdate+0xf4>)
  40284e:	6a1b      	ldr	r3, [r3, #32]
  402850:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402854:	d003      	beq.n	40285e <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402856:	4a32      	ldr	r2, [pc, #200]	; (402920 <SystemCoreClockUpdate+0x100>)
  402858:	4b30      	ldr	r3, [pc, #192]	; (40291c <SystemCoreClockUpdate+0xfc>)
  40285a:	601a      	str	r2, [r3, #0]
  40285c:	e042      	b.n	4028e4 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40285e:	4a31      	ldr	r2, [pc, #196]	; (402924 <SystemCoreClockUpdate+0x104>)
  402860:	4b2e      	ldr	r3, [pc, #184]	; (40291c <SystemCoreClockUpdate+0xfc>)
  402862:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402864:	4b2b      	ldr	r3, [pc, #172]	; (402914 <SystemCoreClockUpdate+0xf4>)
  402866:	6a1b      	ldr	r3, [r3, #32]
  402868:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40286c:	2b10      	cmp	r3, #16
  40286e:	d002      	beq.n	402876 <SystemCoreClockUpdate+0x56>
  402870:	2b20      	cmp	r3, #32
  402872:	d004      	beq.n	40287e <SystemCoreClockUpdate+0x5e>
  402874:	e036      	b.n	4028e4 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402876:	4a2c      	ldr	r2, [pc, #176]	; (402928 <SystemCoreClockUpdate+0x108>)
  402878:	4b28      	ldr	r3, [pc, #160]	; (40291c <SystemCoreClockUpdate+0xfc>)
  40287a:	601a      	str	r2, [r3, #0]
          break;
  40287c:	e032      	b.n	4028e4 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40287e:	4a28      	ldr	r2, [pc, #160]	; (402920 <SystemCoreClockUpdate+0x100>)
  402880:	4b26      	ldr	r3, [pc, #152]	; (40291c <SystemCoreClockUpdate+0xfc>)
  402882:	601a      	str	r2, [r3, #0]
          break;
  402884:	e02e      	b.n	4028e4 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402886:	4b23      	ldr	r3, [pc, #140]	; (402914 <SystemCoreClockUpdate+0xf4>)
  402888:	6a1b      	ldr	r3, [r3, #32]
  40288a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40288e:	d003      	beq.n	402898 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402890:	4a23      	ldr	r2, [pc, #140]	; (402920 <SystemCoreClockUpdate+0x100>)
  402892:	4b22      	ldr	r3, [pc, #136]	; (40291c <SystemCoreClockUpdate+0xfc>)
  402894:	601a      	str	r2, [r3, #0]
  402896:	e012      	b.n	4028be <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402898:	4a22      	ldr	r2, [pc, #136]	; (402924 <SystemCoreClockUpdate+0x104>)
  40289a:	4b20      	ldr	r3, [pc, #128]	; (40291c <SystemCoreClockUpdate+0xfc>)
  40289c:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40289e:	4b1d      	ldr	r3, [pc, #116]	; (402914 <SystemCoreClockUpdate+0xf4>)
  4028a0:	6a1b      	ldr	r3, [r3, #32]
  4028a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028a6:	2b10      	cmp	r3, #16
  4028a8:	d002      	beq.n	4028b0 <SystemCoreClockUpdate+0x90>
  4028aa:	2b20      	cmp	r3, #32
  4028ac:	d004      	beq.n	4028b8 <SystemCoreClockUpdate+0x98>
  4028ae:	e006      	b.n	4028be <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4028b0:	4a1d      	ldr	r2, [pc, #116]	; (402928 <SystemCoreClockUpdate+0x108>)
  4028b2:	4b1a      	ldr	r3, [pc, #104]	; (40291c <SystemCoreClockUpdate+0xfc>)
  4028b4:	601a      	str	r2, [r3, #0]
          break;
  4028b6:	e002      	b.n	4028be <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4028b8:	4a19      	ldr	r2, [pc, #100]	; (402920 <SystemCoreClockUpdate+0x100>)
  4028ba:	4b18      	ldr	r3, [pc, #96]	; (40291c <SystemCoreClockUpdate+0xfc>)
  4028bc:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4028be:	4b15      	ldr	r3, [pc, #84]	; (402914 <SystemCoreClockUpdate+0xf4>)
  4028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028c2:	f003 0303 	and.w	r3, r3, #3
  4028c6:	2b02      	cmp	r3, #2
  4028c8:	d10c      	bne.n	4028e4 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4028ca:	4a12      	ldr	r2, [pc, #72]	; (402914 <SystemCoreClockUpdate+0xf4>)
  4028cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4028ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4028d0:	4812      	ldr	r0, [pc, #72]	; (40291c <SystemCoreClockUpdate+0xfc>)
  4028d2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4028d6:	6803      	ldr	r3, [r0, #0]
  4028d8:	fb01 3303 	mla	r3, r1, r3, r3
  4028dc:	b2d2      	uxtb	r2, r2
  4028de:	fbb3 f3f2 	udiv	r3, r3, r2
  4028e2:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4028e4:	4b0b      	ldr	r3, [pc, #44]	; (402914 <SystemCoreClockUpdate+0xf4>)
  4028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4028ec:	2b70      	cmp	r3, #112	; 0x70
  4028ee:	d107      	bne.n	402900 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  4028f0:	4a0a      	ldr	r2, [pc, #40]	; (40291c <SystemCoreClockUpdate+0xfc>)
  4028f2:	6813      	ldr	r3, [r2, #0]
  4028f4:	490d      	ldr	r1, [pc, #52]	; (40292c <SystemCoreClockUpdate+0x10c>)
  4028f6:	fba1 1303 	umull	r1, r3, r1, r3
  4028fa:	085b      	lsrs	r3, r3, #1
  4028fc:	6013      	str	r3, [r2, #0]
  4028fe:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402900:	4b04      	ldr	r3, [pc, #16]	; (402914 <SystemCoreClockUpdate+0xf4>)
  402902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402904:	4905      	ldr	r1, [pc, #20]	; (40291c <SystemCoreClockUpdate+0xfc>)
  402906:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40290a:	680b      	ldr	r3, [r1, #0]
  40290c:	40d3      	lsrs	r3, r2
  40290e:	600b      	str	r3, [r1, #0]
  402910:	4770      	bx	lr
  402912:	bf00      	nop
  402914:	400e0600 	.word	0x400e0600
  402918:	400e1810 	.word	0x400e1810
  40291c:	20400008 	.word	0x20400008
  402920:	00b71b00 	.word	0x00b71b00
  402924:	003d0900 	.word	0x003d0900
  402928:	007a1200 	.word	0x007a1200
  40292c:	aaaaaaab 	.word	0xaaaaaaab

00402930 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402930:	4b12      	ldr	r3, [pc, #72]	; (40297c <system_init_flash+0x4c>)
  402932:	4298      	cmp	r0, r3
  402934:	d804      	bhi.n	402940 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402936:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40293a:	4b11      	ldr	r3, [pc, #68]	; (402980 <system_init_flash+0x50>)
  40293c:	601a      	str	r2, [r3, #0]
  40293e:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402940:	4b10      	ldr	r3, [pc, #64]	; (402984 <system_init_flash+0x54>)
  402942:	4298      	cmp	r0, r3
  402944:	d803      	bhi.n	40294e <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402946:	4a10      	ldr	r2, [pc, #64]	; (402988 <system_init_flash+0x58>)
  402948:	4b0d      	ldr	r3, [pc, #52]	; (402980 <system_init_flash+0x50>)
  40294a:	601a      	str	r2, [r3, #0]
  40294c:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  40294e:	4b0f      	ldr	r3, [pc, #60]	; (40298c <system_init_flash+0x5c>)
  402950:	4298      	cmp	r0, r3
  402952:	d803      	bhi.n	40295c <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402954:	4a0e      	ldr	r2, [pc, #56]	; (402990 <system_init_flash+0x60>)
  402956:	4b0a      	ldr	r3, [pc, #40]	; (402980 <system_init_flash+0x50>)
  402958:	601a      	str	r2, [r3, #0]
  40295a:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40295c:	4b0d      	ldr	r3, [pc, #52]	; (402994 <system_init_flash+0x64>)
  40295e:	4298      	cmp	r0, r3
  402960:	d803      	bhi.n	40296a <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402962:	4a0d      	ldr	r2, [pc, #52]	; (402998 <system_init_flash+0x68>)
  402964:	4b06      	ldr	r3, [pc, #24]	; (402980 <system_init_flash+0x50>)
  402966:	601a      	str	r2, [r3, #0]
  402968:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40296a:	4b0c      	ldr	r3, [pc, #48]	; (40299c <system_init_flash+0x6c>)
  40296c:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40296e:	bf94      	ite	ls
  402970:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402974:	4a0a      	ldrhi	r2, [pc, #40]	; (4029a0 <system_init_flash+0x70>)
  402976:	4b02      	ldr	r3, [pc, #8]	; (402980 <system_init_flash+0x50>)
  402978:	601a      	str	r2, [r3, #0]
  40297a:	4770      	bx	lr
  40297c:	01312cff 	.word	0x01312cff
  402980:	400e0c00 	.word	0x400e0c00
  402984:	026259ff 	.word	0x026259ff
  402988:	04000100 	.word	0x04000100
  40298c:	039386ff 	.word	0x039386ff
  402990:	04000200 	.word	0x04000200
  402994:	04c4b3ff 	.word	0x04c4b3ff
  402998:	04000300 	.word	0x04000300
  40299c:	05f5e0ff 	.word	0x05f5e0ff
  4029a0:	04000500 	.word	0x04000500

004029a4 <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  4029a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029a8:	4680      	mov	r8, r0
  4029aa:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  4029ac:	2600      	movs	r6, #0
  4029ae:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4029e4 <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART1));
  4029b2:	4d0a      	ldr	r5, [pc, #40]	; (4029dc <sendDebugString+0x38>)
  4029b4:	4c0a      	ldr	r4, [pc, #40]	; (4029e0 <sendDebugString+0x3c>)
		uart_write(UART1,in[i]);
  4029b6:	f8df a030 	ldr.w	sl, [pc, #48]	; 4029e8 <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4029ba:	e008      	b.n	4029ce <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART1));
  4029bc:	4620      	mov	r0, r4
  4029be:	47a8      	blx	r5
  4029c0:	2800      	cmp	r0, #0
  4029c2:	d0fb      	beq.n	4029bc <sendDebugString+0x18>
		uart_write(UART1,in[i]);
  4029c4:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  4029c8:	4620      	mov	r0, r4
  4029ca:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  4029cc:	3601      	adds	r6, #1
  4029ce:	4640      	mov	r0, r8
  4029d0:	47c8      	blx	r9
  4029d2:	42b0      	cmp	r0, r6
  4029d4:	d8f2      	bhi.n	4029bc <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART1));
		uart_write(UART1,in[i]);
	}
}
  4029d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4029da:	bf00      	nop
  4029dc:	0040254d 	.word	0x0040254d
  4029e0:	400e0a00 	.word	0x400e0a00
  4029e4:	00403041 	.word	0x00403041
  4029e8:	00402559 	.word	0x00402559

004029ec <Task1>:
	return 0;
	/* Insert application code here, after the board has been initialized. */
}


void Task1 (void* pvParameters) {
  4029ec:	b538      	push	{r3, r4, r5, lr}
	int tg = 1;
	
	pio_clear(LED1);
  4029ee:	4d08      	ldr	r5, [pc, #32]	; (402a10 <Task1+0x24>)
  4029f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4029f4:	4628      	mov	r0, r5
  4029f6:	4c07      	ldr	r4, [pc, #28]	; (402a14 <Task1+0x28>)
  4029f8:	47a0      	blx	r4
	pio_clear(LED2);
  4029fa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4029fe:	4628      	mov	r0, r5
  402a00:	47a0      	blx	r4
			tg = !tg;
			//sendDebugString("Fresh\n");
		}
		
		
		vTaskDelay(1000);
  402a02:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  402a06:	4c04      	ldr	r4, [pc, #16]	; (402a18 <Task1+0x2c>)
  402a08:	4628      	mov	r0, r5
  402a0a:	47a0      	blx	r4
  402a0c:	e7fc      	b.n	402a08 <Task1+0x1c>
  402a0e:	bf00      	nop
  402a10:	400e1400 	.word	0x400e1400
  402a14:	00402249 	.word	0x00402249
  402a18:	0040171d 	.word	0x0040171d

00402a1c <ButtonTask>:
	}

}

void ButtonTask(void* pvParameters){
  402a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	
	int tg1 = 1;
	int tg2 = 1;
	int tgd = 1;
	
	PIOAsem = xSemaphoreCreateBinary();
  402a20:	2203      	movs	r2, #3
  402a22:	2100      	movs	r1, #0
  402a24:	2001      	movs	r0, #1
  402a26:	4ba6      	ldr	r3, [pc, #664]	; (402cc0 <ButtonTask+0x2a4>)
  402a28:	4798      	blx	r3
  402a2a:	4ba6      	ldr	r3, [pc, #664]	; (402cc4 <ButtonTask+0x2a8>)
  402a2c:	6018      	str	r0, [r3, #0]

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
	int tg2 = 1;
	int tgd = 1;
  402a2e:	f04f 0901 	mov.w	r9, #1
}

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
	int tg2 = 1;
  402a32:	46c8      	mov	r8, r9

}

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
  402a34:	464f      	mov	r7, r9
	
	PIOAsem = xSemaphoreCreateBinary();
	
	for(;;){
		
		if( PIOAsem !=NULL){
  402a36:	461d      	mov	r5, r3
			
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){
  402a38:	4ca3      	ldr	r4, [pc, #652]	; (402cc8 <ButtonTask+0x2ac>)
					if(tg1){
						pio_set(LED1);
						tg1 = !tg1;
					}
					else {
						pio_clear(LED1);
  402a3a:	4ea4      	ldr	r6, [pc, #656]	; (402ccc <ButtonTask+0x2b0>)
	
	PIOAsem = xSemaphoreCreateBinary();
	
	for(;;){
		
		if( PIOAsem !=NULL){
  402a3c:	6828      	ldr	r0, [r5, #0]
  402a3e:	2800      	cmp	r0, #0
  402a40:	d0fd      	beq.n	402a3e <ButtonTask+0x22>
			
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){
  402a42:	2300      	movs	r3, #0
  402a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402a48:	4619      	mov	r1, r3
  402a4a:	47a0      	blx	r4
  402a4c:	2801      	cmp	r0, #1
  402a4e:	d1f5      	bne.n	402a3c <ButtonTask+0x20>
				
				switch(ButtonStatus){
  402a50:	4b9f      	ldr	r3, [pc, #636]	; (402cd0 <ButtonTask+0x2b4>)
  402a52:	681b      	ldr	r3, [r3, #0]
  402a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
  402a58:	d068      	beq.n	402b2c <ButtonTask+0x110>
  402a5a:	d812      	bhi.n	402a82 <ButtonTask+0x66>
  402a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  402a60:	f000 8088 	beq.w	402b74 <ButtonTask+0x158>
  402a64:	d806      	bhi.n	402a74 <ButtonTask+0x58>
  402a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  402a6a:	d025      	beq.n	402ab8 <ButtonTask+0x9c>
  402a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  402a70:	d038      	beq.n	402ae4 <ButtonTask+0xc8>
  402a72:	e111      	b.n	402c98 <ButtonTask+0x27c>
  402a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  402a78:	d06a      	beq.n	402b50 <ButtonTask+0x134>
  402a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402a7e:	d043      	beq.n	402b08 <ButtonTask+0xec>
  402a80:	e10a      	b.n	402c98 <ButtonTask+0x27c>
  402a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  402a86:	f000 80c5 	beq.w	402c14 <ButtonTask+0x1f8>
  402a8a:	d808      	bhi.n	402a9e <ButtonTask+0x82>
  402a8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  402a90:	f000 8082 	beq.w	402b98 <ButtonTask+0x17c>
  402a94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
  402a98:	f000 80d2 	beq.w	402c40 <ButtonTask+0x224>
  402a9c:	e0fc      	b.n	402c98 <ButtonTask+0x27c>
  402a9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
  402aa2:	f000 80a1 	beq.w	402be8 <ButtonTask+0x1cc>
  402aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  402aaa:	f000 80df 	beq.w	402c6c <ButtonTask+0x250>
  402aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
  402ab2:	f040 80f1 	bne.w	402c98 <ButtonTask+0x27c>
  402ab6:	e081      	b.n	402bbc <ButtonTask+0x1a0>
					
					case(Push1) :
					sendDebugString("Push Switch 1\n");
  402ab8:	4886      	ldr	r0, [pc, #536]	; (402cd4 <ButtonTask+0x2b8>)
  402aba:	4b87      	ldr	r3, [pc, #540]	; (402cd8 <ButtonTask+0x2bc>)
  402abc:	4798      	blx	r3
					if(tg2){
  402abe:	f1b8 0f00 	cmp.w	r8, #0
  402ac2:	d007      	beq.n	402ad4 <ButtonTask+0xb8>
						pio_set(LED2);
  402ac4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402ac8:	4630      	mov	r0, r6
  402aca:	4b84      	ldr	r3, [pc, #528]	; (402cdc <ButtonTask+0x2c0>)
  402acc:	4798      	blx	r3
						tg2 = !tg2;
  402ace:	f04f 0800 	mov.w	r8, #0
  402ad2:	e7b3      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED2);
  402ad4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402ad8:	4630      	mov	r0, r6
  402ada:	4b81      	ldr	r3, [pc, #516]	; (402ce0 <ButtonTask+0x2c4>)
  402adc:	4798      	blx	r3
						tg2 = !tg2;
  402ade:	f04f 0801 	mov.w	r8, #1
  402ae2:	e7ab      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(Push2) :
					sendDebugString("Push Switch 2\n");
  402ae4:	487f      	ldr	r0, [pc, #508]	; (402ce4 <ButtonTask+0x2c8>)
  402ae6:	4b7c      	ldr	r3, [pc, #496]	; (402cd8 <ButtonTask+0x2bc>)
  402ae8:	4798      	blx	r3
					if(tg1){
  402aea:	b137      	cbz	r7, 402afa <ButtonTask+0xde>
						pio_set(LED1);
  402aec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402af0:	4630      	mov	r0, r6
  402af2:	4b7a      	ldr	r3, [pc, #488]	; (402cdc <ButtonTask+0x2c0>)
  402af4:	4798      	blx	r3
						tg1 = !tg1;
  402af6:	2700      	movs	r7, #0
  402af8:	e7a0      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED1);
  402afa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402afe:	4630      	mov	r0, r6
  402b00:	4b77      	ldr	r3, [pc, #476]	; (402ce0 <ButtonTask+0x2c4>)
  402b02:	4798      	blx	r3
						tg1 = !tg1;
  402b04:	2701      	movs	r7, #1
  402b06:	e799      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW4Left) :
					sendDebugString("NAV4 Left\n");
  402b08:	4877      	ldr	r0, [pc, #476]	; (402ce8 <ButtonTask+0x2cc>)
  402b0a:	4b73      	ldr	r3, [pc, #460]	; (402cd8 <ButtonTask+0x2bc>)
  402b0c:	4798      	blx	r3
					if(tg1){
  402b0e:	b137      	cbz	r7, 402b1e <ButtonTask+0x102>
						pio_set(LED1);
  402b10:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b14:	4630      	mov	r0, r6
  402b16:	4b71      	ldr	r3, [pc, #452]	; (402cdc <ButtonTask+0x2c0>)
  402b18:	4798      	blx	r3
						tg1 = !tg1;
  402b1a:	2700      	movs	r7, #0
  402b1c:	e78e      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED1);
  402b1e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b22:	4630      	mov	r0, r6
  402b24:	4b6e      	ldr	r3, [pc, #440]	; (402ce0 <ButtonTask+0x2c4>)
  402b26:	4798      	blx	r3
						tg1 = !tg1;
  402b28:	2701      	movs	r7, #1
  402b2a:	e787      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW4Right) :
					sendDebugString("NAV4 Right\n");
  402b2c:	486f      	ldr	r0, [pc, #444]	; (402cec <ButtonTask+0x2d0>)
  402b2e:	4b6a      	ldr	r3, [pc, #424]	; (402cd8 <ButtonTask+0x2bc>)
  402b30:	4798      	blx	r3
					if(tg1){
  402b32:	b137      	cbz	r7, 402b42 <ButtonTask+0x126>
						pio_set(LED1);
  402b34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b38:	4630      	mov	r0, r6
  402b3a:	4b68      	ldr	r3, [pc, #416]	; (402cdc <ButtonTask+0x2c0>)
  402b3c:	4798      	blx	r3
						tg1 = !tg1;
  402b3e:	2700      	movs	r7, #0
  402b40:	e77c      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED1);
  402b42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b46:	4630      	mov	r0, r6
  402b48:	4b65      	ldr	r3, [pc, #404]	; (402ce0 <ButtonTask+0x2c4>)
  402b4a:	4798      	blx	r3
						tg1 = !tg1;
  402b4c:	2701      	movs	r7, #1
  402b4e:	e775      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW4Up) :
					sendDebugString("NAV4 Up\n");
  402b50:	4867      	ldr	r0, [pc, #412]	; (402cf0 <ButtonTask+0x2d4>)
  402b52:	4b61      	ldr	r3, [pc, #388]	; (402cd8 <ButtonTask+0x2bc>)
  402b54:	4798      	blx	r3
					if(tg1){
  402b56:	b137      	cbz	r7, 402b66 <ButtonTask+0x14a>
						pio_set(LED1);
  402b58:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b5c:	4630      	mov	r0, r6
  402b5e:	4b5f      	ldr	r3, [pc, #380]	; (402cdc <ButtonTask+0x2c0>)
  402b60:	4798      	blx	r3
						tg1 = !tg1;
  402b62:	2700      	movs	r7, #0
  402b64:	e76a      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED1);
  402b66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b6a:	4630      	mov	r0, r6
  402b6c:	4b5c      	ldr	r3, [pc, #368]	; (402ce0 <ButtonTask+0x2c4>)
  402b6e:	4798      	blx	r3
						tg1 = !tg1;
  402b70:	2701      	movs	r7, #1
  402b72:	e763      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW4Down) :
					sendDebugString("NAV4 Down\n");
  402b74:	485f      	ldr	r0, [pc, #380]	; (402cf4 <ButtonTask+0x2d8>)
  402b76:	4b58      	ldr	r3, [pc, #352]	; (402cd8 <ButtonTask+0x2bc>)
  402b78:	4798      	blx	r3
					if(tg1){
  402b7a:	b137      	cbz	r7, 402b8a <ButtonTask+0x16e>
						pio_set(LED1);
  402b7c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b80:	4630      	mov	r0, r6
  402b82:	4b56      	ldr	r3, [pc, #344]	; (402cdc <ButtonTask+0x2c0>)
  402b84:	4798      	blx	r3
						tg1 = !tg1;
  402b86:	2700      	movs	r7, #0
  402b88:	e758      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED1);
  402b8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402b8e:	4630      	mov	r0, r6
  402b90:	4b53      	ldr	r3, [pc, #332]	; (402ce0 <ButtonTask+0x2c4>)
  402b92:	4798      	blx	r3
						tg1 = !tg1;
  402b94:	2701      	movs	r7, #1
  402b96:	e751      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW4Push) :
					sendDebugString("NAV4 Push\n");
  402b98:	4857      	ldr	r0, [pc, #348]	; (402cf8 <ButtonTask+0x2dc>)
  402b9a:	4b4f      	ldr	r3, [pc, #316]	; (402cd8 <ButtonTask+0x2bc>)
  402b9c:	4798      	blx	r3
					if(tg1){
  402b9e:	b137      	cbz	r7, 402bae <ButtonTask+0x192>
						pio_set(LED1);
  402ba0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402ba4:	4630      	mov	r0, r6
  402ba6:	4b4d      	ldr	r3, [pc, #308]	; (402cdc <ButtonTask+0x2c0>)
  402ba8:	4798      	blx	r3
						tg1 = !tg1;
  402baa:	2700      	movs	r7, #0
  402bac:	e746      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED1);
  402bae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402bb2:	4630      	mov	r0, r6
  402bb4:	4b4a      	ldr	r3, [pc, #296]	; (402ce0 <ButtonTask+0x2c4>)
  402bb6:	4798      	blx	r3
						tg1 = !tg1;
  402bb8:	2701      	movs	r7, #1
  402bba:	e73f      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW5Left) :
					sendDebugString("NAV5 Left\n");
  402bbc:	484f      	ldr	r0, [pc, #316]	; (402cfc <ButtonTask+0x2e0>)
  402bbe:	4b46      	ldr	r3, [pc, #280]	; (402cd8 <ButtonTask+0x2bc>)
  402bc0:	4798      	blx	r3
					if(tg2){
  402bc2:	f1b8 0f00 	cmp.w	r8, #0
  402bc6:	d007      	beq.n	402bd8 <ButtonTask+0x1bc>
						pio_set(LED2);
  402bc8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bcc:	4630      	mov	r0, r6
  402bce:	4b43      	ldr	r3, [pc, #268]	; (402cdc <ButtonTask+0x2c0>)
  402bd0:	4798      	blx	r3
						tg2 = !tg2;
  402bd2:	f04f 0800 	mov.w	r8, #0
  402bd6:	e731      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED2);
  402bd8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bdc:	4630      	mov	r0, r6
  402bde:	4b40      	ldr	r3, [pc, #256]	; (402ce0 <ButtonTask+0x2c4>)
  402be0:	4798      	blx	r3
						tg2 = !tg2;
  402be2:	f04f 0801 	mov.w	r8, #1
  402be6:	e729      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW5Right) :
					sendDebugString("NAV5 Right\n");
  402be8:	4845      	ldr	r0, [pc, #276]	; (402d00 <ButtonTask+0x2e4>)
  402bea:	4b3b      	ldr	r3, [pc, #236]	; (402cd8 <ButtonTask+0x2bc>)
  402bec:	4798      	blx	r3
					if(tg2){
  402bee:	f1b8 0f00 	cmp.w	r8, #0
  402bf2:	d007      	beq.n	402c04 <ButtonTask+0x1e8>
						pio_set(LED2);
  402bf4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402bf8:	4630      	mov	r0, r6
  402bfa:	4b38      	ldr	r3, [pc, #224]	; (402cdc <ButtonTask+0x2c0>)
  402bfc:	4798      	blx	r3
						tg2 = !tg2;
  402bfe:	f04f 0800 	mov.w	r8, #0
  402c02:	e71b      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED2);
  402c04:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c08:	4630      	mov	r0, r6
  402c0a:	4b35      	ldr	r3, [pc, #212]	; (402ce0 <ButtonTask+0x2c4>)
  402c0c:	4798      	blx	r3
						tg2 = !tg2;
  402c0e:	f04f 0801 	mov.w	r8, #1
  402c12:	e713      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW5Up) :
					sendDebugString("NAV5 Up\n");
  402c14:	483b      	ldr	r0, [pc, #236]	; (402d04 <ButtonTask+0x2e8>)
  402c16:	4b30      	ldr	r3, [pc, #192]	; (402cd8 <ButtonTask+0x2bc>)
  402c18:	4798      	blx	r3
					if(tg2){
  402c1a:	f1b8 0f00 	cmp.w	r8, #0
  402c1e:	d007      	beq.n	402c30 <ButtonTask+0x214>
						pio_set(LED2);
  402c20:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c24:	4630      	mov	r0, r6
  402c26:	4b2d      	ldr	r3, [pc, #180]	; (402cdc <ButtonTask+0x2c0>)
  402c28:	4798      	blx	r3
						tg2 = !tg2;
  402c2a:	f04f 0800 	mov.w	r8, #0
  402c2e:	e705      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED2);
  402c30:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c34:	4630      	mov	r0, r6
  402c36:	4b2a      	ldr	r3, [pc, #168]	; (402ce0 <ButtonTask+0x2c4>)
  402c38:	4798      	blx	r3
						tg2 = !tg2;
  402c3a:	f04f 0801 	mov.w	r8, #1
  402c3e:	e6fd      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW5Down) :
					sendDebugString("NAV5 Down\n");
  402c40:	4831      	ldr	r0, [pc, #196]	; (402d08 <ButtonTask+0x2ec>)
  402c42:	4b25      	ldr	r3, [pc, #148]	; (402cd8 <ButtonTask+0x2bc>)
  402c44:	4798      	blx	r3
					if(tg2){
  402c46:	f1b8 0f00 	cmp.w	r8, #0
  402c4a:	d007      	beq.n	402c5c <ButtonTask+0x240>
						pio_set(LED2);
  402c4c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c50:	4630      	mov	r0, r6
  402c52:	4b22      	ldr	r3, [pc, #136]	; (402cdc <ButtonTask+0x2c0>)
  402c54:	4798      	blx	r3
						tg2 = !tg2;
  402c56:	f04f 0800 	mov.w	r8, #0
  402c5a:	e6ef      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED2);
  402c5c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c60:	4630      	mov	r0, r6
  402c62:	4b1f      	ldr	r3, [pc, #124]	; (402ce0 <ButtonTask+0x2c4>)
  402c64:	4798      	blx	r3
						tg2 = !tg2;
  402c66:	f04f 0801 	mov.w	r8, #1
  402c6a:	e6e7      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					case(SW5Push) :
					sendDebugString("NAV5 Push\n");
  402c6c:	4827      	ldr	r0, [pc, #156]	; (402d0c <ButtonTask+0x2f0>)
  402c6e:	4b1a      	ldr	r3, [pc, #104]	; (402cd8 <ButtonTask+0x2bc>)
  402c70:	4798      	blx	r3
					if(tg2){
  402c72:	f1b8 0f00 	cmp.w	r8, #0
  402c76:	d007      	beq.n	402c88 <ButtonTask+0x26c>
						pio_set(LED2);
  402c78:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c7c:	4630      	mov	r0, r6
  402c7e:	4b17      	ldr	r3, [pc, #92]	; (402cdc <ButtonTask+0x2c0>)
  402c80:	4798      	blx	r3
						tg2 = !tg2;
  402c82:	f04f 0800 	mov.w	r8, #0
  402c86:	e6d9      	b.n	402a3c <ButtonTask+0x20>
					}
					else {
						pio_clear(LED2);
  402c88:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402c8c:	4630      	mov	r0, r6
  402c8e:	4b14      	ldr	r3, [pc, #80]	; (402ce0 <ButtonTask+0x2c4>)
  402c90:	4798      	blx	r3
						tg2 = !tg2;
  402c92:	f04f 0801 	mov.w	r8, #1
  402c96:	e6d1      	b.n	402a3c <ButtonTask+0x20>
					}
					break;
					
					default :
					sendDebugString("ANALOGUE BITCH!\n");
  402c98:	481d      	ldr	r0, [pc, #116]	; (402d10 <ButtonTask+0x2f4>)
  402c9a:	4b0f      	ldr	r3, [pc, #60]	; (402cd8 <ButtonTask+0x2bc>)
  402c9c:	4798      	blx	r3
					if(tgd){
  402c9e:	f1b9 0f00 	cmp.w	r9, #0
  402ca2:	d037      	beq.n	402d14 <ButtonTask+0x2f8>
						pio_set(LED1);
  402ca4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402ca8:	4630      	mov	r0, r6
  402caa:	f8df 9030 	ldr.w	r9, [pc, #48]	; 402cdc <ButtonTask+0x2c0>
  402cae:	47c8      	blx	r9
						pio_set(LED2);
  402cb0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402cb4:	4630      	mov	r0, r6
  402cb6:	47c8      	blx	r9
						tgd = !tgd;
  402cb8:	f04f 0900 	mov.w	r9, #0
  402cbc:	e6be      	b.n	402a3c <ButtonTask+0x20>
  402cbe:	bf00      	nop
  402cc0:	00400af9 	.word	0x00400af9
  402cc4:	2040bef0 	.word	0x2040bef0
  402cc8:	00400f31 	.word	0x00400f31
  402ccc:	400e1400 	.word	0x400e1400
  402cd0:	2040bfb4 	.word	0x2040bfb4
  402cd4:	00403418 	.word	0x00403418
  402cd8:	004029a5 	.word	0x004029a5
  402cdc:	00402245 	.word	0x00402245
  402ce0:	00402249 	.word	0x00402249
  402ce4:	00403428 	.word	0x00403428
  402ce8:	00403438 	.word	0x00403438
  402cec:	00403444 	.word	0x00403444
  402cf0:	00403450 	.word	0x00403450
  402cf4:	0040345c 	.word	0x0040345c
  402cf8:	00403468 	.word	0x00403468
  402cfc:	00403474 	.word	0x00403474
  402d00:	00403480 	.word	0x00403480
  402d04:	0040348c 	.word	0x0040348c
  402d08:	00403498 	.word	0x00403498
  402d0c:	004034a4 	.word	0x004034a4
  402d10:	004034b0 	.word	0x004034b0
					}
					else {
						pio_clear(LED1);
  402d14:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402d18:	4630      	mov	r0, r6
  402d1a:	f8df 9014 	ldr.w	r9, [pc, #20]	; 402d30 <ButtonTask+0x314>
  402d1e:	47c8      	blx	r9
						pio_clear(LED2);
  402d20:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402d24:	4630      	mov	r0, r6
  402d26:	47c8      	blx	r9
						tgd = !tgd;
  402d28:	f04f 0901 	mov.w	r9, #1
  402d2c:	e686      	b.n	402a3c <ButtonTask+0x20>
  402d2e:	bf00      	nop
  402d30:	00402249 	.word	0x00402249

00402d34 <main>:

uint32_t ButtonStatus;



int main (void){
  402d34:	b570      	push	{r4, r5, r6, lr}
  402d36:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  402d38:	4b14      	ldr	r3, [pc, #80]	; (402d8c <main+0x58>)
  402d3a:	4798      	blx	r3
	xTaskCreate(Task1,"TASK1",200,NULL,2,NULL);
  402d3c:	2400      	movs	r4, #0
  402d3e:	9403      	str	r4, [sp, #12]
  402d40:	9402      	str	r4, [sp, #8]
  402d42:	9401      	str	r4, [sp, #4]
  402d44:	2302      	movs	r3, #2
  402d46:	9300      	str	r3, [sp, #0]
  402d48:	4623      	mov	r3, r4
  402d4a:	22c8      	movs	r2, #200	; 0xc8
  402d4c:	4910      	ldr	r1, [pc, #64]	; (402d90 <main+0x5c>)
  402d4e:	4811      	ldr	r0, [pc, #68]	; (402d94 <main+0x60>)
  402d50:	4d11      	ldr	r5, [pc, #68]	; (402d98 <main+0x64>)
  402d52:	47a8      	blx	r5
	xTaskCreate(ButtonTask,"BUTTONTASK",200,NULL,1,NULL);
  402d54:	9403      	str	r4, [sp, #12]
  402d56:	9402      	str	r4, [sp, #8]
  402d58:	9401      	str	r4, [sp, #4]
  402d5a:	2301      	movs	r3, #1
  402d5c:	9300      	str	r3, [sp, #0]
  402d5e:	4623      	mov	r3, r4
  402d60:	22c8      	movs	r2, #200	; 0xc8
  402d62:	490e      	ldr	r1, [pc, #56]	; (402d9c <main+0x68>)
  402d64:	480e      	ldr	r0, [pc, #56]	; (402da0 <main+0x6c>)
  402d66:	47a8      	blx	r5
	pio_set(LED1);
  402d68:	4e0e      	ldr	r6, [pc, #56]	; (402da4 <main+0x70>)
  402d6a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402d6e:	4630      	mov	r0, r6
  402d70:	4d0d      	ldr	r5, [pc, #52]	; (402da8 <main+0x74>)
  402d72:	47a8      	blx	r5
	pio_set(LED2);
  402d74:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402d78:	4630      	mov	r0, r6
  402d7a:	47a8      	blx	r5
	
	sendDebugString("Lights on\n Hi Shovel Lord\n");
  402d7c:	480b      	ldr	r0, [pc, #44]	; (402dac <main+0x78>)
  402d7e:	4b0c      	ldr	r3, [pc, #48]	; (402db0 <main+0x7c>)
  402d80:	4798      	blx	r3
	vTaskStartScheduler();
  402d82:	4b0c      	ldr	r3, [pc, #48]	; (402db4 <main+0x80>)
  402d84:	4798      	blx	r3
	
	
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  402d86:	4620      	mov	r0, r4
  402d88:	b004      	add	sp, #16
  402d8a:	bd70      	pop	{r4, r5, r6, pc}
  402d8c:	0040256d 	.word	0x0040256d
  402d90:	004034c4 	.word	0x004034c4
  402d94:	004029ed 	.word	0x004029ed
  402d98:	004011fd 	.word	0x004011fd
  402d9c:	004034cc 	.word	0x004034cc
  402da0:	00402a1d 	.word	0x00402a1d
  402da4:	400e1400 	.word	0x400e1400
  402da8:	00402245 	.word	0x00402245
  402dac:	004034d8 	.word	0x004034d8
  402db0:	004029a5 	.word	0x004029a5
  402db4:	00401425 	.word	0x00401425

00402db8 <PIOA_Handler>:
CLIbuf[CLIbufIndex] = temp;
CLIbufIndex++;
if(temp = "\n") xSemaphoreGiveFromISR(UARTsem,NULL);
}*/

void PIOA_Handler (void) {
  402db8:	b538      	push	{r3, r4, r5, lr}
	
	ButtonStatus = pio_get_interrupt_status(PIOA);
  402dba:	4d09      	ldr	r5, [pc, #36]	; (402de0 <PIOA_Handler+0x28>)
  402dbc:	4628      	mov	r0, r5
  402dbe:	4b09      	ldr	r3, [pc, #36]	; (402de4 <PIOA_Handler+0x2c>)
  402dc0:	4798      	blx	r3
  402dc2:	4c09      	ldr	r4, [pc, #36]	; (402de8 <PIOA_Handler+0x30>)
  402dc4:	6020      	str	r0, [r4, #0]
	ButtonStatus &= pio_get_interrupt_mask(PIOA);
  402dc6:	4628      	mov	r0, r5
  402dc8:	4b08      	ldr	r3, [pc, #32]	; (402dec <PIOA_Handler+0x34>)
  402dca:	4798      	blx	r3
  402dcc:	6823      	ldr	r3, [r4, #0]
  402dce:	4018      	ands	r0, r3
  402dd0:	6020      	str	r0, [r4, #0]
	xSemaphoreGiveFromISR(PIOAsem,NULL);
  402dd2:	2100      	movs	r1, #0
  402dd4:	4b06      	ldr	r3, [pc, #24]	; (402df0 <PIOA_Handler+0x38>)
  402dd6:	6818      	ldr	r0, [r3, #0]
  402dd8:	4b06      	ldr	r3, [pc, #24]	; (402df4 <PIOA_Handler+0x3c>)
  402dda:	4798      	blx	r3
  402ddc:	bd38      	pop	{r3, r4, r5, pc}
  402dde:	bf00      	nop
  402de0:	400e0e00 	.word	0x400e0e00
  402de4:	0040237d 	.word	0x0040237d
  402de8:	2040bfb4 	.word	0x2040bfb4
  402dec:	00402381 	.word	0x00402381
  402df0:	2040bef0 	.word	0x2040bef0
  402df4:	00400e51 	.word	0x00400e51

00402df8 <__libc_init_array>:
  402df8:	b570      	push	{r4, r5, r6, lr}
  402dfa:	4e0f      	ldr	r6, [pc, #60]	; (402e38 <__libc_init_array+0x40>)
  402dfc:	4d0f      	ldr	r5, [pc, #60]	; (402e3c <__libc_init_array+0x44>)
  402dfe:	1b76      	subs	r6, r6, r5
  402e00:	10b6      	asrs	r6, r6, #2
  402e02:	bf18      	it	ne
  402e04:	2400      	movne	r4, #0
  402e06:	d005      	beq.n	402e14 <__libc_init_array+0x1c>
  402e08:	3401      	adds	r4, #1
  402e0a:	f855 3b04 	ldr.w	r3, [r5], #4
  402e0e:	4798      	blx	r3
  402e10:	42a6      	cmp	r6, r4
  402e12:	d1f9      	bne.n	402e08 <__libc_init_array+0x10>
  402e14:	4e0a      	ldr	r6, [pc, #40]	; (402e40 <__libc_init_array+0x48>)
  402e16:	4d0b      	ldr	r5, [pc, #44]	; (402e44 <__libc_init_array+0x4c>)
  402e18:	1b76      	subs	r6, r6, r5
  402e1a:	f000 fb6f 	bl	4034fc <_init>
  402e1e:	10b6      	asrs	r6, r6, #2
  402e20:	bf18      	it	ne
  402e22:	2400      	movne	r4, #0
  402e24:	d006      	beq.n	402e34 <__libc_init_array+0x3c>
  402e26:	3401      	adds	r4, #1
  402e28:	f855 3b04 	ldr.w	r3, [r5], #4
  402e2c:	4798      	blx	r3
  402e2e:	42a6      	cmp	r6, r4
  402e30:	d1f9      	bne.n	402e26 <__libc_init_array+0x2e>
  402e32:	bd70      	pop	{r4, r5, r6, pc}
  402e34:	bd70      	pop	{r4, r5, r6, pc}
  402e36:	bf00      	nop
  402e38:	00403508 	.word	0x00403508
  402e3c:	00403508 	.word	0x00403508
  402e40:	00403510 	.word	0x00403510
  402e44:	00403508 	.word	0x00403508

00402e48 <memcpy>:
  402e48:	4684      	mov	ip, r0
  402e4a:	ea41 0300 	orr.w	r3, r1, r0
  402e4e:	f013 0303 	ands.w	r3, r3, #3
  402e52:	d16d      	bne.n	402f30 <memcpy+0xe8>
  402e54:	3a40      	subs	r2, #64	; 0x40
  402e56:	d341      	bcc.n	402edc <memcpy+0x94>
  402e58:	f851 3b04 	ldr.w	r3, [r1], #4
  402e5c:	f840 3b04 	str.w	r3, [r0], #4
  402e60:	f851 3b04 	ldr.w	r3, [r1], #4
  402e64:	f840 3b04 	str.w	r3, [r0], #4
  402e68:	f851 3b04 	ldr.w	r3, [r1], #4
  402e6c:	f840 3b04 	str.w	r3, [r0], #4
  402e70:	f851 3b04 	ldr.w	r3, [r1], #4
  402e74:	f840 3b04 	str.w	r3, [r0], #4
  402e78:	f851 3b04 	ldr.w	r3, [r1], #4
  402e7c:	f840 3b04 	str.w	r3, [r0], #4
  402e80:	f851 3b04 	ldr.w	r3, [r1], #4
  402e84:	f840 3b04 	str.w	r3, [r0], #4
  402e88:	f851 3b04 	ldr.w	r3, [r1], #4
  402e8c:	f840 3b04 	str.w	r3, [r0], #4
  402e90:	f851 3b04 	ldr.w	r3, [r1], #4
  402e94:	f840 3b04 	str.w	r3, [r0], #4
  402e98:	f851 3b04 	ldr.w	r3, [r1], #4
  402e9c:	f840 3b04 	str.w	r3, [r0], #4
  402ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ea4:	f840 3b04 	str.w	r3, [r0], #4
  402ea8:	f851 3b04 	ldr.w	r3, [r1], #4
  402eac:	f840 3b04 	str.w	r3, [r0], #4
  402eb0:	f851 3b04 	ldr.w	r3, [r1], #4
  402eb4:	f840 3b04 	str.w	r3, [r0], #4
  402eb8:	f851 3b04 	ldr.w	r3, [r1], #4
  402ebc:	f840 3b04 	str.w	r3, [r0], #4
  402ec0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ec4:	f840 3b04 	str.w	r3, [r0], #4
  402ec8:	f851 3b04 	ldr.w	r3, [r1], #4
  402ecc:	f840 3b04 	str.w	r3, [r0], #4
  402ed0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ed4:	f840 3b04 	str.w	r3, [r0], #4
  402ed8:	3a40      	subs	r2, #64	; 0x40
  402eda:	d2bd      	bcs.n	402e58 <memcpy+0x10>
  402edc:	3230      	adds	r2, #48	; 0x30
  402ede:	d311      	bcc.n	402f04 <memcpy+0xbc>
  402ee0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ee4:	f840 3b04 	str.w	r3, [r0], #4
  402ee8:	f851 3b04 	ldr.w	r3, [r1], #4
  402eec:	f840 3b04 	str.w	r3, [r0], #4
  402ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  402ef4:	f840 3b04 	str.w	r3, [r0], #4
  402ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  402efc:	f840 3b04 	str.w	r3, [r0], #4
  402f00:	3a10      	subs	r2, #16
  402f02:	d2ed      	bcs.n	402ee0 <memcpy+0x98>
  402f04:	320c      	adds	r2, #12
  402f06:	d305      	bcc.n	402f14 <memcpy+0xcc>
  402f08:	f851 3b04 	ldr.w	r3, [r1], #4
  402f0c:	f840 3b04 	str.w	r3, [r0], #4
  402f10:	3a04      	subs	r2, #4
  402f12:	d2f9      	bcs.n	402f08 <memcpy+0xc0>
  402f14:	3204      	adds	r2, #4
  402f16:	d008      	beq.n	402f2a <memcpy+0xe2>
  402f18:	07d2      	lsls	r2, r2, #31
  402f1a:	bf1c      	itt	ne
  402f1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402f20:	f800 3b01 	strbne.w	r3, [r0], #1
  402f24:	d301      	bcc.n	402f2a <memcpy+0xe2>
  402f26:	880b      	ldrh	r3, [r1, #0]
  402f28:	8003      	strh	r3, [r0, #0]
  402f2a:	4660      	mov	r0, ip
  402f2c:	4770      	bx	lr
  402f2e:	bf00      	nop
  402f30:	2a08      	cmp	r2, #8
  402f32:	d313      	bcc.n	402f5c <memcpy+0x114>
  402f34:	078b      	lsls	r3, r1, #30
  402f36:	d08d      	beq.n	402e54 <memcpy+0xc>
  402f38:	f010 0303 	ands.w	r3, r0, #3
  402f3c:	d08a      	beq.n	402e54 <memcpy+0xc>
  402f3e:	f1c3 0304 	rsb	r3, r3, #4
  402f42:	1ad2      	subs	r2, r2, r3
  402f44:	07db      	lsls	r3, r3, #31
  402f46:	bf1c      	itt	ne
  402f48:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402f4c:	f800 3b01 	strbne.w	r3, [r0], #1
  402f50:	d380      	bcc.n	402e54 <memcpy+0xc>
  402f52:	f831 3b02 	ldrh.w	r3, [r1], #2
  402f56:	f820 3b02 	strh.w	r3, [r0], #2
  402f5a:	e77b      	b.n	402e54 <memcpy+0xc>
  402f5c:	3a04      	subs	r2, #4
  402f5e:	d3d9      	bcc.n	402f14 <memcpy+0xcc>
  402f60:	3a01      	subs	r2, #1
  402f62:	f811 3b01 	ldrb.w	r3, [r1], #1
  402f66:	f800 3b01 	strb.w	r3, [r0], #1
  402f6a:	d2f9      	bcs.n	402f60 <memcpy+0x118>
  402f6c:	780b      	ldrb	r3, [r1, #0]
  402f6e:	7003      	strb	r3, [r0, #0]
  402f70:	784b      	ldrb	r3, [r1, #1]
  402f72:	7043      	strb	r3, [r0, #1]
  402f74:	788b      	ldrb	r3, [r1, #2]
  402f76:	7083      	strb	r3, [r0, #2]
  402f78:	4660      	mov	r0, ip
  402f7a:	4770      	bx	lr

00402f7c <memset>:
  402f7c:	b470      	push	{r4, r5, r6}
  402f7e:	0784      	lsls	r4, r0, #30
  402f80:	d046      	beq.n	403010 <memset+0x94>
  402f82:	1e54      	subs	r4, r2, #1
  402f84:	2a00      	cmp	r2, #0
  402f86:	d041      	beq.n	40300c <memset+0x90>
  402f88:	b2cd      	uxtb	r5, r1
  402f8a:	4603      	mov	r3, r0
  402f8c:	e002      	b.n	402f94 <memset+0x18>
  402f8e:	1e62      	subs	r2, r4, #1
  402f90:	b3e4      	cbz	r4, 40300c <memset+0x90>
  402f92:	4614      	mov	r4, r2
  402f94:	f803 5b01 	strb.w	r5, [r3], #1
  402f98:	079a      	lsls	r2, r3, #30
  402f9a:	d1f8      	bne.n	402f8e <memset+0x12>
  402f9c:	2c03      	cmp	r4, #3
  402f9e:	d92e      	bls.n	402ffe <memset+0x82>
  402fa0:	b2cd      	uxtb	r5, r1
  402fa2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402fa6:	2c0f      	cmp	r4, #15
  402fa8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  402fac:	d919      	bls.n	402fe2 <memset+0x66>
  402fae:	f103 0210 	add.w	r2, r3, #16
  402fb2:	4626      	mov	r6, r4
  402fb4:	3e10      	subs	r6, #16
  402fb6:	2e0f      	cmp	r6, #15
  402fb8:	f842 5c10 	str.w	r5, [r2, #-16]
  402fbc:	f842 5c0c 	str.w	r5, [r2, #-12]
  402fc0:	f842 5c08 	str.w	r5, [r2, #-8]
  402fc4:	f842 5c04 	str.w	r5, [r2, #-4]
  402fc8:	f102 0210 	add.w	r2, r2, #16
  402fcc:	d8f2      	bhi.n	402fb4 <memset+0x38>
  402fce:	f1a4 0210 	sub.w	r2, r4, #16
  402fd2:	f022 020f 	bic.w	r2, r2, #15
  402fd6:	f004 040f 	and.w	r4, r4, #15
  402fda:	3210      	adds	r2, #16
  402fdc:	2c03      	cmp	r4, #3
  402fde:	4413      	add	r3, r2
  402fe0:	d90d      	bls.n	402ffe <memset+0x82>
  402fe2:	461e      	mov	r6, r3
  402fe4:	4622      	mov	r2, r4
  402fe6:	3a04      	subs	r2, #4
  402fe8:	2a03      	cmp	r2, #3
  402fea:	f846 5b04 	str.w	r5, [r6], #4
  402fee:	d8fa      	bhi.n	402fe6 <memset+0x6a>
  402ff0:	1f22      	subs	r2, r4, #4
  402ff2:	f022 0203 	bic.w	r2, r2, #3
  402ff6:	3204      	adds	r2, #4
  402ff8:	4413      	add	r3, r2
  402ffa:	f004 0403 	and.w	r4, r4, #3
  402ffe:	b12c      	cbz	r4, 40300c <memset+0x90>
  403000:	b2c9      	uxtb	r1, r1
  403002:	441c      	add	r4, r3
  403004:	f803 1b01 	strb.w	r1, [r3], #1
  403008:	42a3      	cmp	r3, r4
  40300a:	d1fb      	bne.n	403004 <memset+0x88>
  40300c:	bc70      	pop	{r4, r5, r6}
  40300e:	4770      	bx	lr
  403010:	4614      	mov	r4, r2
  403012:	4603      	mov	r3, r0
  403014:	e7c2      	b.n	402f9c <memset+0x20>
  403016:	bf00      	nop
	...

00403040 <strlen>:
  403040:	f890 f000 	pld	[r0]
  403044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403048:	f020 0107 	bic.w	r1, r0, #7
  40304c:	f06f 0c00 	mvn.w	ip, #0
  403050:	f010 0407 	ands.w	r4, r0, #7
  403054:	f891 f020 	pld	[r1, #32]
  403058:	f040 8049 	bne.w	4030ee <strlen+0xae>
  40305c:	f04f 0400 	mov.w	r4, #0
  403060:	f06f 0007 	mvn.w	r0, #7
  403064:	e9d1 2300 	ldrd	r2, r3, [r1]
  403068:	f891 f040 	pld	[r1, #64]	; 0x40
  40306c:	f100 0008 	add.w	r0, r0, #8
  403070:	fa82 f24c 	uadd8	r2, r2, ip
  403074:	faa4 f28c 	sel	r2, r4, ip
  403078:	fa83 f34c 	uadd8	r3, r3, ip
  40307c:	faa2 f38c 	sel	r3, r2, ip
  403080:	bb4b      	cbnz	r3, 4030d6 <strlen+0x96>
  403082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403086:	fa82 f24c 	uadd8	r2, r2, ip
  40308a:	f100 0008 	add.w	r0, r0, #8
  40308e:	faa4 f28c 	sel	r2, r4, ip
  403092:	fa83 f34c 	uadd8	r3, r3, ip
  403096:	faa2 f38c 	sel	r3, r2, ip
  40309a:	b9e3      	cbnz	r3, 4030d6 <strlen+0x96>
  40309c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4030a0:	fa82 f24c 	uadd8	r2, r2, ip
  4030a4:	f100 0008 	add.w	r0, r0, #8
  4030a8:	faa4 f28c 	sel	r2, r4, ip
  4030ac:	fa83 f34c 	uadd8	r3, r3, ip
  4030b0:	faa2 f38c 	sel	r3, r2, ip
  4030b4:	b97b      	cbnz	r3, 4030d6 <strlen+0x96>
  4030b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4030ba:	f101 0120 	add.w	r1, r1, #32
  4030be:	fa82 f24c 	uadd8	r2, r2, ip
  4030c2:	f100 0008 	add.w	r0, r0, #8
  4030c6:	faa4 f28c 	sel	r2, r4, ip
  4030ca:	fa83 f34c 	uadd8	r3, r3, ip
  4030ce:	faa2 f38c 	sel	r3, r2, ip
  4030d2:	2b00      	cmp	r3, #0
  4030d4:	d0c6      	beq.n	403064 <strlen+0x24>
  4030d6:	2a00      	cmp	r2, #0
  4030d8:	bf04      	itt	eq
  4030da:	3004      	addeq	r0, #4
  4030dc:	461a      	moveq	r2, r3
  4030de:	ba12      	rev	r2, r2
  4030e0:	fab2 f282 	clz	r2, r2
  4030e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4030e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4030ec:	4770      	bx	lr
  4030ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4030f2:	f004 0503 	and.w	r5, r4, #3
  4030f6:	f1c4 0000 	rsb	r0, r4, #0
  4030fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4030fe:	f014 0f04 	tst.w	r4, #4
  403102:	f891 f040 	pld	[r1, #64]	; 0x40
  403106:	fa0c f505 	lsl.w	r5, ip, r5
  40310a:	ea62 0205 	orn	r2, r2, r5
  40310e:	bf1c      	itt	ne
  403110:	ea63 0305 	ornne	r3, r3, r5
  403114:	4662      	movne	r2, ip
  403116:	f04f 0400 	mov.w	r4, #0
  40311a:	e7a9      	b.n	403070 <strlen+0x30>

0040311c <register_fini>:
  40311c:	4b02      	ldr	r3, [pc, #8]	; (403128 <register_fini+0xc>)
  40311e:	b113      	cbz	r3, 403126 <register_fini+0xa>
  403120:	4802      	ldr	r0, [pc, #8]	; (40312c <register_fini+0x10>)
  403122:	f000 b805 	b.w	403130 <atexit>
  403126:	4770      	bx	lr
  403128:	00000000 	.word	0x00000000
  40312c:	0040313d 	.word	0x0040313d

00403130 <atexit>:
  403130:	2300      	movs	r3, #0
  403132:	4601      	mov	r1, r0
  403134:	461a      	mov	r2, r3
  403136:	4618      	mov	r0, r3
  403138:	f000 b814 	b.w	403164 <__register_exitproc>

0040313c <__libc_fini_array>:
  40313c:	b538      	push	{r3, r4, r5, lr}
  40313e:	4d07      	ldr	r5, [pc, #28]	; (40315c <__libc_fini_array+0x20>)
  403140:	4c07      	ldr	r4, [pc, #28]	; (403160 <__libc_fini_array+0x24>)
  403142:	1b2c      	subs	r4, r5, r4
  403144:	10a4      	asrs	r4, r4, #2
  403146:	d005      	beq.n	403154 <__libc_fini_array+0x18>
  403148:	3c01      	subs	r4, #1
  40314a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40314e:	4798      	blx	r3
  403150:	2c00      	cmp	r4, #0
  403152:	d1f9      	bne.n	403148 <__libc_fini_array+0xc>
  403154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403158:	f000 b9da 	b.w	403510 <_fini>
  40315c:	00403520 	.word	0x00403520
  403160:	0040351c 	.word	0x0040351c

00403164 <__register_exitproc>:
  403164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403168:	4c25      	ldr	r4, [pc, #148]	; (403200 <__register_exitproc+0x9c>)
  40316a:	6825      	ldr	r5, [r4, #0]
  40316c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  403170:	4606      	mov	r6, r0
  403172:	4688      	mov	r8, r1
  403174:	4692      	mov	sl, r2
  403176:	4699      	mov	r9, r3
  403178:	b3c4      	cbz	r4, 4031ec <__register_exitproc+0x88>
  40317a:	6860      	ldr	r0, [r4, #4]
  40317c:	281f      	cmp	r0, #31
  40317e:	dc17      	bgt.n	4031b0 <__register_exitproc+0x4c>
  403180:	1c43      	adds	r3, r0, #1
  403182:	b176      	cbz	r6, 4031a2 <__register_exitproc+0x3e>
  403184:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  403188:	2201      	movs	r2, #1
  40318a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40318e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  403192:	4082      	lsls	r2, r0
  403194:	4311      	orrs	r1, r2
  403196:	2e02      	cmp	r6, #2
  403198:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  40319c:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  4031a0:	d01e      	beq.n	4031e0 <__register_exitproc+0x7c>
  4031a2:	3002      	adds	r0, #2
  4031a4:	6063      	str	r3, [r4, #4]
  4031a6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  4031aa:	2000      	movs	r0, #0
  4031ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031b0:	4b14      	ldr	r3, [pc, #80]	; (403204 <__register_exitproc+0xa0>)
  4031b2:	b303      	cbz	r3, 4031f6 <__register_exitproc+0x92>
  4031b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4031b8:	f3af 8000 	nop.w
  4031bc:	4604      	mov	r4, r0
  4031be:	b1d0      	cbz	r0, 4031f6 <__register_exitproc+0x92>
  4031c0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  4031c4:	2700      	movs	r7, #0
  4031c6:	e880 0088 	stmia.w	r0, {r3, r7}
  4031ca:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4031ce:	4638      	mov	r0, r7
  4031d0:	2301      	movs	r3, #1
  4031d2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  4031d6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  4031da:	2e00      	cmp	r6, #0
  4031dc:	d0e1      	beq.n	4031a2 <__register_exitproc+0x3e>
  4031de:	e7d1      	b.n	403184 <__register_exitproc+0x20>
  4031e0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  4031e4:	430a      	orrs	r2, r1
  4031e6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4031ea:	e7da      	b.n	4031a2 <__register_exitproc+0x3e>
  4031ec:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4031f0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4031f4:	e7c1      	b.n	40317a <__register_exitproc+0x16>
  4031f6:	f04f 30ff 	mov.w	r0, #4294967295
  4031fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4031fe:	bf00      	nop
  403200:	004034f8 	.word	0x004034f8
  403204:	00000000 	.word	0x00000000
  403208:	454c4449 	.word	0x454c4449
  40320c:	00000000 	.word	0x00000000
  403210:	09632509 	.word	0x09632509
  403214:	25097525 	.word	0x25097525
  403218:	75250975 	.word	0x75250975
  40321c:	00000a0d 	.word	0x00000a0d
  403220:	51726d54 	.word	0x51726d54
  403224:	00000000 	.word	0x00000000
  403228:	20726d54 	.word	0x20726d54
  40322c:	00637653 	.word	0x00637653
  403230:	00002580 	.word	0x00002580
  403234:	000000c0 	.word	0x000000c0
  403238:	00000800 	.word	0x00000800
  40323c:	4c4c454d 	.word	0x4c4c454d
  403240:	4f525441 	.word	0x4f525441
  403244:	3030394e 	.word	0x3030394e
  403248:	4f422030 	.word	0x4f422030
  40324c:	5320544f 	.word	0x5320544f
  403250:	45555145 	.word	0x45555145
  403254:	0a45434e 	.word	0x0a45434e
  403258:	54524155 	.word	0x54524155
  40325c:	4e4f4320 	.word	0x4e4f4320
  403260:	454c4f53 	.word	0x454c4f53
  403264:	41545320 	.word	0x41545320
  403268:	44455452 	.word	0x44455452
  40326c:	204e4f20 	.word	0x204e4f20
  403270:	54524155 	.word	0x54524155
  403274:	61420a34 	.word	0x61420a34
  403278:	61526475 	.word	0x61526475
  40327c:	203a6574 	.word	0x203a6574
  403280:	32353131 	.word	0x32353131
  403284:	420a3030 	.word	0x420a3030
  403288:	3a737469 	.word	0x3a737469
  40328c:	4e0a3820 	.word	0x4e0a3820
  403290:	7473206f 	.word	0x7473206f
  403294:	6220706f 	.word	0x6220706f
  403298:	20737469 	.word	0x20737469
  40329c:	0000000a 	.word	0x0000000a
  4032a0:	20495053 	.word	0x20495053
  4032a4:	54494e49 	.word	0x54494e49
  4032a8:	494c4149 	.word	0x494c4149
  4032ac:	4954415a 	.word	0x4954415a
  4032b0:	2d204e4f 	.word	0x2d204e4f
  4032b4:	41545320 	.word	0x41545320
  4032b8:	44455452 	.word	0x44455452
  4032bc:	0000000a 	.word	0x0000000a
  4032c0:	20495053 	.word	0x20495053
  4032c4:	54494e49 	.word	0x54494e49
  4032c8:	494c4149 	.word	0x494c4149
  4032cc:	4954415a 	.word	0x4954415a
  4032d0:	2d204e4f 	.word	0x2d204e4f
  4032d4:	4e494620 	.word	0x4e494620
  4032d8:	45485349 	.word	0x45485349
  4032dc:	00000a44 	.word	0x00000a44
  4032e0:	314d5744 	.word	0x314d5744
  4032e4:	20303030 	.word	0x20303030
  4032e8:	54494e49 	.word	0x54494e49
  4032ec:	494c4149 	.word	0x494c4149
  4032f0:	4954415a 	.word	0x4954415a
  4032f4:	2d204e4f 	.word	0x2d204e4f
  4032f8:	41545320 	.word	0x41545320
  4032fc:	44455452 	.word	0x44455452
  403300:	0000000a 	.word	0x0000000a
  403304:	314d5744 	.word	0x314d5744
  403308:	20303030 	.word	0x20303030
  40330c:	54494e49 	.word	0x54494e49
  403310:	494c4149 	.word	0x494c4149
  403314:	4954415a 	.word	0x4954415a
  403318:	2d204e4f 	.word	0x2d204e4f
  40331c:	4e494620 	.word	0x4e494620
  403320:	45485349 	.word	0x45485349
  403324:	00000a44 	.word	0x00000a44
  403328:	43544157 	.word	0x43544157
  40332c:	474f4448 	.word	0x474f4448
  403330:	494e4920 	.word	0x494e4920
  403334:	4c414954 	.word	0x4c414954
  403338:	54415a49 	.word	0x54415a49
  40333c:	204e4f49 	.word	0x204e4f49
  403340:	5453202d 	.word	0x5453202d
  403344:	45545241 	.word	0x45545241
  403348:	00000a44 	.word	0x00000a44
  40334c:	43544157 	.word	0x43544157
  403350:	474f4448 	.word	0x474f4448
  403354:	494e4920 	.word	0x494e4920
  403358:	4c414954 	.word	0x4c414954
  40335c:	54415a49 	.word	0x54415a49
  403360:	204e4f49 	.word	0x204e4f49
  403364:	4946202d 	.word	0x4946202d
  403368:	4853494e 	.word	0x4853494e
  40336c:	000a4445 	.word	0x000a4445
  403370:	424f4c47 	.word	0x424f4c47
  403374:	49204c41 	.word	0x49204c41
  403378:	49205152 	.word	0x49205152
  40337c:	4954494e 	.word	0x4954494e
  403380:	5a494c41 	.word	0x5a494c41
  403384:	4f495441 	.word	0x4f495441
  403388:	202d204e 	.word	0x202d204e
  40338c:	52415453 	.word	0x52415453
  403390:	0a444554 	.word	0x0a444554
  403394:	00000000 	.word	0x00000000
  403398:	424f4c47 	.word	0x424f4c47
  40339c:	49204c41 	.word	0x49204c41
  4033a0:	49205152 	.word	0x49205152
  4033a4:	4954494e 	.word	0x4954494e
  4033a8:	5a494c41 	.word	0x5a494c41
  4033ac:	4f495441 	.word	0x4f495441
  4033b0:	202d204e 	.word	0x202d204e
  4033b4:	494e4946 	.word	0x494e4946
  4033b8:	44454853 	.word	0x44454853
  4033bc:	0000000a 	.word	0x0000000a
  4033c0:	49524550 	.word	0x49524550
  4033c4:	52454850 	.word	0x52454850
  4033c8:	49204c41 	.word	0x49204c41
  4033cc:	49205152 	.word	0x49205152
  4033d0:	4954494e 	.word	0x4954494e
  4033d4:	5a494c41 	.word	0x5a494c41
  4033d8:	4f495441 	.word	0x4f495441
  4033dc:	202d204e 	.word	0x202d204e
  4033e0:	52415453 	.word	0x52415453
  4033e4:	0a444554 	.word	0x0a444554
  4033e8:	00000000 	.word	0x00000000
  4033ec:	49524550 	.word	0x49524550
  4033f0:	52454850 	.word	0x52454850
  4033f4:	49204c41 	.word	0x49204c41
  4033f8:	49205152 	.word	0x49205152
  4033fc:	4954494e 	.word	0x4954494e
  403400:	5a494c41 	.word	0x5a494c41
  403404:	4f495441 	.word	0x4f495441
  403408:	202d204e 	.word	0x202d204e
  40340c:	494e4946 	.word	0x494e4946
  403410:	44454853 	.word	0x44454853
  403414:	0000000a 	.word	0x0000000a
  403418:	68737550 	.word	0x68737550
  40341c:	69775320 	.word	0x69775320
  403420:	20686374 	.word	0x20686374
  403424:	00000a31 	.word	0x00000a31
  403428:	68737550 	.word	0x68737550
  40342c:	69775320 	.word	0x69775320
  403430:	20686374 	.word	0x20686374
  403434:	00000a32 	.word	0x00000a32
  403438:	3456414e 	.word	0x3456414e
  40343c:	66654c20 	.word	0x66654c20
  403440:	00000a74 	.word	0x00000a74
  403444:	3456414e 	.word	0x3456414e
  403448:	67695220 	.word	0x67695220
  40344c:	000a7468 	.word	0x000a7468
  403450:	3456414e 	.word	0x3456414e
  403454:	0a705520 	.word	0x0a705520
  403458:	00000000 	.word	0x00000000
  40345c:	3456414e 	.word	0x3456414e
  403460:	776f4420 	.word	0x776f4420
  403464:	00000a6e 	.word	0x00000a6e
  403468:	3456414e 	.word	0x3456414e
  40346c:	73755020 	.word	0x73755020
  403470:	00000a68 	.word	0x00000a68
  403474:	3556414e 	.word	0x3556414e
  403478:	66654c20 	.word	0x66654c20
  40347c:	00000a74 	.word	0x00000a74
  403480:	3556414e 	.word	0x3556414e
  403484:	67695220 	.word	0x67695220
  403488:	000a7468 	.word	0x000a7468
  40348c:	3556414e 	.word	0x3556414e
  403490:	0a705520 	.word	0x0a705520
  403494:	00000000 	.word	0x00000000
  403498:	3556414e 	.word	0x3556414e
  40349c:	776f4420 	.word	0x776f4420
  4034a0:	00000a6e 	.word	0x00000a6e
  4034a4:	3556414e 	.word	0x3556414e
  4034a8:	73755020 	.word	0x73755020
  4034ac:	00000a68 	.word	0x00000a68
  4034b0:	4c414e41 	.word	0x4c414e41
  4034b4:	4555474f 	.word	0x4555474f
  4034b8:	54494220 	.word	0x54494220
  4034bc:	0a214843 	.word	0x0a214843
  4034c0:	00000000 	.word	0x00000000
  4034c4:	4b534154 	.word	0x4b534154
  4034c8:	00000031 	.word	0x00000031
  4034cc:	54545542 	.word	0x54545542
  4034d0:	41544e4f 	.word	0x41544e4f
  4034d4:	00004b53 	.word	0x00004b53
  4034d8:	6867694c 	.word	0x6867694c
  4034dc:	6f207374 	.word	0x6f207374
  4034e0:	48200a6e 	.word	0x48200a6e
  4034e4:	68532069 	.word	0x68532069
  4034e8:	6c65766f 	.word	0x6c65766f
  4034ec:	726f4c20 	.word	0x726f4c20
  4034f0:	00000a64 	.word	0x00000a64
  4034f4:	00000043 	.word	0x00000043

004034f8 <_global_impure_ptr>:
  4034f8:	20400010                                ..@ 

004034fc <_init>:
  4034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4034fe:	bf00      	nop
  403500:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403502:	bc08      	pop	{r3}
  403504:	469e      	mov	lr, r3
  403506:	4770      	bx	lr

00403508 <__init_array_start>:
  403508:	0040311d 	.word	0x0040311d

0040350c <__frame_dummy_init_array_entry>:
  40350c:	00400165                                e.@.

00403510 <_fini>:
  403510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403512:	bf00      	nop
  403514:	bcf8      	pop	{r3, r4, r5, r6, r7}
  403516:	bc08      	pop	{r3}
  403518:	469e      	mov	lr, r3
  40351a:	4770      	bx	lr

0040351c <__fini_array_start>:
  40351c:	00400141 	.word	0x00400141
