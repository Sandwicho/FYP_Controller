
Hexapod_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002600  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20400000  00402600  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000baf8  20400430  00402a30  00020430  2**2
                  ALLOC
  3 .stack        00002000  2040bf28  0040e528  00020430  2**0
                  ALLOC
  4 .heap         00000200  2040df28  00410528  00020430  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000eacc  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002393  00000000  00000000  0002ef83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007a0e  00000000  00000000  00031316  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b58  00000000  00000000  00038d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c48  00000000  00000000  0003987c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000063a9  00000000  00000000  0003a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cb9d  00000000  00000000  0004086d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0007bcc7  00000000  00000000  0004d40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001c7c  00000000  00000000  000c90d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040df28 	.word	0x2040df28
  400004:	00401ffd 	.word	0x00401ffd
  400008:	00401ff9 	.word	0x00401ff9
  40000c:	00401ff9 	.word	0x00401ff9
  400010:	00401ff9 	.word	0x00401ff9
  400014:	00401ff9 	.word	0x00401ff9
  400018:	00401ff9 	.word	0x00401ff9
	...
  40002c:	00401ff9 	.word	0x00401ff9
  400030:	00401ff9 	.word	0x00401ff9
  400034:	00000000 	.word	0x00000000
  400038:	00401ff9 	.word	0x00401ff9
  40003c:	00401ff9 	.word	0x00401ff9
  400040:	00401ff9 	.word	0x00401ff9
  400044:	00401ff9 	.word	0x00401ff9
  400048:	00401ff9 	.word	0x00401ff9
  40004c:	00401ff9 	.word	0x00401ff9
  400050:	00401ff9 	.word	0x00401ff9
  400054:	00401ff9 	.word	0x00401ff9
  400058:	00401ff9 	.word	0x00401ff9
  40005c:	00401ff9 	.word	0x00401ff9
  400060:	00401ff9 	.word	0x00401ff9
  400064:	00000000 	.word	0x00000000
  400068:	004001ed 	.word	0x004001ed
  40006c:	00400201 	.word	0x00400201
  400070:	00000000 	.word	0x00000000
  400074:	00401ff9 	.word	0x00401ff9
  400078:	00401ff9 	.word	0x00401ff9
  40007c:	00401ff9 	.word	0x00401ff9
  400080:	00400215 	.word	0x00400215
  400084:	00000000 	.word	0x00000000
  400088:	00401ff9 	.word	0x00401ff9
  40008c:	00401ff9 	.word	0x00401ff9
  400090:	00401ff9 	.word	0x00401ff9
  400094:	00401ff9 	.word	0x00401ff9
  400098:	00401ff9 	.word	0x00401ff9
  40009c:	00401ff9 	.word	0x00401ff9
  4000a0:	00401ff9 	.word	0x00401ff9
  4000a4:	00401ff9 	.word	0x00401ff9
	...
  4000b4:	00401d19 	.word	0x00401d19
  4000b8:	00000000 	.word	0x00000000
  4000bc:	00401ff9 	.word	0x00401ff9
  4000c0:	00401ff9 	.word	0x00401ff9
  4000c4:	00401ff9 	.word	0x00401ff9
  4000c8:	00401ff9 	.word	0x00401ff9
	...
  4000e0:	00401d2d 	.word	0x00401d2d
  4000e4:	00401ff9 	.word	0x00401ff9
  4000e8:	00401ff9 	.word	0x00401ff9
  4000ec:	00401ff9 	.word	0x00401ff9
  4000f0:	00401ff9 	.word	0x00401ff9
  4000f4:	00401ff9 	.word	0x00401ff9
  4000f8:	00401ff9 	.word	0x00401ff9
	...
  400108:	00401ff9 	.word	0x00401ff9
  40010c:	00401ff9 	.word	0x00401ff9
  400110:	00401ff9 	.word	0x00401ff9
	...
  400120:	00401ff9 	.word	0x00401ff9
  400124:	00401ff9 	.word	0x00401ff9
  400128:	00401ff9 	.word	0x00401ff9
  40012c:	00401ff9 	.word	0x00401ff9
  400130:	00401ff9 	.word	0x00401ff9
	...
  40013c:	00401ff9 	.word	0x00401ff9

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400430 	.word	0x20400430
  40015c:	00000000 	.word	0x00000000
  400160:	00402600 	.word	0x00402600

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400434 	.word	0x20400434
  400190:	00402600 	.word	0x00402600
  400194:	00402600 	.word	0x00402600
  400198:	00000000 	.word	0x00000000

0040019c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40019c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001a0:	4604      	mov	r4, r0
  4001a2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4001a4:	4b0e      	ldr	r3, [pc, #56]	; (4001e0 <pio_handler_process+0x44>)
  4001a6:	4798      	blx	r3
  4001a8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4001aa:	4620      	mov	r0, r4
  4001ac:	4b0d      	ldr	r3, [pc, #52]	; (4001e4 <pio_handler_process+0x48>)
  4001ae:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4001b0:	4005      	ands	r5, r0
  4001b2:	d013      	beq.n	4001dc <pio_handler_process+0x40>
  4001b4:	4c0c      	ldr	r4, [pc, #48]	; (4001e8 <pio_handler_process+0x4c>)
  4001b6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4001ba:	6823      	ldr	r3, [r4, #0]
  4001bc:	4543      	cmp	r3, r8
  4001be:	d108      	bne.n	4001d2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4001c0:	6861      	ldr	r1, [r4, #4]
  4001c2:	4229      	tst	r1, r5
  4001c4:	d005      	beq.n	4001d2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4001c6:	68e3      	ldr	r3, [r4, #12]
  4001c8:	4640      	mov	r0, r8
  4001ca:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4001cc:	6863      	ldr	r3, [r4, #4]
  4001ce:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4001d2:	42b4      	cmp	r4, r6
  4001d4:	d002      	beq.n	4001dc <pio_handler_process+0x40>
  4001d6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4001d8:	2d00      	cmp	r5, #0
  4001da:	d1ee      	bne.n	4001ba <pio_handler_process+0x1e>
  4001dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001e0:	00401e05 	.word	0x00401e05
  4001e4:	00401e09 	.word	0x00401e09
  4001e8:	2040044c 	.word	0x2040044c

004001ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4001ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4001ee:	210a      	movs	r1, #10
  4001f0:	4801      	ldr	r0, [pc, #4]	; (4001f8 <PIOA_Handler+0xc>)
  4001f2:	4b02      	ldr	r3, [pc, #8]	; (4001fc <PIOA_Handler+0x10>)
  4001f4:	4798      	blx	r3
  4001f6:	bd08      	pop	{r3, pc}
  4001f8:	400e0e00 	.word	0x400e0e00
  4001fc:	0040019d 	.word	0x0040019d

00400200 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400200:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400202:	210b      	movs	r1, #11
  400204:	4801      	ldr	r0, [pc, #4]	; (40020c <PIOB_Handler+0xc>)
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <PIOB_Handler+0x10>)
  400208:	4798      	blx	r3
  40020a:	bd08      	pop	{r3, pc}
  40020c:	400e1000 	.word	0x400e1000
  400210:	0040019d 	.word	0x0040019d

00400214 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400214:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400216:	2110      	movs	r1, #16
  400218:	4801      	ldr	r0, [pc, #4]	; (400220 <PIOD_Handler+0xc>)
  40021a:	4b02      	ldr	r3, [pc, #8]	; (400224 <PIOD_Handler+0x10>)
  40021c:	4798      	blx	r3
  40021e:	bd08      	pop	{r3, pc}
  400220:	400e1400 	.word	0x400e1400
  400224:	0040019d 	.word	0x0040019d

00400228 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400228:	2901      	cmp	r1, #1
  40022a:	d104      	bne.n	400236 <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  40022c:	6882      	ldr	r2, [r0, #8]
  40022e:	4b06      	ldr	r3, [pc, #24]	; (400248 <supc_switch_sclk_to_32kxtal+0x20>)
  400230:	4313      	orrs	r3, r2
  400232:	6083      	str	r3, [r0, #8]
  400234:	e003      	b.n	40023e <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  400236:	6882      	ldr	r2, [r0, #8]
  400238:	4b04      	ldr	r3, [pc, #16]	; (40024c <supc_switch_sclk_to_32kxtal+0x24>)
  40023a:	4013      	ands	r3, r2
  40023c:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40023e:	6802      	ldr	r2, [r0, #0]
  400240:	4b03      	ldr	r3, [pc, #12]	; (400250 <supc_switch_sclk_to_32kxtal+0x28>)
  400242:	4313      	orrs	r3, r2
  400244:	6003      	str	r3, [r0, #0]
  400246:	4770      	bx	lr
  400248:	a5100000 	.word	0xa5100000
  40024c:	5aefffff 	.word	0x5aefffff
  400250:	a5000008 	.word	0xa5000008

00400254 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400254:	4b0d      	ldr	r3, [pc, #52]	; (40028c <prvTaskExitError+0x38>)
  400256:	681b      	ldr	r3, [r3, #0]
  400258:	f1b3 3fff 	cmp.w	r3, #4294967295
  40025c:	d00a      	beq.n	400274 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40025e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400262:	b672      	cpsid	i
  400264:	f383 8811 	msr	BASEPRI, r3
  400268:	f3bf 8f6f 	isb	sy
  40026c:	f3bf 8f4f 	dsb	sy
  400270:	b662      	cpsie	i
  400272:	e7fe      	b.n	400272 <prvTaskExitError+0x1e>
  400274:	f04f 0380 	mov.w	r3, #128	; 0x80
  400278:	b672      	cpsid	i
  40027a:	f383 8811 	msr	BASEPRI, r3
  40027e:	f3bf 8f6f 	isb	sy
  400282:	f3bf 8f4f 	dsb	sy
  400286:	b662      	cpsie	i
  400288:	e7fe      	b.n	400288 <prvTaskExitError+0x34>
  40028a:	bf00      	nop
  40028c:	20400000 	.word	0x20400000

00400290 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400290:	4806      	ldr	r0, [pc, #24]	; (4002ac <prvPortStartFirstTask+0x1c>)
  400292:	6800      	ldr	r0, [r0, #0]
  400294:	6800      	ldr	r0, [r0, #0]
  400296:	f380 8808 	msr	MSP, r0
  40029a:	b662      	cpsie	i
  40029c:	b661      	cpsie	f
  40029e:	f3bf 8f4f 	dsb	sy
  4002a2:	f3bf 8f6f 	isb	sy
  4002a6:	df00      	svc	0
  4002a8:	bf00      	nop
  4002aa:	0000      	.short	0x0000
  4002ac:	e000ed08 	.word	0xe000ed08

004002b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4002b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4002c0 <vPortEnableVFP+0x10>
  4002b4:	6801      	ldr	r1, [r0, #0]
  4002b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4002ba:	6001      	str	r1, [r0, #0]
  4002bc:	4770      	bx	lr
  4002be:	0000      	.short	0x0000
  4002c0:	e000ed88 	.word	0xe000ed88

004002c4 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4002c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4002c8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4002cc:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4002d0:	4b05      	ldr	r3, [pc, #20]	; (4002e8 <pxPortInitialiseStack+0x24>)
  4002d2:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4002d6:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4002da:	f06f 0302 	mvn.w	r3, #2
  4002de:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4002e2:	3844      	subs	r0, #68	; 0x44
  4002e4:	4770      	bx	lr
  4002e6:	bf00      	nop
  4002e8:	00400255 	.word	0x00400255

004002ec <vPortEnterCritical>:
  4002ec:	f04f 0380 	mov.w	r3, #128	; 0x80
  4002f0:	b672      	cpsid	i
  4002f2:	f383 8811 	msr	BASEPRI, r3
  4002f6:	f3bf 8f6f 	isb	sy
  4002fa:	f3bf 8f4f 	dsb	sy
  4002fe:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400300:	4a0b      	ldr	r2, [pc, #44]	; (400330 <vPortEnterCritical+0x44>)
  400302:	6813      	ldr	r3, [r2, #0]
  400304:	3301      	adds	r3, #1
  400306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400308:	2b01      	cmp	r3, #1
  40030a:	d10f      	bne.n	40032c <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40030c:	4b09      	ldr	r3, [pc, #36]	; (400334 <vPortEnterCritical+0x48>)
  40030e:	681b      	ldr	r3, [r3, #0]
  400310:	f013 0fff 	tst.w	r3, #255	; 0xff
  400314:	d00a      	beq.n	40032c <vPortEnterCritical+0x40>
  400316:	f04f 0380 	mov.w	r3, #128	; 0x80
  40031a:	b672      	cpsid	i
  40031c:	f383 8811 	msr	BASEPRI, r3
  400320:	f3bf 8f6f 	isb	sy
  400324:	f3bf 8f4f 	dsb	sy
  400328:	b662      	cpsie	i
  40032a:	e7fe      	b.n	40032a <vPortEnterCritical+0x3e>
  40032c:	4770      	bx	lr
  40032e:	bf00      	nop
  400330:	20400000 	.word	0x20400000
  400334:	e000ed04 	.word	0xe000ed04

00400338 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400338:	4b0a      	ldr	r3, [pc, #40]	; (400364 <vPortExitCritical+0x2c>)
  40033a:	681b      	ldr	r3, [r3, #0]
  40033c:	b953      	cbnz	r3, 400354 <vPortExitCritical+0x1c>
  40033e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400342:	b672      	cpsid	i
  400344:	f383 8811 	msr	BASEPRI, r3
  400348:	f3bf 8f6f 	isb	sy
  40034c:	f3bf 8f4f 	dsb	sy
  400350:	b662      	cpsie	i
  400352:	e7fe      	b.n	400352 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400354:	3b01      	subs	r3, #1
  400356:	4a03      	ldr	r2, [pc, #12]	; (400364 <vPortExitCritical+0x2c>)
  400358:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40035a:	b90b      	cbnz	r3, 400360 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  40035c:	f383 8811 	msr	BASEPRI, r3
  400360:	4770      	bx	lr
  400362:	bf00      	nop
  400364:	20400000 	.word	0x20400000

00400368 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400368:	4a03      	ldr	r2, [pc, #12]	; (400378 <vPortSetupTimerInterrupt+0x10>)
  40036a:	4b04      	ldr	r3, [pc, #16]	; (40037c <vPortSetupTimerInterrupt+0x14>)
  40036c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40036e:	2207      	movs	r2, #7
  400370:	3b04      	subs	r3, #4
  400372:	601a      	str	r2, [r3, #0]
  400374:	4770      	bx	lr
  400376:	bf00      	nop
  400378:	000493df 	.word	0x000493df
  40037c:	e000e014 	.word	0xe000e014

00400380 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400380:	b500      	push	{lr}
  400382:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400384:	4b25      	ldr	r3, [pc, #148]	; (40041c <xPortStartScheduler+0x9c>)
  400386:	781a      	ldrb	r2, [r3, #0]
  400388:	b2d2      	uxtb	r2, r2
  40038a:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  40038c:	22ff      	movs	r2, #255	; 0xff
  40038e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400390:	781b      	ldrb	r3, [r3, #0]
  400392:	b2db      	uxtb	r3, r3
  400394:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400398:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40039c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4003a0:	4a1f      	ldr	r2, [pc, #124]	; (400420 <xPortStartScheduler+0xa0>)
  4003a2:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4003a4:	2207      	movs	r2, #7
  4003a6:	4b1f      	ldr	r3, [pc, #124]	; (400424 <xPortStartScheduler+0xa4>)
  4003a8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4003aa:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4003ae:	f013 0f80 	tst.w	r3, #128	; 0x80
  4003b2:	d010      	beq.n	4003d6 <xPortStartScheduler+0x56>
  4003b4:	2206      	movs	r2, #6
  4003b6:	e000      	b.n	4003ba <xPortStartScheduler+0x3a>
  4003b8:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4003ba:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4003be:	005b      	lsls	r3, r3, #1
  4003c0:	b2db      	uxtb	r3, r3
  4003c2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4003c6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4003ca:	1e51      	subs	r1, r2, #1
  4003cc:	f013 0f80 	tst.w	r3, #128	; 0x80
  4003d0:	d1f2      	bne.n	4003b8 <xPortStartScheduler+0x38>
  4003d2:	4b14      	ldr	r3, [pc, #80]	; (400424 <xPortStartScheduler+0xa4>)
  4003d4:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4003d6:	4a13      	ldr	r2, [pc, #76]	; (400424 <xPortStartScheduler+0xa4>)
  4003d8:	6813      	ldr	r3, [r2, #0]
  4003da:	021b      	lsls	r3, r3, #8
  4003dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4003e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4003e2:	9b01      	ldr	r3, [sp, #4]
  4003e4:	b2db      	uxtb	r3, r3
  4003e6:	4a0d      	ldr	r2, [pc, #52]	; (40041c <xPortStartScheduler+0x9c>)
  4003e8:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4003ea:	4b0f      	ldr	r3, [pc, #60]	; (400428 <xPortStartScheduler+0xa8>)
  4003ec:	681a      	ldr	r2, [r3, #0]
  4003ee:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4003f2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4003f4:	681a      	ldr	r2, [r3, #0]
  4003f6:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4003fa:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4003fc:	4b0b      	ldr	r3, [pc, #44]	; (40042c <xPortStartScheduler+0xac>)
  4003fe:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  400400:	2200      	movs	r2, #0
  400402:	4b0b      	ldr	r3, [pc, #44]	; (400430 <xPortStartScheduler+0xb0>)
  400404:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  400406:	4b0b      	ldr	r3, [pc, #44]	; (400434 <xPortStartScheduler+0xb4>)
  400408:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40040a:	4a0b      	ldr	r2, [pc, #44]	; (400438 <xPortStartScheduler+0xb8>)
  40040c:	6813      	ldr	r3, [r2, #0]
  40040e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  400412:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  400414:	4b09      	ldr	r3, [pc, #36]	; (40043c <xPortStartScheduler+0xbc>)
  400416:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  400418:	4b09      	ldr	r3, [pc, #36]	; (400440 <xPortStartScheduler+0xc0>)
  40041a:	4798      	blx	r3
  40041c:	e000e400 	.word	0xe000e400
  400420:	204004bc 	.word	0x204004bc
  400424:	204004c0 	.word	0x204004c0
  400428:	e000ed20 	.word	0xe000ed20
  40042c:	00400369 	.word	0x00400369
  400430:	20400000 	.word	0x20400000
  400434:	004002b1 	.word	0x004002b1
  400438:	e000ef34 	.word	0xe000ef34
  40043c:	00400291 	.word	0x00400291
  400440:	00400255 	.word	0x00400255

00400444 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400444:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400448:	2b0f      	cmp	r3, #15
  40044a:	d911      	bls.n	400470 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40044c:	4a12      	ldr	r2, [pc, #72]	; (400498 <vPortValidateInterruptPriority+0x54>)
  40044e:	5c9b      	ldrb	r3, [r3, r2]
  400450:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  400452:	4a12      	ldr	r2, [pc, #72]	; (40049c <vPortValidateInterruptPriority+0x58>)
  400454:	7812      	ldrb	r2, [r2, #0]
  400456:	429a      	cmp	r2, r3
  400458:	d90a      	bls.n	400470 <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  40045a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40045e:	b672      	cpsid	i
  400460:	f383 8811 	msr	BASEPRI, r3
  400464:	f3bf 8f6f 	isb	sy
  400468:	f3bf 8f4f 	dsb	sy
  40046c:	b662      	cpsie	i
  40046e:	e7fe      	b.n	40046e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400470:	4b0b      	ldr	r3, [pc, #44]	; (4004a0 <vPortValidateInterruptPriority+0x5c>)
  400472:	681b      	ldr	r3, [r3, #0]
  400474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400478:	4a0a      	ldr	r2, [pc, #40]	; (4004a4 <vPortValidateInterruptPriority+0x60>)
  40047a:	6812      	ldr	r2, [r2, #0]
  40047c:	4293      	cmp	r3, r2
  40047e:	d90a      	bls.n	400496 <vPortValidateInterruptPriority+0x52>
  400480:	f04f 0380 	mov.w	r3, #128	; 0x80
  400484:	b672      	cpsid	i
  400486:	f383 8811 	msr	BASEPRI, r3
  40048a:	f3bf 8f6f 	isb	sy
  40048e:	f3bf 8f4f 	dsb	sy
  400492:	b662      	cpsie	i
  400494:	e7fe      	b.n	400494 <vPortValidateInterruptPriority+0x50>
  400496:	4770      	bx	lr
  400498:	e000e3f0 	.word	0xe000e3f0
  40049c:	204004bc 	.word	0x204004bc
  4004a0:	e000ed0c 	.word	0xe000ed0c
  4004a4:	204004c0 	.word	0x204004c0

004004a8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4004a8:	b538      	push	{r3, r4, r5, lr}
  4004aa:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4004ac:	f010 0f07 	tst.w	r0, #7
  4004b0:	d002      	beq.n	4004b8 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4004b2:	f020 0407 	bic.w	r4, r0, #7
  4004b6:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4004b8:	4b0e      	ldr	r3, [pc, #56]	; (4004f4 <pvPortMalloc+0x4c>)
  4004ba:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <pvPortMalloc+0x50>)
  4004be:	681b      	ldr	r3, [r3, #0]
  4004c0:	b923      	cbnz	r3, 4004cc <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4004c2:	4b0e      	ldr	r3, [pc, #56]	; (4004fc <pvPortMalloc+0x54>)
  4004c4:	f023 0307 	bic.w	r3, r3, #7
  4004c8:	4a0b      	ldr	r2, [pc, #44]	; (4004f8 <pvPortMalloc+0x50>)
  4004ca:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4004cc:	4b0c      	ldr	r3, [pc, #48]	; (400500 <pvPortMalloc+0x58>)
  4004ce:	681b      	ldr	r3, [r3, #0]
  4004d0:	441c      	add	r4, r3
  4004d2:	42a3      	cmp	r3, r4
  4004d4:	d209      	bcs.n	4004ea <pvPortMalloc+0x42>
  4004d6:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4004da:	4294      	cmp	r4, r2
  4004dc:	d805      	bhi.n	4004ea <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4004de:	4a06      	ldr	r2, [pc, #24]	; (4004f8 <pvPortMalloc+0x50>)
  4004e0:	6815      	ldr	r5, [r2, #0]
  4004e2:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4004e4:	4b06      	ldr	r3, [pc, #24]	; (400500 <pvPortMalloc+0x58>)
  4004e6:	601c      	str	r4, [r3, #0]
  4004e8:	e000      	b.n	4004ec <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  4004ea:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4004ec:	4b05      	ldr	r3, [pc, #20]	; (400504 <pvPortMalloc+0x5c>)
  4004ee:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  4004f0:	4628      	mov	r0, r5
  4004f2:	bd38      	pop	{r3, r4, r5, pc}
  4004f4:	004010f5 	.word	0x004010f5
  4004f8:	2040bcc8 	.word	0x2040bcc8
  4004fc:	204004d0 	.word	0x204004d0
  400500:	204004c4 	.word	0x204004c4
  400504:	00401245 	.word	0x00401245

00400508 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  400508:	b150      	cbz	r0, 400520 <vPortFree+0x18>
  40050a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40050e:	b672      	cpsid	i
  400510:	f383 8811 	msr	BASEPRI, r3
  400514:	f3bf 8f6f 	isb	sy
  400518:	f3bf 8f4f 	dsb	sy
  40051c:	b662      	cpsie	i
  40051e:	e7fe      	b.n	40051e <vPortFree+0x16>
  400520:	4770      	bx	lr
  400522:	bf00      	nop

00400524 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400524:	f100 0308 	add.w	r3, r0, #8
  400528:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40052a:	f04f 32ff 	mov.w	r2, #4294967295
  40052e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400530:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400532:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400534:	2300      	movs	r3, #0
  400536:	6003      	str	r3, [r0, #0]
  400538:	4770      	bx	lr
  40053a:	bf00      	nop

0040053c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40053c:	2300      	movs	r3, #0
  40053e:	6103      	str	r3, [r0, #16]
  400540:	4770      	bx	lr
  400542:	bf00      	nop

00400544 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400544:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400546:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400548:	689a      	ldr	r2, [r3, #8]
  40054a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  40054c:	689a      	ldr	r2, [r3, #8]
  40054e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400550:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400552:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400554:	6803      	ldr	r3, [r0, #0]
  400556:	3301      	adds	r3, #1
  400558:	6003      	str	r3, [r0, #0]
  40055a:	4770      	bx	lr

0040055c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  40055c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40055e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400560:	f1b5 3fff 	cmp.w	r5, #4294967295
  400564:	d101      	bne.n	40056a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400566:	6902      	ldr	r2, [r0, #16]
  400568:	e007      	b.n	40057a <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40056a:	f100 0208 	add.w	r2, r0, #8
  40056e:	e000      	b.n	400572 <vListInsert+0x16>
  400570:	461a      	mov	r2, r3
  400572:	6853      	ldr	r3, [r2, #4]
  400574:	681c      	ldr	r4, [r3, #0]
  400576:	42a5      	cmp	r5, r4
  400578:	d2fa      	bcs.n	400570 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40057a:	6853      	ldr	r3, [r2, #4]
  40057c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40057e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400580:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400582:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400584:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400586:	6803      	ldr	r3, [r0, #0]
  400588:	3301      	adds	r3, #1
  40058a:	6003      	str	r3, [r0, #0]
}
  40058c:	bc30      	pop	{r4, r5}
  40058e:	4770      	bx	lr

00400590 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400590:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400592:	6842      	ldr	r2, [r0, #4]
  400594:	6881      	ldr	r1, [r0, #8]
  400596:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400598:	6882      	ldr	r2, [r0, #8]
  40059a:	6841      	ldr	r1, [r0, #4]
  40059c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40059e:	685a      	ldr	r2, [r3, #4]
  4005a0:	4290      	cmp	r0, r2
  4005a2:	d101      	bne.n	4005a8 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4005a4:	6882      	ldr	r2, [r0, #8]
  4005a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4005a8:	2200      	movs	r2, #0
  4005aa:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4005ac:	6818      	ldr	r0, [r3, #0]
  4005ae:	3801      	subs	r0, #1
  4005b0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4005b2:	4770      	bx	lr

004005b4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4005b4:	b538      	push	{r3, r4, r5, lr}
  4005b6:	4604      	mov	r4, r0
  4005b8:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4005ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4005bc:	b942      	cbnz	r2, 4005d0 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4005be:	6803      	ldr	r3, [r0, #0]
  4005c0:	2b00      	cmp	r3, #0
  4005c2:	d12b      	bne.n	40061c <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4005c4:	6840      	ldr	r0, [r0, #4]
  4005c6:	4b1b      	ldr	r3, [pc, #108]	; (400634 <prvCopyDataToQueue+0x80>)
  4005c8:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4005ca:	2300      	movs	r3, #0
  4005cc:	6063      	str	r3, [r4, #4]
  4005ce:	e02c      	b.n	40062a <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  4005d0:	b96d      	cbnz	r5, 4005ee <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4005d2:	6880      	ldr	r0, [r0, #8]
  4005d4:	4b18      	ldr	r3, [pc, #96]	; (400638 <prvCopyDataToQueue+0x84>)
  4005d6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4005d8:	68a2      	ldr	r2, [r4, #8]
  4005da:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4005dc:	4413      	add	r3, r2
  4005de:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4005e0:	6862      	ldr	r2, [r4, #4]
  4005e2:	4293      	cmp	r3, r2
  4005e4:	d31c      	bcc.n	400620 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4005e6:	6823      	ldr	r3, [r4, #0]
  4005e8:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4005ea:	2000      	movs	r0, #0
  4005ec:	e01d      	b.n	40062a <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4005ee:	68c0      	ldr	r0, [r0, #12]
  4005f0:	4b11      	ldr	r3, [pc, #68]	; (400638 <prvCopyDataToQueue+0x84>)
  4005f2:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4005f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4005f6:	425b      	negs	r3, r3
  4005f8:	68e2      	ldr	r2, [r4, #12]
  4005fa:	441a      	add	r2, r3
  4005fc:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4005fe:	6821      	ldr	r1, [r4, #0]
  400600:	428a      	cmp	r2, r1
  400602:	d202      	bcs.n	40060a <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  400604:	6862      	ldr	r2, [r4, #4]
  400606:	4413      	add	r3, r2
  400608:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  40060a:	2d02      	cmp	r5, #2
  40060c:	d10a      	bne.n	400624 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40060e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400610:	b153      	cbz	r3, 400628 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  400612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400614:	3b01      	subs	r3, #1
  400616:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  400618:	2000      	movs	r0, #0
  40061a:	e006      	b.n	40062a <prvCopyDataToQueue+0x76>
  40061c:	2000      	movs	r0, #0
  40061e:	e004      	b.n	40062a <prvCopyDataToQueue+0x76>
  400620:	2000      	movs	r0, #0
  400622:	e002      	b.n	40062a <prvCopyDataToQueue+0x76>
  400624:	2000      	movs	r0, #0
  400626:	e000      	b.n	40062a <prvCopyDataToQueue+0x76>
  400628:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40062a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40062c:	3301      	adds	r3, #1
  40062e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  400630:	bd38      	pop	{r3, r4, r5, pc}
  400632:	bf00      	nop
  400634:	00401721 	.word	0x00401721
  400638:	004022e9 	.word	0x004022e9

0040063c <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  40063c:	b530      	push	{r4, r5, lr}
  40063e:	b083      	sub	sp, #12
  400640:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  400642:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400644:	b954      	cbnz	r4, 40065c <prvNotifyQueueSetContainer+0x20>
  400646:	f04f 0380 	mov.w	r3, #128	; 0x80
  40064a:	b672      	cpsid	i
  40064c:	f383 8811 	msr	BASEPRI, r3
  400650:	f3bf 8f6f 	isb	sy
  400654:	f3bf 8f4f 	dsb	sy
  400658:	b662      	cpsie	i
  40065a:	e7fe      	b.n	40065a <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40065c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40065e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400660:	429a      	cmp	r2, r3
  400662:	d30a      	bcc.n	40067a <prvNotifyQueueSetContainer+0x3e>
  400664:	f04f 0380 	mov.w	r3, #128	; 0x80
  400668:	b672      	cpsid	i
  40066a:	f383 8811 	msr	BASEPRI, r3
  40066e:	f3bf 8f6f 	isb	sy
  400672:	f3bf 8f4f 	dsb	sy
  400676:	b662      	cpsie	i
  400678:	e7fe      	b.n	400678 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40067a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40067c:	4293      	cmp	r3, r2
  40067e:	d917      	bls.n	4006b0 <prvNotifyQueueSetContainer+0x74>
  400680:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400682:	a901      	add	r1, sp, #4
  400684:	4620      	mov	r0, r4
  400686:	4b0c      	ldr	r3, [pc, #48]	; (4006b8 <prvNotifyQueueSetContainer+0x7c>)
  400688:	4798      	blx	r3
  40068a:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  40068c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40068e:	f1b3 3fff 	cmp.w	r3, #4294967295
  400692:	d109      	bne.n	4006a8 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400694:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400696:	b163      	cbz	r3, 4006b2 <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400698:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40069c:	4b07      	ldr	r3, [pc, #28]	; (4006bc <prvNotifyQueueSetContainer+0x80>)
  40069e:	4798      	blx	r3
  4006a0:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  4006a2:	bf18      	it	ne
  4006a4:	2501      	movne	r5, #1
  4006a6:	e004      	b.n	4006b2 <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  4006a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4006aa:	3301      	adds	r3, #1
  4006ac:	64a3      	str	r3, [r4, #72]	; 0x48
  4006ae:	e000      	b.n	4006b2 <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  4006b0:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4006b2:	4628      	mov	r0, r5
  4006b4:	b003      	add	sp, #12
  4006b6:	bd30      	pop	{r4, r5, pc}
  4006b8:	004005b5 	.word	0x004005b5
  4006bc:	004014f1 	.word	0x004014f1

004006c0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4006c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4006c2:	b172      	cbz	r2, 4006e2 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  4006c4:	b510      	push	{r4, lr}
  4006c6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4006c8:	68c4      	ldr	r4, [r0, #12]
  4006ca:	4414      	add	r4, r2
  4006cc:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4006ce:	6840      	ldr	r0, [r0, #4]
  4006d0:	4284      	cmp	r4, r0
  4006d2:	d301      	bcc.n	4006d8 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4006d4:	6818      	ldr	r0, [r3, #0]
  4006d6:	60d8      	str	r0, [r3, #12]
  4006d8:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4006da:	68d9      	ldr	r1, [r3, #12]
  4006dc:	4b01      	ldr	r3, [pc, #4]	; (4006e4 <prvCopyDataFromQueue+0x24>)
  4006de:	4798      	blx	r3
  4006e0:	bd10      	pop	{r4, pc}
  4006e2:	4770      	bx	lr
  4006e4:	004022e9 	.word	0x004022e9

004006e8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  4006e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006ea:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  4006ec:	4b20      	ldr	r3, [pc, #128]	; (400770 <prvUnlockQueue+0x88>)
  4006ee:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4006f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4006f2:	2b00      	cmp	r3, #0
  4006f4:	dd18      	ble.n	400728 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4006f6:	4d1f      	ldr	r5, [pc, #124]	; (400774 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  4006f8:	4f1f      	ldr	r7, [pc, #124]	; (400778 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4006fa:	4e20      	ldr	r6, [pc, #128]	; (40077c <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  4006fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4006fe:	b133      	cbz	r3, 40070e <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400700:	2100      	movs	r1, #0
  400702:	4620      	mov	r0, r4
  400704:	47a8      	blx	r5
  400706:	2801      	cmp	r0, #1
  400708:	d108      	bne.n	40071c <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  40070a:	47b8      	blx	r7
  40070c:	e006      	b.n	40071c <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40070e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400710:	b153      	cbz	r3, 400728 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400712:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400716:	47b0      	blx	r6
  400718:	b100      	cbz	r0, 40071c <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  40071a:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  40071c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40071e:	3b01      	subs	r3, #1
  400720:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400722:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400724:	2b00      	cmp	r3, #0
  400726:	dce9      	bgt.n	4006fc <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400728:	f04f 33ff 	mov.w	r3, #4294967295
  40072c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  40072e:	4b14      	ldr	r3, [pc, #80]	; (400780 <prvUnlockQueue+0x98>)
  400730:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400732:	4b0f      	ldr	r3, [pc, #60]	; (400770 <prvUnlockQueue+0x88>)
  400734:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400736:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400738:	2b00      	cmp	r3, #0
  40073a:	dd13      	ble.n	400764 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40073c:	6923      	ldr	r3, [r4, #16]
  40073e:	b91b      	cbnz	r3, 400748 <prvUnlockQueue+0x60>
  400740:	e010      	b.n	400764 <prvUnlockQueue+0x7c>
  400742:	6923      	ldr	r3, [r4, #16]
  400744:	b923      	cbnz	r3, 400750 <prvUnlockQueue+0x68>
  400746:	e00d      	b.n	400764 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400748:	f104 0610 	add.w	r6, r4, #16
  40074c:	4d0b      	ldr	r5, [pc, #44]	; (40077c <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  40074e:	4f0a      	ldr	r7, [pc, #40]	; (400778 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400750:	4630      	mov	r0, r6
  400752:	47a8      	blx	r5
  400754:	b100      	cbz	r0, 400758 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  400756:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  400758:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40075a:	3b01      	subs	r3, #1
  40075c:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40075e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400760:	2b00      	cmp	r3, #0
  400762:	dcee      	bgt.n	400742 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400764:	f04f 33ff 	mov.w	r3, #4294967295
  400768:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  40076a:	4b05      	ldr	r3, [pc, #20]	; (400780 <prvUnlockQueue+0x98>)
  40076c:	4798      	blx	r3
  40076e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400770:	004002ed 	.word	0x004002ed
  400774:	0040063d 	.word	0x0040063d
  400778:	0040164d 	.word	0x0040164d
  40077c:	004014f1 	.word	0x004014f1
  400780:	00400339 	.word	0x00400339

00400784 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  400784:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400786:	b950      	cbnz	r0, 40079e <xQueueGenericReset+0x1a>
  400788:	f04f 0380 	mov.w	r3, #128	; 0x80
  40078c:	b672      	cpsid	i
  40078e:	f383 8811 	msr	BASEPRI, r3
  400792:	f3bf 8f6f 	isb	sy
  400796:	f3bf 8f4f 	dsb	sy
  40079a:	b662      	cpsie	i
  40079c:	e7fe      	b.n	40079c <xQueueGenericReset+0x18>
  40079e:	4604      	mov	r4, r0
  4007a0:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4007a2:	4b18      	ldr	r3, [pc, #96]	; (400804 <xQueueGenericReset+0x80>)
  4007a4:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4007a6:	6822      	ldr	r2, [r4, #0]
  4007a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4007aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4007ac:	fb03 f301 	mul.w	r3, r3, r1
  4007b0:	18d0      	adds	r0, r2, r3
  4007b2:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4007b4:	2000      	movs	r0, #0
  4007b6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4007b8:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4007ba:	1a5b      	subs	r3, r3, r1
  4007bc:	4413      	add	r3, r2
  4007be:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4007c0:	f04f 33ff 	mov.w	r3, #4294967295
  4007c4:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4007c6:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  4007c8:	b985      	cbnz	r5, 4007ec <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4007ca:	6923      	ldr	r3, [r4, #16]
  4007cc:	b1ab      	cbz	r3, 4007fa <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4007ce:	f104 0010 	add.w	r0, r4, #16
  4007d2:	4b0d      	ldr	r3, [pc, #52]	; (400808 <xQueueGenericReset+0x84>)
  4007d4:	4798      	blx	r3
  4007d6:	2801      	cmp	r0, #1
  4007d8:	d10f      	bne.n	4007fa <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  4007da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4007de:	4b0b      	ldr	r3, [pc, #44]	; (40080c <xQueueGenericReset+0x88>)
  4007e0:	601a      	str	r2, [r3, #0]
  4007e2:	f3bf 8f4f 	dsb	sy
  4007e6:	f3bf 8f6f 	isb	sy
  4007ea:	e006      	b.n	4007fa <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4007ec:	f104 0010 	add.w	r0, r4, #16
  4007f0:	4d07      	ldr	r5, [pc, #28]	; (400810 <xQueueGenericReset+0x8c>)
  4007f2:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4007f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4007f8:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  4007fa:	4b06      	ldr	r3, [pc, #24]	; (400814 <xQueueGenericReset+0x90>)
  4007fc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  4007fe:	2001      	movs	r0, #1
  400800:	bd38      	pop	{r3, r4, r5, pc}
  400802:	bf00      	nop
  400804:	004002ed 	.word	0x004002ed
  400808:	004014f1 	.word	0x004014f1
  40080c:	e000ed04 	.word	0xe000ed04
  400810:	00400525 	.word	0x00400525
  400814:	00400339 	.word	0x00400339

00400818 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  400818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40081a:	b950      	cbnz	r0, 400832 <xQueueGenericCreate+0x1a>
  40081c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400820:	b672      	cpsid	i
  400822:	f383 8811 	msr	BASEPRI, r3
  400826:	f3bf 8f6f 	isb	sy
  40082a:	f3bf 8f4f 	dsb	sy
  40082e:	b662      	cpsie	i
  400830:	e7fe      	b.n	400830 <xQueueGenericCreate+0x18>
  400832:	4606      	mov	r6, r0
  400834:	4617      	mov	r7, r2
  400836:	460d      	mov	r5, r1

	if( uxItemSize == ( UBaseType_t ) 0 )
  400838:	b1c1      	cbz	r1, 40086c <xQueueGenericCreate+0x54>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40083a:	fb01 f000 	mul.w	r0, r1, r0
  40083e:	3059      	adds	r0, #89	; 0x59
  400840:	4b14      	ldr	r3, [pc, #80]	; (400894 <xQueueGenericCreate+0x7c>)
  400842:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400844:	4604      	mov	r4, r0
  400846:	b910      	cbnz	r0, 40084e <xQueueGenericCreate+0x36>
  400848:	e005      	b.n	400856 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40084a:	6024      	str	r4, [r4, #0]
  40084c:	e015      	b.n	40087a <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  40084e:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400852:	6003      	str	r3, [r0, #0]
  400854:	e011      	b.n	40087a <xQueueGenericCreate+0x62>
  400856:	f04f 0380 	mov.w	r3, #128	; 0x80
  40085a:	b672      	cpsid	i
  40085c:	f383 8811 	msr	BASEPRI, r3
  400860:	f3bf 8f6f 	isb	sy
  400864:	f3bf 8f4f 	dsb	sy
  400868:	b662      	cpsie	i
  40086a:	e7fe      	b.n	40086a <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40086c:	2058      	movs	r0, #88	; 0x58
  40086e:	4b09      	ldr	r3, [pc, #36]	; (400894 <xQueueGenericCreate+0x7c>)
  400870:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400872:	4604      	mov	r4, r0
  400874:	2800      	cmp	r0, #0
  400876:	d1e8      	bne.n	40084a <xQueueGenericCreate+0x32>
  400878:	e7ed      	b.n	400856 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  40087a:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40087c:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40087e:	2101      	movs	r1, #1
  400880:	4620      	mov	r0, r4
  400882:	4b05      	ldr	r3, [pc, #20]	; (400898 <xQueueGenericCreate+0x80>)
  400884:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  400886:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  40088a:	2300      	movs	r3, #0
  40088c:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  40088e:	4620      	mov	r0, r4
  400890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400892:	bf00      	nop
  400894:	004004a9 	.word	0x004004a9
  400898:	00400785 	.word	0x00400785

0040089c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  40089c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008a0:	b085      	sub	sp, #20
  4008a2:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  4008a4:	b950      	cbnz	r0, 4008bc <xQueueGenericSend+0x20>
  4008a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008aa:	b672      	cpsid	i
  4008ac:	f383 8811 	msr	BASEPRI, r3
  4008b0:	f3bf 8f6f 	isb	sy
  4008b4:	f3bf 8f4f 	dsb	sy
  4008b8:	b662      	cpsie	i
  4008ba:	e7fe      	b.n	4008ba <xQueueGenericSend+0x1e>
  4008bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4008be:	b961      	cbnz	r1, 4008da <xQueueGenericSend+0x3e>
  4008c0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4008c2:	b152      	cbz	r2, 4008da <xQueueGenericSend+0x3e>
  4008c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008c8:	b672      	cpsid	i
  4008ca:	f383 8811 	msr	BASEPRI, r3
  4008ce:	f3bf 8f6f 	isb	sy
  4008d2:	f3bf 8f4f 	dsb	sy
  4008d6:	b662      	cpsie	i
  4008d8:	e7fe      	b.n	4008d8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4008da:	2b02      	cmp	r3, #2
  4008dc:	d10d      	bne.n	4008fa <xQueueGenericSend+0x5e>
  4008de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4008e0:	2a01      	cmp	r2, #1
  4008e2:	d00a      	beq.n	4008fa <xQueueGenericSend+0x5e>
  4008e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008e8:	b672      	cpsid	i
  4008ea:	f383 8811 	msr	BASEPRI, r3
  4008ee:	f3bf 8f6f 	isb	sy
  4008f2:	f3bf 8f4f 	dsb	sy
  4008f6:	b662      	cpsie	i
  4008f8:	e7fe      	b.n	4008f8 <xQueueGenericSend+0x5c>
  4008fa:	461d      	mov	r5, r3
  4008fc:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4008fe:	4b51      	ldr	r3, [pc, #324]	; (400a44 <xQueueGenericSend+0x1a8>)
  400900:	4798      	blx	r3
  400902:	b960      	cbnz	r0, 40091e <xQueueGenericSend+0x82>
  400904:	9b01      	ldr	r3, [sp, #4]
  400906:	b163      	cbz	r3, 400922 <xQueueGenericSend+0x86>
  400908:	f04f 0380 	mov.w	r3, #128	; 0x80
  40090c:	b672      	cpsid	i
  40090e:	f383 8811 	msr	BASEPRI, r3
  400912:	f3bf 8f6f 	isb	sy
  400916:	f3bf 8f4f 	dsb	sy
  40091a:	b662      	cpsie	i
  40091c:	e7fe      	b.n	40091c <xQueueGenericSend+0x80>
  40091e:	2700      	movs	r7, #0
  400920:	e000      	b.n	400924 <xQueueGenericSend+0x88>
  400922:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400924:	4e48      	ldr	r6, [pc, #288]	; (400a48 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400926:	f8df 914c 	ldr.w	r9, [pc, #332]	; 400a74 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40092a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 400a54 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  40092e:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400930:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400932:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400934:	429a      	cmp	r2, r3
  400936:	d301      	bcc.n	40093c <xQueueGenericSend+0xa0>
  400938:	2d02      	cmp	r5, #2
  40093a:	d133      	bne.n	4009a4 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40093c:	462a      	mov	r2, r5
  40093e:	9900      	ldr	r1, [sp, #0]
  400940:	4620      	mov	r0, r4
  400942:	4b42      	ldr	r3, [pc, #264]	; (400a4c <xQueueGenericSend+0x1b0>)
  400944:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400946:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400948:	b173      	cbz	r3, 400968 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40094a:	4629      	mov	r1, r5
  40094c:	4620      	mov	r0, r4
  40094e:	4b40      	ldr	r3, [pc, #256]	; (400a50 <xQueueGenericSend+0x1b4>)
  400950:	4798      	blx	r3
  400952:	2801      	cmp	r0, #1
  400954:	d122      	bne.n	40099c <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  400956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40095a:	4b3e      	ldr	r3, [pc, #248]	; (400a54 <xQueueGenericSend+0x1b8>)
  40095c:	601a      	str	r2, [r3, #0]
  40095e:	f3bf 8f4f 	dsb	sy
  400962:	f3bf 8f6f 	isb	sy
  400966:	e019      	b.n	40099c <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400968:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40096a:	b173      	cbz	r3, 40098a <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  40096c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400970:	4b39      	ldr	r3, [pc, #228]	; (400a58 <xQueueGenericSend+0x1bc>)
  400972:	4798      	blx	r3
  400974:	2801      	cmp	r0, #1
  400976:	d111      	bne.n	40099c <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  400978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40097c:	4b35      	ldr	r3, [pc, #212]	; (400a54 <xQueueGenericSend+0x1b8>)
  40097e:	601a      	str	r2, [r3, #0]
  400980:	f3bf 8f4f 	dsb	sy
  400984:	f3bf 8f6f 	isb	sy
  400988:	e008      	b.n	40099c <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  40098a:	b138      	cbz	r0, 40099c <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  40098c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400990:	4b30      	ldr	r3, [pc, #192]	; (400a54 <xQueueGenericSend+0x1b8>)
  400992:	601a      	str	r2, [r3, #0]
  400994:	f3bf 8f4f 	dsb	sy
  400998:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  40099c:	4b2f      	ldr	r3, [pc, #188]	; (400a5c <xQueueGenericSend+0x1c0>)
  40099e:	4798      	blx	r3
				return pdPASS;
  4009a0:	2001      	movs	r0, #1
  4009a2:	e04b      	b.n	400a3c <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4009a4:	9b01      	ldr	r3, [sp, #4]
  4009a6:	b91b      	cbnz	r3, 4009b0 <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4009a8:	4b2c      	ldr	r3, [pc, #176]	; (400a5c <xQueueGenericSend+0x1c0>)
  4009aa:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  4009ac:	2000      	movs	r0, #0
  4009ae:	e045      	b.n	400a3c <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  4009b0:	b917      	cbnz	r7, 4009b8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4009b2:	a802      	add	r0, sp, #8
  4009b4:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  4009b6:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  4009b8:	4b28      	ldr	r3, [pc, #160]	; (400a5c <xQueueGenericSend+0x1c0>)
  4009ba:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  4009bc:	4b28      	ldr	r3, [pc, #160]	; (400a60 <xQueueGenericSend+0x1c4>)
  4009be:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4009c0:	47b0      	blx	r6
  4009c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4009c4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009c8:	d101      	bne.n	4009ce <xQueueGenericSend+0x132>
  4009ca:	2300      	movs	r3, #0
  4009cc:	6463      	str	r3, [r4, #68]	; 0x44
  4009ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4009d4:	d101      	bne.n	4009da <xQueueGenericSend+0x13e>
  4009d6:	2300      	movs	r3, #0
  4009d8:	64a3      	str	r3, [r4, #72]	; 0x48
  4009da:	4b20      	ldr	r3, [pc, #128]	; (400a5c <xQueueGenericSend+0x1c0>)
  4009dc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4009de:	a901      	add	r1, sp, #4
  4009e0:	a802      	add	r0, sp, #8
  4009e2:	4b20      	ldr	r3, [pc, #128]	; (400a64 <xQueueGenericSend+0x1c8>)
  4009e4:	4798      	blx	r3
  4009e6:	bb18      	cbnz	r0, 400a30 <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  4009e8:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4009ea:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4009ee:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  4009f2:	4b1a      	ldr	r3, [pc, #104]	; (400a5c <xQueueGenericSend+0x1c0>)
  4009f4:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4009f6:	45d3      	cmp	fp, sl
  4009f8:	d114      	bne.n	400a24 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4009fa:	9901      	ldr	r1, [sp, #4]
  4009fc:	f104 0010 	add.w	r0, r4, #16
  400a00:	4b19      	ldr	r3, [pc, #100]	; (400a68 <xQueueGenericSend+0x1cc>)
  400a02:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400a04:	4620      	mov	r0, r4
  400a06:	4b19      	ldr	r3, [pc, #100]	; (400a6c <xQueueGenericSend+0x1d0>)
  400a08:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400a0a:	4b19      	ldr	r3, [pc, #100]	; (400a70 <xQueueGenericSend+0x1d4>)
  400a0c:	4798      	blx	r3
  400a0e:	2800      	cmp	r0, #0
  400a10:	d18d      	bne.n	40092e <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  400a12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400a16:	f8c8 3000 	str.w	r3, [r8]
  400a1a:	f3bf 8f4f 	dsb	sy
  400a1e:	f3bf 8f6f 	isb	sy
  400a22:	e784      	b.n	40092e <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400a24:	4620      	mov	r0, r4
  400a26:	4b11      	ldr	r3, [pc, #68]	; (400a6c <xQueueGenericSend+0x1d0>)
  400a28:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400a2a:	4b11      	ldr	r3, [pc, #68]	; (400a70 <xQueueGenericSend+0x1d4>)
  400a2c:	4798      	blx	r3
  400a2e:	e77e      	b.n	40092e <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400a30:	4620      	mov	r0, r4
  400a32:	4b0e      	ldr	r3, [pc, #56]	; (400a6c <xQueueGenericSend+0x1d0>)
  400a34:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400a36:	4b0e      	ldr	r3, [pc, #56]	; (400a70 <xQueueGenericSend+0x1d4>)
  400a38:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400a3a:	2000      	movs	r0, #0
		}
	}
}
  400a3c:	b005      	add	sp, #20
  400a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400a42:	bf00      	nop
  400a44:	00401659 	.word	0x00401659
  400a48:	004002ed 	.word	0x004002ed
  400a4c:	004005b5 	.word	0x004005b5
  400a50:	0040063d 	.word	0x0040063d
  400a54:	e000ed04 	.word	0xe000ed04
  400a58:	004014f1 	.word	0x004014f1
  400a5c:	00400339 	.word	0x00400339
  400a60:	004010f5 	.word	0x004010f5
  400a64:	004015b9 	.word	0x004015b9
  400a68:	004013ed 	.word	0x004013ed
  400a6c:	004006e9 	.word	0x004006e9
  400a70:	00401245 	.word	0x00401245
  400a74:	00401589 	.word	0x00401589

00400a78 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400a78:	b950      	cbnz	r0, 400a90 <xQueueGenericSendFromISR+0x18>
  400a7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a7e:	b672      	cpsid	i
  400a80:	f383 8811 	msr	BASEPRI, r3
  400a84:	f3bf 8f6f 	isb	sy
  400a88:	f3bf 8f4f 	dsb	sy
  400a8c:	b662      	cpsie	i
  400a8e:	e7fe      	b.n	400a8e <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  400a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a94:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400a96:	b961      	cbnz	r1, 400ab2 <xQueueGenericSendFromISR+0x3a>
  400a98:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400a9a:	b150      	cbz	r0, 400ab2 <xQueueGenericSendFromISR+0x3a>
  400a9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400aa0:	b672      	cpsid	i
  400aa2:	f383 8811 	msr	BASEPRI, r3
  400aa6:	f3bf 8f6f 	isb	sy
  400aaa:	f3bf 8f4f 	dsb	sy
  400aae:	b662      	cpsie	i
  400ab0:	e7fe      	b.n	400ab0 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400ab2:	2b02      	cmp	r3, #2
  400ab4:	d10d      	bne.n	400ad2 <xQueueGenericSendFromISR+0x5a>
  400ab6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400ab8:	2801      	cmp	r0, #1
  400aba:	d00a      	beq.n	400ad2 <xQueueGenericSendFromISR+0x5a>
  400abc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ac0:	b672      	cpsid	i
  400ac2:	f383 8811 	msr	BASEPRI, r3
  400ac6:	f3bf 8f6f 	isb	sy
  400aca:	f3bf 8f4f 	dsb	sy
  400ace:	b662      	cpsie	i
  400ad0:	e7fe      	b.n	400ad0 <xQueueGenericSendFromISR+0x58>
  400ad2:	461e      	mov	r6, r3
  400ad4:	4615      	mov	r5, r2
  400ad6:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400ad8:	4b21      	ldr	r3, [pc, #132]	; (400b60 <xQueueGenericSendFromISR+0xe8>)
  400ada:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400adc:	f3ef 8711 	mrs	r7, BASEPRI
  400ae0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ae4:	b672      	cpsid	i
  400ae6:	f383 8811 	msr	BASEPRI, r3
  400aea:	f3bf 8f6f 	isb	sy
  400aee:	f3bf 8f4f 	dsb	sy
  400af2:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400af4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400af6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400af8:	429a      	cmp	r2, r3
  400afa:	d301      	bcc.n	400b00 <xQueueGenericSendFromISR+0x88>
  400afc:	2e02      	cmp	r6, #2
  400afe:	d123      	bne.n	400b48 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400b00:	4632      	mov	r2, r6
  400b02:	4641      	mov	r1, r8
  400b04:	4620      	mov	r0, r4
  400b06:	4b17      	ldr	r3, [pc, #92]	; (400b64 <xQueueGenericSendFromISR+0xec>)
  400b08:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400b0a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400b10:	d115      	bne.n	400b3e <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400b12:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400b14:	b143      	cbz	r3, 400b28 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400b16:	4631      	mov	r1, r6
  400b18:	4620      	mov	r0, r4
  400b1a:	4b13      	ldr	r3, [pc, #76]	; (400b68 <xQueueGenericSendFromISR+0xf0>)
  400b1c:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  400b1e:	b1ad      	cbz	r5, 400b4c <xQueueGenericSendFromISR+0xd4>
  400b20:	2801      	cmp	r0, #1
  400b22:	d113      	bne.n	400b4c <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  400b24:	6028      	str	r0, [r5, #0]
  400b26:	e016      	b.n	400b56 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400b2a:	b18b      	cbz	r3, 400b50 <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400b2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400b30:	4b0e      	ldr	r3, [pc, #56]	; (400b6c <xQueueGenericSendFromISR+0xf4>)
  400b32:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  400b34:	b175      	cbz	r5, 400b54 <xQueueGenericSendFromISR+0xdc>
  400b36:	b168      	cbz	r0, 400b54 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  400b38:	2001      	movs	r0, #1
  400b3a:	6028      	str	r0, [r5, #0]
  400b3c:	e00b      	b.n	400b56 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400b3e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400b40:	3301      	adds	r3, #1
  400b42:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400b44:	2001      	movs	r0, #1
  400b46:	e006      	b.n	400b56 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400b48:	2000      	movs	r0, #0
  400b4a:	e004      	b.n	400b56 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400b4c:	2001      	movs	r0, #1
  400b4e:	e002      	b.n	400b56 <xQueueGenericSendFromISR+0xde>
  400b50:	2001      	movs	r0, #1
  400b52:	e000      	b.n	400b56 <xQueueGenericSendFromISR+0xde>
  400b54:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400b56:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  400b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b5e:	bf00      	nop
  400b60:	00400445 	.word	0x00400445
  400b64:	004005b5 	.word	0x004005b5
  400b68:	0040063d 	.word	0x0040063d
  400b6c:	004014f1 	.word	0x004014f1

00400b70 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  400b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400b74:	b085      	sub	sp, #20
  400b76:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400b78:	b950      	cbnz	r0, 400b90 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400b7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b7e:	b672      	cpsid	i
  400b80:	f383 8811 	msr	BASEPRI, r3
  400b84:	f3bf 8f6f 	isb	sy
  400b88:	f3bf 8f4f 	dsb	sy
  400b8c:	b662      	cpsie	i
  400b8e:	e7fe      	b.n	400b8e <xQueueGenericReceive+0x1e>
  400b90:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400b92:	b961      	cbnz	r1, 400bae <xQueueGenericReceive+0x3e>
  400b94:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400b96:	b152      	cbz	r2, 400bae <xQueueGenericReceive+0x3e>
  400b98:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b9c:	b672      	cpsid	i
  400b9e:	f383 8811 	msr	BASEPRI, r3
  400ba2:	f3bf 8f6f 	isb	sy
  400ba6:	f3bf 8f4f 	dsb	sy
  400baa:	b662      	cpsie	i
  400bac:	e7fe      	b.n	400bac <xQueueGenericReceive+0x3c>
  400bae:	4698      	mov	r8, r3
  400bb0:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400bb2:	4b52      	ldr	r3, [pc, #328]	; (400cfc <xQueueGenericReceive+0x18c>)
  400bb4:	4798      	blx	r3
  400bb6:	b960      	cbnz	r0, 400bd2 <xQueueGenericReceive+0x62>
  400bb8:	9b01      	ldr	r3, [sp, #4]
  400bba:	b163      	cbz	r3, 400bd6 <xQueueGenericReceive+0x66>
  400bbc:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bc0:	b672      	cpsid	i
  400bc2:	f383 8811 	msr	BASEPRI, r3
  400bc6:	f3bf 8f6f 	isb	sy
  400bca:	f3bf 8f4f 	dsb	sy
  400bce:	b662      	cpsie	i
  400bd0:	e7fe      	b.n	400bd0 <xQueueGenericReceive+0x60>
  400bd2:	2600      	movs	r6, #0
  400bd4:	e000      	b.n	400bd8 <xQueueGenericReceive+0x68>
  400bd6:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400bd8:	4d49      	ldr	r5, [pc, #292]	; (400d00 <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400bda:	f8df a154 	ldr.w	sl, [pc, #340]	; 400d30 <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  400bde:	f8df 9130 	ldr.w	r9, [pc, #304]	; 400d10 <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  400be2:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  400be4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400be6:	2b00      	cmp	r3, #0
  400be8:	d034      	beq.n	400c54 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  400bea:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  400bec:	4659      	mov	r1, fp
  400bee:	4620      	mov	r0, r4
  400bf0:	4b44      	ldr	r3, [pc, #272]	; (400d04 <xQueueGenericReceive+0x194>)
  400bf2:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  400bf4:	f1b8 0f00 	cmp.w	r8, #0
  400bf8:	d118      	bne.n	400c2c <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  400bfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400bfc:	3b01      	subs	r3, #1
  400bfe:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400c00:	6823      	ldr	r3, [r4, #0]
  400c02:	b913      	cbnz	r3, 400c0a <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  400c04:	4b40      	ldr	r3, [pc, #256]	; (400d08 <xQueueGenericReceive+0x198>)
  400c06:	4798      	blx	r3
  400c08:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400c0a:	6923      	ldr	r3, [r4, #16]
  400c0c:	b1f3      	cbz	r3, 400c4c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400c0e:	f104 0010 	add.w	r0, r4, #16
  400c12:	4b3e      	ldr	r3, [pc, #248]	; (400d0c <xQueueGenericReceive+0x19c>)
  400c14:	4798      	blx	r3
  400c16:	2801      	cmp	r0, #1
  400c18:	d118      	bne.n	400c4c <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  400c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c1e:	4b3c      	ldr	r3, [pc, #240]	; (400d10 <xQueueGenericReceive+0x1a0>)
  400c20:	601a      	str	r2, [r3, #0]
  400c22:	f3bf 8f4f 	dsb	sy
  400c26:	f3bf 8f6f 	isb	sy
  400c2a:	e00f      	b.n	400c4c <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  400c2c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400c30:	b163      	cbz	r3, 400c4c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400c32:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400c36:	4b35      	ldr	r3, [pc, #212]	; (400d0c <xQueueGenericReceive+0x19c>)
  400c38:	4798      	blx	r3
  400c3a:	b138      	cbz	r0, 400c4c <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  400c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400c40:	4b33      	ldr	r3, [pc, #204]	; (400d10 <xQueueGenericReceive+0x1a0>)
  400c42:	601a      	str	r2, [r3, #0]
  400c44:	f3bf 8f4f 	dsb	sy
  400c48:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  400c4c:	4b31      	ldr	r3, [pc, #196]	; (400d14 <xQueueGenericReceive+0x1a4>)
  400c4e:	4798      	blx	r3
				return pdPASS;
  400c50:	2001      	movs	r0, #1
  400c52:	e04f      	b.n	400cf4 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  400c54:	9b01      	ldr	r3, [sp, #4]
  400c56:	b91b      	cbnz	r3, 400c60 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400c58:	4b2e      	ldr	r3, [pc, #184]	; (400d14 <xQueueGenericReceive+0x1a4>)
  400c5a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  400c5c:	2000      	movs	r0, #0
  400c5e:	e049      	b.n	400cf4 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  400c60:	b916      	cbnz	r6, 400c68 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400c62:	a802      	add	r0, sp, #8
  400c64:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  400c66:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  400c68:	4b2a      	ldr	r3, [pc, #168]	; (400d14 <xQueueGenericReceive+0x1a4>)
  400c6a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400c6c:	4b2a      	ldr	r3, [pc, #168]	; (400d18 <xQueueGenericReceive+0x1a8>)
  400c6e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400c70:	47a8      	blx	r5
  400c72:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400c74:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c78:	d101      	bne.n	400c7e <xQueueGenericReceive+0x10e>
  400c7a:	2300      	movs	r3, #0
  400c7c:	6463      	str	r3, [r4, #68]	; 0x44
  400c7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400c80:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c84:	d101      	bne.n	400c8a <xQueueGenericReceive+0x11a>
  400c86:	2300      	movs	r3, #0
  400c88:	64a3      	str	r3, [r4, #72]	; 0x48
  400c8a:	4b22      	ldr	r3, [pc, #136]	; (400d14 <xQueueGenericReceive+0x1a4>)
  400c8c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400c8e:	a901      	add	r1, sp, #4
  400c90:	a802      	add	r0, sp, #8
  400c92:	4b22      	ldr	r3, [pc, #136]	; (400d1c <xQueueGenericReceive+0x1ac>)
  400c94:	4798      	blx	r3
  400c96:	bb38      	cbnz	r0, 400ce8 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400c98:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  400c9a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400c9c:	4b1d      	ldr	r3, [pc, #116]	; (400d14 <xQueueGenericReceive+0x1a4>)
  400c9e:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  400ca0:	b9e7      	cbnz	r7, 400cdc <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400ca2:	6823      	ldr	r3, [r4, #0]
  400ca4:	b92b      	cbnz	r3, 400cb2 <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  400ca6:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  400ca8:	6860      	ldr	r0, [r4, #4]
  400caa:	4b1d      	ldr	r3, [pc, #116]	; (400d20 <xQueueGenericReceive+0x1b0>)
  400cac:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  400cae:	4b19      	ldr	r3, [pc, #100]	; (400d14 <xQueueGenericReceive+0x1a4>)
  400cb0:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  400cb2:	9901      	ldr	r1, [sp, #4]
  400cb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400cb8:	4b1a      	ldr	r3, [pc, #104]	; (400d24 <xQueueGenericReceive+0x1b4>)
  400cba:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  400cbc:	4620      	mov	r0, r4
  400cbe:	4b1a      	ldr	r3, [pc, #104]	; (400d28 <xQueueGenericReceive+0x1b8>)
  400cc0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  400cc2:	4b1a      	ldr	r3, [pc, #104]	; (400d2c <xQueueGenericReceive+0x1bc>)
  400cc4:	4798      	blx	r3
  400cc6:	2800      	cmp	r0, #0
  400cc8:	d18b      	bne.n	400be2 <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  400cca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400cce:	f8c9 3000 	str.w	r3, [r9]
  400cd2:	f3bf 8f4f 	dsb	sy
  400cd6:	f3bf 8f6f 	isb	sy
  400cda:	e782      	b.n	400be2 <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400cdc:	4620      	mov	r0, r4
  400cde:	4b12      	ldr	r3, [pc, #72]	; (400d28 <xQueueGenericReceive+0x1b8>)
  400ce0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400ce2:	4b12      	ldr	r3, [pc, #72]	; (400d2c <xQueueGenericReceive+0x1bc>)
  400ce4:	4798      	blx	r3
  400ce6:	e77c      	b.n	400be2 <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  400ce8:	4620      	mov	r0, r4
  400cea:	4b0f      	ldr	r3, [pc, #60]	; (400d28 <xQueueGenericReceive+0x1b8>)
  400cec:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400cee:	4b0f      	ldr	r3, [pc, #60]	; (400d2c <xQueueGenericReceive+0x1bc>)
  400cf0:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  400cf2:	2000      	movs	r0, #0
		}
	}
}
  400cf4:	b005      	add	sp, #20
  400cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400cfa:	bf00      	nop
  400cfc:	00401659 	.word	0x00401659
  400d00:	004002ed 	.word	0x004002ed
  400d04:	004006c1 	.word	0x004006c1
  400d08:	004017e1 	.word	0x004017e1
  400d0c:	004014f1 	.word	0x004014f1
  400d10:	e000ed04 	.word	0xe000ed04
  400d14:	00400339 	.word	0x00400339
  400d18:	004010f5 	.word	0x004010f5
  400d1c:	004015b9 	.word	0x004015b9
  400d20:	00401679 	.word	0x00401679
  400d24:	004013ed 	.word	0x004013ed
  400d28:	004006e9 	.word	0x004006e9
  400d2c:	00401245 	.word	0x00401245
  400d30:	00401589 	.word	0x00401589

00400d34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  400d34:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  400d36:	4b0b      	ldr	r3, [pc, #44]	; (400d64 <vQueueAddToRegistry+0x30>)
  400d38:	681b      	ldr	r3, [r3, #0]
  400d3a:	b12b      	cbz	r3, 400d48 <vQueueAddToRegistry+0x14>
  400d3c:	2301      	movs	r3, #1
  400d3e:	4c09      	ldr	r4, [pc, #36]	; (400d64 <vQueueAddToRegistry+0x30>)
  400d40:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  400d44:	b942      	cbnz	r2, 400d58 <vQueueAddToRegistry+0x24>
  400d46:	e000      	b.n	400d4a <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400d48:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  400d4a:	4a06      	ldr	r2, [pc, #24]	; (400d64 <vQueueAddToRegistry+0x30>)
  400d4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  400d50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  400d54:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  400d56:	e002      	b.n	400d5e <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  400d58:	3301      	adds	r3, #1
  400d5a:	2b08      	cmp	r3, #8
  400d5c:	d1f0      	bne.n	400d40 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  400d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  400d62:	4770      	bx	lr
  400d64:	2040be68 	.word	0x2040be68

00400d68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  400d68:	b570      	push	{r4, r5, r6, lr}
  400d6a:	4604      	mov	r4, r0
  400d6c:	460d      	mov	r5, r1
  400d6e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  400d70:	4b0d      	ldr	r3, [pc, #52]	; (400da8 <vQueueWaitForMessageRestricted+0x40>)
  400d72:	4798      	blx	r3
  400d74:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d76:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d7a:	d101      	bne.n	400d80 <vQueueWaitForMessageRestricted+0x18>
  400d7c:	2300      	movs	r3, #0
  400d7e:	6463      	str	r3, [r4, #68]	; 0x44
  400d80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d82:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d86:	d101      	bne.n	400d8c <vQueueWaitForMessageRestricted+0x24>
  400d88:	2300      	movs	r3, #0
  400d8a:	64a3      	str	r3, [r4, #72]	; 0x48
  400d8c:	4b07      	ldr	r3, [pc, #28]	; (400dac <vQueueWaitForMessageRestricted+0x44>)
  400d8e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  400d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400d92:	b92b      	cbnz	r3, 400da0 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  400d94:	4632      	mov	r2, r6
  400d96:	4629      	mov	r1, r5
  400d98:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d9c:	4b04      	ldr	r3, [pc, #16]	; (400db0 <vQueueWaitForMessageRestricted+0x48>)
  400d9e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  400da0:	4620      	mov	r0, r4
  400da2:	4b04      	ldr	r3, [pc, #16]	; (400db4 <vQueueWaitForMessageRestricted+0x4c>)
  400da4:	4798      	blx	r3
  400da6:	bd70      	pop	{r4, r5, r6, pc}
  400da8:	004002ed 	.word	0x004002ed
  400dac:	00400339 	.word	0x00400339
  400db0:	00401471 	.word	0x00401471
  400db4:	004006e9 	.word	0x004006e9

00400db8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  400db8:	4b08      	ldr	r3, [pc, #32]	; (400ddc <prvResetNextTaskUnblockTime+0x24>)
  400dba:	681b      	ldr	r3, [r3, #0]
  400dbc:	681b      	ldr	r3, [r3, #0]
  400dbe:	b923      	cbnz	r3, 400dca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  400dc0:	f04f 32ff 	mov.w	r2, #4294967295
  400dc4:	4b06      	ldr	r3, [pc, #24]	; (400de0 <prvResetNextTaskUnblockTime+0x28>)
  400dc6:	601a      	str	r2, [r3, #0]
  400dc8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  400dca:	4b04      	ldr	r3, [pc, #16]	; (400ddc <prvResetNextTaskUnblockTime+0x24>)
  400dcc:	681b      	ldr	r3, [r3, #0]
  400dce:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  400dd0:	68db      	ldr	r3, [r3, #12]
  400dd2:	685a      	ldr	r2, [r3, #4]
  400dd4:	4b02      	ldr	r3, [pc, #8]	; (400de0 <prvResetNextTaskUnblockTime+0x28>)
  400dd6:	601a      	str	r2, [r3, #0]
  400dd8:	4770      	bx	lr
  400dda:	bf00      	nop
  400ddc:	2040bcd0 	.word	0x2040bcd0
  400de0:	2040bdf4 	.word	0x2040bdf4

00400de4 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  400de4:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  400de6:	4b0f      	ldr	r3, [pc, #60]	; (400e24 <prvAddCurrentTaskToDelayedList+0x40>)
  400de8:	681b      	ldr	r3, [r3, #0]
  400dea:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  400dec:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <prvAddCurrentTaskToDelayedList+0x44>)
  400dee:	681b      	ldr	r3, [r3, #0]
  400df0:	4298      	cmp	r0, r3
  400df2:	d207      	bcs.n	400e04 <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400df4:	4b0d      	ldr	r3, [pc, #52]	; (400e2c <prvAddCurrentTaskToDelayedList+0x48>)
  400df6:	6818      	ldr	r0, [r3, #0]
  400df8:	4b0a      	ldr	r3, [pc, #40]	; (400e24 <prvAddCurrentTaskToDelayedList+0x40>)
  400dfa:	6819      	ldr	r1, [r3, #0]
  400dfc:	3104      	adds	r1, #4
  400dfe:	4b0c      	ldr	r3, [pc, #48]	; (400e30 <prvAddCurrentTaskToDelayedList+0x4c>)
  400e00:	4798      	blx	r3
  400e02:	bd10      	pop	{r4, pc}
  400e04:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  400e06:	4b0b      	ldr	r3, [pc, #44]	; (400e34 <prvAddCurrentTaskToDelayedList+0x50>)
  400e08:	6818      	ldr	r0, [r3, #0]
  400e0a:	4b06      	ldr	r3, [pc, #24]	; (400e24 <prvAddCurrentTaskToDelayedList+0x40>)
  400e0c:	6819      	ldr	r1, [r3, #0]
  400e0e:	3104      	adds	r1, #4
  400e10:	4b07      	ldr	r3, [pc, #28]	; (400e30 <prvAddCurrentTaskToDelayedList+0x4c>)
  400e12:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  400e14:	4b08      	ldr	r3, [pc, #32]	; (400e38 <prvAddCurrentTaskToDelayedList+0x54>)
  400e16:	681b      	ldr	r3, [r3, #0]
  400e18:	429c      	cmp	r4, r3
  400e1a:	d201      	bcs.n	400e20 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  400e1c:	4b06      	ldr	r3, [pc, #24]	; (400e38 <prvAddCurrentTaskToDelayedList+0x54>)
  400e1e:	601c      	str	r4, [r3, #0]
  400e20:	bd10      	pop	{r4, pc}
  400e22:	bf00      	nop
  400e24:	2040bdd4 	.word	0x2040bdd4
  400e28:	2040bdf0 	.word	0x2040bdf0
  400e2c:	2040bcf0 	.word	0x2040bcf0
  400e30:	0040055d 	.word	0x0040055d
  400e34:	2040bcd0 	.word	0x2040bcd0
  400e38:	2040bdf4 	.word	0x2040bdf4

00400e3c <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  400e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e40:	b083      	sub	sp, #12
  400e42:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  400e44:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  400e48:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  400e4a:	b950      	cbnz	r0, 400e62 <xTaskGenericCreate+0x26>
  400e4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e50:	b672      	cpsid	i
  400e52:	f383 8811 	msr	BASEPRI, r3
  400e56:	f3bf 8f6f 	isb	sy
  400e5a:	f3bf 8f4f 	dsb	sy
  400e5e:	b662      	cpsie	i
  400e60:	e7fe      	b.n	400e60 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  400e62:	2f09      	cmp	r7, #9
  400e64:	d90a      	bls.n	400e7c <xTaskGenericCreate+0x40>
  400e66:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e6a:	b672      	cpsid	i
  400e6c:	f383 8811 	msr	BASEPRI, r3
  400e70:	f3bf 8f6f 	isb	sy
  400e74:	f3bf 8f4f 	dsb	sy
  400e78:	b662      	cpsie	i
  400e7a:	e7fe      	b.n	400e7a <xTaskGenericCreate+0x3e>
  400e7c:	9001      	str	r0, [sp, #4]
  400e7e:	9300      	str	r3, [sp, #0]
  400e80:	4690      	mov	r8, r2
  400e82:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400e84:	b935      	cbnz	r5, 400e94 <xTaskGenericCreate+0x58>
  400e86:	0090      	lsls	r0, r2, #2
  400e88:	4b5f      	ldr	r3, [pc, #380]	; (401008 <xTaskGenericCreate+0x1cc>)
  400e8a:	4798      	blx	r3

		if( pxStack != NULL )
  400e8c:	4605      	mov	r5, r0
  400e8e:	2800      	cmp	r0, #0
  400e90:	f000 80b4 	beq.w	400ffc <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  400e94:	2058      	movs	r0, #88	; 0x58
  400e96:	4b5c      	ldr	r3, [pc, #368]	; (401008 <xTaskGenericCreate+0x1cc>)
  400e98:	4798      	blx	r3

			if( pxNewTCB != NULL )
  400e9a:	4604      	mov	r4, r0
  400e9c:	b1a0      	cbz	r0, 400ec8 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  400e9e:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  400ea0:	ea4f 0288 	mov.w	r2, r8, lsl #2
  400ea4:	21a5      	movs	r1, #165	; 0xa5
  400ea6:	4628      	mov	r0, r5
  400ea8:	4b58      	ldr	r3, [pc, #352]	; (40100c <xTaskGenericCreate+0x1d0>)
  400eaa:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  400eac:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  400eb0:	4445      	add	r5, r8
  400eb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  400eb4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  400eb8:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  400ebc:	7833      	ldrb	r3, [r6, #0]
  400ebe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  400ec2:	7833      	ldrb	r3, [r6, #0]
  400ec4:	b923      	cbnz	r3, 400ed0 <xTaskGenericCreate+0x94>
  400ec6:	e00f      	b.n	400ee8 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  400ec8:	4628      	mov	r0, r5
  400eca:	4b51      	ldr	r3, [pc, #324]	; (401010 <xTaskGenericCreate+0x1d4>)
  400ecc:	4798      	blx	r3
  400ece:	e095      	b.n	400ffc <xTaskGenericCreate+0x1c0>
  400ed0:	4633      	mov	r3, r6
  400ed2:	f104 0234 	add.w	r2, r4, #52	; 0x34
  400ed6:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  400ed8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  400edc:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  400ee0:	7819      	ldrb	r1, [r3, #0]
  400ee2:	b109      	cbz	r1, 400ee8 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  400ee4:	429e      	cmp	r6, r3
  400ee6:	d1f7      	bne.n	400ed8 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  400ee8:	f04f 0800 	mov.w	r8, #0
  400eec:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  400ef0:	463e      	mov	r6, r7
  400ef2:	2f09      	cmp	r7, #9
  400ef4:	bf28      	it	cs
  400ef6:	2609      	movcs	r6, #9
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  400ef8:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  400efa:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  400efc:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  400f00:	f104 0904 	add.w	r9, r4, #4
  400f04:	4648      	mov	r0, r9
  400f06:	f8df b154 	ldr.w	fp, [pc, #340]	; 40105c <xTaskGenericCreate+0x220>
  400f0a:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  400f0c:	f104 0018 	add.w	r0, r4, #24
  400f10:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  400f12:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400f14:	f1c6 060a 	rsb	r6, r6, #10
  400f18:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  400f1a:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  400f1c:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  400f20:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  400f24:	9a00      	ldr	r2, [sp, #0]
  400f26:	9901      	ldr	r1, [sp, #4]
  400f28:	4628      	mov	r0, r5
  400f2a:	4b3a      	ldr	r3, [pc, #232]	; (401014 <xTaskGenericCreate+0x1d8>)
  400f2c:	4798      	blx	r3
  400f2e:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  400f30:	f1ba 0f00 	cmp.w	sl, #0
  400f34:	d001      	beq.n	400f3a <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  400f36:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  400f3a:	4b37      	ldr	r3, [pc, #220]	; (401018 <xTaskGenericCreate+0x1dc>)
  400f3c:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  400f3e:	4a37      	ldr	r2, [pc, #220]	; (40101c <xTaskGenericCreate+0x1e0>)
  400f40:	6813      	ldr	r3, [r2, #0]
  400f42:	3301      	adds	r3, #1
  400f44:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  400f46:	4b36      	ldr	r3, [pc, #216]	; (401020 <xTaskGenericCreate+0x1e4>)
  400f48:	681b      	ldr	r3, [r3, #0]
  400f4a:	bb0b      	cbnz	r3, 400f90 <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  400f4c:	4b34      	ldr	r3, [pc, #208]	; (401020 <xTaskGenericCreate+0x1e4>)
  400f4e:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  400f50:	6813      	ldr	r3, [r2, #0]
  400f52:	2b01      	cmp	r3, #1
  400f54:	d126      	bne.n	400fa4 <xTaskGenericCreate+0x168>
  400f56:	4d33      	ldr	r5, [pc, #204]	; (401024 <xTaskGenericCreate+0x1e8>)
  400f58:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  400f5c:	4e32      	ldr	r6, [pc, #200]	; (401028 <xTaskGenericCreate+0x1ec>)
  400f5e:	4628      	mov	r0, r5
  400f60:	47b0      	blx	r6
  400f62:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  400f64:	4545      	cmp	r5, r8
  400f66:	d1fa      	bne.n	400f5e <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  400f68:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 401060 <xTaskGenericCreate+0x224>
  400f6c:	4640      	mov	r0, r8
  400f6e:	4d2e      	ldr	r5, [pc, #184]	; (401028 <xTaskGenericCreate+0x1ec>)
  400f70:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  400f72:	4e2e      	ldr	r6, [pc, #184]	; (40102c <xTaskGenericCreate+0x1f0>)
  400f74:	4630      	mov	r0, r6
  400f76:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  400f78:	482d      	ldr	r0, [pc, #180]	; (401030 <xTaskGenericCreate+0x1f4>)
  400f7a:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  400f7c:	482d      	ldr	r0, [pc, #180]	; (401034 <xTaskGenericCreate+0x1f8>)
  400f7e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  400f80:	482d      	ldr	r0, [pc, #180]	; (401038 <xTaskGenericCreate+0x1fc>)
  400f82:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  400f84:	4b2d      	ldr	r3, [pc, #180]	; (40103c <xTaskGenericCreate+0x200>)
  400f86:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  400f8a:	4b2d      	ldr	r3, [pc, #180]	; (401040 <xTaskGenericCreate+0x204>)
  400f8c:	601e      	str	r6, [r3, #0]
  400f8e:	e009      	b.n	400fa4 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  400f90:	4b2c      	ldr	r3, [pc, #176]	; (401044 <xTaskGenericCreate+0x208>)
  400f92:	681b      	ldr	r3, [r3, #0]
  400f94:	b933      	cbnz	r3, 400fa4 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  400f96:	4b22      	ldr	r3, [pc, #136]	; (401020 <xTaskGenericCreate+0x1e4>)
  400f98:	681b      	ldr	r3, [r3, #0]
  400f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400f9c:	429f      	cmp	r7, r3
  400f9e:	d301      	bcc.n	400fa4 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  400fa0:	4b1f      	ldr	r3, [pc, #124]	; (401020 <xTaskGenericCreate+0x1e4>)
  400fa2:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  400fa4:	4a28      	ldr	r2, [pc, #160]	; (401048 <xTaskGenericCreate+0x20c>)
  400fa6:	6813      	ldr	r3, [r2, #0]
  400fa8:	3301      	adds	r3, #1
  400faa:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  400fac:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  400fae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  400fb0:	4926      	ldr	r1, [pc, #152]	; (40104c <xTaskGenericCreate+0x210>)
  400fb2:	680b      	ldr	r3, [r1, #0]
  400fb4:	2201      	movs	r2, #1
  400fb6:	4082      	lsls	r2, r0
  400fb8:	4313      	orrs	r3, r2
  400fba:	600b      	str	r3, [r1, #0]
  400fbc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400fc0:	4649      	mov	r1, r9
  400fc2:	4b18      	ldr	r3, [pc, #96]	; (401024 <xTaskGenericCreate+0x1e8>)
  400fc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  400fc8:	4b21      	ldr	r3, [pc, #132]	; (401050 <xTaskGenericCreate+0x214>)
  400fca:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  400fcc:	4b21      	ldr	r3, [pc, #132]	; (401054 <xTaskGenericCreate+0x218>)
  400fce:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  400fd0:	4b1c      	ldr	r3, [pc, #112]	; (401044 <xTaskGenericCreate+0x208>)
  400fd2:	681b      	ldr	r3, [r3, #0]
  400fd4:	b173      	cbz	r3, 400ff4 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  400fd6:	4b12      	ldr	r3, [pc, #72]	; (401020 <xTaskGenericCreate+0x1e4>)
  400fd8:	681b      	ldr	r3, [r3, #0]
  400fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  400fdc:	429f      	cmp	r7, r3
  400fde:	d90b      	bls.n	400ff8 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  400fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fe4:	4b1c      	ldr	r3, [pc, #112]	; (401058 <xTaskGenericCreate+0x21c>)
  400fe6:	601a      	str	r2, [r3, #0]
  400fe8:	f3bf 8f4f 	dsb	sy
  400fec:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  400ff0:	2001      	movs	r0, #1
  400ff2:	e005      	b.n	401000 <xTaskGenericCreate+0x1c4>
  400ff4:	2001      	movs	r0, #1
  400ff6:	e003      	b.n	401000 <xTaskGenericCreate+0x1c4>
  400ff8:	2001      	movs	r0, #1
  400ffa:	e001      	b.n	401000 <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  400ffc:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  401000:	b003      	add	sp, #12
  401002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401006:	bf00      	nop
  401008:	004004a9 	.word	0x004004a9
  40100c:	0040241d 	.word	0x0040241d
  401010:	00400509 	.word	0x00400509
  401014:	004002c5 	.word	0x004002c5
  401018:	004002ed 	.word	0x004002ed
  40101c:	2040bdfc 	.word	0x2040bdfc
  401020:	2040bdd4 	.word	0x2040bdd4
  401024:	2040bcf8 	.word	0x2040bcf8
  401028:	00400525 	.word	0x00400525
  40102c:	2040be00 	.word	0x2040be00
  401030:	2040bdd8 	.word	0x2040bdd8
  401034:	2040bdc0 	.word	0x2040bdc0
  401038:	2040be14 	.word	0x2040be14
  40103c:	2040bcd0 	.word	0x2040bcd0
  401040:	2040bcf0 	.word	0x2040bcf0
  401044:	2040bcd4 	.word	0x2040bcd4
  401048:	2040bdf8 	.word	0x2040bdf8
  40104c:	2040be28 	.word	0x2040be28
  401050:	00400545 	.word	0x00400545
  401054:	00400339 	.word	0x00400339
  401058:	e000ed04 	.word	0xe000ed04
  40105c:	0040053d 	.word	0x0040053d
  401060:	2040bcdc 	.word	0x2040bcdc

00401064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401064:	b510      	push	{r4, lr}
  401066:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401068:	2300      	movs	r3, #0
  40106a:	9303      	str	r3, [sp, #12]
  40106c:	9302      	str	r3, [sp, #8]
  40106e:	9301      	str	r3, [sp, #4]
  401070:	9300      	str	r3, [sp, #0]
  401072:	2282      	movs	r2, #130	; 0x82
  401074:	4917      	ldr	r1, [pc, #92]	; (4010d4 <vTaskStartScheduler+0x70>)
  401076:	4818      	ldr	r0, [pc, #96]	; (4010d8 <vTaskStartScheduler+0x74>)
  401078:	4c18      	ldr	r4, [pc, #96]	; (4010dc <vTaskStartScheduler+0x78>)
  40107a:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  40107c:	2801      	cmp	r0, #1
  40107e:	d11a      	bne.n	4010b6 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401080:	4b17      	ldr	r3, [pc, #92]	; (4010e0 <vTaskStartScheduler+0x7c>)
  401082:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401084:	2801      	cmp	r0, #1
  401086:	d116      	bne.n	4010b6 <vTaskStartScheduler+0x52>
  401088:	f04f 0380 	mov.w	r3, #128	; 0x80
  40108c:	b672      	cpsid	i
  40108e:	f383 8811 	msr	BASEPRI, r3
  401092:	f3bf 8f6f 	isb	sy
  401096:	f3bf 8f4f 	dsb	sy
  40109a:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  40109c:	f04f 32ff 	mov.w	r2, #4294967295
  4010a0:	4b10      	ldr	r3, [pc, #64]	; (4010e4 <vTaskStartScheduler+0x80>)
  4010a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4010a4:	2201      	movs	r2, #1
  4010a6:	4b10      	ldr	r3, [pc, #64]	; (4010e8 <vTaskStartScheduler+0x84>)
  4010a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4010aa:	2200      	movs	r2, #0
  4010ac:	4b0f      	ldr	r3, [pc, #60]	; (4010ec <vTaskStartScheduler+0x88>)
  4010ae:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  4010b0:	4b0f      	ldr	r3, [pc, #60]	; (4010f0 <vTaskStartScheduler+0x8c>)
  4010b2:	4798      	blx	r3
  4010b4:	e00b      	b.n	4010ce <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  4010b6:	b950      	cbnz	r0, 4010ce <vTaskStartScheduler+0x6a>
  4010b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010bc:	b672      	cpsid	i
  4010be:	f383 8811 	msr	BASEPRI, r3
  4010c2:	f3bf 8f6f 	isb	sy
  4010c6:	f3bf 8f4f 	dsb	sy
  4010ca:	b662      	cpsie	i
  4010cc:	e7fe      	b.n	4010cc <vTaskStartScheduler+0x68>
	}
}
  4010ce:	b004      	add	sp, #16
  4010d0:	bd10      	pop	{r4, pc}
  4010d2:	bf00      	nop
  4010d4:	004025a4 	.word	0x004025a4
  4010d8:	0040135d 	.word	0x0040135d
  4010dc:	00400e3d 	.word	0x00400e3d
  4010e0:	004018c9 	.word	0x004018c9
  4010e4:	2040bdf4 	.word	0x2040bdf4
  4010e8:	2040bcd4 	.word	0x2040bcd4
  4010ec:	2040bdf0 	.word	0x2040bdf0
  4010f0:	00400381 	.word	0x00400381

004010f4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  4010f4:	4a02      	ldr	r2, [pc, #8]	; (401100 <vTaskSuspendAll+0xc>)
  4010f6:	6813      	ldr	r3, [r2, #0]
  4010f8:	3301      	adds	r3, #1
  4010fa:	6013      	str	r3, [r2, #0]
  4010fc:	4770      	bx	lr
  4010fe:	bf00      	nop
  401100:	2040bdec 	.word	0x2040bdec

00401104 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  401104:	4b01      	ldr	r3, [pc, #4]	; (40110c <xTaskGetTickCount+0x8>)
  401106:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  401108:	4770      	bx	lr
  40110a:	bf00      	nop
  40110c:	2040bdf0 	.word	0x2040bdf0

00401110 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  401110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401114:	4b3d      	ldr	r3, [pc, #244]	; (40120c <xTaskIncrementTick+0xfc>)
  401116:	681b      	ldr	r3, [r3, #0]
  401118:	2b00      	cmp	r3, #0
  40111a:	d16a      	bne.n	4011f2 <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  40111c:	4b3c      	ldr	r3, [pc, #240]	; (401210 <xTaskIncrementTick+0x100>)
  40111e:	681a      	ldr	r2, [r3, #0]
  401120:	3201      	adds	r2, #1
  401122:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  401124:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  401126:	b9d6      	cbnz	r6, 40115e <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  401128:	4b3a      	ldr	r3, [pc, #232]	; (401214 <xTaskIncrementTick+0x104>)
  40112a:	681b      	ldr	r3, [r3, #0]
  40112c:	681b      	ldr	r3, [r3, #0]
  40112e:	b153      	cbz	r3, 401146 <xTaskIncrementTick+0x36>
  401130:	f04f 0380 	mov.w	r3, #128	; 0x80
  401134:	b672      	cpsid	i
  401136:	f383 8811 	msr	BASEPRI, r3
  40113a:	f3bf 8f6f 	isb	sy
  40113e:	f3bf 8f4f 	dsb	sy
  401142:	b662      	cpsie	i
  401144:	e7fe      	b.n	401144 <xTaskIncrementTick+0x34>
  401146:	4a33      	ldr	r2, [pc, #204]	; (401214 <xTaskIncrementTick+0x104>)
  401148:	6811      	ldr	r1, [r2, #0]
  40114a:	4b33      	ldr	r3, [pc, #204]	; (401218 <xTaskIncrementTick+0x108>)
  40114c:	6818      	ldr	r0, [r3, #0]
  40114e:	6010      	str	r0, [r2, #0]
  401150:	6019      	str	r1, [r3, #0]
  401152:	4a32      	ldr	r2, [pc, #200]	; (40121c <xTaskIncrementTick+0x10c>)
  401154:	6813      	ldr	r3, [r2, #0]
  401156:	3301      	adds	r3, #1
  401158:	6013      	str	r3, [r2, #0]
  40115a:	4b31      	ldr	r3, [pc, #196]	; (401220 <xTaskIncrementTick+0x110>)
  40115c:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  40115e:	4b31      	ldr	r3, [pc, #196]	; (401224 <xTaskIncrementTick+0x114>)
  401160:	681b      	ldr	r3, [r3, #0]
  401162:	429e      	cmp	r6, r3
  401164:	d201      	bcs.n	40116a <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401166:	2400      	movs	r4, #0
  401168:	e037      	b.n	4011da <xTaskIncrementTick+0xca>
  40116a:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40116c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401214 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401170:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 401240 <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401174:	4f2c      	ldr	r7, [pc, #176]	; (401228 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401176:	f8d9 3000 	ldr.w	r3, [r9]
  40117a:	681b      	ldr	r3, [r3, #0]
  40117c:	b923      	cbnz	r3, 401188 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  40117e:	f04f 32ff 	mov.w	r2, #4294967295
  401182:	4b28      	ldr	r3, [pc, #160]	; (401224 <xTaskIncrementTick+0x114>)
  401184:	601a      	str	r2, [r3, #0]
						break;
  401186:	e028      	b.n	4011da <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401188:	f8d9 3000 	ldr.w	r3, [r9]
  40118c:	68db      	ldr	r3, [r3, #12]
  40118e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401190:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  401192:	429e      	cmp	r6, r3
  401194:	d202      	bcs.n	40119c <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401196:	4a23      	ldr	r2, [pc, #140]	; (401224 <xTaskIncrementTick+0x114>)
  401198:	6013      	str	r3, [r2, #0]
							break;
  40119a:	e01e      	b.n	4011da <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40119c:	f105 0a04 	add.w	sl, r5, #4
  4011a0:	4650      	mov	r0, sl
  4011a2:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4011a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
  4011a6:	b113      	cbz	r3, 4011ae <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4011a8:	f105 0018 	add.w	r0, r5, #24
  4011ac:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  4011ae:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4011b0:	683b      	ldr	r3, [r7, #0]
  4011b2:	2201      	movs	r2, #1
  4011b4:	4082      	lsls	r2, r0
  4011b6:	4313      	orrs	r3, r2
  4011b8:	603b      	str	r3, [r7, #0]
  4011ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4011be:	4651      	mov	r1, sl
  4011c0:	4b1a      	ldr	r3, [pc, #104]	; (40122c <xTaskIncrementTick+0x11c>)
  4011c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4011c6:	4b1a      	ldr	r3, [pc, #104]	; (401230 <xTaskIncrementTick+0x120>)
  4011c8:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4011ca:	4b1a      	ldr	r3, [pc, #104]	; (401234 <xTaskIncrementTick+0x124>)
  4011cc:	681b      	ldr	r3, [r3, #0]
  4011ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4011d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  4011d2:	429a      	cmp	r2, r3
  4011d4:	bf28      	it	cs
  4011d6:	2401      	movcs	r4, #1
  4011d8:	e7cd      	b.n	401176 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4011da:	4b16      	ldr	r3, [pc, #88]	; (401234 <xTaskIncrementTick+0x124>)
  4011dc:	681b      	ldr	r3, [r3, #0]
  4011de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4011e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4011e4:	4a11      	ldr	r2, [pc, #68]	; (40122c <xTaskIncrementTick+0x11c>)
  4011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  4011ea:	2b02      	cmp	r3, #2
  4011ec:	bf28      	it	cs
  4011ee:	2401      	movcs	r4, #1
  4011f0:	e004      	b.n	4011fc <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  4011f2:	4a11      	ldr	r2, [pc, #68]	; (401238 <xTaskIncrementTick+0x128>)
  4011f4:	6813      	ldr	r3, [r2, #0]
  4011f6:	3301      	adds	r3, #1
  4011f8:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4011fa:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  4011fc:	4b0f      	ldr	r3, [pc, #60]	; (40123c <xTaskIncrementTick+0x12c>)
  4011fe:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401200:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  401202:	bf0c      	ite	eq
  401204:	4620      	moveq	r0, r4
  401206:	2001      	movne	r0, #1
  401208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40120c:	2040bdec 	.word	0x2040bdec
  401210:	2040bdf0 	.word	0x2040bdf0
  401214:	2040bcd0 	.word	0x2040bcd0
  401218:	2040bcf0 	.word	0x2040bcf0
  40121c:	2040bccc 	.word	0x2040bccc
  401220:	00400db9 	.word	0x00400db9
  401224:	2040bdf4 	.word	0x2040bdf4
  401228:	2040be28 	.word	0x2040be28
  40122c:	2040bcf8 	.word	0x2040bcf8
  401230:	00400545 	.word	0x00400545
  401234:	2040bdd4 	.word	0x2040bdd4
  401238:	2040bcf4 	.word	0x2040bcf4
  40123c:	2040be2c 	.word	0x2040be2c
  401240:	00400591 	.word	0x00400591

00401244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  401244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  401248:	4b36      	ldr	r3, [pc, #216]	; (401324 <xTaskResumeAll+0xe0>)
  40124a:	681b      	ldr	r3, [r3, #0]
  40124c:	b953      	cbnz	r3, 401264 <xTaskResumeAll+0x20>
  40124e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401252:	b672      	cpsid	i
  401254:	f383 8811 	msr	BASEPRI, r3
  401258:	f3bf 8f6f 	isb	sy
  40125c:	f3bf 8f4f 	dsb	sy
  401260:	b662      	cpsie	i
  401262:	e7fe      	b.n	401262 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401264:	4b30      	ldr	r3, [pc, #192]	; (401328 <xTaskResumeAll+0xe4>)
  401266:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401268:	4b2e      	ldr	r3, [pc, #184]	; (401324 <xTaskResumeAll+0xe0>)
  40126a:	681a      	ldr	r2, [r3, #0]
  40126c:	3a01      	subs	r2, #1
  40126e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401270:	681b      	ldr	r3, [r3, #0]
  401272:	2b00      	cmp	r3, #0
  401274:	d14d      	bne.n	401312 <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401276:	4b2d      	ldr	r3, [pc, #180]	; (40132c <xTaskResumeAll+0xe8>)
  401278:	681b      	ldr	r3, [r3, #0]
  40127a:	bb0b      	cbnz	r3, 4012c0 <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  40127c:	2400      	movs	r4, #0
  40127e:	e04b      	b.n	401318 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401280:	68fb      	ldr	r3, [r7, #12]
  401282:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401284:	f104 0018 	add.w	r0, r4, #24
  401288:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40128a:	f104 0804 	add.w	r8, r4, #4
  40128e:	4640      	mov	r0, r8
  401290:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401292:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401294:	682b      	ldr	r3, [r5, #0]
  401296:	2201      	movs	r2, #1
  401298:	4082      	lsls	r2, r0
  40129a:	4313      	orrs	r3, r2
  40129c:	602b      	str	r3, [r5, #0]
  40129e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4012a2:	4641      	mov	r1, r8
  4012a4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4012a8:	4b21      	ldr	r3, [pc, #132]	; (401330 <xTaskResumeAll+0xec>)
  4012aa:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4012ac:	4b21      	ldr	r3, [pc, #132]	; (401334 <xTaskResumeAll+0xf0>)
  4012ae:	681b      	ldr	r3, [r3, #0]
  4012b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4012b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4012b4:	429a      	cmp	r2, r3
  4012b6:	d308      	bcc.n	4012ca <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  4012b8:	2201      	movs	r2, #1
  4012ba:	4b1f      	ldr	r3, [pc, #124]	; (401338 <xTaskResumeAll+0xf4>)
  4012bc:	601a      	str	r2, [r3, #0]
  4012be:	e004      	b.n	4012ca <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4012c0:	4f1e      	ldr	r7, [pc, #120]	; (40133c <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4012c2:	4e1f      	ldr	r6, [pc, #124]	; (401340 <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  4012c4:	4d1f      	ldr	r5, [pc, #124]	; (401344 <xTaskResumeAll+0x100>)
  4012c6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 401358 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4012ca:	683b      	ldr	r3, [r7, #0]
  4012cc:	2b00      	cmp	r3, #0
  4012ce:	d1d7      	bne.n	401280 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4012d0:	4b1d      	ldr	r3, [pc, #116]	; (401348 <xTaskResumeAll+0x104>)
  4012d2:	681b      	ldr	r3, [r3, #0]
  4012d4:	b17b      	cbz	r3, 4012f6 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4012d6:	4b1c      	ldr	r3, [pc, #112]	; (401348 <xTaskResumeAll+0x104>)
  4012d8:	681b      	ldr	r3, [r3, #0]
  4012da:	b163      	cbz	r3, 4012f6 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  4012dc:	4e1b      	ldr	r6, [pc, #108]	; (40134c <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  4012de:	4d16      	ldr	r5, [pc, #88]	; (401338 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4012e0:	4c19      	ldr	r4, [pc, #100]	; (401348 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  4012e2:	47b0      	blx	r6
  4012e4:	b108      	cbz	r0, 4012ea <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  4012e6:	2301      	movs	r3, #1
  4012e8:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  4012ea:	6823      	ldr	r3, [r4, #0]
  4012ec:	3b01      	subs	r3, #1
  4012ee:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4012f0:	6823      	ldr	r3, [r4, #0]
  4012f2:	2b00      	cmp	r3, #0
  4012f4:	d1f5      	bne.n	4012e2 <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  4012f6:	4b10      	ldr	r3, [pc, #64]	; (401338 <xTaskResumeAll+0xf4>)
  4012f8:	681b      	ldr	r3, [r3, #0]
  4012fa:	2b01      	cmp	r3, #1
  4012fc:	d10b      	bne.n	401316 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  4012fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401302:	4b13      	ldr	r3, [pc, #76]	; (401350 <xTaskResumeAll+0x10c>)
  401304:	601a      	str	r2, [r3, #0]
  401306:	f3bf 8f4f 	dsb	sy
  40130a:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  40130e:	2401      	movs	r4, #1
  401310:	e002      	b.n	401318 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401312:	2400      	movs	r4, #0
  401314:	e000      	b.n	401318 <xTaskResumeAll+0xd4>
  401316:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401318:	4b0e      	ldr	r3, [pc, #56]	; (401354 <xTaskResumeAll+0x110>)
  40131a:	4798      	blx	r3

	return xAlreadyYielded;
}
  40131c:	4620      	mov	r0, r4
  40131e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401322:	bf00      	nop
  401324:	2040bdec 	.word	0x2040bdec
  401328:	004002ed 	.word	0x004002ed
  40132c:	2040bdfc 	.word	0x2040bdfc
  401330:	00400545 	.word	0x00400545
  401334:	2040bdd4 	.word	0x2040bdd4
  401338:	2040be2c 	.word	0x2040be2c
  40133c:	2040bdd8 	.word	0x2040bdd8
  401340:	00400591 	.word	0x00400591
  401344:	2040be28 	.word	0x2040be28
  401348:	2040bcf4 	.word	0x2040bcf4
  40134c:	00401111 	.word	0x00401111
  401350:	e000ed04 	.word	0xe000ed04
  401354:	00400339 	.word	0x00400339
  401358:	2040bcf8 	.word	0x2040bcf8

0040135c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  40135c:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40135e:	4d18      	ldr	r5, [pc, #96]	; (4013c0 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401360:	4f18      	ldr	r7, [pc, #96]	; (4013c4 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401362:	f8df 8080 	ldr.w	r8, [pc, #128]	; 4013e4 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401366:	4e18      	ldr	r6, [pc, #96]	; (4013c8 <prvIdleTask+0x6c>)
  401368:	e019      	b.n	40139e <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  40136a:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40136c:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
  40136e:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  401370:	b1ac      	cbz	r4, 40139e <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  401372:	4b16      	ldr	r3, [pc, #88]	; (4013cc <prvIdleTask+0x70>)
  401374:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401376:	68fb      	ldr	r3, [r7, #12]
  401378:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40137a:	1d20      	adds	r0, r4, #4
  40137c:	4b14      	ldr	r3, [pc, #80]	; (4013d0 <prvIdleTask+0x74>)
  40137e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  401380:	4a14      	ldr	r2, [pc, #80]	; (4013d4 <prvIdleTask+0x78>)
  401382:	6813      	ldr	r3, [r2, #0]
  401384:	3b01      	subs	r3, #1
  401386:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  401388:	682b      	ldr	r3, [r5, #0]
  40138a:	3b01      	subs	r3, #1
  40138c:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  40138e:	4b12      	ldr	r3, [pc, #72]	; (4013d8 <prvIdleTask+0x7c>)
  401390:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  401392:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401394:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4013e8 <prvIdleTask+0x8c>
  401398:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  40139a:	4620      	mov	r0, r4
  40139c:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40139e:	682b      	ldr	r3, [r5, #0]
  4013a0:	2b00      	cmp	r3, #0
  4013a2:	d1e2      	bne.n	40136a <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4013a4:	4b0d      	ldr	r3, [pc, #52]	; (4013dc <prvIdleTask+0x80>)
  4013a6:	681b      	ldr	r3, [r3, #0]
  4013a8:	2b01      	cmp	r3, #1
  4013aa:	d9dc      	bls.n	401366 <prvIdleTask+0xa>
			{
				taskYIELD();
  4013ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013b0:	4b0b      	ldr	r3, [pc, #44]	; (4013e0 <prvIdleTask+0x84>)
  4013b2:	601a      	str	r2, [r3, #0]
  4013b4:	f3bf 8f4f 	dsb	sy
  4013b8:	f3bf 8f6f 	isb	sy
  4013bc:	e7d1      	b.n	401362 <prvIdleTask+0x6>
  4013be:	bf00      	nop
  4013c0:	2040bcd8 	.word	0x2040bcd8
  4013c4:	2040bdc0 	.word	0x2040bdc0
  4013c8:	00401245 	.word	0x00401245
  4013cc:	004002ed 	.word	0x004002ed
  4013d0:	00400591 	.word	0x00400591
  4013d4:	2040bdfc 	.word	0x2040bdfc
  4013d8:	00400339 	.word	0x00400339
  4013dc:	2040bcf8 	.word	0x2040bcf8
  4013e0:	e000ed04 	.word	0xe000ed04
  4013e4:	004010f5 	.word	0x004010f5
  4013e8:	00400509 	.word	0x00400509

004013ec <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  4013ec:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  4013ee:	b950      	cbnz	r0, 401406 <vTaskPlaceOnEventList+0x1a>
  4013f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013f4:	b672      	cpsid	i
  4013f6:	f383 8811 	msr	BASEPRI, r3
  4013fa:	f3bf 8f6f 	isb	sy
  4013fe:	f3bf 8f4f 	dsb	sy
  401402:	b662      	cpsie	i
  401404:	e7fe      	b.n	401404 <vTaskPlaceOnEventList+0x18>
  401406:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401408:	4d11      	ldr	r5, [pc, #68]	; (401450 <vTaskPlaceOnEventList+0x64>)
  40140a:	6829      	ldr	r1, [r5, #0]
  40140c:	3118      	adds	r1, #24
  40140e:	4b11      	ldr	r3, [pc, #68]	; (401454 <vTaskPlaceOnEventList+0x68>)
  401410:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401412:	6828      	ldr	r0, [r5, #0]
  401414:	3004      	adds	r0, #4
  401416:	4b10      	ldr	r3, [pc, #64]	; (401458 <vTaskPlaceOnEventList+0x6c>)
  401418:	4798      	blx	r3
  40141a:	b940      	cbnz	r0, 40142e <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40141c:	682a      	ldr	r2, [r5, #0]
  40141e:	490f      	ldr	r1, [pc, #60]	; (40145c <vTaskPlaceOnEventList+0x70>)
  401420:	680b      	ldr	r3, [r1, #0]
  401422:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401424:	2201      	movs	r2, #1
  401426:	4082      	lsls	r2, r0
  401428:	ea23 0302 	bic.w	r3, r3, r2
  40142c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  40142e:	f1b4 3fff 	cmp.w	r4, #4294967295
  401432:	d106      	bne.n	401442 <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401434:	4b06      	ldr	r3, [pc, #24]	; (401450 <vTaskPlaceOnEventList+0x64>)
  401436:	6819      	ldr	r1, [r3, #0]
  401438:	3104      	adds	r1, #4
  40143a:	4809      	ldr	r0, [pc, #36]	; (401460 <vTaskPlaceOnEventList+0x74>)
  40143c:	4b09      	ldr	r3, [pc, #36]	; (401464 <vTaskPlaceOnEventList+0x78>)
  40143e:	4798      	blx	r3
  401440:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401442:	4b09      	ldr	r3, [pc, #36]	; (401468 <vTaskPlaceOnEventList+0x7c>)
  401444:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401446:	4420      	add	r0, r4
  401448:	4b08      	ldr	r3, [pc, #32]	; (40146c <vTaskPlaceOnEventList+0x80>)
  40144a:	4798      	blx	r3
  40144c:	bd38      	pop	{r3, r4, r5, pc}
  40144e:	bf00      	nop
  401450:	2040bdd4 	.word	0x2040bdd4
  401454:	0040055d 	.word	0x0040055d
  401458:	00400591 	.word	0x00400591
  40145c:	2040be28 	.word	0x2040be28
  401460:	2040be14 	.word	0x2040be14
  401464:	00400545 	.word	0x00400545
  401468:	2040bdf0 	.word	0x2040bdf0
  40146c:	00400de5 	.word	0x00400de5

00401470 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401470:	b950      	cbnz	r0, 401488 <vTaskPlaceOnEventListRestricted+0x18>
  401472:	f04f 0380 	mov.w	r3, #128	; 0x80
  401476:	b672      	cpsid	i
  401478:	f383 8811 	msr	BASEPRI, r3
  40147c:	f3bf 8f6f 	isb	sy
  401480:	f3bf 8f4f 	dsb	sy
  401484:	b662      	cpsie	i
  401486:	e7fe      	b.n	401486 <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401488:	b570      	push	{r4, r5, r6, lr}
  40148a:	4615      	mov	r5, r2
  40148c:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40148e:	4e11      	ldr	r6, [pc, #68]	; (4014d4 <vTaskPlaceOnEventListRestricted+0x64>)
  401490:	6831      	ldr	r1, [r6, #0]
  401492:	3118      	adds	r1, #24
  401494:	4b10      	ldr	r3, [pc, #64]	; (4014d8 <vTaskPlaceOnEventListRestricted+0x68>)
  401496:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401498:	6830      	ldr	r0, [r6, #0]
  40149a:	3004      	adds	r0, #4
  40149c:	4b0f      	ldr	r3, [pc, #60]	; (4014dc <vTaskPlaceOnEventListRestricted+0x6c>)
  40149e:	4798      	blx	r3
  4014a0:	b940      	cbnz	r0, 4014b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4014a2:	6832      	ldr	r2, [r6, #0]
  4014a4:	490e      	ldr	r1, [pc, #56]	; (4014e0 <vTaskPlaceOnEventListRestricted+0x70>)
  4014a6:	680b      	ldr	r3, [r1, #0]
  4014a8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4014aa:	2201      	movs	r2, #1
  4014ac:	4082      	lsls	r2, r0
  4014ae:	ea23 0302 	bic.w	r3, r3, r2
  4014b2:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  4014b4:	2d01      	cmp	r5, #1
  4014b6:	d106      	bne.n	4014c6 <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4014b8:	4b06      	ldr	r3, [pc, #24]	; (4014d4 <vTaskPlaceOnEventListRestricted+0x64>)
  4014ba:	6819      	ldr	r1, [r3, #0]
  4014bc:	3104      	adds	r1, #4
  4014be:	4809      	ldr	r0, [pc, #36]	; (4014e4 <vTaskPlaceOnEventListRestricted+0x74>)
  4014c0:	4b05      	ldr	r3, [pc, #20]	; (4014d8 <vTaskPlaceOnEventListRestricted+0x68>)
  4014c2:	4798      	blx	r3
  4014c4:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  4014c6:	4b08      	ldr	r3, [pc, #32]	; (4014e8 <vTaskPlaceOnEventListRestricted+0x78>)
  4014c8:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4014ca:	4420      	add	r0, r4
  4014cc:	4b07      	ldr	r3, [pc, #28]	; (4014ec <vTaskPlaceOnEventListRestricted+0x7c>)
  4014ce:	4798      	blx	r3
  4014d0:	bd70      	pop	{r4, r5, r6, pc}
  4014d2:	bf00      	nop
  4014d4:	2040bdd4 	.word	0x2040bdd4
  4014d8:	00400545 	.word	0x00400545
  4014dc:	00400591 	.word	0x00400591
  4014e0:	2040be28 	.word	0x2040be28
  4014e4:	2040be14 	.word	0x2040be14
  4014e8:	2040bdf0 	.word	0x2040bdf0
  4014ec:	00400de5 	.word	0x00400de5

004014f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  4014f0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4014f2:	68c3      	ldr	r3, [r0, #12]
  4014f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4014f6:	b954      	cbnz	r4, 40150e <xTaskRemoveFromEventList+0x1e>
  4014f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014fc:	b672      	cpsid	i
  4014fe:	f383 8811 	msr	BASEPRI, r3
  401502:	f3bf 8f6f 	isb	sy
  401506:	f3bf 8f4f 	dsb	sy
  40150a:	b662      	cpsie	i
  40150c:	e7fe      	b.n	40150c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  40150e:	f104 0518 	add.w	r5, r4, #24
  401512:	4628      	mov	r0, r5
  401514:	4b14      	ldr	r3, [pc, #80]	; (401568 <xTaskRemoveFromEventList+0x78>)
  401516:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401518:	4b14      	ldr	r3, [pc, #80]	; (40156c <xTaskRemoveFromEventList+0x7c>)
  40151a:	681b      	ldr	r3, [r3, #0]
  40151c:	b99b      	cbnz	r3, 401546 <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  40151e:	1d25      	adds	r5, r4, #4
  401520:	4628      	mov	r0, r5
  401522:	4b11      	ldr	r3, [pc, #68]	; (401568 <xTaskRemoveFromEventList+0x78>)
  401524:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401526:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401528:	4911      	ldr	r1, [pc, #68]	; (401570 <xTaskRemoveFromEventList+0x80>)
  40152a:	680b      	ldr	r3, [r1, #0]
  40152c:	2201      	movs	r2, #1
  40152e:	4082      	lsls	r2, r0
  401530:	4313      	orrs	r3, r2
  401532:	600b      	str	r3, [r1, #0]
  401534:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401538:	4629      	mov	r1, r5
  40153a:	4b0e      	ldr	r3, [pc, #56]	; (401574 <xTaskRemoveFromEventList+0x84>)
  40153c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401540:	4b0d      	ldr	r3, [pc, #52]	; (401578 <xTaskRemoveFromEventList+0x88>)
  401542:	4798      	blx	r3
  401544:	e003      	b.n	40154e <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401546:	4629      	mov	r1, r5
  401548:	480c      	ldr	r0, [pc, #48]	; (40157c <xTaskRemoveFromEventList+0x8c>)
  40154a:	4b0b      	ldr	r3, [pc, #44]	; (401578 <xTaskRemoveFromEventList+0x88>)
  40154c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40154e:	4b0c      	ldr	r3, [pc, #48]	; (401580 <xTaskRemoveFromEventList+0x90>)
  401550:	681b      	ldr	r3, [r3, #0]
  401552:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401556:	429a      	cmp	r2, r3
  401558:	d903      	bls.n	401562 <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  40155a:	2001      	movs	r0, #1
  40155c:	4b09      	ldr	r3, [pc, #36]	; (401584 <xTaskRemoveFromEventList+0x94>)
  40155e:	6018      	str	r0, [r3, #0]
  401560:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  401562:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  401564:	bd38      	pop	{r3, r4, r5, pc}
  401566:	bf00      	nop
  401568:	00400591 	.word	0x00400591
  40156c:	2040bdec 	.word	0x2040bdec
  401570:	2040be28 	.word	0x2040be28
  401574:	2040bcf8 	.word	0x2040bcf8
  401578:	00400545 	.word	0x00400545
  40157c:	2040bdd8 	.word	0x2040bdd8
  401580:	2040bdd4 	.word	0x2040bdd4
  401584:	2040be2c 	.word	0x2040be2c

00401588 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  401588:	b950      	cbnz	r0, 4015a0 <vTaskSetTimeOutState+0x18>
  40158a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40158e:	b672      	cpsid	i
  401590:	f383 8811 	msr	BASEPRI, r3
  401594:	f3bf 8f6f 	isb	sy
  401598:	f3bf 8f4f 	dsb	sy
  40159c:	b662      	cpsie	i
  40159e:	e7fe      	b.n	40159e <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4015a0:	4a03      	ldr	r2, [pc, #12]	; (4015b0 <vTaskSetTimeOutState+0x28>)
  4015a2:	6812      	ldr	r2, [r2, #0]
  4015a4:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4015a6:	4a03      	ldr	r2, [pc, #12]	; (4015b4 <vTaskSetTimeOutState+0x2c>)
  4015a8:	6812      	ldr	r2, [r2, #0]
  4015aa:	6042      	str	r2, [r0, #4]
  4015ac:	4770      	bx	lr
  4015ae:	bf00      	nop
  4015b0:	2040bccc 	.word	0x2040bccc
  4015b4:	2040bdf0 	.word	0x2040bdf0

004015b8 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4015b8:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  4015ba:	b950      	cbnz	r0, 4015d2 <xTaskCheckForTimeOut+0x1a>
  4015bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015c0:	b672      	cpsid	i
  4015c2:	f383 8811 	msr	BASEPRI, r3
  4015c6:	f3bf 8f6f 	isb	sy
  4015ca:	f3bf 8f4f 	dsb	sy
  4015ce:	b662      	cpsie	i
  4015d0:	e7fe      	b.n	4015d0 <xTaskCheckForTimeOut+0x18>
  4015d2:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4015d4:	b951      	cbnz	r1, 4015ec <xTaskCheckForTimeOut+0x34>
  4015d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015da:	b672      	cpsid	i
  4015dc:	f383 8811 	msr	BASEPRI, r3
  4015e0:	f3bf 8f6f 	isb	sy
  4015e4:	f3bf 8f4f 	dsb	sy
  4015e8:	b662      	cpsie	i
  4015ea:	e7fe      	b.n	4015ea <xTaskCheckForTimeOut+0x32>
  4015ec:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  4015ee:	4b12      	ldr	r3, [pc, #72]	; (401638 <xTaskCheckForTimeOut+0x80>)
  4015f0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  4015f2:	4b12      	ldr	r3, [pc, #72]	; (40163c <xTaskCheckForTimeOut+0x84>)
  4015f4:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  4015f6:	682b      	ldr	r3, [r5, #0]
  4015f8:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015fc:	d013      	beq.n	401626 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4015fe:	4a10      	ldr	r2, [pc, #64]	; (401640 <xTaskCheckForTimeOut+0x88>)
  401600:	6812      	ldr	r2, [r2, #0]
  401602:	6820      	ldr	r0, [r4, #0]
  401604:	4290      	cmp	r0, r2
  401606:	d002      	beq.n	40160e <xTaskCheckForTimeOut+0x56>
  401608:	6862      	ldr	r2, [r4, #4]
  40160a:	4291      	cmp	r1, r2
  40160c:	d20d      	bcs.n	40162a <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40160e:	6862      	ldr	r2, [r4, #4]
  401610:	1a88      	subs	r0, r1, r2
  401612:	4283      	cmp	r3, r0
  401614:	d90b      	bls.n	40162e <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401616:	1a52      	subs	r2, r2, r1
  401618:	4413      	add	r3, r2
  40161a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  40161c:	4620      	mov	r0, r4
  40161e:	4b09      	ldr	r3, [pc, #36]	; (401644 <xTaskCheckForTimeOut+0x8c>)
  401620:	4798      	blx	r3
			xReturn = pdFALSE;
  401622:	2400      	movs	r4, #0
  401624:	e004      	b.n	401630 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401626:	2400      	movs	r4, #0
  401628:	e002      	b.n	401630 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  40162a:	2401      	movs	r4, #1
  40162c:	e000      	b.n	401630 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  40162e:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401630:	4b05      	ldr	r3, [pc, #20]	; (401648 <xTaskCheckForTimeOut+0x90>)
  401632:	4798      	blx	r3

	return xReturn;
}
  401634:	4620      	mov	r0, r4
  401636:	bd38      	pop	{r3, r4, r5, pc}
  401638:	004002ed 	.word	0x004002ed
  40163c:	2040bdf0 	.word	0x2040bdf0
  401640:	2040bccc 	.word	0x2040bccc
  401644:	00401589 	.word	0x00401589
  401648:	00400339 	.word	0x00400339

0040164c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  40164c:	2201      	movs	r2, #1
  40164e:	4b01      	ldr	r3, [pc, #4]	; (401654 <vTaskMissedYield+0x8>)
  401650:	601a      	str	r2, [r3, #0]
  401652:	4770      	bx	lr
  401654:	2040be2c 	.word	0x2040be2c

00401658 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401658:	4b05      	ldr	r3, [pc, #20]	; (401670 <xTaskGetSchedulerState+0x18>)
  40165a:	681b      	ldr	r3, [r3, #0]
  40165c:	b133      	cbz	r3, 40166c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40165e:	4b05      	ldr	r3, [pc, #20]	; (401674 <xTaskGetSchedulerState+0x1c>)
  401660:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401662:	2b00      	cmp	r3, #0
  401664:	bf0c      	ite	eq
  401666:	2002      	moveq	r0, #2
  401668:	2000      	movne	r0, #0
  40166a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  40166c:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  40166e:	4770      	bx	lr
  401670:	2040bcd4 	.word	0x2040bcd4
  401674:	2040bdec 	.word	0x2040bdec

00401678 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401678:	2800      	cmp	r0, #0
  40167a:	d045      	beq.n	401708 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  40167c:	b538      	push	{r3, r4, r5, lr}
  40167e:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401680:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401682:	4922      	ldr	r1, [pc, #136]	; (40170c <vTaskPriorityInherit+0x94>)
  401684:	6809      	ldr	r1, [r1, #0]
  401686:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401688:	428a      	cmp	r2, r1
  40168a:	d23c      	bcs.n	401706 <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  40168c:	6981      	ldr	r1, [r0, #24]
  40168e:	2900      	cmp	r1, #0
  401690:	db05      	blt.n	40169e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401692:	491e      	ldr	r1, [pc, #120]	; (40170c <vTaskPriorityInherit+0x94>)
  401694:	6809      	ldr	r1, [r1, #0]
  401696:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401698:	f1c1 010a 	rsb	r1, r1, #10
  40169c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40169e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4016a2:	491b      	ldr	r1, [pc, #108]	; (401710 <vTaskPriorityInherit+0x98>)
  4016a4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  4016a8:	6959      	ldr	r1, [r3, #20]
  4016aa:	4291      	cmp	r1, r2
  4016ac:	d127      	bne.n	4016fe <vTaskPriorityInherit+0x86>
  4016ae:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4016b0:	1d1d      	adds	r5, r3, #4
  4016b2:	4628      	mov	r0, r5
  4016b4:	4b17      	ldr	r3, [pc, #92]	; (401714 <vTaskPriorityInherit+0x9c>)
  4016b6:	4798      	blx	r3
  4016b8:	b970      	cbnz	r0, 4016d8 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4016ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4016bc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4016c0:	4a13      	ldr	r2, [pc, #76]	; (401710 <vTaskPriorityInherit+0x98>)
  4016c2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4016c6:	b93a      	cbnz	r2, 4016d8 <vTaskPriorityInherit+0x60>
  4016c8:	4813      	ldr	r0, [pc, #76]	; (401718 <vTaskPriorityInherit+0xa0>)
  4016ca:	6802      	ldr	r2, [r0, #0]
  4016cc:	2101      	movs	r1, #1
  4016ce:	fa01 f303 	lsl.w	r3, r1, r3
  4016d2:	ea22 0303 	bic.w	r3, r2, r3
  4016d6:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4016d8:	4b0c      	ldr	r3, [pc, #48]	; (40170c <vTaskPriorityInherit+0x94>)
  4016da:	681b      	ldr	r3, [r3, #0]
  4016dc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4016de:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4016e0:	490d      	ldr	r1, [pc, #52]	; (401718 <vTaskPriorityInherit+0xa0>)
  4016e2:	680a      	ldr	r2, [r1, #0]
  4016e4:	2301      	movs	r3, #1
  4016e6:	4083      	lsls	r3, r0
  4016e8:	4313      	orrs	r3, r2
  4016ea:	600b      	str	r3, [r1, #0]
  4016ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4016f0:	4629      	mov	r1, r5
  4016f2:	4b07      	ldr	r3, [pc, #28]	; (401710 <vTaskPriorityInherit+0x98>)
  4016f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4016f8:	4b08      	ldr	r3, [pc, #32]	; (40171c <vTaskPriorityInherit+0xa4>)
  4016fa:	4798      	blx	r3
  4016fc:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4016fe:	4a03      	ldr	r2, [pc, #12]	; (40170c <vTaskPriorityInherit+0x94>)
  401700:	6812      	ldr	r2, [r2, #0]
  401702:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401704:	62da      	str	r2, [r3, #44]	; 0x2c
  401706:	bd38      	pop	{r3, r4, r5, pc}
  401708:	4770      	bx	lr
  40170a:	bf00      	nop
  40170c:	2040bdd4 	.word	0x2040bdd4
  401710:	2040bcf8 	.word	0x2040bcf8
  401714:	00400591 	.word	0x00400591
  401718:	2040be28 	.word	0x2040be28
  40171c:	00400545 	.word	0x00400545

00401720 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401720:	2800      	cmp	r0, #0
  401722:	d04e      	beq.n	4017c2 <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  401724:	b538      	push	{r3, r4, r5, lr}
  401726:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401728:	4a28      	ldr	r2, [pc, #160]	; (4017cc <xTaskPriorityDisinherit+0xac>)
  40172a:	6812      	ldr	r2, [r2, #0]
  40172c:	4290      	cmp	r0, r2
  40172e:	d00a      	beq.n	401746 <xTaskPriorityDisinherit+0x26>
  401730:	f04f 0380 	mov.w	r3, #128	; 0x80
  401734:	b672      	cpsid	i
  401736:	f383 8811 	msr	BASEPRI, r3
  40173a:	f3bf 8f6f 	isb	sy
  40173e:	f3bf 8f4f 	dsb	sy
  401742:	b662      	cpsie	i
  401744:	e7fe      	b.n	401744 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401746:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401748:	b952      	cbnz	r2, 401760 <xTaskPriorityDisinherit+0x40>
  40174a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40174e:	b672      	cpsid	i
  401750:	f383 8811 	msr	BASEPRI, r3
  401754:	f3bf 8f6f 	isb	sy
  401758:	f3bf 8f4f 	dsb	sy
  40175c:	b662      	cpsie	i
  40175e:	e7fe      	b.n	40175e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401760:	3a01      	subs	r2, #1
  401762:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401764:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401766:	6c99      	ldr	r1, [r3, #72]	; 0x48
  401768:	4288      	cmp	r0, r1
  40176a:	d02c      	beq.n	4017c6 <xTaskPriorityDisinherit+0xa6>
  40176c:	bb5a      	cbnz	r2, 4017c6 <xTaskPriorityDisinherit+0xa6>
  40176e:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401770:	1d1d      	adds	r5, r3, #4
  401772:	4628      	mov	r0, r5
  401774:	4b16      	ldr	r3, [pc, #88]	; (4017d0 <xTaskPriorityDisinherit+0xb0>)
  401776:	4798      	blx	r3
  401778:	b968      	cbnz	r0, 401796 <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40177a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40177c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401780:	4b14      	ldr	r3, [pc, #80]	; (4017d4 <xTaskPriorityDisinherit+0xb4>)
  401782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401786:	b933      	cbnz	r3, 401796 <xTaskPriorityDisinherit+0x76>
  401788:	4813      	ldr	r0, [pc, #76]	; (4017d8 <xTaskPriorityDisinherit+0xb8>)
  40178a:	6803      	ldr	r3, [r0, #0]
  40178c:	2201      	movs	r2, #1
  40178e:	408a      	lsls	r2, r1
  401790:	ea23 0302 	bic.w	r3, r3, r2
  401794:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401796:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401798:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40179a:	f1c0 030a 	rsb	r3, r0, #10
  40179e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4017a0:	4a0d      	ldr	r2, [pc, #52]	; (4017d8 <xTaskPriorityDisinherit+0xb8>)
  4017a2:	6813      	ldr	r3, [r2, #0]
  4017a4:	2401      	movs	r4, #1
  4017a6:	fa04 f100 	lsl.w	r1, r4, r0
  4017aa:	430b      	orrs	r3, r1
  4017ac:	6013      	str	r3, [r2, #0]
  4017ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4017b2:	4629      	mov	r1, r5
  4017b4:	4b07      	ldr	r3, [pc, #28]	; (4017d4 <xTaskPriorityDisinherit+0xb4>)
  4017b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4017ba:	4b08      	ldr	r3, [pc, #32]	; (4017dc <xTaskPriorityDisinherit+0xbc>)
  4017bc:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4017be:	4620      	mov	r0, r4
  4017c0:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4017c2:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4017c4:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  4017c6:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4017c8:	bd38      	pop	{r3, r4, r5, pc}
  4017ca:	bf00      	nop
  4017cc:	2040bdd4 	.word	0x2040bdd4
  4017d0:	00400591 	.word	0x00400591
  4017d4:	2040bcf8 	.word	0x2040bcf8
  4017d8:	2040be28 	.word	0x2040be28
  4017dc:	00400545 	.word	0x00400545

004017e0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4017e0:	4b05      	ldr	r3, [pc, #20]	; (4017f8 <pvTaskIncrementMutexHeldCount+0x18>)
  4017e2:	681b      	ldr	r3, [r3, #0]
  4017e4:	b123      	cbz	r3, 4017f0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4017e6:	4b04      	ldr	r3, [pc, #16]	; (4017f8 <pvTaskIncrementMutexHeldCount+0x18>)
  4017e8:	681a      	ldr	r2, [r3, #0]
  4017ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4017ec:	3301      	adds	r3, #1
  4017ee:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4017f0:	4b01      	ldr	r3, [pc, #4]	; (4017f8 <pvTaskIncrementMutexHeldCount+0x18>)
  4017f2:	6818      	ldr	r0, [r3, #0]
	}
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop
  4017f8:	2040bdd4 	.word	0x2040bdd4

004017fc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4017fc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4017fe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401800:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401802:	4291      	cmp	r1, r2
  401804:	d80a      	bhi.n	40181c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401806:	1ad2      	subs	r2, r2, r3
  401808:	6983      	ldr	r3, [r0, #24]
  40180a:	429a      	cmp	r2, r3
  40180c:	d211      	bcs.n	401832 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40180e:	1d01      	adds	r1, r0, #4
  401810:	4b0a      	ldr	r3, [pc, #40]	; (40183c <prvInsertTimerInActiveList+0x40>)
  401812:	6818      	ldr	r0, [r3, #0]
  401814:	4b0a      	ldr	r3, [pc, #40]	; (401840 <prvInsertTimerInActiveList+0x44>)
  401816:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401818:	2000      	movs	r0, #0
  40181a:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40181c:	429a      	cmp	r2, r3
  40181e:	d201      	bcs.n	401824 <prvInsertTimerInActiveList+0x28>
  401820:	4299      	cmp	r1, r3
  401822:	d208      	bcs.n	401836 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401824:	1d01      	adds	r1, r0, #4
  401826:	4b07      	ldr	r3, [pc, #28]	; (401844 <prvInsertTimerInActiveList+0x48>)
  401828:	6818      	ldr	r0, [r3, #0]
  40182a:	4b05      	ldr	r3, [pc, #20]	; (401840 <prvInsertTimerInActiveList+0x44>)
  40182c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  40182e:	2000      	movs	r0, #0
  401830:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401832:	2001      	movs	r0, #1
  401834:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401836:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401838:	bd08      	pop	{r3, pc}
  40183a:	bf00      	nop
  40183c:	2040be64 	.word	0x2040be64
  401840:	0040055d 	.word	0x0040055d
  401844:	2040be30 	.word	0x2040be30

00401848 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401848:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40184a:	4b14      	ldr	r3, [pc, #80]	; (40189c <prvCheckForValidListAndQueue+0x54>)
  40184c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40184e:	4b14      	ldr	r3, [pc, #80]	; (4018a0 <prvCheckForValidListAndQueue+0x58>)
  401850:	681b      	ldr	r3, [r3, #0]
  401852:	bb03      	cbnz	r3, 401896 <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  401854:	4d13      	ldr	r5, [pc, #76]	; (4018a4 <prvCheckForValidListAndQueue+0x5c>)
  401856:	4628      	mov	r0, r5
  401858:	4e13      	ldr	r6, [pc, #76]	; (4018a8 <prvCheckForValidListAndQueue+0x60>)
  40185a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40185c:	4c13      	ldr	r4, [pc, #76]	; (4018ac <prvCheckForValidListAndQueue+0x64>)
  40185e:	4620      	mov	r0, r4
  401860:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401862:	4b13      	ldr	r3, [pc, #76]	; (4018b0 <prvCheckForValidListAndQueue+0x68>)
  401864:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401866:	4b13      	ldr	r3, [pc, #76]	; (4018b4 <prvCheckForValidListAndQueue+0x6c>)
  401868:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40186a:	2200      	movs	r2, #0
  40186c:	2110      	movs	r1, #16
  40186e:	2005      	movs	r0, #5
  401870:	4b11      	ldr	r3, [pc, #68]	; (4018b8 <prvCheckForValidListAndQueue+0x70>)
  401872:	4798      	blx	r3
  401874:	4b0a      	ldr	r3, [pc, #40]	; (4018a0 <prvCheckForValidListAndQueue+0x58>)
  401876:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401878:	b950      	cbnz	r0, 401890 <prvCheckForValidListAndQueue+0x48>
  40187a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40187e:	b672      	cpsid	i
  401880:	f383 8811 	msr	BASEPRI, r3
  401884:	f3bf 8f6f 	isb	sy
  401888:	f3bf 8f4f 	dsb	sy
  40188c:	b662      	cpsie	i
  40188e:	e7fe      	b.n	40188e <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401890:	490a      	ldr	r1, [pc, #40]	; (4018bc <prvCheckForValidListAndQueue+0x74>)
  401892:	4b0b      	ldr	r3, [pc, #44]	; (4018c0 <prvCheckForValidListAndQueue+0x78>)
  401894:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401896:	4b0b      	ldr	r3, [pc, #44]	; (4018c4 <prvCheckForValidListAndQueue+0x7c>)
  401898:	4798      	blx	r3
  40189a:	bd70      	pop	{r4, r5, r6, pc}
  40189c:	004002ed 	.word	0x004002ed
  4018a0:	2040be60 	.word	0x2040be60
  4018a4:	2040be34 	.word	0x2040be34
  4018a8:	00400525 	.word	0x00400525
  4018ac:	2040be48 	.word	0x2040be48
  4018b0:	2040be30 	.word	0x2040be30
  4018b4:	2040be64 	.word	0x2040be64
  4018b8:	00400819 	.word	0x00400819
  4018bc:	004025bc 	.word	0x004025bc
  4018c0:	00400d35 	.word	0x00400d35
  4018c4:	00400339 	.word	0x00400339

004018c8 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  4018c8:	b510      	push	{r4, lr}
  4018ca:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  4018cc:	4b0f      	ldr	r3, [pc, #60]	; (40190c <xTimerCreateTimerTask+0x44>)
  4018ce:	4798      	blx	r3

	if( xTimerQueue != NULL )
  4018d0:	4b0f      	ldr	r3, [pc, #60]	; (401910 <xTimerCreateTimerTask+0x48>)
  4018d2:	681b      	ldr	r3, [r3, #0]
  4018d4:	b163      	cbz	r3, 4018f0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4018d6:	2300      	movs	r3, #0
  4018d8:	9303      	str	r3, [sp, #12]
  4018da:	9302      	str	r3, [sp, #8]
  4018dc:	9301      	str	r3, [sp, #4]
  4018de:	2209      	movs	r2, #9
  4018e0:	9200      	str	r2, [sp, #0]
  4018e2:	f44f 7282 	mov.w	r2, #260	; 0x104
  4018e6:	490b      	ldr	r1, [pc, #44]	; (401914 <xTimerCreateTimerTask+0x4c>)
  4018e8:	480b      	ldr	r0, [pc, #44]	; (401918 <xTimerCreateTimerTask+0x50>)
  4018ea:	4c0c      	ldr	r4, [pc, #48]	; (40191c <xTimerCreateTimerTask+0x54>)
  4018ec:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  4018ee:	b950      	cbnz	r0, 401906 <xTimerCreateTimerTask+0x3e>
  4018f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018f4:	b672      	cpsid	i
  4018f6:	f383 8811 	msr	BASEPRI, r3
  4018fa:	f3bf 8f6f 	isb	sy
  4018fe:	f3bf 8f4f 	dsb	sy
  401902:	b662      	cpsie	i
  401904:	e7fe      	b.n	401904 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  401906:	b004      	add	sp, #16
  401908:	bd10      	pop	{r4, pc}
  40190a:	bf00      	nop
  40190c:	00401849 	.word	0x00401849
  401910:	2040be60 	.word	0x2040be60
  401914:	004025c4 	.word	0x004025c4
  401918:	00401a4d 	.word	0x00401a4d
  40191c:	00400e3d 	.word	0x00400e3d

00401920 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  401920:	b950      	cbnz	r0, 401938 <xTimerGenericCommand+0x18>
  401922:	f04f 0380 	mov.w	r3, #128	; 0x80
  401926:	b672      	cpsid	i
  401928:	f383 8811 	msr	BASEPRI, r3
  40192c:	f3bf 8f6f 	isb	sy
  401930:	f3bf 8f4f 	dsb	sy
  401934:	b662      	cpsie	i
  401936:	e7fe      	b.n	401936 <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  401938:	b530      	push	{r4, r5, lr}
  40193a:	b085      	sub	sp, #20
  40193c:	4615      	mov	r5, r2
  40193e:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401940:	4a0f      	ldr	r2, [pc, #60]	; (401980 <xTimerGenericCommand+0x60>)
  401942:	6810      	ldr	r0, [r2, #0]
  401944:	b1c0      	cbz	r0, 401978 <xTimerGenericCommand+0x58>
  401946:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401948:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  40194a:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  40194c:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  40194e:	2905      	cmp	r1, #5
  401950:	dc0d      	bgt.n	40196e <xTimerGenericCommand+0x4e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401952:	4b0c      	ldr	r3, [pc, #48]	; (401984 <xTimerGenericCommand+0x64>)
  401954:	4798      	blx	r3
  401956:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401958:	f04f 0300 	mov.w	r3, #0
  40195c:	bf0c      	ite	eq
  40195e:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401960:	461a      	movne	r2, r3
  401962:	4669      	mov	r1, sp
  401964:	4806      	ldr	r0, [pc, #24]	; (401980 <xTimerGenericCommand+0x60>)
  401966:	6800      	ldr	r0, [r0, #0]
  401968:	4c07      	ldr	r4, [pc, #28]	; (401988 <xTimerGenericCommand+0x68>)
  40196a:	47a0      	blx	r4
  40196c:	e005      	b.n	40197a <xTimerGenericCommand+0x5a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  40196e:	2300      	movs	r3, #0
  401970:	4669      	mov	r1, sp
  401972:	4c06      	ldr	r4, [pc, #24]	; (40198c <xTimerGenericCommand+0x6c>)
  401974:	47a0      	blx	r4
  401976:	e000      	b.n	40197a <xTimerGenericCommand+0x5a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  401978:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  40197a:	b005      	add	sp, #20
  40197c:	bd30      	pop	{r4, r5, pc}
  40197e:	bf00      	nop
  401980:	2040be60 	.word	0x2040be60
  401984:	00401659 	.word	0x00401659
  401988:	0040089d 	.word	0x0040089d
  40198c:	00400a79 	.word	0x00400a79

00401990 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  401990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401994:	b082      	sub	sp, #8
  401996:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  401998:	4b25      	ldr	r3, [pc, #148]	; (401a30 <prvSampleTimeNow+0xa0>)
  40199a:	4798      	blx	r3
  40199c:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  40199e:	4b25      	ldr	r3, [pc, #148]	; (401a34 <prvSampleTimeNow+0xa4>)
  4019a0:	681b      	ldr	r3, [r3, #0]
  4019a2:	4298      	cmp	r0, r3
  4019a4:	d23b      	bcs.n	401a1e <prvSampleTimeNow+0x8e>
  4019a6:	e02b      	b.n	401a00 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4019a8:	68db      	ldr	r3, [r3, #12]
  4019aa:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4019ae:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4019b0:	f104 0904 	add.w	r9, r4, #4
  4019b4:	4648      	mov	r0, r9
  4019b6:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4019b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4019ba:	4620      	mov	r0, r4
  4019bc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4019be:	69e3      	ldr	r3, [r4, #28]
  4019c0:	2b01      	cmp	r3, #1
  4019c2:	d11f      	bne.n	401a04 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4019c4:	69a3      	ldr	r3, [r4, #24]
  4019c6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4019c8:	459a      	cmp	sl, r3
  4019ca:	d206      	bcs.n	4019da <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4019cc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4019ce:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4019d0:	4649      	mov	r1, r9
  4019d2:	6828      	ldr	r0, [r5, #0]
  4019d4:	4b18      	ldr	r3, [pc, #96]	; (401a38 <prvSampleTimeNow+0xa8>)
  4019d6:	4798      	blx	r3
  4019d8:	e014      	b.n	401a04 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4019da:	2100      	movs	r1, #0
  4019dc:	9100      	str	r1, [sp, #0]
  4019de:	460b      	mov	r3, r1
  4019e0:	4652      	mov	r2, sl
  4019e2:	4620      	mov	r0, r4
  4019e4:	4c15      	ldr	r4, [pc, #84]	; (401a3c <prvSampleTimeNow+0xac>)
  4019e6:	47a0      	blx	r4
				configASSERT( xResult );
  4019e8:	b960      	cbnz	r0, 401a04 <prvSampleTimeNow+0x74>
  4019ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019ee:	b672      	cpsid	i
  4019f0:	f383 8811 	msr	BASEPRI, r3
  4019f4:	f3bf 8f6f 	isb	sy
  4019f8:	f3bf 8f4f 	dsb	sy
  4019fc:	b662      	cpsie	i
  4019fe:	e7fe      	b.n	4019fe <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401a00:	4d0f      	ldr	r5, [pc, #60]	; (401a40 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401a02:	4e10      	ldr	r6, [pc, #64]	; (401a44 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401a04:	682b      	ldr	r3, [r5, #0]
  401a06:	681a      	ldr	r2, [r3, #0]
  401a08:	2a00      	cmp	r2, #0
  401a0a:	d1cd      	bne.n	4019a8 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  401a0c:	4a0e      	ldr	r2, [pc, #56]	; (401a48 <prvSampleTimeNow+0xb8>)
  401a0e:	6810      	ldr	r0, [r2, #0]
  401a10:	490b      	ldr	r1, [pc, #44]	; (401a40 <prvSampleTimeNow+0xb0>)
  401a12:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401a14:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  401a16:	2301      	movs	r3, #1
  401a18:	f8c8 3000 	str.w	r3, [r8]
  401a1c:	e002      	b.n	401a24 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  401a1e:	2300      	movs	r3, #0
  401a20:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  401a24:	4b03      	ldr	r3, [pc, #12]	; (401a34 <prvSampleTimeNow+0xa4>)
  401a26:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  401a28:	4638      	mov	r0, r7
  401a2a:	b002      	add	sp, #8
  401a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a30:	00401105 	.word	0x00401105
  401a34:	2040be5c 	.word	0x2040be5c
  401a38:	0040055d 	.word	0x0040055d
  401a3c:	00401921 	.word	0x00401921
  401a40:	2040be30 	.word	0x2040be30
  401a44:	00400591 	.word	0x00400591
  401a48:	2040be64 	.word	0x2040be64

00401a4c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  401a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401a50:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401a52:	4c68      	ldr	r4, [pc, #416]	; (401bf4 <prvTimerTask+0x1a8>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  401a54:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 401c24 <prvTimerTask+0x1d8>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401a58:	4d67      	ldr	r5, [pc, #412]	; (401bf8 <prvTimerTask+0x1ac>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  401a5a:	4b68      	ldr	r3, [pc, #416]	; (401bfc <prvTimerTask+0x1b0>)
  401a5c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  401a5e:	681a      	ldr	r2, [r3, #0]
  401a60:	2a00      	cmp	r2, #0
  401a62:	f000 80b5 	beq.w	401bd0 <prvTimerTask+0x184>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401a66:	68db      	ldr	r3, [r3, #12]
  401a68:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  401a6a:	4b65      	ldr	r3, [pc, #404]	; (401c00 <prvTimerTask+0x1b4>)
  401a6c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401a6e:	a804      	add	r0, sp, #16
  401a70:	4b64      	ldr	r3, [pc, #400]	; (401c04 <prvTimerTask+0x1b8>)
  401a72:	4798      	blx	r3
  401a74:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401a76:	9b04      	ldr	r3, [sp, #16]
  401a78:	2b00      	cmp	r3, #0
  401a7a:	d144      	bne.n	401b06 <prvTimerTask+0xba>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401a7c:	42b0      	cmp	r0, r6
  401a7e:	d330      	bcc.n	401ae2 <prvTimerTask+0x96>
			{
				( void ) xTaskResumeAll();
  401a80:	4b61      	ldr	r3, [pc, #388]	; (401c08 <prvTimerTask+0x1bc>)
  401a82:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401a84:	4b5d      	ldr	r3, [pc, #372]	; (401bfc <prvTimerTask+0x1b0>)
  401a86:	681b      	ldr	r3, [r3, #0]
  401a88:	68db      	ldr	r3, [r3, #12]
  401a8a:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401a8e:	f109 0004 	add.w	r0, r9, #4
  401a92:	4b5e      	ldr	r3, [pc, #376]	; (401c0c <prvTimerTask+0x1c0>)
  401a94:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401a96:	f8d9 301c 	ldr.w	r3, [r9, #28]
  401a9a:	2b01      	cmp	r3, #1
  401a9c:	d11c      	bne.n	401ad8 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  401a9e:	f8d9 1018 	ldr.w	r1, [r9, #24]
  401aa2:	4633      	mov	r3, r6
  401aa4:	463a      	mov	r2, r7
  401aa6:	4431      	add	r1, r6
  401aa8:	4648      	mov	r0, r9
  401aaa:	4f59      	ldr	r7, [pc, #356]	; (401c10 <prvTimerTask+0x1c4>)
  401aac:	47b8      	blx	r7
  401aae:	2801      	cmp	r0, #1
  401ab0:	d112      	bne.n	401ad8 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401ab2:	2100      	movs	r1, #0
  401ab4:	9100      	str	r1, [sp, #0]
  401ab6:	460b      	mov	r3, r1
  401ab8:	4632      	mov	r2, r6
  401aba:	4648      	mov	r0, r9
  401abc:	4e55      	ldr	r6, [pc, #340]	; (401c14 <prvTimerTask+0x1c8>)
  401abe:	47b0      	blx	r6
			configASSERT( xResult );
  401ac0:	b950      	cbnz	r0, 401ad8 <prvTimerTask+0x8c>
  401ac2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac6:	b672      	cpsid	i
  401ac8:	f383 8811 	msr	BASEPRI, r3
  401acc:	f3bf 8f6f 	isb	sy
  401ad0:	f3bf 8f4f 	dsb	sy
  401ad4:	b662      	cpsie	i
  401ad6:	e7fe      	b.n	401ad6 <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401ad8:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  401adc:	4648      	mov	r0, r9
  401ade:	4798      	blx	r3
  401ae0:	e06d      	b.n	401bbe <prvTimerTask+0x172>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  401ae2:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  401ae4:	1bf1      	subs	r1, r6, r7
  401ae6:	6820      	ldr	r0, [r4, #0]
  401ae8:	4b4b      	ldr	r3, [pc, #300]	; (401c18 <prvTimerTask+0x1cc>)
  401aea:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  401aec:	4b46      	ldr	r3, [pc, #280]	; (401c08 <prvTimerTask+0x1bc>)
  401aee:	4798      	blx	r3
  401af0:	2800      	cmp	r0, #0
  401af2:	d164      	bne.n	401bbe <prvTimerTask+0x172>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  401af4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401af8:	f8c8 3000 	str.w	r3, [r8]
  401afc:	f3bf 8f4f 	dsb	sy
  401b00:	f3bf 8f6f 	isb	sy
  401b04:	e05b      	b.n	401bbe <prvTimerTask+0x172>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  401b06:	4b40      	ldr	r3, [pc, #256]	; (401c08 <prvTimerTask+0x1bc>)
  401b08:	4798      	blx	r3
  401b0a:	e058      	b.n	401bbe <prvTimerTask+0x172>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  401b0c:	9b04      	ldr	r3, [sp, #16]
  401b0e:	2b00      	cmp	r3, #0
  401b10:	da06      	bge.n	401b20 <prvTimerTask+0xd4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  401b12:	9907      	ldr	r1, [sp, #28]
  401b14:	9806      	ldr	r0, [sp, #24]
  401b16:	9b05      	ldr	r3, [sp, #20]
  401b18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  401b1a:	9b04      	ldr	r3, [sp, #16]
  401b1c:	2b00      	cmp	r3, #0
  401b1e:	db4f      	blt.n	401bc0 <prvTimerTask+0x174>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  401b20:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  401b22:	6973      	ldr	r3, [r6, #20]
  401b24:	b10b      	cbz	r3, 401b2a <prvTimerTask+0xde>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401b26:	1d30      	adds	r0, r6, #4
  401b28:	47b8      	blx	r7
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401b2a:	a803      	add	r0, sp, #12
  401b2c:	4b35      	ldr	r3, [pc, #212]	; (401c04 <prvTimerTask+0x1b8>)
  401b2e:	4798      	blx	r3

			switch( xMessage.xMessageID )
  401b30:	9b04      	ldr	r3, [sp, #16]
  401b32:	2b09      	cmp	r3, #9
  401b34:	d844      	bhi.n	401bc0 <prvTimerTask+0x174>
  401b36:	e8df f003 	tbb	[pc, r3]
  401b3a:	0505      	.short	0x0505
  401b3c:	3f2a4305 	.word	0x3f2a4305
  401b40:	2a430505 	.word	0x2a430505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  401b44:	9f05      	ldr	r7, [sp, #20]
  401b46:	69b1      	ldr	r1, [r6, #24]
  401b48:	463b      	mov	r3, r7
  401b4a:	4602      	mov	r2, r0
  401b4c:	4439      	add	r1, r7
  401b4e:	4630      	mov	r0, r6
  401b50:	4f2f      	ldr	r7, [pc, #188]	; (401c10 <prvTimerTask+0x1c4>)
  401b52:	47b8      	blx	r7
  401b54:	2801      	cmp	r0, #1
  401b56:	d132      	bne.n	401bbe <prvTimerTask+0x172>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401b58:	6a73      	ldr	r3, [r6, #36]	; 0x24
  401b5a:	4630      	mov	r0, r6
  401b5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401b5e:	69f3      	ldr	r3, [r6, #28]
  401b60:	2b01      	cmp	r3, #1
  401b62:	d12c      	bne.n	401bbe <prvTimerTask+0x172>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  401b64:	69b2      	ldr	r2, [r6, #24]
  401b66:	2100      	movs	r1, #0
  401b68:	9100      	str	r1, [sp, #0]
  401b6a:	460b      	mov	r3, r1
  401b6c:	9805      	ldr	r0, [sp, #20]
  401b6e:	4402      	add	r2, r0
  401b70:	4630      	mov	r0, r6
  401b72:	4e28      	ldr	r6, [pc, #160]	; (401c14 <prvTimerTask+0x1c8>)
  401b74:	47b0      	blx	r6
							configASSERT( xResult );
  401b76:	bb10      	cbnz	r0, 401bbe <prvTimerTask+0x172>
  401b78:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b7c:	b672      	cpsid	i
  401b7e:	f383 8811 	msr	BASEPRI, r3
  401b82:	f3bf 8f6f 	isb	sy
  401b86:	f3bf 8f4f 	dsb	sy
  401b8a:	b662      	cpsie	i
  401b8c:	e7fe      	b.n	401b8c <prvTimerTask+0x140>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  401b8e:	9905      	ldr	r1, [sp, #20]
  401b90:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  401b92:	b951      	cbnz	r1, 401baa <prvTimerTask+0x15e>
  401b94:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b98:	b672      	cpsid	i
  401b9a:	f383 8811 	msr	BASEPRI, r3
  401b9e:	f3bf 8f6f 	isb	sy
  401ba2:	f3bf 8f4f 	dsb	sy
  401ba6:	b662      	cpsie	i
  401ba8:	e7fe      	b.n	401ba8 <prvTimerTask+0x15c>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  401baa:	4603      	mov	r3, r0
  401bac:	4602      	mov	r2, r0
  401bae:	4401      	add	r1, r0
  401bb0:	4630      	mov	r0, r6
  401bb2:	4e17      	ldr	r6, [pc, #92]	; (401c10 <prvTimerTask+0x1c4>)
  401bb4:	47b0      	blx	r6
  401bb6:	e002      	b.n	401bbe <prvTimerTask+0x172>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  401bb8:	4630      	mov	r0, r6
  401bba:	4b18      	ldr	r3, [pc, #96]	; (401c1c <prvTimerTask+0x1d0>)
  401bbc:	4798      	blx	r3
			pxTimer = xMessage.u.xTimerParameters.pxTimer;

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401bbe:	4f13      	ldr	r7, [pc, #76]	; (401c0c <prvTimerTask+0x1c0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  401bc0:	2300      	movs	r3, #0
  401bc2:	461a      	mov	r2, r3
  401bc4:	a904      	add	r1, sp, #16
  401bc6:	6820      	ldr	r0, [r4, #0]
  401bc8:	47a8      	blx	r5
  401bca:	2800      	cmp	r0, #0
  401bcc:	d19e      	bne.n	401b0c <prvTimerTask+0xc0>
  401bce:	e744      	b.n	401a5a <prvTimerTask+0xe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  401bd0:	4b0b      	ldr	r3, [pc, #44]	; (401c00 <prvTimerTask+0x1b4>)
  401bd2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  401bd4:	a804      	add	r0, sp, #16
  401bd6:	4b0b      	ldr	r3, [pc, #44]	; (401c04 <prvTimerTask+0x1b8>)
  401bd8:	4798      	blx	r3
  401bda:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  401bdc:	9b04      	ldr	r3, [sp, #16]
  401bde:	2b00      	cmp	r3, #0
  401be0:	d191      	bne.n	401b06 <prvTimerTask+0xba>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  401be2:	4b0f      	ldr	r3, [pc, #60]	; (401c20 <prvTimerTask+0x1d4>)
  401be4:	681b      	ldr	r3, [r3, #0]
  401be6:	681a      	ldr	r2, [r3, #0]
  401be8:	fab2 f282 	clz	r2, r2
  401bec:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  401bee:	2600      	movs	r6, #0
  401bf0:	e778      	b.n	401ae4 <prvTimerTask+0x98>
  401bf2:	bf00      	nop
  401bf4:	2040be60 	.word	0x2040be60
  401bf8:	00400b71 	.word	0x00400b71
  401bfc:	2040be30 	.word	0x2040be30
  401c00:	004010f5 	.word	0x004010f5
  401c04:	00401991 	.word	0x00401991
  401c08:	00401245 	.word	0x00401245
  401c0c:	00400591 	.word	0x00400591
  401c10:	004017fd 	.word	0x004017fd
  401c14:	00401921 	.word	0x00401921
  401c18:	00400d69 	.word	0x00400d69
  401c1c:	00400509 	.word	0x00400509
  401c20:	2040be64 	.word	0x2040be64
  401c24:	e000ed04 	.word	0xe000ed04

00401c28 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401c28:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  401c2a:	4810      	ldr	r0, [pc, #64]	; (401c6c <sysclk_init+0x44>)
  401c2c:	4b10      	ldr	r3, [pc, #64]	; (401c70 <sysclk_init+0x48>)
  401c2e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401c30:	213e      	movs	r1, #62	; 0x3e
  401c32:	2000      	movs	r0, #0
  401c34:	4b0f      	ldr	r3, [pc, #60]	; (401c74 <sysclk_init+0x4c>)
  401c36:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  401c38:	4c0f      	ldr	r4, [pc, #60]	; (401c78 <sysclk_init+0x50>)
  401c3a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  401c3c:	2800      	cmp	r0, #0
  401c3e:	d0fc      	beq.n	401c3a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  401c40:	4b0e      	ldr	r3, [pc, #56]	; (401c7c <sysclk_init+0x54>)
  401c42:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  401c44:	4a0e      	ldr	r2, [pc, #56]	; (401c80 <sysclk_init+0x58>)
  401c46:	4b0f      	ldr	r3, [pc, #60]	; (401c84 <sysclk_init+0x5c>)
  401c48:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  401c4a:	4c0f      	ldr	r4, [pc, #60]	; (401c88 <sysclk_init+0x60>)
  401c4c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  401c4e:	2800      	cmp	r0, #0
  401c50:	d0fc      	beq.n	401c4c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401c52:	2002      	movs	r0, #2
  401c54:	4b0d      	ldr	r3, [pc, #52]	; (401c8c <sysclk_init+0x64>)
  401c56:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401c58:	2000      	movs	r0, #0
  401c5a:	4b0d      	ldr	r3, [pc, #52]	; (401c90 <sysclk_init+0x68>)
  401c5c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  401c5e:	4b0d      	ldr	r3, [pc, #52]	; (401c94 <sysclk_init+0x6c>)
  401c60:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401c62:	4802      	ldr	r0, [pc, #8]	; (401c6c <sysclk_init+0x44>)
  401c64:	4b02      	ldr	r3, [pc, #8]	; (401c70 <sysclk_init+0x48>)
  401c66:	4798      	blx	r3
  401c68:	bd10      	pop	{r4, pc}
  401c6a:	bf00      	nop
  401c6c:	11e1a300 	.word	0x11e1a300
  401c70:	004021a5 	.word	0x004021a5
  401c74:	00401eb1 	.word	0x00401eb1
  401c78:	00401f05 	.word	0x00401f05
  401c7c:	00401f15 	.word	0x00401f15
  401c80:	20183f01 	.word	0x20183f01
  401c84:	400e0600 	.word	0x400e0600
  401c88:	00401f25 	.word	0x00401f25
  401c8c:	00401e0d 	.word	0x00401e0d
  401c90:	00401e49 	.word	0x00401e49
  401c94:	00402095 	.word	0x00402095

00401c98 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  401c98:	b570      	push	{r4, r5, r6, lr}
  401c9a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  401c9c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  401c9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  401ca0:	4013      	ands	r3, r2
  401ca2:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401ca4:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  401ca6:	4e1a      	ldr	r6, [pc, #104]	; (401d10 <afec_process_callback+0x78>)
  401ca8:	4d1a      	ldr	r5, [pc, #104]	; (401d14 <afec_process_callback+0x7c>)
  401caa:	42a8      	cmp	r0, r5
  401cac:	bf14      	ite	ne
  401cae:	2000      	movne	r0, #0
  401cb0:	2001      	moveq	r0, #1
  401cb2:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  401cb4:	2c0b      	cmp	r4, #11
  401cb6:	d80a      	bhi.n	401cce <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  401cb8:	9a01      	ldr	r2, [sp, #4]
  401cba:	2301      	movs	r3, #1
  401cbc:	40a3      	lsls	r3, r4
  401cbe:	4213      	tst	r3, r2
  401cc0:	d020      	beq.n	401d04 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  401cc2:	192b      	adds	r3, r5, r4
  401cc4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  401cc8:	b1e3      	cbz	r3, 401d04 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  401cca:	4798      	blx	r3
  401ccc:	e01a      	b.n	401d04 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  401cce:	2c0e      	cmp	r4, #14
  401cd0:	d80c      	bhi.n	401cec <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  401cd2:	9a01      	ldr	r2, [sp, #4]
  401cd4:	f104 010c 	add.w	r1, r4, #12
  401cd8:	2301      	movs	r3, #1
  401cda:	408b      	lsls	r3, r1
  401cdc:	4213      	tst	r3, r2
  401cde:	d011      	beq.n	401d04 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  401ce0:	192b      	adds	r3, r5, r4
  401ce2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  401ce6:	b16b      	cbz	r3, 401d04 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  401ce8:	4798      	blx	r3
  401cea:	e00b      	b.n	401d04 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  401cec:	9a01      	ldr	r2, [sp, #4]
  401cee:	f104 010f 	add.w	r1, r4, #15
  401cf2:	2301      	movs	r3, #1
  401cf4:	408b      	lsls	r3, r1
  401cf6:	4213      	tst	r3, r2
  401cf8:	d004      	beq.n	401d04 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  401cfa:	192b      	adds	r3, r5, r4
  401cfc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  401d00:	b103      	cbz	r3, 401d04 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  401d02:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401d04:	3401      	adds	r4, #1
  401d06:	2c10      	cmp	r4, #16
  401d08:	d1d4      	bne.n	401cb4 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  401d0a:	b002      	add	sp, #8
  401d0c:	bd70      	pop	{r4, r5, r6, pc}
  401d0e:	bf00      	nop
  401d10:	2040bea8 	.word	0x2040bea8
  401d14:	40064000 	.word	0x40064000

00401d18 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  401d18:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  401d1a:	4802      	ldr	r0, [pc, #8]	; (401d24 <AFEC0_Handler+0xc>)
  401d1c:	4b02      	ldr	r3, [pc, #8]	; (401d28 <AFEC0_Handler+0x10>)
  401d1e:	4798      	blx	r3
  401d20:	bd08      	pop	{r3, pc}
  401d22:	bf00      	nop
  401d24:	4003c000 	.word	0x4003c000
  401d28:	00401c99 	.word	0x00401c99

00401d2c <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  401d2c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  401d2e:	4802      	ldr	r0, [pc, #8]	; (401d38 <AFEC1_Handler+0xc>)
  401d30:	4b02      	ldr	r3, [pc, #8]	; (401d3c <AFEC1_Handler+0x10>)
  401d32:	4798      	blx	r3
  401d34:	bd08      	pop	{r3, pc}
  401d36:	bf00      	nop
  401d38:	40064000 	.word	0x40064000
  401d3c:	00401c99 	.word	0x00401c99

00401d40 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401d40:	6301      	str	r1, [r0, #48]	; 0x30
  401d42:	4770      	bx	lr

00401d44 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401d44:	6341      	str	r1, [r0, #52]	; 0x34
  401d46:	4770      	bx	lr

00401d48 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401d48:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401d4a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401d4e:	d02f      	beq.n	401db0 <pio_set_peripheral+0x68>
  401d50:	d807      	bhi.n	401d62 <pio_set_peripheral+0x1a>
  401d52:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401d56:	d014      	beq.n	401d82 <pio_set_peripheral+0x3a>
  401d58:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401d5c:	d01e      	beq.n	401d9c <pio_set_peripheral+0x54>
  401d5e:	b939      	cbnz	r1, 401d70 <pio_set_peripheral+0x28>
  401d60:	4770      	bx	lr
  401d62:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401d66:	d037      	beq.n	401dd8 <pio_set_peripheral+0x90>
  401d68:	d804      	bhi.n	401d74 <pio_set_peripheral+0x2c>
  401d6a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401d6e:	d029      	beq.n	401dc4 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401d70:	6042      	str	r2, [r0, #4]
  401d72:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401d74:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401d78:	d02e      	beq.n	401dd8 <pio_set_peripheral+0x90>
  401d7a:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401d7e:	d02b      	beq.n	401dd8 <pio_set_peripheral+0x90>
  401d80:	e7f6      	b.n	401d70 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401d82:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d84:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401d86:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401d88:	43d3      	mvns	r3, r2
  401d8a:	4021      	ands	r1, r4
  401d8c:	4019      	ands	r1, r3
  401d8e:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401d90:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401d92:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401d94:	4021      	ands	r1, r4
  401d96:	400b      	ands	r3, r1
  401d98:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401d9a:	e01a      	b.n	401dd2 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401d9c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401d9e:	4313      	orrs	r3, r2
  401da0:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401da2:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401da4:	6f43      	ldr	r3, [r0, #116]	; 0x74
  401da6:	400b      	ands	r3, r1
  401da8:	ea23 0302 	bic.w	r3, r3, r2
  401dac:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401dae:	e7df      	b.n	401d70 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401db0:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401db2:	6f03      	ldr	r3, [r0, #112]	; 0x70
  401db4:	400b      	ands	r3, r1
  401db6:	ea23 0302 	bic.w	r3, r3, r2
  401dba:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401dbc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401dbe:	4313      	orrs	r3, r2
  401dc0:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401dc2:	e7d5      	b.n	401d70 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401dc4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401dc6:	4313      	orrs	r3, r2
  401dc8:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401dca:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401dcc:	4313      	orrs	r3, r2
  401dce:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401dd0:	e7ce      	b.n	401d70 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401dd2:	6042      	str	r2, [r0, #4]
}
  401dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401dd8:	4770      	bx	lr
  401dda:	bf00      	nop

00401ddc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401ddc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401dde:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401de0:	9c01      	ldr	r4, [sp, #4]
  401de2:	b10c      	cbz	r4, 401de8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  401de4:	6641      	str	r1, [r0, #100]	; 0x64
  401de6:	e000      	b.n	401dea <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  401de8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401dea:	b10b      	cbz	r3, 401df0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  401dec:	6501      	str	r1, [r0, #80]	; 0x50
  401dee:	e000      	b.n	401df2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401df0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401df2:	b10a      	cbz	r2, 401df8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  401df4:	6301      	str	r1, [r0, #48]	; 0x30
  401df6:	e000      	b.n	401dfa <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401df8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401dfa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401dfc:	6001      	str	r1, [r0, #0]
}
  401dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e02:	4770      	bx	lr

00401e04 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  401e04:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401e06:	4770      	bx	lr

00401e08 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401e08:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401e0a:	4770      	bx	lr

00401e0c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401e0c:	2803      	cmp	r0, #3
  401e0e:	d007      	beq.n	401e20 <pmc_mck_set_division+0x14>
  401e10:	2804      	cmp	r0, #4
  401e12:	d008      	beq.n	401e26 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401e14:	2802      	cmp	r0, #2
  401e16:	bf0c      	ite	eq
  401e18:	f44f 7280 	moveq.w	r2, #256	; 0x100
  401e1c:	2200      	movne	r2, #0
  401e1e:	e004      	b.n	401e2a <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401e20:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  401e24:	e001      	b.n	401e2a <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401e26:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  401e2a:	4906      	ldr	r1, [pc, #24]	; (401e44 <pmc_mck_set_division+0x38>)
  401e2c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401e32:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  401e34:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401e36:	460a      	mov	r2, r1
  401e38:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e3a:	f013 0f08 	tst.w	r3, #8
  401e3e:	d0fb      	beq.n	401e38 <pmc_mck_set_division+0x2c>
}
  401e40:	4770      	bx	lr
  401e42:	bf00      	nop
  401e44:	400e0600 	.word	0x400e0600

00401e48 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401e48:	4a18      	ldr	r2, [pc, #96]	; (401eac <pmc_switch_mck_to_pllack+0x64>)
  401e4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401e50:	4318      	orrs	r0, r3
  401e52:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e54:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401e56:	f013 0f08 	tst.w	r3, #8
  401e5a:	d003      	beq.n	401e64 <pmc_switch_mck_to_pllack+0x1c>
  401e5c:	e009      	b.n	401e72 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e5e:	3b01      	subs	r3, #1
  401e60:	d103      	bne.n	401e6a <pmc_switch_mck_to_pllack+0x22>
  401e62:	e01e      	b.n	401ea2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e64:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401e68:	4910      	ldr	r1, [pc, #64]	; (401eac <pmc_switch_mck_to_pllack+0x64>)
  401e6a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e6c:	f012 0f08 	tst.w	r2, #8
  401e70:	d0f5      	beq.n	401e5e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401e72:	4a0e      	ldr	r2, [pc, #56]	; (401eac <pmc_switch_mck_to_pllack+0x64>)
  401e74:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401e76:	f023 0303 	bic.w	r3, r3, #3
  401e7a:	f043 0302 	orr.w	r3, r3, #2
  401e7e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e80:	6e90      	ldr	r0, [r2, #104]	; 0x68
  401e82:	f010 0008 	ands.w	r0, r0, #8
  401e86:	d004      	beq.n	401e92 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  401e88:	2000      	movs	r0, #0
  401e8a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  401e8c:	3b01      	subs	r3, #1
  401e8e:	d103      	bne.n	401e98 <pmc_switch_mck_to_pllack+0x50>
  401e90:	e009      	b.n	401ea6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401e92:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401e96:	4905      	ldr	r1, [pc, #20]	; (401eac <pmc_switch_mck_to_pllack+0x64>)
  401e98:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401e9a:	f012 0f08 	tst.w	r2, #8
  401e9e:	d0f5      	beq.n	401e8c <pmc_switch_mck_to_pllack+0x44>
  401ea0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401ea2:	2001      	movs	r0, #1
  401ea4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  401ea6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401ea8:	4770      	bx	lr
  401eaa:	bf00      	nop
  401eac:	400e0600 	.word	0x400e0600

00401eb0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401eb0:	b138      	cbz	r0, 401ec2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401eb2:	490e      	ldr	r1, [pc, #56]	; (401eec <pmc_switch_mainck_to_xtal+0x3c>)
  401eb4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401eb6:	4a0e      	ldr	r2, [pc, #56]	; (401ef0 <pmc_switch_mainck_to_xtal+0x40>)
  401eb8:	401a      	ands	r2, r3
  401eba:	4b0e      	ldr	r3, [pc, #56]	; (401ef4 <pmc_switch_mainck_to_xtal+0x44>)
  401ebc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401ebe:	620b      	str	r3, [r1, #32]
  401ec0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ec2:	480a      	ldr	r0, [pc, #40]	; (401eec <pmc_switch_mainck_to_xtal+0x3c>)
  401ec4:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401ec6:	0209      	lsls	r1, r1, #8
  401ec8:	b289      	uxth	r1, r1
  401eca:	4a0b      	ldr	r2, [pc, #44]	; (401ef8 <pmc_switch_mainck_to_xtal+0x48>)
  401ecc:	401a      	ands	r2, r3
  401ece:	4b0b      	ldr	r3, [pc, #44]	; (401efc <pmc_switch_mainck_to_xtal+0x4c>)
  401ed0:	4313      	orrs	r3, r2
  401ed2:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401ed4:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401ed6:	4602      	mov	r2, r0
  401ed8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401eda:	f013 0f01 	tst.w	r3, #1
  401ede:	d0fb      	beq.n	401ed8 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401ee0:	4a02      	ldr	r2, [pc, #8]	; (401eec <pmc_switch_mainck_to_xtal+0x3c>)
  401ee2:	6a11      	ldr	r1, [r2, #32]
  401ee4:	4b06      	ldr	r3, [pc, #24]	; (401f00 <pmc_switch_mainck_to_xtal+0x50>)
  401ee6:	430b      	orrs	r3, r1
  401ee8:	6213      	str	r3, [r2, #32]
  401eea:	4770      	bx	lr
  401eec:	400e0600 	.word	0x400e0600
  401ef0:	fec8fffc 	.word	0xfec8fffc
  401ef4:	01370002 	.word	0x01370002
  401ef8:	ffc8fffc 	.word	0xffc8fffc
  401efc:	00370001 	.word	0x00370001
  401f00:	01370000 	.word	0x01370000

00401f04 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401f04:	4b02      	ldr	r3, [pc, #8]	; (401f10 <pmc_osc_is_ready_mainck+0xc>)
  401f06:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f08:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401f0c:	4770      	bx	lr
  401f0e:	bf00      	nop
  401f10:	400e0600 	.word	0x400e0600

00401f14 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401f14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401f18:	4b01      	ldr	r3, [pc, #4]	; (401f20 <pmc_disable_pllack+0xc>)
  401f1a:	629a      	str	r2, [r3, #40]	; 0x28
  401f1c:	4770      	bx	lr
  401f1e:	bf00      	nop
  401f20:	400e0600 	.word	0x400e0600

00401f24 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401f24:	4b02      	ldr	r3, [pc, #8]	; (401f30 <pmc_is_locked_pllack+0xc>)
  401f26:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401f28:	f000 0002 	and.w	r0, r0, #2
  401f2c:	4770      	bx	lr
  401f2e:	bf00      	nop
  401f30:	400e0600 	.word	0x400e0600

00401f34 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401f34:	283f      	cmp	r0, #63	; 0x3f
  401f36:	d81e      	bhi.n	401f76 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  401f38:	281f      	cmp	r0, #31
  401f3a:	d80c      	bhi.n	401f56 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401f3c:	4b11      	ldr	r3, [pc, #68]	; (401f84 <pmc_enable_periph_clk+0x50>)
  401f3e:	699a      	ldr	r2, [r3, #24]
  401f40:	2301      	movs	r3, #1
  401f42:	4083      	lsls	r3, r0
  401f44:	4393      	bics	r3, r2
  401f46:	d018      	beq.n	401f7a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  401f48:	2301      	movs	r3, #1
  401f4a:	fa03 f000 	lsl.w	r0, r3, r0
  401f4e:	4b0d      	ldr	r3, [pc, #52]	; (401f84 <pmc_enable_periph_clk+0x50>)
  401f50:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401f52:	2000      	movs	r0, #0
  401f54:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  401f56:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  401f58:	4b0a      	ldr	r3, [pc, #40]	; (401f84 <pmc_enable_periph_clk+0x50>)
  401f5a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  401f5e:	2301      	movs	r3, #1
  401f60:	4083      	lsls	r3, r0
  401f62:	4393      	bics	r3, r2
  401f64:	d00b      	beq.n	401f7e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401f66:	2301      	movs	r3, #1
  401f68:	fa03 f000 	lsl.w	r0, r3, r0
  401f6c:	4b05      	ldr	r3, [pc, #20]	; (401f84 <pmc_enable_periph_clk+0x50>)
  401f6e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  401f72:	2000      	movs	r0, #0
  401f74:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  401f76:	2001      	movs	r0, #1
  401f78:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  401f7a:	2000      	movs	r0, #0
  401f7c:	4770      	bx	lr
  401f7e:	2000      	movs	r0, #0
}
  401f80:	4770      	bx	lr
  401f82:	bf00      	nop
  401f84:	400e0600 	.word	0x400e0600

00401f88 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  401f88:	b570      	push	{r4, r5, r6, lr}
  401f8a:	b082      	sub	sp, #8
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  401f8c:	2100      	movs	r1, #0
  401f8e:	4812      	ldr	r0, [pc, #72]	; (401fd8 <board_init+0x50>)
  401f90:	4b12      	ldr	r3, [pc, #72]	; (401fdc <board_init+0x54>)
  401f92:	4798      	blx	r3
	sysclk_init();
  401f94:	4b12      	ldr	r3, [pc, #72]	; (401fe0 <board_init+0x58>)
  401f96:	4798      	blx	r3
	   ######################################
					Enable LEDS
	   ######################################
	   ###################################### */
	//sendDebugString("LED INITIALIZATION - STARTED\n");
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
  401f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  401f9c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  401fa0:	4810      	ldr	r0, [pc, #64]	; (401fe4 <board_init+0x5c>)
  401fa2:	4b11      	ldr	r3, [pc, #68]	; (401fe8 <board_init+0x60>)
  401fa4:	4798      	blx	r3
		pmc_enable_periph_clk(ID_PIOA);
  401fa6:	200a      	movs	r0, #10
  401fa8:	4c10      	ldr	r4, [pc, #64]	; (401fec <board_init+0x64>)
  401faa:	47a0      	blx	r4
		pmc_enable_periph_clk(ID_PIOB);
  401fac:	200b      	movs	r0, #11
  401fae:	47a0      	blx	r4
		pio_set_output(LED0,LOW,DISABLE,DISABLE);
  401fb0:	4e0f      	ldr	r6, [pc, #60]	; (401ff0 <board_init+0x68>)
  401fb2:	2400      	movs	r4, #0
  401fb4:	9400      	str	r4, [sp, #0]
  401fb6:	4623      	mov	r3, r4
  401fb8:	4622      	mov	r2, r4
  401fba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  401fbe:	4630      	mov	r0, r6
  401fc0:	4d0c      	ldr	r5, [pc, #48]	; (401ff4 <board_init+0x6c>)
  401fc2:	47a8      	blx	r5
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  401fc4:	9400      	str	r4, [sp, #0]
  401fc6:	4623      	mov	r3, r4
  401fc8:	4622      	mov	r2, r4
  401fca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  401fce:	4630      	mov	r0, r6
  401fd0:	47a8      	blx	r5
		//sendDebugString("LED INITIALIZATION - FINISHED\n");
		
		
}
  401fd2:	b002      	add	sp, #8
  401fd4:	bd70      	pop	{r4, r5, r6, pc}
  401fd6:	bf00      	nop
  401fd8:	400e1810 	.word	0x400e1810
  401fdc:	00400229 	.word	0x00400229
  401fe0:	00401c29 	.word	0x00401c29
  401fe4:	400e1000 	.word	0x400e1000
  401fe8:	00401d49 	.word	0x00401d49
  401fec:	00401f35 	.word	0x00401f35
  401ff0:	400e1400 	.word	0x400e1400
  401ff4:	00401ddd 	.word	0x00401ddd

00401ff8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401ff8:	e7fe      	b.n	401ff8 <Dummy_Handler>
  401ffa:	bf00      	nop

00401ffc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401ffc:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  401ffe:	4b19      	ldr	r3, [pc, #100]	; (402064 <Reset_Handler+0x68>)
  402000:	4a19      	ldr	r2, [pc, #100]	; (402068 <Reset_Handler+0x6c>)
  402002:	429a      	cmp	r2, r3
  402004:	d003      	beq.n	40200e <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  402006:	4b19      	ldr	r3, [pc, #100]	; (40206c <Reset_Handler+0x70>)
  402008:	4a16      	ldr	r2, [pc, #88]	; (402064 <Reset_Handler+0x68>)
  40200a:	429a      	cmp	r2, r3
  40200c:	d304      	bcc.n	402018 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40200e:	4b18      	ldr	r3, [pc, #96]	; (402070 <Reset_Handler+0x74>)
  402010:	4a18      	ldr	r2, [pc, #96]	; (402074 <Reset_Handler+0x78>)
  402012:	429a      	cmp	r2, r3
  402014:	d30f      	bcc.n	402036 <Reset_Handler+0x3a>
  402016:	e01a      	b.n	40204e <Reset_Handler+0x52>
  402018:	4912      	ldr	r1, [pc, #72]	; (402064 <Reset_Handler+0x68>)
  40201a:	4b17      	ldr	r3, [pc, #92]	; (402078 <Reset_Handler+0x7c>)
  40201c:	1a5b      	subs	r3, r3, r1
  40201e:	f023 0303 	bic.w	r3, r3, #3
  402022:	3304      	adds	r3, #4
  402024:	4a10      	ldr	r2, [pc, #64]	; (402068 <Reset_Handler+0x6c>)
  402026:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  402028:	f852 0b04 	ldr.w	r0, [r2], #4
  40202c:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  402030:	429a      	cmp	r2, r3
  402032:	d1f9      	bne.n	402028 <Reset_Handler+0x2c>
  402034:	e7eb      	b.n	40200e <Reset_Handler+0x12>
  402036:	4b11      	ldr	r3, [pc, #68]	; (40207c <Reset_Handler+0x80>)
  402038:	4a11      	ldr	r2, [pc, #68]	; (402080 <Reset_Handler+0x84>)
  40203a:	1ad2      	subs	r2, r2, r3
  40203c:	f022 0203 	bic.w	r2, r2, #3
  402040:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402042:	3b04      	subs	r3, #4
                *pDest++ = 0;
  402044:	2100      	movs	r1, #0
  402046:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  40204a:	4293      	cmp	r3, r2
  40204c:	d1fb      	bne.n	402046 <Reset_Handler+0x4a>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40204e:	4a0d      	ldr	r2, [pc, #52]	; (402084 <Reset_Handler+0x88>)
  402050:	4b0d      	ldr	r3, [pc, #52]	; (402088 <Reset_Handler+0x8c>)
  402052:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402056:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  402058:	4b0c      	ldr	r3, [pc, #48]	; (40208c <Reset_Handler+0x90>)
  40205a:	4798      	blx	r3

        /* Branch to main function */
        main();
  40205c:	4b0c      	ldr	r3, [pc, #48]	; (402090 <Reset_Handler+0x94>)
  40205e:	4798      	blx	r3
  402060:	e7fe      	b.n	402060 <Reset_Handler+0x64>
  402062:	bf00      	nop
  402064:	20400000 	.word	0x20400000
  402068:	00402600 	.word	0x00402600
  40206c:	20400430 	.word	0x20400430
  402070:	2040bf28 	.word	0x2040bf28
  402074:	20400430 	.word	0x20400430
  402078:	2040042f 	.word	0x2040042f
  40207c:	20400434 	.word	0x20400434
  402080:	2040bf2b 	.word	0x2040bf2b
  402084:	e000ed00 	.word	0xe000ed00
  402088:	00400000 	.word	0x00400000
  40208c:	00402299 	.word	0x00402299
  402090:	0040223d 	.word	0x0040223d

00402094 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402094:	4b3c      	ldr	r3, [pc, #240]	; (402188 <SystemCoreClockUpdate+0xf4>)
  402096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402098:	f003 0303 	and.w	r3, r3, #3
  40209c:	2b01      	cmp	r3, #1
  40209e:	d00f      	beq.n	4020c0 <SystemCoreClockUpdate+0x2c>
  4020a0:	b113      	cbz	r3, 4020a8 <SystemCoreClockUpdate+0x14>
  4020a2:	2b02      	cmp	r3, #2
  4020a4:	d029      	beq.n	4020fa <SystemCoreClockUpdate+0x66>
  4020a6:	e057      	b.n	402158 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4020a8:	4b38      	ldr	r3, [pc, #224]	; (40218c <SystemCoreClockUpdate+0xf8>)
  4020aa:	695b      	ldr	r3, [r3, #20]
  4020ac:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4020b0:	bf14      	ite	ne
  4020b2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4020b6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4020ba:	4b35      	ldr	r3, [pc, #212]	; (402190 <SystemCoreClockUpdate+0xfc>)
  4020bc:	601a      	str	r2, [r3, #0]
  4020be:	e04b      	b.n	402158 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4020c0:	4b31      	ldr	r3, [pc, #196]	; (402188 <SystemCoreClockUpdate+0xf4>)
  4020c2:	6a1b      	ldr	r3, [r3, #32]
  4020c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4020c8:	d003      	beq.n	4020d2 <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4020ca:	4a32      	ldr	r2, [pc, #200]	; (402194 <SystemCoreClockUpdate+0x100>)
  4020cc:	4b30      	ldr	r3, [pc, #192]	; (402190 <SystemCoreClockUpdate+0xfc>)
  4020ce:	601a      	str	r2, [r3, #0]
  4020d0:	e042      	b.n	402158 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020d2:	4a31      	ldr	r2, [pc, #196]	; (402198 <SystemCoreClockUpdate+0x104>)
  4020d4:	4b2e      	ldr	r3, [pc, #184]	; (402190 <SystemCoreClockUpdate+0xfc>)
  4020d6:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4020d8:	4b2b      	ldr	r3, [pc, #172]	; (402188 <SystemCoreClockUpdate+0xf4>)
  4020da:	6a1b      	ldr	r3, [r3, #32]
  4020dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020e0:	2b10      	cmp	r3, #16
  4020e2:	d002      	beq.n	4020ea <SystemCoreClockUpdate+0x56>
  4020e4:	2b20      	cmp	r3, #32
  4020e6:	d004      	beq.n	4020f2 <SystemCoreClockUpdate+0x5e>
  4020e8:	e036      	b.n	402158 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4020ea:	4a2c      	ldr	r2, [pc, #176]	; (40219c <SystemCoreClockUpdate+0x108>)
  4020ec:	4b28      	ldr	r3, [pc, #160]	; (402190 <SystemCoreClockUpdate+0xfc>)
  4020ee:	601a      	str	r2, [r3, #0]
          break;
  4020f0:	e032      	b.n	402158 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4020f2:	4a28      	ldr	r2, [pc, #160]	; (402194 <SystemCoreClockUpdate+0x100>)
  4020f4:	4b26      	ldr	r3, [pc, #152]	; (402190 <SystemCoreClockUpdate+0xfc>)
  4020f6:	601a      	str	r2, [r3, #0]
          break;
  4020f8:	e02e      	b.n	402158 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4020fa:	4b23      	ldr	r3, [pc, #140]	; (402188 <SystemCoreClockUpdate+0xf4>)
  4020fc:	6a1b      	ldr	r3, [r3, #32]
  4020fe:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402102:	d003      	beq.n	40210c <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402104:	4a23      	ldr	r2, [pc, #140]	; (402194 <SystemCoreClockUpdate+0x100>)
  402106:	4b22      	ldr	r3, [pc, #136]	; (402190 <SystemCoreClockUpdate+0xfc>)
  402108:	601a      	str	r2, [r3, #0]
  40210a:	e012      	b.n	402132 <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40210c:	4a22      	ldr	r2, [pc, #136]	; (402198 <SystemCoreClockUpdate+0x104>)
  40210e:	4b20      	ldr	r3, [pc, #128]	; (402190 <SystemCoreClockUpdate+0xfc>)
  402110:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402112:	4b1d      	ldr	r3, [pc, #116]	; (402188 <SystemCoreClockUpdate+0xf4>)
  402114:	6a1b      	ldr	r3, [r3, #32]
  402116:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40211a:	2b10      	cmp	r3, #16
  40211c:	d002      	beq.n	402124 <SystemCoreClockUpdate+0x90>
  40211e:	2b20      	cmp	r3, #32
  402120:	d004      	beq.n	40212c <SystemCoreClockUpdate+0x98>
  402122:	e006      	b.n	402132 <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402124:	4a1d      	ldr	r2, [pc, #116]	; (40219c <SystemCoreClockUpdate+0x108>)
  402126:	4b1a      	ldr	r3, [pc, #104]	; (402190 <SystemCoreClockUpdate+0xfc>)
  402128:	601a      	str	r2, [r3, #0]
          break;
  40212a:	e002      	b.n	402132 <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40212c:	4a19      	ldr	r2, [pc, #100]	; (402194 <SystemCoreClockUpdate+0x100>)
  40212e:	4b18      	ldr	r3, [pc, #96]	; (402190 <SystemCoreClockUpdate+0xfc>)
  402130:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402132:	4b15      	ldr	r3, [pc, #84]	; (402188 <SystemCoreClockUpdate+0xf4>)
  402134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402136:	f003 0303 	and.w	r3, r3, #3
  40213a:	2b02      	cmp	r3, #2
  40213c:	d10c      	bne.n	402158 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40213e:	4a12      	ldr	r2, [pc, #72]	; (402188 <SystemCoreClockUpdate+0xf4>)
  402140:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402142:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402144:	4812      	ldr	r0, [pc, #72]	; (402190 <SystemCoreClockUpdate+0xfc>)
  402146:	f3c3 410a 	ubfx	r1, r3, #16, #11
  40214a:	6803      	ldr	r3, [r0, #0]
  40214c:	fb01 3303 	mla	r3, r1, r3, r3
  402150:	b2d2      	uxtb	r2, r2
  402152:	fbb3 f3f2 	udiv	r3, r3, r2
  402156:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402158:	4b0b      	ldr	r3, [pc, #44]	; (402188 <SystemCoreClockUpdate+0xf4>)
  40215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40215c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402160:	2b70      	cmp	r3, #112	; 0x70
  402162:	d107      	bne.n	402174 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  402164:	4a0a      	ldr	r2, [pc, #40]	; (402190 <SystemCoreClockUpdate+0xfc>)
  402166:	6813      	ldr	r3, [r2, #0]
  402168:	490d      	ldr	r1, [pc, #52]	; (4021a0 <SystemCoreClockUpdate+0x10c>)
  40216a:	fba1 1303 	umull	r1, r3, r1, r3
  40216e:	085b      	lsrs	r3, r3, #1
  402170:	6013      	str	r3, [r2, #0]
  402172:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402174:	4b04      	ldr	r3, [pc, #16]	; (402188 <SystemCoreClockUpdate+0xf4>)
  402176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402178:	4905      	ldr	r1, [pc, #20]	; (402190 <SystemCoreClockUpdate+0xfc>)
  40217a:	f3c3 1202 	ubfx	r2, r3, #4, #3
  40217e:	680b      	ldr	r3, [r1, #0]
  402180:	40d3      	lsrs	r3, r2
  402182:	600b      	str	r3, [r1, #0]
  402184:	4770      	bx	lr
  402186:	bf00      	nop
  402188:	400e0600 	.word	0x400e0600
  40218c:	400e1810 	.word	0x400e1810
  402190:	20400004 	.word	0x20400004
  402194:	00b71b00 	.word	0x00b71b00
  402198:	003d0900 	.word	0x003d0900
  40219c:	007a1200 	.word	0x007a1200
  4021a0:	aaaaaaab 	.word	0xaaaaaaab

004021a4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4021a4:	4b12      	ldr	r3, [pc, #72]	; (4021f0 <system_init_flash+0x4c>)
  4021a6:	4298      	cmp	r0, r3
  4021a8:	d804      	bhi.n	4021b4 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4021aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4021ae:	4b11      	ldr	r3, [pc, #68]	; (4021f4 <system_init_flash+0x50>)
  4021b0:	601a      	str	r2, [r3, #0]
  4021b2:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4021b4:	4b10      	ldr	r3, [pc, #64]	; (4021f8 <system_init_flash+0x54>)
  4021b6:	4298      	cmp	r0, r3
  4021b8:	d803      	bhi.n	4021c2 <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4021ba:	4a10      	ldr	r2, [pc, #64]	; (4021fc <system_init_flash+0x58>)
  4021bc:	4b0d      	ldr	r3, [pc, #52]	; (4021f4 <system_init_flash+0x50>)
  4021be:	601a      	str	r2, [r3, #0]
  4021c0:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4021c2:	4b0f      	ldr	r3, [pc, #60]	; (402200 <system_init_flash+0x5c>)
  4021c4:	4298      	cmp	r0, r3
  4021c6:	d803      	bhi.n	4021d0 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4021c8:	4a0e      	ldr	r2, [pc, #56]	; (402204 <system_init_flash+0x60>)
  4021ca:	4b0a      	ldr	r3, [pc, #40]	; (4021f4 <system_init_flash+0x50>)
  4021cc:	601a      	str	r2, [r3, #0]
  4021ce:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4021d0:	4b0d      	ldr	r3, [pc, #52]	; (402208 <system_init_flash+0x64>)
  4021d2:	4298      	cmp	r0, r3
  4021d4:	d803      	bhi.n	4021de <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4021d6:	4a0d      	ldr	r2, [pc, #52]	; (40220c <system_init_flash+0x68>)
  4021d8:	4b06      	ldr	r3, [pc, #24]	; (4021f4 <system_init_flash+0x50>)
  4021da:	601a      	str	r2, [r3, #0]
  4021dc:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4021de:	4b0c      	ldr	r3, [pc, #48]	; (402210 <system_init_flash+0x6c>)
  4021e0:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4021e2:	bf94      	ite	ls
  4021e4:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4021e8:	4a0a      	ldrhi	r2, [pc, #40]	; (402214 <system_init_flash+0x70>)
  4021ea:	4b02      	ldr	r3, [pc, #8]	; (4021f4 <system_init_flash+0x50>)
  4021ec:	601a      	str	r2, [r3, #0]
  4021ee:	4770      	bx	lr
  4021f0:	01312cff 	.word	0x01312cff
  4021f4:	400e0c00 	.word	0x400e0c00
  4021f8:	026259ff 	.word	0x026259ff
  4021fc:	04000100 	.word	0x04000100
  402200:	039386ff 	.word	0x039386ff
  402204:	04000200 	.word	0x04000200
  402208:	04c4b3ff 	.word	0x04c4b3ff
  40220c:	04000300 	.word	0x04000300
  402210:	05f5e0ff 	.word	0x05f5e0ff
  402214:	04000500 	.word	0x04000500

00402218 <Task1>:
	return 0;
	/* Insert application code here, after the board has been initialized. */
}


void Task1 (void* pvParameters) {
  402218:	b570      	push	{r4, r5, r6, lr}
	int tg = 1;
	
	for( ;; ){
	pio_clear(LED0);
  40221a:	4d06      	ldr	r5, [pc, #24]	; (402234 <Task1+0x1c>)
  40221c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
  402220:	4c05      	ldr	r4, [pc, #20]	; (402238 <Task1+0x20>)
  402222:	4631      	mov	r1, r6
  402224:	4628      	mov	r0, r5
  402226:	47a0      	blx	r4
	pio_clear(LED1);
  402228:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40222c:	4628      	mov	r0, r5
  40222e:	47a0      	blx	r4
  402230:	e7f7      	b.n	402222 <Task1+0xa>
  402232:	bf00      	nop
  402234:	400e1400 	.word	0x400e1400
  402238:	00401d45 	.word	0x00401d45

0040223c <main>:

//semaphores



int main (void){
  40223c:	b570      	push	{r4, r5, r6, lr}
  40223e:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  402240:	4b0e      	ldr	r3, [pc, #56]	; (40227c <main+0x40>)
  402242:	4798      	blx	r3
	xTaskCreate(Task1,"TASK1",200,NULL,1,NULL);
  402244:	2400      	movs	r4, #0
  402246:	9403      	str	r4, [sp, #12]
  402248:	9402      	str	r4, [sp, #8]
  40224a:	9401      	str	r4, [sp, #4]
  40224c:	2301      	movs	r3, #1
  40224e:	9300      	str	r3, [sp, #0]
  402250:	4623      	mov	r3, r4
  402252:	22c8      	movs	r2, #200	; 0xc8
  402254:	490a      	ldr	r1, [pc, #40]	; (402280 <main+0x44>)
  402256:	480b      	ldr	r0, [pc, #44]	; (402284 <main+0x48>)
  402258:	4d0b      	ldr	r5, [pc, #44]	; (402288 <main+0x4c>)
  40225a:	47a8      	blx	r5
	pio_set(LED0);
  40225c:	4e0b      	ldr	r6, [pc, #44]	; (40228c <main+0x50>)
  40225e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402262:	4630      	mov	r0, r6
  402264:	4d0a      	ldr	r5, [pc, #40]	; (402290 <main+0x54>)
  402266:	47a8      	blx	r5
	pio_set(LED1);
  402268:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40226c:	4630      	mov	r0, r6
  40226e:	47a8      	blx	r5

	vTaskStartScheduler();
  402270:	4b08      	ldr	r3, [pc, #32]	; (402294 <main+0x58>)
  402272:	4798      	blx	r3
	
	
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  402274:	4620      	mov	r0, r4
  402276:	b004      	add	sp, #16
  402278:	bd70      	pop	{r4, r5, r6, pc}
  40227a:	bf00      	nop
  40227c:	00401f89 	.word	0x00401f89
  402280:	004025cc 	.word	0x004025cc
  402284:	00402219 	.word	0x00402219
  402288:	00400e3d 	.word	0x00400e3d
  40228c:	400e1400 	.word	0x400e1400
  402290:	00401d41 	.word	0x00401d41
  402294:	00401065 	.word	0x00401065

00402298 <__libc_init_array>:
  402298:	b570      	push	{r4, r5, r6, lr}
  40229a:	4e0f      	ldr	r6, [pc, #60]	; (4022d8 <__libc_init_array+0x40>)
  40229c:	4d0f      	ldr	r5, [pc, #60]	; (4022dc <__libc_init_array+0x44>)
  40229e:	1b76      	subs	r6, r6, r5
  4022a0:	10b6      	asrs	r6, r6, #2
  4022a2:	bf18      	it	ne
  4022a4:	2400      	movne	r4, #0
  4022a6:	d005      	beq.n	4022b4 <__libc_init_array+0x1c>
  4022a8:	3401      	adds	r4, #1
  4022aa:	f855 3b04 	ldr.w	r3, [r5], #4
  4022ae:	4798      	blx	r3
  4022b0:	42a6      	cmp	r6, r4
  4022b2:	d1f9      	bne.n	4022a8 <__libc_init_array+0x10>
  4022b4:	4e0a      	ldr	r6, [pc, #40]	; (4022e0 <__libc_init_array+0x48>)
  4022b6:	4d0b      	ldr	r5, [pc, #44]	; (4022e4 <__libc_init_array+0x4c>)
  4022b8:	1b76      	subs	r6, r6, r5
  4022ba:	f000 f98f 	bl	4025dc <_init>
  4022be:	10b6      	asrs	r6, r6, #2
  4022c0:	bf18      	it	ne
  4022c2:	2400      	movne	r4, #0
  4022c4:	d006      	beq.n	4022d4 <__libc_init_array+0x3c>
  4022c6:	3401      	adds	r4, #1
  4022c8:	f855 3b04 	ldr.w	r3, [r5], #4
  4022cc:	4798      	blx	r3
  4022ce:	42a6      	cmp	r6, r4
  4022d0:	d1f9      	bne.n	4022c6 <__libc_init_array+0x2e>
  4022d2:	bd70      	pop	{r4, r5, r6, pc}
  4022d4:	bd70      	pop	{r4, r5, r6, pc}
  4022d6:	bf00      	nop
  4022d8:	004025e8 	.word	0x004025e8
  4022dc:	004025e8 	.word	0x004025e8
  4022e0:	004025f0 	.word	0x004025f0
  4022e4:	004025e8 	.word	0x004025e8

004022e8 <memcpy>:
  4022e8:	4684      	mov	ip, r0
  4022ea:	ea41 0300 	orr.w	r3, r1, r0
  4022ee:	f013 0303 	ands.w	r3, r3, #3
  4022f2:	d16d      	bne.n	4023d0 <memcpy+0xe8>
  4022f4:	3a40      	subs	r2, #64	; 0x40
  4022f6:	d341      	bcc.n	40237c <memcpy+0x94>
  4022f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022fc:	f840 3b04 	str.w	r3, [r0], #4
  402300:	f851 3b04 	ldr.w	r3, [r1], #4
  402304:	f840 3b04 	str.w	r3, [r0], #4
  402308:	f851 3b04 	ldr.w	r3, [r1], #4
  40230c:	f840 3b04 	str.w	r3, [r0], #4
  402310:	f851 3b04 	ldr.w	r3, [r1], #4
  402314:	f840 3b04 	str.w	r3, [r0], #4
  402318:	f851 3b04 	ldr.w	r3, [r1], #4
  40231c:	f840 3b04 	str.w	r3, [r0], #4
  402320:	f851 3b04 	ldr.w	r3, [r1], #4
  402324:	f840 3b04 	str.w	r3, [r0], #4
  402328:	f851 3b04 	ldr.w	r3, [r1], #4
  40232c:	f840 3b04 	str.w	r3, [r0], #4
  402330:	f851 3b04 	ldr.w	r3, [r1], #4
  402334:	f840 3b04 	str.w	r3, [r0], #4
  402338:	f851 3b04 	ldr.w	r3, [r1], #4
  40233c:	f840 3b04 	str.w	r3, [r0], #4
  402340:	f851 3b04 	ldr.w	r3, [r1], #4
  402344:	f840 3b04 	str.w	r3, [r0], #4
  402348:	f851 3b04 	ldr.w	r3, [r1], #4
  40234c:	f840 3b04 	str.w	r3, [r0], #4
  402350:	f851 3b04 	ldr.w	r3, [r1], #4
  402354:	f840 3b04 	str.w	r3, [r0], #4
  402358:	f851 3b04 	ldr.w	r3, [r1], #4
  40235c:	f840 3b04 	str.w	r3, [r0], #4
  402360:	f851 3b04 	ldr.w	r3, [r1], #4
  402364:	f840 3b04 	str.w	r3, [r0], #4
  402368:	f851 3b04 	ldr.w	r3, [r1], #4
  40236c:	f840 3b04 	str.w	r3, [r0], #4
  402370:	f851 3b04 	ldr.w	r3, [r1], #4
  402374:	f840 3b04 	str.w	r3, [r0], #4
  402378:	3a40      	subs	r2, #64	; 0x40
  40237a:	d2bd      	bcs.n	4022f8 <memcpy+0x10>
  40237c:	3230      	adds	r2, #48	; 0x30
  40237e:	d311      	bcc.n	4023a4 <memcpy+0xbc>
  402380:	f851 3b04 	ldr.w	r3, [r1], #4
  402384:	f840 3b04 	str.w	r3, [r0], #4
  402388:	f851 3b04 	ldr.w	r3, [r1], #4
  40238c:	f840 3b04 	str.w	r3, [r0], #4
  402390:	f851 3b04 	ldr.w	r3, [r1], #4
  402394:	f840 3b04 	str.w	r3, [r0], #4
  402398:	f851 3b04 	ldr.w	r3, [r1], #4
  40239c:	f840 3b04 	str.w	r3, [r0], #4
  4023a0:	3a10      	subs	r2, #16
  4023a2:	d2ed      	bcs.n	402380 <memcpy+0x98>
  4023a4:	320c      	adds	r2, #12
  4023a6:	d305      	bcc.n	4023b4 <memcpy+0xcc>
  4023a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4023ac:	f840 3b04 	str.w	r3, [r0], #4
  4023b0:	3a04      	subs	r2, #4
  4023b2:	d2f9      	bcs.n	4023a8 <memcpy+0xc0>
  4023b4:	3204      	adds	r2, #4
  4023b6:	d008      	beq.n	4023ca <memcpy+0xe2>
  4023b8:	07d2      	lsls	r2, r2, #31
  4023ba:	bf1c      	itt	ne
  4023bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4023c0:	f800 3b01 	strbne.w	r3, [r0], #1
  4023c4:	d301      	bcc.n	4023ca <memcpy+0xe2>
  4023c6:	880b      	ldrh	r3, [r1, #0]
  4023c8:	8003      	strh	r3, [r0, #0]
  4023ca:	4660      	mov	r0, ip
  4023cc:	4770      	bx	lr
  4023ce:	bf00      	nop
  4023d0:	2a08      	cmp	r2, #8
  4023d2:	d313      	bcc.n	4023fc <memcpy+0x114>
  4023d4:	078b      	lsls	r3, r1, #30
  4023d6:	d08d      	beq.n	4022f4 <memcpy+0xc>
  4023d8:	f010 0303 	ands.w	r3, r0, #3
  4023dc:	d08a      	beq.n	4022f4 <memcpy+0xc>
  4023de:	f1c3 0304 	rsb	r3, r3, #4
  4023e2:	1ad2      	subs	r2, r2, r3
  4023e4:	07db      	lsls	r3, r3, #31
  4023e6:	bf1c      	itt	ne
  4023e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4023ec:	f800 3b01 	strbne.w	r3, [r0], #1
  4023f0:	d380      	bcc.n	4022f4 <memcpy+0xc>
  4023f2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4023f6:	f820 3b02 	strh.w	r3, [r0], #2
  4023fa:	e77b      	b.n	4022f4 <memcpy+0xc>
  4023fc:	3a04      	subs	r2, #4
  4023fe:	d3d9      	bcc.n	4023b4 <memcpy+0xcc>
  402400:	3a01      	subs	r2, #1
  402402:	f811 3b01 	ldrb.w	r3, [r1], #1
  402406:	f800 3b01 	strb.w	r3, [r0], #1
  40240a:	d2f9      	bcs.n	402400 <memcpy+0x118>
  40240c:	780b      	ldrb	r3, [r1, #0]
  40240e:	7003      	strb	r3, [r0, #0]
  402410:	784b      	ldrb	r3, [r1, #1]
  402412:	7043      	strb	r3, [r0, #1]
  402414:	788b      	ldrb	r3, [r1, #2]
  402416:	7083      	strb	r3, [r0, #2]
  402418:	4660      	mov	r0, ip
  40241a:	4770      	bx	lr

0040241c <memset>:
  40241c:	b470      	push	{r4, r5, r6}
  40241e:	0784      	lsls	r4, r0, #30
  402420:	d046      	beq.n	4024b0 <memset+0x94>
  402422:	1e54      	subs	r4, r2, #1
  402424:	2a00      	cmp	r2, #0
  402426:	d041      	beq.n	4024ac <memset+0x90>
  402428:	b2cd      	uxtb	r5, r1
  40242a:	4603      	mov	r3, r0
  40242c:	e002      	b.n	402434 <memset+0x18>
  40242e:	1e62      	subs	r2, r4, #1
  402430:	b3e4      	cbz	r4, 4024ac <memset+0x90>
  402432:	4614      	mov	r4, r2
  402434:	f803 5b01 	strb.w	r5, [r3], #1
  402438:	079a      	lsls	r2, r3, #30
  40243a:	d1f8      	bne.n	40242e <memset+0x12>
  40243c:	2c03      	cmp	r4, #3
  40243e:	d92e      	bls.n	40249e <memset+0x82>
  402440:	b2cd      	uxtb	r5, r1
  402442:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402446:	2c0f      	cmp	r4, #15
  402448:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40244c:	d919      	bls.n	402482 <memset+0x66>
  40244e:	f103 0210 	add.w	r2, r3, #16
  402452:	4626      	mov	r6, r4
  402454:	3e10      	subs	r6, #16
  402456:	2e0f      	cmp	r6, #15
  402458:	f842 5c10 	str.w	r5, [r2, #-16]
  40245c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402460:	f842 5c08 	str.w	r5, [r2, #-8]
  402464:	f842 5c04 	str.w	r5, [r2, #-4]
  402468:	f102 0210 	add.w	r2, r2, #16
  40246c:	d8f2      	bhi.n	402454 <memset+0x38>
  40246e:	f1a4 0210 	sub.w	r2, r4, #16
  402472:	f022 020f 	bic.w	r2, r2, #15
  402476:	f004 040f 	and.w	r4, r4, #15
  40247a:	3210      	adds	r2, #16
  40247c:	2c03      	cmp	r4, #3
  40247e:	4413      	add	r3, r2
  402480:	d90d      	bls.n	40249e <memset+0x82>
  402482:	461e      	mov	r6, r3
  402484:	4622      	mov	r2, r4
  402486:	3a04      	subs	r2, #4
  402488:	2a03      	cmp	r2, #3
  40248a:	f846 5b04 	str.w	r5, [r6], #4
  40248e:	d8fa      	bhi.n	402486 <memset+0x6a>
  402490:	1f22      	subs	r2, r4, #4
  402492:	f022 0203 	bic.w	r2, r2, #3
  402496:	3204      	adds	r2, #4
  402498:	4413      	add	r3, r2
  40249a:	f004 0403 	and.w	r4, r4, #3
  40249e:	b12c      	cbz	r4, 4024ac <memset+0x90>
  4024a0:	b2c9      	uxtb	r1, r1
  4024a2:	441c      	add	r4, r3
  4024a4:	f803 1b01 	strb.w	r1, [r3], #1
  4024a8:	42a3      	cmp	r3, r4
  4024aa:	d1fb      	bne.n	4024a4 <memset+0x88>
  4024ac:	bc70      	pop	{r4, r5, r6}
  4024ae:	4770      	bx	lr
  4024b0:	4614      	mov	r4, r2
  4024b2:	4603      	mov	r3, r0
  4024b4:	e7c2      	b.n	40243c <memset+0x20>
  4024b6:	bf00      	nop

004024b8 <register_fini>:
  4024b8:	4b02      	ldr	r3, [pc, #8]	; (4024c4 <register_fini+0xc>)
  4024ba:	b113      	cbz	r3, 4024c2 <register_fini+0xa>
  4024bc:	4802      	ldr	r0, [pc, #8]	; (4024c8 <register_fini+0x10>)
  4024be:	f000 b805 	b.w	4024cc <atexit>
  4024c2:	4770      	bx	lr
  4024c4:	00000000 	.word	0x00000000
  4024c8:	004024d9 	.word	0x004024d9

004024cc <atexit>:
  4024cc:	2300      	movs	r3, #0
  4024ce:	4601      	mov	r1, r0
  4024d0:	461a      	mov	r2, r3
  4024d2:	4618      	mov	r0, r3
  4024d4:	f000 b814 	b.w	402500 <__register_exitproc>

004024d8 <__libc_fini_array>:
  4024d8:	b538      	push	{r3, r4, r5, lr}
  4024da:	4d07      	ldr	r5, [pc, #28]	; (4024f8 <__libc_fini_array+0x20>)
  4024dc:	4c07      	ldr	r4, [pc, #28]	; (4024fc <__libc_fini_array+0x24>)
  4024de:	1b2c      	subs	r4, r5, r4
  4024e0:	10a4      	asrs	r4, r4, #2
  4024e2:	d005      	beq.n	4024f0 <__libc_fini_array+0x18>
  4024e4:	3c01      	subs	r4, #1
  4024e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4024ea:	4798      	blx	r3
  4024ec:	2c00      	cmp	r4, #0
  4024ee:	d1f9      	bne.n	4024e4 <__libc_fini_array+0xc>
  4024f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4024f4:	f000 b87c 	b.w	4025f0 <_fini>
  4024f8:	00402600 	.word	0x00402600
  4024fc:	004025fc 	.word	0x004025fc

00402500 <__register_exitproc>:
  402500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402504:	4c25      	ldr	r4, [pc, #148]	; (40259c <__register_exitproc+0x9c>)
  402506:	6825      	ldr	r5, [r4, #0]
  402508:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  40250c:	4606      	mov	r6, r0
  40250e:	4688      	mov	r8, r1
  402510:	4692      	mov	sl, r2
  402512:	4699      	mov	r9, r3
  402514:	b3c4      	cbz	r4, 402588 <__register_exitproc+0x88>
  402516:	6860      	ldr	r0, [r4, #4]
  402518:	281f      	cmp	r0, #31
  40251a:	dc17      	bgt.n	40254c <__register_exitproc+0x4c>
  40251c:	1c43      	adds	r3, r0, #1
  40251e:	b176      	cbz	r6, 40253e <__register_exitproc+0x3e>
  402520:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402524:	2201      	movs	r2, #1
  402526:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  40252a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40252e:	4082      	lsls	r2, r0
  402530:	4311      	orrs	r1, r2
  402532:	2e02      	cmp	r6, #2
  402534:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402538:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  40253c:	d01e      	beq.n	40257c <__register_exitproc+0x7c>
  40253e:	3002      	adds	r0, #2
  402540:	6063      	str	r3, [r4, #4]
  402542:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402546:	2000      	movs	r0, #0
  402548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40254c:	4b14      	ldr	r3, [pc, #80]	; (4025a0 <__register_exitproc+0xa0>)
  40254e:	b303      	cbz	r3, 402592 <__register_exitproc+0x92>
  402550:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402554:	f3af 8000 	nop.w
  402558:	4604      	mov	r4, r0
  40255a:	b1d0      	cbz	r0, 402592 <__register_exitproc+0x92>
  40255c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402560:	2700      	movs	r7, #0
  402562:	e880 0088 	stmia.w	r0, {r3, r7}
  402566:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40256a:	4638      	mov	r0, r7
  40256c:	2301      	movs	r3, #1
  40256e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402572:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402576:	2e00      	cmp	r6, #0
  402578:	d0e1      	beq.n	40253e <__register_exitproc+0x3e>
  40257a:	e7d1      	b.n	402520 <__register_exitproc+0x20>
  40257c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402580:	430a      	orrs	r2, r1
  402582:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402586:	e7da      	b.n	40253e <__register_exitproc+0x3e>
  402588:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40258c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402590:	e7c1      	b.n	402516 <__register_exitproc+0x16>
  402592:	f04f 30ff 	mov.w	r0, #4294967295
  402596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40259a:	bf00      	nop
  40259c:	004025d8 	.word	0x004025d8
  4025a0:	00000000 	.word	0x00000000
  4025a4:	454c4449 	.word	0x454c4449
  4025a8:	00000000 	.word	0x00000000
  4025ac:	09632509 	.word	0x09632509
  4025b0:	25097525 	.word	0x25097525
  4025b4:	75250975 	.word	0x75250975
  4025b8:	00000a0d 	.word	0x00000a0d
  4025bc:	51726d54 	.word	0x51726d54
  4025c0:	00000000 	.word	0x00000000
  4025c4:	20726d54 	.word	0x20726d54
  4025c8:	00637653 	.word	0x00637653
  4025cc:	4b534154 	.word	0x4b534154
  4025d0:	00000031 	.word	0x00000031
  4025d4:	00000043 	.word	0x00000043

004025d8 <_global_impure_ptr>:
  4025d8:	20400008                                ..@ 

004025dc <_init>:
  4025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025de:	bf00      	nop
  4025e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4025e2:	bc08      	pop	{r3}
  4025e4:	469e      	mov	lr, r3
  4025e6:	4770      	bx	lr

004025e8 <__init_array_start>:
  4025e8:	004024b9 	.word	0x004024b9

004025ec <__frame_dummy_init_array_entry>:
  4025ec:	00400165                                e.@.

004025f0 <_fini>:
  4025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4025f2:	bf00      	nop
  4025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4025f6:	bc08      	pop	{r3}
  4025f8:	469e      	mov	lr, r3
  4025fa:	4770      	bx	lr

004025fc <__fini_array_start>:
  4025fc:	00400141 	.word	0x00400141
