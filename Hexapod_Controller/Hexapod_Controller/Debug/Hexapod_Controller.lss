
Hexapod_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000696c  00400000  00400000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000044c  20400000  0040696c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000bbd0  2040044c  00406db8  0001044c  2**2
                  ALLOC
  3 .stack        00002004  2040c01c  00412988  0001044c  2**0
                  ALLOC
  4 .heap         00000200  2040e020  0041498c  0001044c  2**0
                  ALLOC
  5 .ARM.attributes 00000033  00000000  00000000  0001044c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  0001047f  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014db6  00000000  00000000  000104da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000358d  00000000  00000000  00025290  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f48  00000000  00000000  0002881d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  0000c250  00000000  00000000  00029765  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001344d  00000000  00000000  000359b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0008158e  00000000  00000000  00048e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000a7a2  00000000  00000000  000ca390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fd0  00000000  00000000  000d4b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002a54  00000000  00000000  000d5b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040e020 	.word	0x2040e020
  400004:	00402a81 	.word	0x00402a81
  400008:	00402a7d 	.word	0x00402a7d
  40000c:	00402a7d 	.word	0x00402a7d
  400010:	00402a7d 	.word	0x00402a7d
  400014:	00402a7d 	.word	0x00402a7d
  400018:	00402a7d 	.word	0x00402a7d
	...
  40002c:	004005e5 	.word	0x004005e5
  400030:	00402a7d 	.word	0x00402a7d
  400034:	00000000 	.word	0x00000000
  400038:	00400685 	.word	0x00400685
  40003c:	004006ed 	.word	0x004006ed
  400040:	00402a7d 	.word	0x00402a7d
  400044:	00402a7d 	.word	0x00402a7d
  400048:	00402a7d 	.word	0x00402a7d
  40004c:	00402a7d 	.word	0x00402a7d
  400050:	00402a7d 	.word	0x00402a7d
  400054:	00402a7d 	.word	0x00402a7d
  400058:	00402a7d 	.word	0x00402a7d
  40005c:	00402a7d 	.word	0x00402a7d
  400060:	00402a7d 	.word	0x00402a7d
  400064:	00000000 	.word	0x00000000
  400068:	0040350d 	.word	0x0040350d
  40006c:	00400395 	.word	0x00400395
  400070:	00000000 	.word	0x00000000
  400074:	00402a7d 	.word	0x00402a7d
  400078:	00402a7d 	.word	0x00402a7d
  40007c:	00402a7d 	.word	0x00402a7d
  400080:	004003a9 	.word	0x004003a9
  400084:	00000000 	.word	0x00000000
  400088:	00402a7d 	.word	0x00402a7d
  40008c:	00402a7d 	.word	0x00402a7d
  400090:	00402a7d 	.word	0x00402a7d
  400094:	00402a7d 	.word	0x00402a7d
  400098:	00402a7d 	.word	0x00402a7d
  40009c:	00402a7d 	.word	0x00402a7d
  4000a0:	00402a7d 	.word	0x00402a7d
  4000a4:	00402a7d 	.word	0x00402a7d
	...
  4000b4:	004023ed 	.word	0x004023ed
  4000b8:	00000000 	.word	0x00000000
  4000bc:	00402a7d 	.word	0x00402a7d
  4000c0:	00402a7d 	.word	0x00402a7d
  4000c4:	00402a7d 	.word	0x00402a7d
  4000c8:	00402a7d 	.word	0x00402a7d
	...
  4000e0:	00402401 	.word	0x00402401
  4000e4:	00402a7d 	.word	0x00402a7d
  4000e8:	00402a7d 	.word	0x00402a7d
  4000ec:	00402a7d 	.word	0x00402a7d
  4000f0:	00402a7d 	.word	0x00402a7d
  4000f4:	00402a7d 	.word	0x00402a7d
  4000f8:	00402a7d 	.word	0x00402a7d
	...
  400108:	00402a7d 	.word	0x00402a7d
  40010c:	00402a7d 	.word	0x00402a7d
  400110:	00402a7d 	.word	0x00402a7d
	...
  400120:	00402a7d 	.word	0x00402a7d
  400124:	00402a7d 	.word	0x00402a7d
  400128:	00402a7d 	.word	0x00402a7d
  40012c:	00402a7d 	.word	0x00402a7d
  400130:	00402a7d 	.word	0x00402a7d
	...
  40013c:	00402a7d 	.word	0x00402a7d

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	0040696c 	.word	0x0040696c

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4808      	ldr	r0, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4908      	ldr	r1, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	0040696c 	.word	0x0040696c
  400190:	20400450 	.word	0x20400450
  400194:	0040696c 	.word	0x0040696c
  400198:	00000000 	.word	0x00000000

0040019c <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  40019c:	b510      	push	{r4, lr}
  40019e:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <spi_master_init+0x48>)
  4001a2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4001a4:	2380      	movs	r3, #128	; 0x80
  4001a6:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4001a8:	6863      	ldr	r3, [r4, #4]
  4001aa:	f043 0301 	orr.w	r3, r3, #1
  4001ae:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4001b0:	6863      	ldr	r3, [r4, #4]
  4001b2:	f043 0310 	orr.w	r3, r3, #16
  4001b6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4001b8:	6863      	ldr	r3, [r4, #4]
  4001ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4001be:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4001c0:	4620      	mov	r0, r4
  4001c2:	2100      	movs	r1, #0
  4001c4:	4b08      	ldr	r3, [pc, #32]	; (4001e8 <spi_master_init+0x4c>)
  4001c6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4001c8:	6863      	ldr	r3, [r4, #4]
  4001ca:	f023 0302 	bic.w	r3, r3, #2
  4001ce:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4001d0:	6863      	ldr	r3, [r4, #4]
  4001d2:	f023 0304 	bic.w	r3, r3, #4
  4001d6:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4001d8:	4620      	mov	r0, r4
  4001da:	2100      	movs	r1, #0
  4001dc:	4b03      	ldr	r3, [pc, #12]	; (4001ec <spi_master_init+0x50>)
  4001de:	4798      	blx	r3
  4001e0:	bd10      	pop	{r4, pc}
  4001e2:	bf00      	nop
  4001e4:	004003bd 	.word	0x004003bd
  4001e8:	004003e9 	.word	0x004003e9
  4001ec:	00400401 	.word	0x00400401

004001f0 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4001f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4001f2:	4605      	mov	r5, r0
  4001f4:	460c      	mov	r4, r1
  4001f6:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  4001f8:	4618      	mov	r0, r3
  4001fa:	4914      	ldr	r1, [pc, #80]	; (40024c <spi_master_setup_device+0x5c>)
  4001fc:	4b14      	ldr	r3, [pc, #80]	; (400250 <spi_master_setup_device+0x60>)
  4001fe:	4798      	blx	r3
  400200:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400202:	4628      	mov	r0, r5
  400204:	6821      	ldr	r1, [r4, #0]
  400206:	2200      	movs	r2, #0
  400208:	4613      	mov	r3, r2
  40020a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 400268 <spi_master_setup_device+0x78>
  40020e:	47e0      	blx	ip
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400210:	4628      	mov	r0, r5
  400212:	6821      	ldr	r1, [r4, #0]
  400214:	2208      	movs	r2, #8
  400216:	4b0f      	ldr	r3, [pc, #60]	; (400254 <spi_master_setup_device+0x64>)
  400218:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  40021a:	4628      	mov	r0, r5
  40021c:	6821      	ldr	r1, [r4, #0]
  40021e:	b2fa      	uxtb	r2, r7
  400220:	4b0d      	ldr	r3, [pc, #52]	; (400258 <spi_master_setup_device+0x68>)
  400222:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400224:	4628      	mov	r0, r5
  400226:	6821      	ldr	r1, [r4, #0]
  400228:	2208      	movs	r2, #8
  40022a:	4b0c      	ldr	r3, [pc, #48]	; (40025c <spi_master_setup_device+0x6c>)
  40022c:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  40022e:	4628      	mov	r0, r5
  400230:	6821      	ldr	r1, [r4, #0]
  400232:	0872      	lsrs	r2, r6, #1
  400234:	4b0a      	ldr	r3, [pc, #40]	; (400260 <spi_master_setup_device+0x70>)
  400236:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400238:	f086 0201 	eor.w	r2, r6, #1
  40023c:	4628      	mov	r0, r5
  40023e:	6821      	ldr	r1, [r4, #0]
  400240:	f002 0201 	and.w	r2, r2, #1
  400244:	4b07      	ldr	r3, [pc, #28]	; (400264 <spi_master_setup_device+0x74>)
  400246:	4798      	blx	r3
  400248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40024a:	bf00      	nop
  40024c:	11e1a300 	.word	0x11e1a300
  400250:	004004ad 	.word	0x004004ad
  400254:	00400499 	.word	0x00400499
  400258:	004004c9 	.word	0x004004c9
  40025c:	00400455 	.word	0x00400455
  400260:	00400415 	.word	0x00400415
  400264:	00400435 	.word	0x00400435
  400268:	004004f9 	.word	0x004004f9

0040026c <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  40026c:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  40026e:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400270:	f013 0f04 	tst.w	r3, #4
  400274:	d005      	beq.n	400282 <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400276:	6809      	ldr	r1, [r1, #0]
  400278:	290f      	cmp	r1, #15
  40027a:	d80a      	bhi.n	400292 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  40027c:	4b05      	ldr	r3, [pc, #20]	; (400294 <spi_select_device+0x28>)
  40027e:	4798      	blx	r3
  400280:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400282:	680b      	ldr	r3, [r1, #0]
  400284:	2b03      	cmp	r3, #3
  400286:	d804      	bhi.n	400292 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400288:	2101      	movs	r1, #1
  40028a:	4099      	lsls	r1, r3
  40028c:	43c9      	mvns	r1, r1
  40028e:	4b01      	ldr	r3, [pc, #4]	; (400294 <spi_select_device+0x28>)
  400290:	4798      	blx	r3
  400292:	bd08      	pop	{r3, pc}
  400294:	004003e9 	.word	0x004003e9

00400298 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  400298:	b510      	push	{r4, lr}
  40029a:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40029c:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  40029e:	f413 7f00 	tst.w	r3, #512	; 0x200
  4002a2:	d0fb      	beq.n	40029c <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  4002a4:	4620      	mov	r0, r4
  4002a6:	210f      	movs	r1, #15
  4002a8:	4b02      	ldr	r3, [pc, #8]	; (4002b4 <spi_deselect_device+0x1c>)
  4002aa:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4002ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4002b0:	6023      	str	r3, [r4, #0]
  4002b2:	bd10      	pop	{r4, pc}
  4002b4:	004003e9 	.word	0x004003e9

004002b8 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4002b8:	b92a      	cbnz	r2, 4002c6 <spi_write_packet+0xe>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4002ba:	2000      	movs	r0, #0
}
  4002bc:	b240      	sxtb	r0, r0
  4002be:	4770      	bx	lr
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  4002c0:	3b01      	subs	r3, #1
  4002c2:	d106      	bne.n	4002d2 <spi_write_packet+0x1a>
  4002c4:	e010      	b.n	4002e8 <spi_write_packet+0x30>
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  4002c6:	b430      	push	{r4, r5}
  4002c8:	4614      	mov	r4, r2
  4002ca:	3901      	subs	r1, #1
  4002cc:	f643 2599 	movw	r5, #15001	; 0x3a99
  4002d0:	462b      	mov	r3, r5
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4002d2:	6902      	ldr	r2, [r0, #16]
	uint32_t i = 0;
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  4002d4:	f012 0f02 	tst.w	r2, #2
  4002d8:	d0f2      	beq.n	4002c0 <spi_write_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4002da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4002de:	60c3      	str	r3, [r0, #12]
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4002e0:	3c01      	subs	r4, #1
  4002e2:	d1f5      	bne.n	4002d0 <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4002e4:	2000      	movs	r0, #0
  4002e6:	e000      	b.n	4002ea <spi_write_packet+0x32>

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  4002e8:	20fd      	movs	r0, #253	; 0xfd
		i++;
		len--;
	}

	return STATUS_OK;
}
  4002ea:	b240      	sxtb	r0, r0
  4002ec:	bc30      	pop	{r4, r5}
  4002ee:	4770      	bx	lr

004002f0 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4002f0:	b92a      	cbnz	r2, 4002fe <spi_read_packet+0xe>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  4002f2:	2000      	movs	r0, #0
}
  4002f4:	b240      	sxtb	r0, r0
  4002f6:	4770      	bx	lr

	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  4002f8:	3b01      	subs	r3, #1
  4002fa:	d109      	bne.n	400310 <spi_read_packet+0x20>
  4002fc:	e01c      	b.n	400338 <spi_read_packet+0x48>
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  4002fe:	b4f0      	push	{r4, r5, r6, r7}
  400300:	4615      	mov	r5, r2
  400302:	3901      	subs	r1, #1
  400304:	f643 2699 	movw	r6, #15001	; 0x3a99
  400308:	27ff      	movs	r7, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  40030a:	f240 2401 	movw	r4, #513	; 0x201
  40030e:	4633      	mov	r3, r6
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400310:	6902      	ldr	r2, [r0, #16]
	uint32_t i = 0;

	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  400312:	f012 0f02 	tst.w	r2, #2
  400316:	d0ef      	beq.n	4002f8 <spi_read_packet+0x8>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400318:	60c7      	str	r7, [r0, #12]
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  40031a:	4632      	mov	r2, r6
  40031c:	e001      	b.n	400322 <spi_read_packet+0x32>
			if (!timeout--) {
  40031e:	3a01      	subs	r2, #1
  400320:	d00c      	beq.n	40033c <spi_read_packet+0x4c>
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400322:	6903      	ldr	r3, [r0, #16]
  400324:	4023      	ands	r3, r4
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  400326:	42a3      	cmp	r3, r4
  400328:	d1f9      	bne.n	40031e <spi_read_packet+0x2e>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  40032a:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  40032c:	f801 3f01 	strb.w	r3, [r1, #1]!
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400330:	3d01      	subs	r5, #1
  400332:	d1ec      	bne.n	40030e <spi_read_packet+0x1e>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400334:	2000      	movs	r0, #0
  400336:	e002      	b.n	40033e <spi_read_packet+0x4e>
	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  400338:	20fd      	movs	r0, #253	; 0xfd
  40033a:	e000      	b.n	40033e <spi_read_packet+0x4e>
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  40033c:	20fd      	movs	r0, #253	; 0xfd
		i++;
		len--;
	}

	return STATUS_OK;
}
  40033e:	b240      	sxtb	r0, r0
  400340:	bcf0      	pop	{r4, r5, r6, r7}
  400342:	4770      	bx	lr

00400344 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400348:	4604      	mov	r4, r0
  40034a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40034c:	4b0e      	ldr	r3, [pc, #56]	; (400388 <pio_handler_process+0x44>)
  40034e:	4798      	blx	r3
  400350:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400352:	4620      	mov	r0, r4
  400354:	4b0d      	ldr	r3, [pc, #52]	; (40038c <pio_handler_process+0x48>)
  400356:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400358:	4005      	ands	r5, r0
  40035a:	d013      	beq.n	400384 <pio_handler_process+0x40>
  40035c:	4c0c      	ldr	r4, [pc, #48]	; (400390 <pio_handler_process+0x4c>)
  40035e:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400362:	6823      	ldr	r3, [r4, #0]
  400364:	4543      	cmp	r3, r8
  400366:	d108      	bne.n	40037a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400368:	6861      	ldr	r1, [r4, #4]
  40036a:	4229      	tst	r1, r5
  40036c:	d005      	beq.n	40037a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40036e:	68e3      	ldr	r3, [r4, #12]
  400370:	4640      	mov	r0, r8
  400372:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400374:	6863      	ldr	r3, [r4, #4]
  400376:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40037a:	42bc      	cmp	r4, r7
  40037c:	d002      	beq.n	400384 <pio_handler_process+0x40>
  40037e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400380:	2d00      	cmp	r5, #0
  400382:	d1ee      	bne.n	400362 <pio_handler_process+0x1e>
  400384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400388:	004025cd 	.word	0x004025cd
  40038c:	004025d1 	.word	0x004025d1
  400390:	20400468 	.word	0x20400468

00400394 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400394:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400396:	4802      	ldr	r0, [pc, #8]	; (4003a0 <PIOB_Handler+0xc>)
  400398:	210b      	movs	r1, #11
  40039a:	4b02      	ldr	r3, [pc, #8]	; (4003a4 <PIOB_Handler+0x10>)
  40039c:	4798      	blx	r3
  40039e:	bd08      	pop	{r3, pc}
  4003a0:	400e1000 	.word	0x400e1000
  4003a4:	00400345 	.word	0x00400345

004003a8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4003a8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4003aa:	4802      	ldr	r0, [pc, #8]	; (4003b4 <PIOD_Handler+0xc>)
  4003ac:	2110      	movs	r1, #16
  4003ae:	4b02      	ldr	r3, [pc, #8]	; (4003b8 <PIOD_Handler+0x10>)
  4003b0:	4798      	blx	r3
  4003b2:	bd08      	pop	{r3, pc}
  4003b4:	400e1400 	.word	0x400e1400
  4003b8:	00400345 	.word	0x00400345

004003bc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4003bc:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4003be:	4b07      	ldr	r3, [pc, #28]	; (4003dc <spi_enable_clock+0x20>)
  4003c0:	4298      	cmp	r0, r3
  4003c2:	d103      	bne.n	4003cc <spi_enable_clock+0x10>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003c4:	2015      	movs	r0, #21
  4003c6:	4b06      	ldr	r3, [pc, #24]	; (4003e0 <spi_enable_clock+0x24>)
  4003c8:	4798      	blx	r3
  4003ca:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4003cc:	4b05      	ldr	r3, [pc, #20]	; (4003e4 <spi_enable_clock+0x28>)
  4003ce:	4298      	cmp	r0, r3
  4003d0:	d102      	bne.n	4003d8 <spi_enable_clock+0x1c>
  4003d2:	202a      	movs	r0, #42	; 0x2a
  4003d4:	4b02      	ldr	r3, [pc, #8]	; (4003e0 <spi_enable_clock+0x24>)
  4003d6:	4798      	blx	r3
  4003d8:	bd08      	pop	{r3, pc}
  4003da:	bf00      	nop
  4003dc:	40008000 	.word	0x40008000
  4003e0:	004026f9 	.word	0x004026f9
  4003e4:	40058000 	.word	0x40058000

004003e8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003e8:	6843      	ldr	r3, [r0, #4]
  4003ea:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4003ee:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003f0:	6843      	ldr	r3, [r0, #4]
  4003f2:	0409      	lsls	r1, r1, #16
  4003f4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4003f8:	430b      	orrs	r3, r1
  4003fa:	6043      	str	r3, [r0, #4]
  4003fc:	4770      	bx	lr
  4003fe:	bf00      	nop

00400400 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400400:	6843      	ldr	r3, [r0, #4]
  400402:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400406:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  400408:	6843      	ldr	r3, [r0, #4]
  40040a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  40040e:	6041      	str	r1, [r0, #4]
  400410:	4770      	bx	lr
  400412:	bf00      	nop

00400414 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400414:	b132      	cbz	r2, 400424 <spi_set_clock_polarity+0x10>
  400416:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40041a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40041c:	f043 0301 	orr.w	r3, r3, #1
  400420:	6303      	str	r3, [r0, #48]	; 0x30
  400422:	4770      	bx	lr
  400424:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400428:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40042a:	f023 0301 	bic.w	r3, r3, #1
  40042e:	6303      	str	r3, [r0, #48]	; 0x30
  400430:	4770      	bx	lr
  400432:	bf00      	nop

00400434 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400434:	b132      	cbz	r2, 400444 <spi_set_clock_phase+0x10>
  400436:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40043a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40043c:	f043 0302 	orr.w	r3, r3, #2
  400440:	6303      	str	r3, [r0, #48]	; 0x30
  400442:	4770      	bx	lr
  400444:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400448:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044a:	f023 0302 	bic.w	r3, r3, #2
  40044e:	6303      	str	r3, [r0, #48]	; 0x30
  400450:	4770      	bx	lr
  400452:	bf00      	nop

00400454 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400454:	2a04      	cmp	r2, #4
  400456:	d10a      	bne.n	40046e <spi_configure_cs_behavior+0x1a>
  400458:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40045c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40045e:	f023 0308 	bic.w	r3, r3, #8
  400462:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400464:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400466:	f043 0304 	orr.w	r3, r3, #4
  40046a:	6303      	str	r3, [r0, #48]	; 0x30
  40046c:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  40046e:	b952      	cbnz	r2, 400486 <spi_configure_cs_behavior+0x32>
  400470:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400474:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400476:	f023 0308 	bic.w	r3, r3, #8
  40047a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40047c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40047e:	f023 0304 	bic.w	r3, r3, #4
  400482:	6303      	str	r3, [r0, #48]	; 0x30
  400484:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400486:	2a08      	cmp	r2, #8
  400488:	d105      	bne.n	400496 <spi_configure_cs_behavior+0x42>
  40048a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40048e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400490:	f043 0308 	orr.w	r3, r3, #8
  400494:	6303      	str	r3, [r0, #48]	; 0x30
  400496:	4770      	bx	lr

00400498 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400498:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  40049c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40049e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4004a2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4004a4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004a6:	431a      	orrs	r2, r3
  4004a8:	630a      	str	r2, [r1, #48]	; 0x30
  4004aa:	4770      	bx	lr

004004ac <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  4004ac:	1e43      	subs	r3, r0, #1
	int baud_div = div_ceil(mck, baudrate);
  4004ae:	4419      	add	r1, r3
  4004b0:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4004b4:	1e43      	subs	r3, r0, #1
  4004b6:	2bfe      	cmp	r3, #254	; 0xfe
  4004b8:	d801      	bhi.n	4004be <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
  4004ba:	b280      	uxth	r0, r0
  4004bc:	e001      	b.n	4004c2 <spi_calc_baudrate_div+0x16>
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  4004be:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}

	return baud_div;
}
  4004c2:	b200      	sxth	r0, r0
  4004c4:	4770      	bx	lr
  4004c6:	bf00      	nop

004004c8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4004c8:	b16a      	cbz	r2, 4004e6 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4004ca:	b410      	push	{r4}
  4004cc:	4614      	mov	r4, r2
  4004ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4004d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4004d8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4004da:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4004dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4004e0:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4004e2:	2000      	movs	r0, #0
  4004e4:	e003      	b.n	4004ee <spi_set_baudrate_div+0x26>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  4004e6:	f64f 70ff 	movw	r0, #65535	; 0xffff

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  4004ea:	b200      	sxth	r0, r0
  4004ec:	4770      	bx	lr
  4004ee:	b200      	sxth	r0, r0
  4004f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004f4:	4770      	bx	lr
  4004f6:	bf00      	nop

004004f8 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4004f8:	b410      	push	{r4}
  4004fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4004fe:	6b08      	ldr	r0, [r1, #48]	; 0x30
  400500:	b280      	uxth	r0, r0
  400502:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400504:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  400506:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40050a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40050e:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  400510:	f85d 4b04 	ldr.w	r4, [sp], #4
  400514:	4770      	bx	lr
  400516:	bf00      	nop

00400518 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400518:	2901      	cmp	r1, #1
  40051a:	d104      	bne.n	400526 <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  40051c:	6882      	ldr	r2, [r0, #8]
  40051e:	4b06      	ldr	r3, [pc, #24]	; (400538 <supc_switch_sclk_to_32kxtal+0x20>)
  400520:	4313      	orrs	r3, r2
  400522:	6083      	str	r3, [r0, #8]
  400524:	e003      	b.n	40052e <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  400526:	6882      	ldr	r2, [r0, #8]
  400528:	4b04      	ldr	r3, [pc, #16]	; (40053c <supc_switch_sclk_to_32kxtal+0x24>)
  40052a:	4013      	ands	r3, r2
  40052c:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40052e:	6802      	ldr	r2, [r0, #0]
  400530:	4b03      	ldr	r3, [pc, #12]	; (400540 <supc_switch_sclk_to_32kxtal+0x28>)
  400532:	4313      	orrs	r3, r2
  400534:	6003      	str	r3, [r0, #0]
  400536:	4770      	bx	lr
  400538:	a5100000 	.word	0xa5100000
  40053c:	5aefffff 	.word	0x5aefffff
  400540:	a5000008 	.word	0xa5000008

00400544 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400548:	6043      	str	r3, [r0, #4]
  40054a:	4770      	bx	lr

0040054c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40054c:	4b0d      	ldr	r3, [pc, #52]	; (400584 <prvTaskExitError+0x38>)
  40054e:	681b      	ldr	r3, [r3, #0]
  400550:	f1b3 3fff 	cmp.w	r3, #4294967295
  400554:	d00a      	beq.n	40056c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400556:	f04f 0380 	mov.w	r3, #128	; 0x80
  40055a:	b672      	cpsid	i
  40055c:	f383 8811 	msr	BASEPRI, r3
  400560:	f3bf 8f6f 	isb	sy
  400564:	f3bf 8f4f 	dsb	sy
  400568:	b662      	cpsie	i
  40056a:	e7fe      	b.n	40056a <prvTaskExitError+0x1e>
  40056c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400570:	b672      	cpsid	i
  400572:	f383 8811 	msr	BASEPRI, r3
  400576:	f3bf 8f6f 	isb	sy
  40057a:	f3bf 8f4f 	dsb	sy
  40057e:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
  400580:	e7fe      	b.n	400580 <prvTaskExitError+0x34>
  400582:	bf00      	nop
  400584:	2040000c 	.word	0x2040000c

00400588 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400588:	4806      	ldr	r0, [pc, #24]	; (4005a4 <prvPortStartFirstTask+0x1c>)
  40058a:	6800      	ldr	r0, [r0, #0]
  40058c:	6800      	ldr	r0, [r0, #0]
  40058e:	f380 8808 	msr	MSP, r0
  400592:	b662      	cpsie	i
  400594:	b661      	cpsie	f
  400596:	f3bf 8f4f 	dsb	sy
  40059a:	f3bf 8f6f 	isb	sy
  40059e:	df00      	svc	0
  4005a0:	bf00      	nop
  4005a2:	0000      	.short	0x0000
  4005a4:	e000ed08 	.word	0xe000ed08

004005a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4005a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4005b8 <vPortEnableVFP+0x10>
  4005ac:	6801      	ldr	r1, [r0, #0]
  4005ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4005b2:	6001      	str	r1, [r0, #0]
  4005b4:	4770      	bx	lr
  4005b6:	0000      	.short	0x0000
  4005b8:	e000ed88 	.word	0xe000ed88

004005bc <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4005bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4005c0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4005c4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4005c8:	4b05      	ldr	r3, [pc, #20]	; (4005e0 <pxPortInitialiseStack+0x24>)
  4005ca:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4005ce:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4005d2:	f06f 0302 	mvn.w	r3, #2
  4005d6:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4005da:	3844      	subs	r0, #68	; 0x44
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	0040054d 	.word	0x0040054d

004005e4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  4005e4:	4b06      	ldr	r3, [pc, #24]	; (400600 <pxCurrentTCBConst2>)
  4005e6:	6819      	ldr	r1, [r3, #0]
  4005e8:	6808      	ldr	r0, [r1, #0]
  4005ea:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ee:	f380 8809 	msr	PSP, r0
  4005f2:	f3bf 8f6f 	isb	sy
  4005f6:	f04f 0000 	mov.w	r0, #0
  4005fa:	f380 8811 	msr	BASEPRI, r0
  4005fe:	4770      	bx	lr

00400600 <pxCurrentTCBConst2>:
  400600:	2040be70 	.word	0x2040be70
  400604:	4770      	bx	lr
  400606:	bf00      	nop

00400608 <vPortEnterCritical>:
  400608:	f04f 0380 	mov.w	r3, #128	; 0x80
  40060c:	b672      	cpsid	i
  40060e:	f383 8811 	msr	BASEPRI, r3
  400612:	f3bf 8f6f 	isb	sy
  400616:	f3bf 8f4f 	dsb	sy
  40061a:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  40061c:	4a0b      	ldr	r2, [pc, #44]	; (40064c <vPortEnterCritical+0x44>)
  40061e:	6813      	ldr	r3, [r2, #0]
  400620:	3301      	adds	r3, #1
  400622:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400624:	2b01      	cmp	r3, #1
  400626:	d10f      	bne.n	400648 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400628:	4b09      	ldr	r3, [pc, #36]	; (400650 <vPortEnterCritical+0x48>)
  40062a:	681b      	ldr	r3, [r3, #0]
  40062c:	f013 0fff 	tst.w	r3, #255	; 0xff
  400630:	d00a      	beq.n	400648 <vPortEnterCritical+0x40>
  400632:	f04f 0380 	mov.w	r3, #128	; 0x80
  400636:	b672      	cpsid	i
  400638:	f383 8811 	msr	BASEPRI, r3
  40063c:	f3bf 8f6f 	isb	sy
  400640:	f3bf 8f4f 	dsb	sy
  400644:	b662      	cpsie	i
  400646:	e7fe      	b.n	400646 <vPortEnterCritical+0x3e>
  400648:	4770      	bx	lr
  40064a:	bf00      	nop
  40064c:	2040000c 	.word	0x2040000c
  400650:	e000ed04 	.word	0xe000ed04

00400654 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400654:	4b0a      	ldr	r3, [pc, #40]	; (400680 <vPortExitCritical+0x2c>)
  400656:	681b      	ldr	r3, [r3, #0]
  400658:	b953      	cbnz	r3, 400670 <vPortExitCritical+0x1c>
  40065a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40065e:	b672      	cpsid	i
  400660:	f383 8811 	msr	BASEPRI, r3
  400664:	f3bf 8f6f 	isb	sy
  400668:	f3bf 8f4f 	dsb	sy
  40066c:	b662      	cpsie	i
  40066e:	e7fe      	b.n	40066e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400670:	3b01      	subs	r3, #1
  400672:	4a03      	ldr	r2, [pc, #12]	; (400680 <vPortExitCritical+0x2c>)
  400674:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400676:	b90b      	cbnz	r3, 40067c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400678:	f383 8811 	msr	BASEPRI, r3
  40067c:	4770      	bx	lr
  40067e:	bf00      	nop
  400680:	2040000c 	.word	0x2040000c

00400684 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400684:	f3ef 8009 	mrs	r0, PSP
  400688:	f3bf 8f6f 	isb	sy
  40068c:	4b15      	ldr	r3, [pc, #84]	; (4006e4 <pxCurrentTCBConst>)
  40068e:	681a      	ldr	r2, [r3, #0]
  400690:	f01e 0f10 	tst.w	lr, #16
  400694:	bf08      	it	eq
  400696:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40069a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40069e:	6010      	str	r0, [r2, #0]
  4006a0:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4006a4:	f04f 0080 	mov.w	r0, #128	; 0x80
  4006a8:	b672      	cpsid	i
  4006aa:	f380 8811 	msr	BASEPRI, r0
  4006ae:	f3bf 8f4f 	dsb	sy
  4006b2:	f3bf 8f6f 	isb	sy
  4006b6:	b662      	cpsie	i
  4006b8:	f001 f92e 	bl	401918 <vTaskSwitchContext>
  4006bc:	f04f 0000 	mov.w	r0, #0
  4006c0:	f380 8811 	msr	BASEPRI, r0
  4006c4:	bc08      	pop	{r3}
  4006c6:	6819      	ldr	r1, [r3, #0]
  4006c8:	6808      	ldr	r0, [r1, #0]
  4006ca:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006ce:	f01e 0f10 	tst.w	lr, #16
  4006d2:	bf08      	it	eq
  4006d4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4006d8:	f380 8809 	msr	PSP, r0
  4006dc:	f3bf 8f6f 	isb	sy
  4006e0:	4770      	bx	lr
  4006e2:	bf00      	nop

004006e4 <pxCurrentTCBConst>:
  4006e4:	2040be70 	.word	0x2040be70
  4006e8:	4770      	bx	lr
  4006ea:	bf00      	nop

004006ec <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  4006ec:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4006ee:	f3ef 8311 	mrs	r3, BASEPRI
  4006f2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4006f6:	b672      	cpsid	i
  4006f8:	f382 8811 	msr	BASEPRI, r2
  4006fc:	f3bf 8f6f 	isb	sy
  400700:	f3bf 8f4f 	dsb	sy
  400704:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400706:	4b05      	ldr	r3, [pc, #20]	; (40071c <SysTick_Handler+0x30>)
  400708:	4798      	blx	r3
  40070a:	b118      	cbz	r0, 400714 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40070c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400710:	4b03      	ldr	r3, [pc, #12]	; (400720 <SysTick_Handler+0x34>)
  400712:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400714:	2300      	movs	r3, #0
  400716:	f383 8811 	msr	BASEPRI, r3
  40071a:	bd08      	pop	{r3, pc}
  40071c:	004015ad 	.word	0x004015ad
  400720:	e000ed04 	.word	0xe000ed04

00400724 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400724:	4a03      	ldr	r2, [pc, #12]	; (400734 <vPortSetupTimerInterrupt+0x10>)
  400726:	4b04      	ldr	r3, [pc, #16]	; (400738 <vPortSetupTimerInterrupt+0x14>)
  400728:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40072a:	2207      	movs	r2, #7
  40072c:	3b04      	subs	r3, #4
  40072e:	601a      	str	r2, [r3, #0]
  400730:	4770      	bx	lr
  400732:	bf00      	nop
  400734:	000493df 	.word	0x000493df
  400738:	e000e014 	.word	0xe000e014

0040073c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  40073c:	b500      	push	{lr}
  40073e:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400740:	4b25      	ldr	r3, [pc, #148]	; (4007d8 <xPortStartScheduler+0x9c>)
  400742:	781a      	ldrb	r2, [r3, #0]
  400744:	b2d2      	uxtb	r2, r2
  400746:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400748:	22ff      	movs	r2, #255	; 0xff
  40074a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40074c:	781b      	ldrb	r3, [r3, #0]
  40074e:	b2db      	uxtb	r3, r3
  400750:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400754:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400758:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40075c:	4a1f      	ldr	r2, [pc, #124]	; (4007dc <xPortStartScheduler+0xa0>)
  40075e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  400760:	2207      	movs	r2, #7
  400762:	4b1f      	ldr	r3, [pc, #124]	; (4007e0 <xPortStartScheduler+0xa4>)
  400764:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400766:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40076a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40076e:	d010      	beq.n	400792 <xPortStartScheduler+0x56>
  400770:	2206      	movs	r2, #6
  400772:	e000      	b.n	400776 <xPortStartScheduler+0x3a>
  400774:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400776:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40077a:	005b      	lsls	r3, r3, #1
  40077c:	b2db      	uxtb	r3, r3
  40077e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400782:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400786:	1e51      	subs	r1, r2, #1
  400788:	f013 0f80 	tst.w	r3, #128	; 0x80
  40078c:	d1f2      	bne.n	400774 <xPortStartScheduler+0x38>
  40078e:	4b14      	ldr	r3, [pc, #80]	; (4007e0 <xPortStartScheduler+0xa4>)
  400790:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400792:	4a13      	ldr	r2, [pc, #76]	; (4007e0 <xPortStartScheduler+0xa4>)
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  400794:	6813      	ldr	r3, [r2, #0]
  400796:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  400798:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40079c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40079e:	9b01      	ldr	r3, [sp, #4]
  4007a0:	b2db      	uxtb	r3, r3
  4007a2:	4a0d      	ldr	r2, [pc, #52]	; (4007d8 <xPortStartScheduler+0x9c>)
  4007a4:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4007a6:	4b0f      	ldr	r3, [pc, #60]	; (4007e4 <xPortStartScheduler+0xa8>)
  4007a8:	681a      	ldr	r2, [r3, #0]
  4007aa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4007ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4007b0:	681a      	ldr	r2, [r3, #0]
  4007b2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4007b6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4007b8:	4b0b      	ldr	r3, [pc, #44]	; (4007e8 <xPortStartScheduler+0xac>)
  4007ba:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4007bc:	2200      	movs	r2, #0
  4007be:	4b0b      	ldr	r3, [pc, #44]	; (4007ec <xPortStartScheduler+0xb0>)
  4007c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  4007c2:	4b0b      	ldr	r3, [pc, #44]	; (4007f0 <xPortStartScheduler+0xb4>)
  4007c4:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4007c6:	4a0b      	ldr	r2, [pc, #44]	; (4007f4 <xPortStartScheduler+0xb8>)
  4007c8:	6813      	ldr	r3, [r2, #0]
  4007ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4007ce:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4007d0:	4b09      	ldr	r3, [pc, #36]	; (4007f8 <xPortStartScheduler+0xbc>)
  4007d2:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  4007d4:	4b09      	ldr	r3, [pc, #36]	; (4007fc <xPortStartScheduler+0xc0>)
  4007d6:	4798      	blx	r3
  4007d8:	e000e400 	.word	0xe000e400
  4007dc:	20400558 	.word	0x20400558
  4007e0:	2040055c 	.word	0x2040055c
  4007e4:	e000ed20 	.word	0xe000ed20
  4007e8:	00400725 	.word	0x00400725
  4007ec:	2040000c 	.word	0x2040000c
  4007f0:	004005a9 	.word	0x004005a9
  4007f4:	e000ef34 	.word	0xe000ef34
  4007f8:	00400589 	.word	0x00400589
  4007fc:	0040054d 	.word	0x0040054d

00400800 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  400800:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400804:	2b0f      	cmp	r3, #15
  400806:	d911      	bls.n	40082c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400808:	4a12      	ldr	r2, [pc, #72]	; (400854 <vPortValidateInterruptPriority+0x54>)
  40080a:	5c9b      	ldrb	r3, [r3, r2]
  40080c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40080e:	4a12      	ldr	r2, [pc, #72]	; (400858 <vPortValidateInterruptPriority+0x58>)
  400810:	7812      	ldrb	r2, [r2, #0]
  400812:	429a      	cmp	r2, r3
  400814:	d90a      	bls.n	40082c <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400816:	f04f 0380 	mov.w	r3, #128	; 0x80
  40081a:	b672      	cpsid	i
  40081c:	f383 8811 	msr	BASEPRI, r3
  400820:	f3bf 8f6f 	isb	sy
  400824:	f3bf 8f4f 	dsb	sy
  400828:	b662      	cpsie	i
  40082a:	e7fe      	b.n	40082a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40082c:	4b0b      	ldr	r3, [pc, #44]	; (40085c <vPortValidateInterruptPriority+0x5c>)
  40082e:	681b      	ldr	r3, [r3, #0]
  400830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400834:	4a0a      	ldr	r2, [pc, #40]	; (400860 <vPortValidateInterruptPriority+0x60>)
  400836:	6812      	ldr	r2, [r2, #0]
  400838:	4293      	cmp	r3, r2
  40083a:	d90a      	bls.n	400852 <vPortValidateInterruptPriority+0x52>
  40083c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400840:	b672      	cpsid	i
  400842:	f383 8811 	msr	BASEPRI, r3
  400846:	f3bf 8f6f 	isb	sy
  40084a:	f3bf 8f4f 	dsb	sy
  40084e:	b662      	cpsie	i
  400850:	e7fe      	b.n	400850 <vPortValidateInterruptPriority+0x50>
  400852:	4770      	bx	lr
  400854:	e000e3f0 	.word	0xe000e3f0
  400858:	20400558 	.word	0x20400558
  40085c:	e000ed0c 	.word	0xe000ed0c
  400860:	2040055c 	.word	0x2040055c

00400864 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400864:	b538      	push	{r3, r4, r5, lr}
  400866:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400868:	f010 0f07 	tst.w	r0, #7
  40086c:	d002      	beq.n	400874 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40086e:	f020 0407 	bic.w	r4, r0, #7
  400872:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400874:	4b0e      	ldr	r3, [pc, #56]	; (4008b0 <pvPortMalloc+0x4c>)
  400876:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400878:	4b0e      	ldr	r3, [pc, #56]	; (4008b4 <pvPortMalloc+0x50>)
  40087a:	681b      	ldr	r3, [r3, #0]
  40087c:	b923      	cbnz	r3, 400888 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  40087e:	4b0e      	ldr	r3, [pc, #56]	; (4008b8 <pvPortMalloc+0x54>)
  400880:	f023 0307 	bic.w	r3, r3, #7
  400884:	4a0b      	ldr	r2, [pc, #44]	; (4008b4 <pvPortMalloc+0x50>)
  400886:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400888:	4b0c      	ldr	r3, [pc, #48]	; (4008bc <pvPortMalloc+0x58>)
  40088a:	681b      	ldr	r3, [r3, #0]
  40088c:	441c      	add	r4, r3
  40088e:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400892:	4294      	cmp	r4, r2
  400894:	d807      	bhi.n	4008a6 <pvPortMalloc+0x42>
  400896:	42a3      	cmp	r3, r4
  400898:	d205      	bcs.n	4008a6 <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  40089a:	4a06      	ldr	r2, [pc, #24]	; (4008b4 <pvPortMalloc+0x50>)
  40089c:	6815      	ldr	r5, [r2, #0]
  40089e:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4008a0:	4b06      	ldr	r3, [pc, #24]	; (4008bc <pvPortMalloc+0x58>)
  4008a2:	601c      	str	r4, [r3, #0]
  4008a4:	e000      	b.n	4008a8 <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  4008a6:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4008a8:	4b05      	ldr	r3, [pc, #20]	; (4008c0 <pvPortMalloc+0x5c>)
  4008aa:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  4008ac:	4628      	mov	r0, r5
  4008ae:	bd38      	pop	{r3, r4, r5, pc}
  4008b0:	00401591 	.word	0x00401591
  4008b4:	2040bd64 	.word	0x2040bd64
  4008b8:	2040056c 	.word	0x2040056c
  4008bc:	20400560 	.word	0x20400560
  4008c0:	004016e1 	.word	0x004016e1

004008c4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4008c4:	b150      	cbz	r0, 4008dc <vPortFree+0x18>
  4008c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008ca:	b672      	cpsid	i
  4008cc:	f383 8811 	msr	BASEPRI, r3
  4008d0:	f3bf 8f6f 	isb	sy
  4008d4:	f3bf 8f4f 	dsb	sy
  4008d8:	b662      	cpsie	i
  4008da:	e7fe      	b.n	4008da <vPortFree+0x16>
  4008dc:	4770      	bx	lr
  4008de:	bf00      	nop

004008e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008e0:	f100 0308 	add.w	r3, r0, #8
  4008e4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4008e6:	f04f 32ff 	mov.w	r2, #4294967295
  4008ea:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008ec:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008ee:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4008f0:	2300      	movs	r3, #0
  4008f2:	6003      	str	r3, [r0, #0]
  4008f4:	4770      	bx	lr
  4008f6:	bf00      	nop

004008f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4008f8:	2300      	movs	r3, #0
  4008fa:	6103      	str	r3, [r0, #16]
  4008fc:	4770      	bx	lr
  4008fe:	bf00      	nop

00400900 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400900:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400902:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400904:	689a      	ldr	r2, [r3, #8]
  400906:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400908:	689a      	ldr	r2, [r3, #8]
  40090a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40090c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40090e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400910:	6803      	ldr	r3, [r0, #0]
  400912:	3301      	adds	r3, #1
  400914:	6003      	str	r3, [r0, #0]
  400916:	4770      	bx	lr

00400918 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400918:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40091a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40091c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400920:	d101      	bne.n	400926 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  400922:	6902      	ldr	r2, [r0, #16]
  400924:	e007      	b.n	400936 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400926:	f100 0208 	add.w	r2, r0, #8
  40092a:	e000      	b.n	40092e <vListInsert+0x16>
  40092c:	461a      	mov	r2, r3
  40092e:	6853      	ldr	r3, [r2, #4]
  400930:	681c      	ldr	r4, [r3, #0]
  400932:	42a5      	cmp	r5, r4
  400934:	d2fa      	bcs.n	40092c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400936:	6853      	ldr	r3, [r2, #4]
  400938:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40093a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40093c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40093e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400940:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400942:	6803      	ldr	r3, [r0, #0]
  400944:	3301      	adds	r3, #1
  400946:	6003      	str	r3, [r0, #0]
}
  400948:	bc30      	pop	{r4, r5}
  40094a:	4770      	bx	lr

0040094c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40094c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40094e:	6842      	ldr	r2, [r0, #4]
  400950:	6881      	ldr	r1, [r0, #8]
  400952:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400954:	6882      	ldr	r2, [r0, #8]
  400956:	6841      	ldr	r1, [r0, #4]
  400958:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  40095a:	685a      	ldr	r2, [r3, #4]
  40095c:	4282      	cmp	r2, r0
  40095e:	d101      	bne.n	400964 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400960:	6892      	ldr	r2, [r2, #8]
  400962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400964:	2200      	movs	r2, #0
  400966:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400968:	6818      	ldr	r0, [r3, #0]
  40096a:	3801      	subs	r0, #1
  40096c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40096e:	4770      	bx	lr

00400970 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  400970:	b538      	push	{r3, r4, r5, lr}
  400972:	4604      	mov	r4, r0
  400974:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400976:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400978:	b942      	cbnz	r2, 40098c <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40097a:	6803      	ldr	r3, [r0, #0]
  40097c:	2b00      	cmp	r3, #0
  40097e:	d12b      	bne.n	4009d8 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  400980:	6840      	ldr	r0, [r0, #4]
  400982:	4b1b      	ldr	r3, [pc, #108]	; (4009f0 <prvCopyDataToQueue+0x80>)
  400984:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400986:	2300      	movs	r3, #0
  400988:	6063      	str	r3, [r4, #4]
  40098a:	e02c      	b.n	4009e6 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  40098c:	b96d      	cbnz	r5, 4009aa <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40098e:	6880      	ldr	r0, [r0, #8]
  400990:	4b18      	ldr	r3, [pc, #96]	; (4009f4 <prvCopyDataToQueue+0x84>)
  400992:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400994:	68a2      	ldr	r2, [r4, #8]
  400996:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400998:	4413      	add	r3, r2
  40099a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40099c:	6862      	ldr	r2, [r4, #4]
  40099e:	4293      	cmp	r3, r2
  4009a0:	d31c      	bcc.n	4009dc <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4009a2:	6823      	ldr	r3, [r4, #0]
  4009a4:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4009a6:	2000      	movs	r0, #0
  4009a8:	e01d      	b.n	4009e6 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4009aa:	68c0      	ldr	r0, [r0, #12]
  4009ac:	4b11      	ldr	r3, [pc, #68]	; (4009f4 <prvCopyDataToQueue+0x84>)
  4009ae:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4009b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4009b2:	425b      	negs	r3, r3
  4009b4:	68e2      	ldr	r2, [r4, #12]
  4009b6:	441a      	add	r2, r3
  4009b8:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4009ba:	6821      	ldr	r1, [r4, #0]
  4009bc:	428a      	cmp	r2, r1
  4009be:	d202      	bcs.n	4009c6 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4009c0:	6862      	ldr	r2, [r4, #4]
  4009c2:	4413      	add	r3, r2
  4009c4:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  4009c6:	2d02      	cmp	r5, #2
  4009c8:	d10a      	bne.n	4009e0 <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4009ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009cc:	b153      	cbz	r3, 4009e4 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  4009ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009d0:	3b01      	subs	r3, #1
  4009d2:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4009d4:	2000      	movs	r0, #0
  4009d6:	e006      	b.n	4009e6 <prvCopyDataToQueue+0x76>
  4009d8:	2000      	movs	r0, #0
  4009da:	e004      	b.n	4009e6 <prvCopyDataToQueue+0x76>
  4009dc:	2000      	movs	r0, #0
  4009de:	e002      	b.n	4009e6 <prvCopyDataToQueue+0x76>
  4009e0:	2000      	movs	r0, #0
  4009e2:	e000      	b.n	4009e6 <prvCopyDataToQueue+0x76>
  4009e4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4009e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009e8:	3301      	adds	r3, #1
  4009ea:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4009ec:	bd38      	pop	{r3, r4, r5, pc}
  4009ee:	bf00      	nop
  4009f0:	00401ce5 	.word	0x00401ce5
  4009f4:	0040615d 	.word	0x0040615d

004009f8 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4009f8:	b530      	push	{r4, r5, lr}
  4009fa:	b083      	sub	sp, #12
  4009fc:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4009fe:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  400a00:	b954      	cbnz	r4, 400a18 <prvNotifyQueueSetContainer+0x20>
  400a02:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a06:	b672      	cpsid	i
  400a08:	f383 8811 	msr	BASEPRI, r3
  400a0c:	f3bf 8f6f 	isb	sy
  400a10:	f3bf 8f4f 	dsb	sy
  400a14:	b662      	cpsie	i
  400a16:	e7fe      	b.n	400a16 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400a18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400a1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a1c:	429a      	cmp	r2, r3
  400a1e:	d30a      	bcc.n	400a36 <prvNotifyQueueSetContainer+0x3e>
  400a20:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a24:	b672      	cpsid	i
  400a26:	f383 8811 	msr	BASEPRI, r3
  400a2a:	f3bf 8f6f 	isb	sy
  400a2e:	f3bf 8f4f 	dsb	sy
  400a32:	b662      	cpsie	i
  400a34:	e7fe      	b.n	400a34 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400a36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400a38:	4293      	cmp	r3, r2
  400a3a:	d917      	bls.n	400a6c <prvNotifyQueueSetContainer+0x74>
  400a3c:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400a3e:	4620      	mov	r0, r4
  400a40:	a901      	add	r1, sp, #4
  400a42:	4b0c      	ldr	r3, [pc, #48]	; (400a74 <prvNotifyQueueSetContainer+0x7c>)
  400a44:	4798      	blx	r3
  400a46:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400a48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a4e:	d109      	bne.n	400a64 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400a52:	b163      	cbz	r3, 400a6e <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400a54:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a58:	4b07      	ldr	r3, [pc, #28]	; (400a78 <prvNotifyQueueSetContainer+0x80>)
  400a5a:	4798      	blx	r3
  400a5c:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400a5e:	bf18      	it	ne
  400a60:	2501      	movne	r5, #1
  400a62:	e004      	b.n	400a6e <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400a64:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a66:	3301      	adds	r3, #1
  400a68:	64a3      	str	r3, [r4, #72]	; 0x48
  400a6a:	e000      	b.n	400a6e <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400a6c:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400a6e:	4628      	mov	r0, r5
  400a70:	b003      	add	sp, #12
  400a72:	bd30      	pop	{r4, r5, pc}
  400a74:	00400971 	.word	0x00400971
  400a78:	00401ab5 	.word	0x00401ab5

00400a7c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400a7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a7e:	b172      	cbz	r2, 400a9e <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400a80:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400a82:	68c3      	ldr	r3, [r0, #12]
  400a84:	4413      	add	r3, r2
  400a86:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400a88:	6844      	ldr	r4, [r0, #4]
  400a8a:	42a3      	cmp	r3, r4
  400a8c:	d301      	bcc.n	400a92 <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400a8e:	6803      	ldr	r3, [r0, #0]
  400a90:	60c3      	str	r3, [r0, #12]
  400a92:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400a94:	4608      	mov	r0, r1
  400a96:	68d9      	ldr	r1, [r3, #12]
  400a98:	4b01      	ldr	r3, [pc, #4]	; (400aa0 <prvCopyDataFromQueue+0x24>)
  400a9a:	4798      	blx	r3
  400a9c:	bd10      	pop	{r4, pc}
  400a9e:	4770      	bx	lr
  400aa0:	0040615d 	.word	0x0040615d

00400aa4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400aa6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400aa8:	4b20      	ldr	r3, [pc, #128]	; (400b2c <prvUnlockQueue+0x88>)
  400aaa:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400aac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400aae:	2b00      	cmp	r3, #0
  400ab0:	dd18      	ble.n	400ae4 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400ab2:	4d1f      	ldr	r5, [pc, #124]	; (400b30 <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400ab4:	4f1f      	ldr	r7, [pc, #124]	; (400b34 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ab6:	4e20      	ldr	r6, [pc, #128]	; (400b38 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  400ab8:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400aba:	b133      	cbz	r3, 400aca <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400abc:	4620      	mov	r0, r4
  400abe:	2100      	movs	r1, #0
  400ac0:	47a8      	blx	r5
  400ac2:	2801      	cmp	r0, #1
  400ac4:	d108      	bne.n	400ad8 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400ac6:	47b8      	blx	r7
  400ac8:	e006      	b.n	400ad8 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400acc:	b153      	cbz	r3, 400ae4 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ace:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ad2:	47b0      	blx	r6
  400ad4:	b100      	cbz	r0, 400ad8 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  400ad6:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  400ad8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ada:	3b01      	subs	r3, #1
  400adc:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ade:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ae0:	2b00      	cmp	r3, #0
  400ae2:	dce9      	bgt.n	400ab8 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400ae4:	f04f 33ff 	mov.w	r3, #4294967295
  400ae8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400aea:	4b14      	ldr	r3, [pc, #80]	; (400b3c <prvUnlockQueue+0x98>)
  400aec:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400aee:	4b0f      	ldr	r3, [pc, #60]	; (400b2c <prvUnlockQueue+0x88>)
  400af0:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400af2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400af4:	2b00      	cmp	r3, #0
  400af6:	dd13      	ble.n	400b20 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400af8:	6923      	ldr	r3, [r4, #16]
  400afa:	b91b      	cbnz	r3, 400b04 <prvUnlockQueue+0x60>
  400afc:	e010      	b.n	400b20 <prvUnlockQueue+0x7c>
  400afe:	6923      	ldr	r3, [r4, #16]
  400b00:	b923      	cbnz	r3, 400b0c <prvUnlockQueue+0x68>
  400b02:	e00d      	b.n	400b20 <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b04:	f104 0610 	add.w	r6, r4, #16
  400b08:	4d0b      	ldr	r5, [pc, #44]	; (400b38 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  400b0a:	4f0a      	ldr	r7, [pc, #40]	; (400b34 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b0c:	4630      	mov	r0, r6
  400b0e:	47a8      	blx	r5
  400b10:	b100      	cbz	r0, 400b14 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  400b12:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  400b14:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b16:	3b01      	subs	r3, #1
  400b18:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400b1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b1c:	2b00      	cmp	r3, #0
  400b1e:	dcee      	bgt.n	400afe <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400b20:	f04f 33ff 	mov.w	r3, #4294967295
  400b24:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400b26:	4b05      	ldr	r3, [pc, #20]	; (400b3c <prvUnlockQueue+0x98>)
  400b28:	4798      	blx	r3
  400b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b2c:	00400609 	.word	0x00400609
  400b30:	004009f9 	.word	0x004009f9
  400b34:	00401c11 	.word	0x00401c11
  400b38:	00401ab5 	.word	0x00401ab5
  400b3c:	00400655 	.word	0x00400655

00400b40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  400b40:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400b42:	b950      	cbnz	r0, 400b5a <xQueueGenericReset+0x1a>
  400b44:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b48:	b672      	cpsid	i
  400b4a:	f383 8811 	msr	BASEPRI, r3
  400b4e:	f3bf 8f6f 	isb	sy
  400b52:	f3bf 8f4f 	dsb	sy
  400b56:	b662      	cpsie	i
  400b58:	e7fe      	b.n	400b58 <xQueueGenericReset+0x18>
  400b5a:	4604      	mov	r4, r0
  400b5c:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  400b5e:	4b18      	ldr	r3, [pc, #96]	; (400bc0 <xQueueGenericReset+0x80>)
  400b60:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400b62:	6822      	ldr	r2, [r4, #0]
  400b64:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400b66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b68:	fb03 f301 	mul.w	r3, r3, r1
  400b6c:	18d0      	adds	r0, r2, r3
  400b6e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400b70:	2000      	movs	r0, #0
  400b72:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400b74:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400b76:	1a5b      	subs	r3, r3, r1
  400b78:	4413      	add	r3, r2
  400b7a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400b7c:	f04f 33ff 	mov.w	r3, #4294967295
  400b80:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400b82:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400b84:	b985      	cbnz	r5, 400ba8 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b86:	6923      	ldr	r3, [r4, #16]
  400b88:	b1ab      	cbz	r3, 400bb6 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400b8a:	f104 0010 	add.w	r0, r4, #16
  400b8e:	4b0d      	ldr	r3, [pc, #52]	; (400bc4 <xQueueGenericReset+0x84>)
  400b90:	4798      	blx	r3
  400b92:	2801      	cmp	r0, #1
  400b94:	d10f      	bne.n	400bb6 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  400b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400b9a:	4b0b      	ldr	r3, [pc, #44]	; (400bc8 <xQueueGenericReset+0x88>)
  400b9c:	601a      	str	r2, [r3, #0]
  400b9e:	f3bf 8f4f 	dsb	sy
  400ba2:	f3bf 8f6f 	isb	sy
  400ba6:	e006      	b.n	400bb6 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400ba8:	f104 0010 	add.w	r0, r4, #16
  400bac:	4d07      	ldr	r5, [pc, #28]	; (400bcc <xQueueGenericReset+0x8c>)
  400bae:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400bb0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400bb4:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  400bb6:	4b06      	ldr	r3, [pc, #24]	; (400bd0 <xQueueGenericReset+0x90>)
  400bb8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  400bba:	2001      	movs	r0, #1
  400bbc:	bd38      	pop	{r3, r4, r5, pc}
  400bbe:	bf00      	nop
  400bc0:	00400609 	.word	0x00400609
  400bc4:	00401ab5 	.word	0x00401ab5
  400bc8:	e000ed04 	.word	0xe000ed04
  400bcc:	004008e1 	.word	0x004008e1
  400bd0:	00400655 	.word	0x00400655

00400bd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  400bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400bd6:	b950      	cbnz	r0, 400bee <xQueueGenericCreate+0x1a>
  400bd8:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bdc:	b672      	cpsid	i
  400bde:	f383 8811 	msr	BASEPRI, r3
  400be2:	f3bf 8f6f 	isb	sy
  400be6:	f3bf 8f4f 	dsb	sy
  400bea:	b662      	cpsie	i
  400bec:	e7fe      	b.n	400bec <xQueueGenericCreate+0x18>
  400bee:	460d      	mov	r5, r1
  400bf0:	4617      	mov	r7, r2
  400bf2:	4606      	mov	r6, r0

	if( uxItemSize == ( UBaseType_t ) 0 )
  400bf4:	b1c1      	cbz	r1, 400c28 <xQueueGenericCreate+0x54>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  400bf6:	fb01 f000 	mul.w	r0, r1, r0
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400bfa:	3059      	adds	r0, #89	; 0x59
  400bfc:	4b14      	ldr	r3, [pc, #80]	; (400c50 <xQueueGenericCreate+0x7c>)
  400bfe:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400c00:	4604      	mov	r4, r0
  400c02:	b910      	cbnz	r0, 400c0a <xQueueGenericCreate+0x36>
  400c04:	e005      	b.n	400c12 <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400c06:	6024      	str	r4, [r4, #0]
  400c08:	e015      	b.n	400c36 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400c0a:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400c0e:	6003      	str	r3, [r0, #0]
  400c10:	e011      	b.n	400c36 <xQueueGenericCreate+0x62>
  400c12:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c16:	b672      	cpsid	i
  400c18:	f383 8811 	msr	BASEPRI, r3
  400c1c:	f3bf 8f6f 	isb	sy
  400c20:	f3bf 8f4f 	dsb	sy
  400c24:	b662      	cpsie	i
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  400c26:	e7fe      	b.n	400c26 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c28:	2058      	movs	r0, #88	; 0x58
  400c2a:	4b09      	ldr	r3, [pc, #36]	; (400c50 <xQueueGenericCreate+0x7c>)
  400c2c:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400c2e:	4604      	mov	r4, r0
  400c30:	2800      	cmp	r0, #0
  400c32:	d1e8      	bne.n	400c06 <xQueueGenericCreate+0x32>
  400c34:	e7ed      	b.n	400c12 <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  400c36:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400c38:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400c3a:	4620      	mov	r0, r4
  400c3c:	2101      	movs	r1, #1
  400c3e:	4b05      	ldr	r3, [pc, #20]	; (400c54 <xQueueGenericCreate+0x80>)
  400c40:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  400c42:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  400c46:	2300      	movs	r3, #0
  400c48:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  400c4a:	4620      	mov	r0, r4
  400c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c4e:	bf00      	nop
  400c50:	00400865 	.word	0x00400865
  400c54:	00400b41 	.word	0x00400b41

00400c58 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  400c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c5c:	b085      	sub	sp, #20
  400c5e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400c60:	b950      	cbnz	r0, 400c78 <xQueueGenericSend+0x20>
  400c62:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c66:	b672      	cpsid	i
  400c68:	f383 8811 	msr	BASEPRI, r3
  400c6c:	f3bf 8f6f 	isb	sy
  400c70:	f3bf 8f4f 	dsb	sy
  400c74:	b662      	cpsie	i
  400c76:	e7fe      	b.n	400c76 <xQueueGenericSend+0x1e>
  400c78:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c7a:	b961      	cbnz	r1, 400c96 <xQueueGenericSend+0x3e>
  400c7c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c7e:	b152      	cbz	r2, 400c96 <xQueueGenericSend+0x3e>
  400c80:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c84:	b672      	cpsid	i
  400c86:	f383 8811 	msr	BASEPRI, r3
  400c8a:	f3bf 8f6f 	isb	sy
  400c8e:	f3bf 8f4f 	dsb	sy
  400c92:	b662      	cpsie	i
  400c94:	e7fe      	b.n	400c94 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c96:	2b02      	cmp	r3, #2
  400c98:	d10d      	bne.n	400cb6 <xQueueGenericSend+0x5e>
  400c9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400c9c:	2a01      	cmp	r2, #1
  400c9e:	d00a      	beq.n	400cb6 <xQueueGenericSend+0x5e>
  400ca0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ca4:	b672      	cpsid	i
  400ca6:	f383 8811 	msr	BASEPRI, r3
  400caa:	f3bf 8f6f 	isb	sy
  400cae:	f3bf 8f4f 	dsb	sy
  400cb2:	b662      	cpsie	i
  400cb4:	e7fe      	b.n	400cb4 <xQueueGenericSend+0x5c>
  400cb6:	461d      	mov	r5, r3
  400cb8:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400cba:	4b51      	ldr	r3, [pc, #324]	; (400e00 <xQueueGenericSend+0x1a8>)
  400cbc:	4798      	blx	r3
  400cbe:	b960      	cbnz	r0, 400cda <xQueueGenericSend+0x82>
  400cc0:	9b01      	ldr	r3, [sp, #4]
  400cc2:	b163      	cbz	r3, 400cde <xQueueGenericSend+0x86>
  400cc4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cc8:	b672      	cpsid	i
  400cca:	f383 8811 	msr	BASEPRI, r3
  400cce:	f3bf 8f6f 	isb	sy
  400cd2:	f3bf 8f4f 	dsb	sy
  400cd6:	b662      	cpsie	i
  400cd8:	e7fe      	b.n	400cd8 <xQueueGenericSend+0x80>
  400cda:	2700      	movs	r7, #0
  400cdc:	e000      	b.n	400ce0 <xQueueGenericSend+0x88>
  400cde:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400ce0:	4e48      	ldr	r6, [pc, #288]	; (400e04 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400ce2:	f8df 914c 	ldr.w	r9, [pc, #332]	; 400e30 <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  400ce6:	f8df 8128 	ldr.w	r8, [pc, #296]	; 400e10 <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400cea:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400cec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400cee:	2d02      	cmp	r5, #2
  400cf0:	d002      	beq.n	400cf8 <xQueueGenericSend+0xa0>
  400cf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400cf4:	429a      	cmp	r2, r3
  400cf6:	d233      	bcs.n	400d60 <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400cf8:	4620      	mov	r0, r4
  400cfa:	9900      	ldr	r1, [sp, #0]
  400cfc:	462a      	mov	r2, r5
  400cfe:	4b42      	ldr	r3, [pc, #264]	; (400e08 <xQueueGenericSend+0x1b0>)
  400d00:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400d02:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400d04:	b173      	cbz	r3, 400d24 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400d06:	4620      	mov	r0, r4
  400d08:	4629      	mov	r1, r5
  400d0a:	4b40      	ldr	r3, [pc, #256]	; (400e0c <xQueueGenericSend+0x1b4>)
  400d0c:	4798      	blx	r3
  400d0e:	2801      	cmp	r0, #1
  400d10:	d122      	bne.n	400d58 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  400d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d16:	4b3e      	ldr	r3, [pc, #248]	; (400e10 <xQueueGenericSend+0x1b8>)
  400d18:	601a      	str	r2, [r3, #0]
  400d1a:	f3bf 8f4f 	dsb	sy
  400d1e:	f3bf 8f6f 	isb	sy
  400d22:	e019      	b.n	400d58 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d26:	b173      	cbz	r3, 400d46 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400d28:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d2c:	4b39      	ldr	r3, [pc, #228]	; (400e14 <xQueueGenericSend+0x1bc>)
  400d2e:	4798      	blx	r3
  400d30:	2801      	cmp	r0, #1
  400d32:	d111      	bne.n	400d58 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  400d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d38:	4b35      	ldr	r3, [pc, #212]	; (400e10 <xQueueGenericSend+0x1b8>)
  400d3a:	601a      	str	r2, [r3, #0]
  400d3c:	f3bf 8f4f 	dsb	sy
  400d40:	f3bf 8f6f 	isb	sy
  400d44:	e008      	b.n	400d58 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  400d46:	b138      	cbz	r0, 400d58 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  400d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d4c:	4b30      	ldr	r3, [pc, #192]	; (400e10 <xQueueGenericSend+0x1b8>)
  400d4e:	601a      	str	r2, [r3, #0]
  400d50:	f3bf 8f4f 	dsb	sy
  400d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  400d58:	4b2f      	ldr	r3, [pc, #188]	; (400e18 <xQueueGenericSend+0x1c0>)
  400d5a:	4798      	blx	r3
				return pdPASS;
  400d5c:	2001      	movs	r0, #1
  400d5e:	e04b      	b.n	400df8 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  400d60:	9b01      	ldr	r3, [sp, #4]
  400d62:	b91b      	cbnz	r3, 400d6c <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400d64:	4b2c      	ldr	r3, [pc, #176]	; (400e18 <xQueueGenericSend+0x1c0>)
  400d66:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400d68:	2000      	movs	r0, #0
  400d6a:	e045      	b.n	400df8 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  400d6c:	b917      	cbnz	r7, 400d74 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400d6e:	a802      	add	r0, sp, #8
  400d70:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  400d72:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  400d74:	4b28      	ldr	r3, [pc, #160]	; (400e18 <xQueueGenericSend+0x1c0>)
  400d76:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400d78:	4b28      	ldr	r3, [pc, #160]	; (400e1c <xQueueGenericSend+0x1c4>)
  400d7a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d7c:	47b0      	blx	r6
  400d7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d80:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d84:	d101      	bne.n	400d8a <xQueueGenericSend+0x132>
  400d86:	2300      	movs	r3, #0
  400d88:	6463      	str	r3, [r4, #68]	; 0x44
  400d8a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d90:	d101      	bne.n	400d96 <xQueueGenericSend+0x13e>
  400d92:	2300      	movs	r3, #0
  400d94:	64a3      	str	r3, [r4, #72]	; 0x48
  400d96:	4b20      	ldr	r3, [pc, #128]	; (400e18 <xQueueGenericSend+0x1c0>)
  400d98:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d9a:	a802      	add	r0, sp, #8
  400d9c:	a901      	add	r1, sp, #4
  400d9e:	4b20      	ldr	r3, [pc, #128]	; (400e20 <xQueueGenericSend+0x1c8>)
  400da0:	4798      	blx	r3
  400da2:	bb18      	cbnz	r0, 400dec <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400da4:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400da6:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400daa:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400dae:	4b1a      	ldr	r3, [pc, #104]	; (400e18 <xQueueGenericSend+0x1c0>)
  400db0:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400db2:	45d3      	cmp	fp, sl
  400db4:	d114      	bne.n	400de0 <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400db6:	f104 0010 	add.w	r0, r4, #16
  400dba:	9901      	ldr	r1, [sp, #4]
  400dbc:	4b19      	ldr	r3, [pc, #100]	; (400e24 <xQueueGenericSend+0x1cc>)
  400dbe:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400dc0:	4620      	mov	r0, r4
  400dc2:	4b19      	ldr	r3, [pc, #100]	; (400e28 <xQueueGenericSend+0x1d0>)
  400dc4:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400dc6:	4b19      	ldr	r3, [pc, #100]	; (400e2c <xQueueGenericSend+0x1d4>)
  400dc8:	4798      	blx	r3
  400dca:	2800      	cmp	r0, #0
  400dcc:	d18d      	bne.n	400cea <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  400dce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400dd2:	f8c8 3000 	str.w	r3, [r8]
  400dd6:	f3bf 8f4f 	dsb	sy
  400dda:	f3bf 8f6f 	isb	sy
  400dde:	e784      	b.n	400cea <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400de0:	4620      	mov	r0, r4
  400de2:	4b11      	ldr	r3, [pc, #68]	; (400e28 <xQueueGenericSend+0x1d0>)
  400de4:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400de6:	4b11      	ldr	r3, [pc, #68]	; (400e2c <xQueueGenericSend+0x1d4>)
  400de8:	4798      	blx	r3
  400dea:	e77e      	b.n	400cea <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400dec:	4620      	mov	r0, r4
  400dee:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <xQueueGenericSend+0x1d0>)
  400df0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400df2:	4b0e      	ldr	r3, [pc, #56]	; (400e2c <xQueueGenericSend+0x1d4>)
  400df4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400df6:	2000      	movs	r0, #0
		}
	}
}
  400df8:	b005      	add	sp, #20
  400dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400dfe:	bf00      	nop
  400e00:	00401c1d 	.word	0x00401c1d
  400e04:	00400609 	.word	0x00400609
  400e08:	00400971 	.word	0x00400971
  400e0c:	004009f9 	.word	0x004009f9
  400e10:	e000ed04 	.word	0xe000ed04
  400e14:	00401ab5 	.word	0x00401ab5
  400e18:	00400655 	.word	0x00400655
  400e1c:	00401591 	.word	0x00401591
  400e20:	00401b7d 	.word	0x00401b7d
  400e24:	004019b1 	.word	0x004019b1
  400e28:	00400aa5 	.word	0x00400aa5
  400e2c:	004016e1 	.word	0x004016e1
  400e30:	00401b4d 	.word	0x00401b4d

00400e34 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400e34:	b950      	cbnz	r0, 400e4c <xQueueGenericSendFromISR+0x18>
  400e36:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e3a:	b672      	cpsid	i
  400e3c:	f383 8811 	msr	BASEPRI, r3
  400e40:	f3bf 8f6f 	isb	sy
  400e44:	f3bf 8f4f 	dsb	sy
  400e48:	b662      	cpsie	i
  400e4a:	e7fe      	b.n	400e4a <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  400e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e50:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e52:	b961      	cbnz	r1, 400e6e <xQueueGenericSendFromISR+0x3a>
  400e54:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400e56:	b150      	cbz	r0, 400e6e <xQueueGenericSendFromISR+0x3a>
  400e58:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e5c:	b672      	cpsid	i
  400e5e:	f383 8811 	msr	BASEPRI, r3
  400e62:	f3bf 8f6f 	isb	sy
  400e66:	f3bf 8f4f 	dsb	sy
  400e6a:	b662      	cpsie	i
  400e6c:	e7fe      	b.n	400e6c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e6e:	2b02      	cmp	r3, #2
  400e70:	d10d      	bne.n	400e8e <xQueueGenericSendFromISR+0x5a>
  400e72:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400e74:	2801      	cmp	r0, #1
  400e76:	d00a      	beq.n	400e8e <xQueueGenericSendFromISR+0x5a>
  400e78:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e7c:	b672      	cpsid	i
  400e7e:	f383 8811 	msr	BASEPRI, r3
  400e82:	f3bf 8f6f 	isb	sy
  400e86:	f3bf 8f4f 	dsb	sy
  400e8a:	b662      	cpsie	i
  400e8c:	e7fe      	b.n	400e8c <xQueueGenericSendFromISR+0x58>
  400e8e:	461e      	mov	r6, r3
  400e90:	4615      	mov	r5, r2
  400e92:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400e94:	4b21      	ldr	r3, [pc, #132]	; (400f1c <xQueueGenericSendFromISR+0xe8>)
  400e96:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400e98:	f3ef 8711 	mrs	r7, BASEPRI
  400e9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ea0:	b672      	cpsid	i
  400ea2:	f383 8811 	msr	BASEPRI, r3
  400ea6:	f3bf 8f6f 	isb	sy
  400eaa:	f3bf 8f4f 	dsb	sy
  400eae:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400eb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400eb2:	2e02      	cmp	r6, #2
  400eb4:	d002      	beq.n	400ebc <xQueueGenericSendFromISR+0x88>
  400eb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400eb8:	429a      	cmp	r2, r3
  400eba:	d223      	bcs.n	400f04 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400ebc:	4620      	mov	r0, r4
  400ebe:	4641      	mov	r1, r8
  400ec0:	4632      	mov	r2, r6
  400ec2:	4b17      	ldr	r3, [pc, #92]	; (400f20 <xQueueGenericSendFromISR+0xec>)
  400ec4:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400ec6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ecc:	d115      	bne.n	400efa <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400ece:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400ed0:	b143      	cbz	r3, 400ee4 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400ed2:	4620      	mov	r0, r4
  400ed4:	4631      	mov	r1, r6
  400ed6:	4b13      	ldr	r3, [pc, #76]	; (400f24 <xQueueGenericSendFromISR+0xf0>)
  400ed8:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  400eda:	2801      	cmp	r0, #1
  400edc:	d114      	bne.n	400f08 <xQueueGenericSendFromISR+0xd4>
  400ede:	b19d      	cbz	r5, 400f08 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  400ee0:	6028      	str	r0, [r5, #0]
  400ee2:	e016      	b.n	400f12 <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ee6:	b18b      	cbz	r3, 400f0c <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ee8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400eec:	4b0e      	ldr	r3, [pc, #56]	; (400f28 <xQueueGenericSendFromISR+0xf4>)
  400eee:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  400ef0:	b170      	cbz	r0, 400f10 <xQueueGenericSendFromISR+0xdc>
  400ef2:	b16d      	cbz	r5, 400f10 <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  400ef4:	2001      	movs	r0, #1
  400ef6:	6028      	str	r0, [r5, #0]
  400ef8:	e00b      	b.n	400f12 <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400efa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400efc:	3301      	adds	r3, #1
  400efe:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400f00:	2001      	movs	r0, #1
  400f02:	e006      	b.n	400f12 <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400f04:	2000      	movs	r0, #0
  400f06:	e004      	b.n	400f12 <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400f08:	2001      	movs	r0, #1
  400f0a:	e002      	b.n	400f12 <xQueueGenericSendFromISR+0xde>
  400f0c:	2001      	movs	r0, #1
  400f0e:	e000      	b.n	400f12 <xQueueGenericSendFromISR+0xde>
  400f10:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400f12:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  400f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f1a:	bf00      	nop
  400f1c:	00400801 	.word	0x00400801
  400f20:	00400971 	.word	0x00400971
  400f24:	004009f9 	.word	0x004009f9
  400f28:	00401ab5 	.word	0x00401ab5

00400f2c <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  400f2c:	b950      	cbnz	r0, 400f44 <xQueueGiveFromISR+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400f2e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f32:	b672      	cpsid	i
  400f34:	f383 8811 	msr	BASEPRI, r3
  400f38:	f3bf 8f6f 	isb	sy
  400f3c:	f3bf 8f4f 	dsb	sy
  400f40:	b662      	cpsie	i
  400f42:	e7fe      	b.n	400f42 <xQueueGiveFromISR+0x16>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  400f44:	b570      	push	{r4, r5, r6, lr}
  400f46:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  400f48:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400f4a:	b153      	cbz	r3, 400f62 <xQueueGiveFromISR+0x36>
  400f4c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f50:	b672      	cpsid	i
  400f52:	f383 8811 	msr	BASEPRI, r3
  400f56:	f3bf 8f6f 	isb	sy
  400f5a:	f3bf 8f4f 	dsb	sy
  400f5e:	b662      	cpsie	i
  400f60:	e7fe      	b.n	400f60 <xQueueGiveFromISR+0x34>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  400f62:	6803      	ldr	r3, [r0, #0]
  400f64:	b963      	cbnz	r3, 400f80 <xQueueGiveFromISR+0x54>
  400f66:	6843      	ldr	r3, [r0, #4]
  400f68:	b153      	cbz	r3, 400f80 <xQueueGiveFromISR+0x54>
  400f6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f6e:	b672      	cpsid	i
  400f70:	f383 8811 	msr	BASEPRI, r3
  400f74:	f3bf 8f6f 	isb	sy
  400f78:	f3bf 8f4f 	dsb	sy
  400f7c:	b662      	cpsie	i
  400f7e:	e7fe      	b.n	400f7e <xQueueGiveFromISR+0x52>
  400f80:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400f82:	4b1f      	ldr	r3, [pc, #124]	; (401000 <xQueueGiveFromISR+0xd4>)
  400f84:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400f86:	f3ef 8611 	mrs	r6, BASEPRI
  400f8a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f8e:	b672      	cpsid	i
  400f90:	f383 8811 	msr	BASEPRI, r3
  400f94:	f3bf 8f6f 	isb	sy
  400f98:	f3bf 8f4f 	dsb	sy
  400f9c:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400f9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400fa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400fa2:	429a      	cmp	r2, r3
  400fa4:	d221      	bcs.n	400fea <xQueueGiveFromISR+0xbe>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  400fa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400fa8:	3301      	adds	r3, #1
  400faa:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400fac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fae:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fb2:	d115      	bne.n	400fe0 <xQueueGiveFromISR+0xb4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400fb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400fb6:	b143      	cbz	r3, 400fca <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400fb8:	4620      	mov	r0, r4
  400fba:	2100      	movs	r1, #0
  400fbc:	4b11      	ldr	r3, [pc, #68]	; (401004 <xQueueGiveFromISR+0xd8>)
  400fbe:	4798      	blx	r3
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  400fc0:	2801      	cmp	r0, #1
  400fc2:	d114      	bne.n	400fee <xQueueGiveFromISR+0xc2>
  400fc4:	b19d      	cbz	r5, 400fee <xQueueGiveFromISR+0xc2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  400fc6:	6028      	str	r0, [r5, #0]
  400fc8:	e016      	b.n	400ff8 <xQueueGiveFromISR+0xcc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fcc:	b18b      	cbz	r3, 400ff2 <xQueueGiveFromISR+0xc6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fd2:	4b0d      	ldr	r3, [pc, #52]	; (401008 <xQueueGiveFromISR+0xdc>)
  400fd4:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  400fd6:	b170      	cbz	r0, 400ff6 <xQueueGiveFromISR+0xca>
  400fd8:	b16d      	cbz	r5, 400ff6 <xQueueGiveFromISR+0xca>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  400fda:	2001      	movs	r0, #1
  400fdc:	6028      	str	r0, [r5, #0]
  400fde:	e00b      	b.n	400ff8 <xQueueGiveFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400fe0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fe2:	3301      	adds	r3, #1
  400fe4:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400fe6:	2001      	movs	r0, #1
  400fe8:	e006      	b.n	400ff8 <xQueueGiveFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400fea:	2000      	movs	r0, #0
  400fec:	e004      	b.n	400ff8 <xQueueGiveFromISR+0xcc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400fee:	2001      	movs	r0, #1
  400ff0:	e002      	b.n	400ff8 <xQueueGiveFromISR+0xcc>
  400ff2:	2001      	movs	r0, #1
  400ff4:	e000      	b.n	400ff8 <xQueueGiveFromISR+0xcc>
  400ff6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400ff8:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  400ffc:	bd70      	pop	{r4, r5, r6, pc}
  400ffe:	bf00      	nop
  401000:	00400801 	.word	0x00400801
  401004:	004009f9 	.word	0x004009f9
  401008:	00401ab5 	.word	0x00401ab5

0040100c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  40100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401010:	b085      	sub	sp, #20
  401012:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401014:	b950      	cbnz	r0, 40102c <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401016:	f04f 0380 	mov.w	r3, #128	; 0x80
  40101a:	b672      	cpsid	i
  40101c:	f383 8811 	msr	BASEPRI, r3
  401020:	f3bf 8f6f 	isb	sy
  401024:	f3bf 8f4f 	dsb	sy
  401028:	b662      	cpsie	i
  40102a:	e7fe      	b.n	40102a <xQueueGenericReceive+0x1e>
  40102c:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40102e:	b961      	cbnz	r1, 40104a <xQueueGenericReceive+0x3e>
  401030:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401032:	b152      	cbz	r2, 40104a <xQueueGenericReceive+0x3e>
  401034:	f04f 0380 	mov.w	r3, #128	; 0x80
  401038:	b672      	cpsid	i
  40103a:	f383 8811 	msr	BASEPRI, r3
  40103e:	f3bf 8f6f 	isb	sy
  401042:	f3bf 8f4f 	dsb	sy
  401046:	b662      	cpsie	i
  401048:	e7fe      	b.n	401048 <xQueueGenericReceive+0x3c>
  40104a:	4698      	mov	r8, r3
  40104c:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40104e:	4b52      	ldr	r3, [pc, #328]	; (401198 <xQueueGenericReceive+0x18c>)
  401050:	4798      	blx	r3
  401052:	b960      	cbnz	r0, 40106e <xQueueGenericReceive+0x62>
  401054:	9b01      	ldr	r3, [sp, #4]
  401056:	b163      	cbz	r3, 401072 <xQueueGenericReceive+0x66>
  401058:	f04f 0380 	mov.w	r3, #128	; 0x80
  40105c:	b672      	cpsid	i
  40105e:	f383 8811 	msr	BASEPRI, r3
  401062:	f3bf 8f6f 	isb	sy
  401066:	f3bf 8f4f 	dsb	sy
  40106a:	b662      	cpsie	i
  40106c:	e7fe      	b.n	40106c <xQueueGenericReceive+0x60>
  40106e:	2600      	movs	r6, #0
  401070:	e000      	b.n	401074 <xQueueGenericReceive+0x68>
  401072:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401074:	4d49      	ldr	r5, [pc, #292]	; (40119c <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401076:	f8df a154 	ldr.w	sl, [pc, #340]	; 4011cc <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  40107a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4011ac <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40107e:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401080:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401082:	2b00      	cmp	r3, #0
  401084:	d034      	beq.n	4010f0 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401086:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401088:	4620      	mov	r0, r4
  40108a:	4659      	mov	r1, fp
  40108c:	4b44      	ldr	r3, [pc, #272]	; (4011a0 <xQueueGenericReceive+0x194>)
  40108e:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  401090:	f1b8 0f00 	cmp.w	r8, #0
  401094:	d118      	bne.n	4010c8 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  401096:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401098:	3b01      	subs	r3, #1
  40109a:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40109c:	6823      	ldr	r3, [r4, #0]
  40109e:	b913      	cbnz	r3, 4010a6 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  4010a0:	4b40      	ldr	r3, [pc, #256]	; (4011a4 <xQueueGenericReceive+0x198>)
  4010a2:	4798      	blx	r3
  4010a4:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010a6:	6923      	ldr	r3, [r4, #16]
  4010a8:	b1f3      	cbz	r3, 4010e8 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010aa:	f104 0010 	add.w	r0, r4, #16
  4010ae:	4b3e      	ldr	r3, [pc, #248]	; (4011a8 <xQueueGenericReceive+0x19c>)
  4010b0:	4798      	blx	r3
  4010b2:	2801      	cmp	r0, #1
  4010b4:	d118      	bne.n	4010e8 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  4010b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010ba:	4b3c      	ldr	r3, [pc, #240]	; (4011ac <xQueueGenericReceive+0x1a0>)
  4010bc:	601a      	str	r2, [r3, #0]
  4010be:	f3bf 8f4f 	dsb	sy
  4010c2:	f3bf 8f6f 	isb	sy
  4010c6:	e00f      	b.n	4010e8 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4010c8:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4010cc:	b163      	cbz	r3, 4010e8 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4010ce:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010d2:	4b35      	ldr	r3, [pc, #212]	; (4011a8 <xQueueGenericReceive+0x19c>)
  4010d4:	4798      	blx	r3
  4010d6:	b138      	cbz	r0, 4010e8 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  4010d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010dc:	4b33      	ldr	r3, [pc, #204]	; (4011ac <xQueueGenericReceive+0x1a0>)
  4010de:	601a      	str	r2, [r3, #0]
  4010e0:	f3bf 8f4f 	dsb	sy
  4010e4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  4010e8:	4b31      	ldr	r3, [pc, #196]	; (4011b0 <xQueueGenericReceive+0x1a4>)
  4010ea:	4798      	blx	r3
				return pdPASS;
  4010ec:	2001      	movs	r0, #1
  4010ee:	e04f      	b.n	401190 <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4010f0:	9b01      	ldr	r3, [sp, #4]
  4010f2:	b91b      	cbnz	r3, 4010fc <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4010f4:	4b2e      	ldr	r3, [pc, #184]	; (4011b0 <xQueueGenericReceive+0x1a4>)
  4010f6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4010f8:	2000      	movs	r0, #0
  4010fa:	e049      	b.n	401190 <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  4010fc:	b916      	cbnz	r6, 401104 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4010fe:	a802      	add	r0, sp, #8
  401100:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  401102:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401104:	4b2a      	ldr	r3, [pc, #168]	; (4011b0 <xQueueGenericReceive+0x1a4>)
  401106:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401108:	4b2a      	ldr	r3, [pc, #168]	; (4011b4 <xQueueGenericReceive+0x1a8>)
  40110a:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40110c:	47a8      	blx	r5
  40110e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401110:	f1b3 3fff 	cmp.w	r3, #4294967295
  401114:	d101      	bne.n	40111a <xQueueGenericReceive+0x10e>
  401116:	2300      	movs	r3, #0
  401118:	6463      	str	r3, [r4, #68]	; 0x44
  40111a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40111c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401120:	d101      	bne.n	401126 <xQueueGenericReceive+0x11a>
  401122:	2300      	movs	r3, #0
  401124:	64a3      	str	r3, [r4, #72]	; 0x48
  401126:	4b22      	ldr	r3, [pc, #136]	; (4011b0 <xQueueGenericReceive+0x1a4>)
  401128:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40112a:	a802      	add	r0, sp, #8
  40112c:	a901      	add	r1, sp, #4
  40112e:	4b22      	ldr	r3, [pc, #136]	; (4011b8 <xQueueGenericReceive+0x1ac>)
  401130:	4798      	blx	r3
  401132:	bb38      	cbnz	r0, 401184 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401134:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401136:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401138:	4b1d      	ldr	r3, [pc, #116]	; (4011b0 <xQueueGenericReceive+0x1a4>)
  40113a:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40113c:	b9e7      	cbnz	r7, 401178 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40113e:	6823      	ldr	r3, [r4, #0]
  401140:	b92b      	cbnz	r3, 40114e <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  401142:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401144:	6860      	ldr	r0, [r4, #4]
  401146:	4b1d      	ldr	r3, [pc, #116]	; (4011bc <xQueueGenericReceive+0x1b0>)
  401148:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  40114a:	4b19      	ldr	r3, [pc, #100]	; (4011b0 <xQueueGenericReceive+0x1a4>)
  40114c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40114e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401152:	9901      	ldr	r1, [sp, #4]
  401154:	4b1a      	ldr	r3, [pc, #104]	; (4011c0 <xQueueGenericReceive+0x1b4>)
  401156:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401158:	4620      	mov	r0, r4
  40115a:	4b1a      	ldr	r3, [pc, #104]	; (4011c4 <xQueueGenericReceive+0x1b8>)
  40115c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40115e:	4b1a      	ldr	r3, [pc, #104]	; (4011c8 <xQueueGenericReceive+0x1bc>)
  401160:	4798      	blx	r3
  401162:	2800      	cmp	r0, #0
  401164:	d18b      	bne.n	40107e <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  401166:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40116a:	f8c9 3000 	str.w	r3, [r9]
  40116e:	f3bf 8f4f 	dsb	sy
  401172:	f3bf 8f6f 	isb	sy
  401176:	e782      	b.n	40107e <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401178:	4620      	mov	r0, r4
  40117a:	4b12      	ldr	r3, [pc, #72]	; (4011c4 <xQueueGenericReceive+0x1b8>)
  40117c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40117e:	4b12      	ldr	r3, [pc, #72]	; (4011c8 <xQueueGenericReceive+0x1bc>)
  401180:	4798      	blx	r3
  401182:	e77c      	b.n	40107e <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401184:	4620      	mov	r0, r4
  401186:	4b0f      	ldr	r3, [pc, #60]	; (4011c4 <xQueueGenericReceive+0x1b8>)
  401188:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40118a:	4b0f      	ldr	r3, [pc, #60]	; (4011c8 <xQueueGenericReceive+0x1bc>)
  40118c:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40118e:	2000      	movs	r0, #0
		}
	}
}
  401190:	b005      	add	sp, #20
  401192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401196:	bf00      	nop
  401198:	00401c1d 	.word	0x00401c1d
  40119c:	00400609 	.word	0x00400609
  4011a0:	00400a7d 	.word	0x00400a7d
  4011a4:	00401da5 	.word	0x00401da5
  4011a8:	00401ab5 	.word	0x00401ab5
  4011ac:	e000ed04 	.word	0xe000ed04
  4011b0:	00400655 	.word	0x00400655
  4011b4:	00401591 	.word	0x00401591
  4011b8:	00401b7d 	.word	0x00401b7d
  4011bc:	00401c3d 	.word	0x00401c3d
  4011c0:	004019b1 	.word	0x004019b1
  4011c4:	00400aa5 	.word	0x00400aa5
  4011c8:	004016e1 	.word	0x004016e1
  4011cc:	00401b4d 	.word	0x00401b4d

004011d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  4011d0:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4011d2:	4b0b      	ldr	r3, [pc, #44]	; (401200 <vQueueAddToRegistry+0x30>)
  4011d4:	681b      	ldr	r3, [r3, #0]
  4011d6:	b12b      	cbz	r3, 4011e4 <vQueueAddToRegistry+0x14>
  4011d8:	2301      	movs	r3, #1
  4011da:	4c09      	ldr	r4, [pc, #36]	; (401200 <vQueueAddToRegistry+0x30>)
  4011dc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4011e0:	b942      	cbnz	r2, 4011f4 <vQueueAddToRegistry+0x24>
  4011e2:	e000      	b.n	4011e6 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4011e4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4011e6:	4a06      	ldr	r2, [pc, #24]	; (401200 <vQueueAddToRegistry+0x30>)
  4011e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4011ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4011f0:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  4011f2:	e002      	b.n	4011fa <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4011f4:	3301      	adds	r3, #1
  4011f6:	2b08      	cmp	r3, #8
  4011f8:	d1f0      	bne.n	4011dc <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  4011fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011fe:	4770      	bx	lr
  401200:	2040bf30 	.word	0x2040bf30

00401204 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401204:	b570      	push	{r4, r5, r6, lr}
  401206:	4604      	mov	r4, r0
  401208:	460e      	mov	r6, r1
  40120a:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  40120c:	4b0d      	ldr	r3, [pc, #52]	; (401244 <vQueueWaitForMessageRestricted+0x40>)
  40120e:	4798      	blx	r3
  401210:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401212:	f1b3 3fff 	cmp.w	r3, #4294967295
  401216:	d101      	bne.n	40121c <vQueueWaitForMessageRestricted+0x18>
  401218:	2300      	movs	r3, #0
  40121a:	6463      	str	r3, [r4, #68]	; 0x44
  40121c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40121e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401222:	d101      	bne.n	401228 <vQueueWaitForMessageRestricted+0x24>
  401224:	2300      	movs	r3, #0
  401226:	64a3      	str	r3, [r4, #72]	; 0x48
  401228:	4b07      	ldr	r3, [pc, #28]	; (401248 <vQueueWaitForMessageRestricted+0x44>)
  40122a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  40122c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40122e:	b92b      	cbnz	r3, 40123c <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401230:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401234:	4631      	mov	r1, r6
  401236:	462a      	mov	r2, r5
  401238:	4b04      	ldr	r3, [pc, #16]	; (40124c <vQueueWaitForMessageRestricted+0x48>)
  40123a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  40123c:	4620      	mov	r0, r4
  40123e:	4b04      	ldr	r3, [pc, #16]	; (401250 <vQueueWaitForMessageRestricted+0x4c>)
  401240:	4798      	blx	r3
  401242:	bd70      	pop	{r4, r5, r6, pc}
  401244:	00400609 	.word	0x00400609
  401248:	00400655 	.word	0x00400655
  40124c:	00401a35 	.word	0x00401a35
  401250:	00400aa5 	.word	0x00400aa5

00401254 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401254:	4b08      	ldr	r3, [pc, #32]	; (401278 <prvResetNextTaskUnblockTime+0x24>)
  401256:	681b      	ldr	r3, [r3, #0]
  401258:	681b      	ldr	r3, [r3, #0]
  40125a:	b923      	cbnz	r3, 401266 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  40125c:	f04f 32ff 	mov.w	r2, #4294967295
  401260:	4b06      	ldr	r3, [pc, #24]	; (40127c <prvResetNextTaskUnblockTime+0x28>)
  401262:	601a      	str	r2, [r3, #0]
  401264:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401266:	4b04      	ldr	r3, [pc, #16]	; (401278 <prvResetNextTaskUnblockTime+0x24>)
  401268:	681b      	ldr	r3, [r3, #0]
  40126a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  40126c:	68db      	ldr	r3, [r3, #12]
  40126e:	685a      	ldr	r2, [r3, #4]
  401270:	4b02      	ldr	r3, [pc, #8]	; (40127c <prvResetNextTaskUnblockTime+0x28>)
  401272:	601a      	str	r2, [r3, #0]
  401274:	4770      	bx	lr
  401276:	bf00      	nop
  401278:	2040bd6c 	.word	0x2040bd6c
  40127c:	2040be90 	.word	0x2040be90

00401280 <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  401280:	b510      	push	{r4, lr}
  401282:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401284:	4b0e      	ldr	r3, [pc, #56]	; (4012c0 <prvAddCurrentTaskToDelayedList+0x40>)
  401286:	681b      	ldr	r3, [r3, #0]
  401288:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  40128a:	4b0e      	ldr	r3, [pc, #56]	; (4012c4 <prvAddCurrentTaskToDelayedList+0x44>)
  40128c:	681b      	ldr	r3, [r3, #0]
  40128e:	4298      	cmp	r0, r3
  401290:	d207      	bcs.n	4012a2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401292:	4b0d      	ldr	r3, [pc, #52]	; (4012c8 <prvAddCurrentTaskToDelayedList+0x48>)
  401294:	6818      	ldr	r0, [r3, #0]
  401296:	4b0a      	ldr	r3, [pc, #40]	; (4012c0 <prvAddCurrentTaskToDelayedList+0x40>)
  401298:	6819      	ldr	r1, [r3, #0]
  40129a:	3104      	adds	r1, #4
  40129c:	4b0b      	ldr	r3, [pc, #44]	; (4012cc <prvAddCurrentTaskToDelayedList+0x4c>)
  40129e:	4798      	blx	r3
  4012a0:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4012a2:	4b0b      	ldr	r3, [pc, #44]	; (4012d0 <prvAddCurrentTaskToDelayedList+0x50>)
  4012a4:	6818      	ldr	r0, [r3, #0]
  4012a6:	4b06      	ldr	r3, [pc, #24]	; (4012c0 <prvAddCurrentTaskToDelayedList+0x40>)
  4012a8:	6819      	ldr	r1, [r3, #0]
  4012aa:	3104      	adds	r1, #4
  4012ac:	4b07      	ldr	r3, [pc, #28]	; (4012cc <prvAddCurrentTaskToDelayedList+0x4c>)
  4012ae:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4012b0:	4b08      	ldr	r3, [pc, #32]	; (4012d4 <prvAddCurrentTaskToDelayedList+0x54>)
  4012b2:	681b      	ldr	r3, [r3, #0]
  4012b4:	429c      	cmp	r4, r3
  4012b6:	d201      	bcs.n	4012bc <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4012b8:	4b06      	ldr	r3, [pc, #24]	; (4012d4 <prvAddCurrentTaskToDelayedList+0x54>)
  4012ba:	601c      	str	r4, [r3, #0]
  4012bc:	bd10      	pop	{r4, pc}
  4012be:	bf00      	nop
  4012c0:	2040be70 	.word	0x2040be70
  4012c4:	2040be8c 	.word	0x2040be8c
  4012c8:	2040bd8c 	.word	0x2040bd8c
  4012cc:	00400919 	.word	0x00400919
  4012d0:	2040bd6c 	.word	0x2040bd6c
  4012d4:	2040be90 	.word	0x2040be90

004012d8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  4012d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012dc:	b083      	sub	sp, #12
  4012de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4012e0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4012e4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  4012e6:	b950      	cbnz	r0, 4012fe <xTaskGenericCreate+0x26>
  4012e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012ec:	b672      	cpsid	i
  4012ee:	f383 8811 	msr	BASEPRI, r3
  4012f2:	f3bf 8f6f 	isb	sy
  4012f6:	f3bf 8f4f 	dsb	sy
  4012fa:	b662      	cpsie	i
  4012fc:	e7fe      	b.n	4012fc <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4012fe:	2f09      	cmp	r7, #9
  401300:	d90a      	bls.n	401318 <xTaskGenericCreate+0x40>
  401302:	f04f 0380 	mov.w	r3, #128	; 0x80
  401306:	b672      	cpsid	i
  401308:	f383 8811 	msr	BASEPRI, r3
  40130c:	f3bf 8f6f 	isb	sy
  401310:	f3bf 8f4f 	dsb	sy
  401314:	b662      	cpsie	i
  401316:	e7fe      	b.n	401316 <xTaskGenericCreate+0x3e>
  401318:	9001      	str	r0, [sp, #4]
  40131a:	9300      	str	r3, [sp, #0]
  40131c:	4690      	mov	r8, r2
  40131e:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401320:	b935      	cbnz	r5, 401330 <xTaskGenericCreate+0x58>
  401322:	0090      	lsls	r0, r2, #2
  401324:	4b5f      	ldr	r3, [pc, #380]	; (4014a4 <xTaskGenericCreate+0x1cc>)
  401326:	4798      	blx	r3

		if( pxStack != NULL )
  401328:	4605      	mov	r5, r0
  40132a:	2800      	cmp	r0, #0
  40132c:	f000 80b4 	beq.w	401498 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401330:	2058      	movs	r0, #88	; 0x58
  401332:	4b5c      	ldr	r3, [pc, #368]	; (4014a4 <xTaskGenericCreate+0x1cc>)
  401334:	4798      	blx	r3

			if( pxNewTCB != NULL )
  401336:	4604      	mov	r4, r0
  401338:	b1a0      	cbz	r0, 401364 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  40133a:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  40133c:	4628      	mov	r0, r5
  40133e:	21a5      	movs	r1, #165	; 0xa5
  401340:	ea4f 0288 	mov.w	r2, r8, lsl #2
  401344:	4b58      	ldr	r3, [pc, #352]	; (4014a8 <xTaskGenericCreate+0x1d0>)
  401346:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401348:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  40134c:	4445      	add	r5, r8
  40134e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401350:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401354:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401358:	7833      	ldrb	r3, [r6, #0]
  40135a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40135e:	7833      	ldrb	r3, [r6, #0]
  401360:	b923      	cbnz	r3, 40136c <xTaskGenericCreate+0x94>
  401362:	e00f      	b.n	401384 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  401364:	4628      	mov	r0, r5
  401366:	4b51      	ldr	r3, [pc, #324]	; (4014ac <xTaskGenericCreate+0x1d4>)
  401368:	4798      	blx	r3
  40136a:	e095      	b.n	401498 <xTaskGenericCreate+0x1c0>
  40136c:	4633      	mov	r3, r6
  40136e:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401372:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401374:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401378:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40137c:	7819      	ldrb	r1, [r3, #0]
  40137e:	b109      	cbz	r1, 401384 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401380:	42b3      	cmp	r3, r6
  401382:	d1f7      	bne.n	401374 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401384:	f04f 0800 	mov.w	r8, #0
  401388:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  40138c:	463e      	mov	r6, r7
  40138e:	2f09      	cmp	r7, #9
  401390:	bf28      	it	cs
  401392:	2609      	movcs	r6, #9
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  401394:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401396:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401398:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  40139c:	f104 0904 	add.w	r9, r4, #4
  4013a0:	4648      	mov	r0, r9
  4013a2:	f8df b154 	ldr.w	fp, [pc, #340]	; 4014f8 <xTaskGenericCreate+0x220>
  4013a6:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4013a8:	f104 0018 	add.w	r0, r4, #24
  4013ac:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4013ae:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4013b0:	f1c6 060a 	rsb	r6, r6, #10
  4013b4:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4013b6:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  4013b8:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4013bc:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4013c0:	4628      	mov	r0, r5
  4013c2:	9901      	ldr	r1, [sp, #4]
  4013c4:	9a00      	ldr	r2, [sp, #0]
  4013c6:	4b3a      	ldr	r3, [pc, #232]	; (4014b0 <xTaskGenericCreate+0x1d8>)
  4013c8:	4798      	blx	r3
  4013ca:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  4013cc:	f1ba 0f00 	cmp.w	sl, #0
  4013d0:	d001      	beq.n	4013d6 <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4013d2:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  4013d6:	4b37      	ldr	r3, [pc, #220]	; (4014b4 <xTaskGenericCreate+0x1dc>)
  4013d8:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4013da:	4a37      	ldr	r2, [pc, #220]	; (4014b8 <xTaskGenericCreate+0x1e0>)
  4013dc:	6813      	ldr	r3, [r2, #0]
  4013de:	3301      	adds	r3, #1
  4013e0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4013e2:	4b36      	ldr	r3, [pc, #216]	; (4014bc <xTaskGenericCreate+0x1e4>)
  4013e4:	681b      	ldr	r3, [r3, #0]
  4013e6:	bb0b      	cbnz	r3, 40142c <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4013e8:	4b34      	ldr	r3, [pc, #208]	; (4014bc <xTaskGenericCreate+0x1e4>)
  4013ea:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4013ec:	6813      	ldr	r3, [r2, #0]
  4013ee:	2b01      	cmp	r3, #1
  4013f0:	d126      	bne.n	401440 <xTaskGenericCreate+0x168>
  4013f2:	4d33      	ldr	r5, [pc, #204]	; (4014c0 <xTaskGenericCreate+0x1e8>)
  4013f4:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4013f8:	4e32      	ldr	r6, [pc, #200]	; (4014c4 <xTaskGenericCreate+0x1ec>)
  4013fa:	4628      	mov	r0, r5
  4013fc:	47b0      	blx	r6
  4013fe:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  401400:	4545      	cmp	r5, r8
  401402:	d1fa      	bne.n	4013fa <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401404:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4014fc <xTaskGenericCreate+0x224>
  401408:	4640      	mov	r0, r8
  40140a:	4d2e      	ldr	r5, [pc, #184]	; (4014c4 <xTaskGenericCreate+0x1ec>)
  40140c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40140e:	4e2e      	ldr	r6, [pc, #184]	; (4014c8 <xTaskGenericCreate+0x1f0>)
  401410:	4630      	mov	r0, r6
  401412:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401414:	482d      	ldr	r0, [pc, #180]	; (4014cc <xTaskGenericCreate+0x1f4>)
  401416:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  401418:	482d      	ldr	r0, [pc, #180]	; (4014d0 <xTaskGenericCreate+0x1f8>)
  40141a:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  40141c:	482d      	ldr	r0, [pc, #180]	; (4014d4 <xTaskGenericCreate+0x1fc>)
  40141e:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  401420:	4b2d      	ldr	r3, [pc, #180]	; (4014d8 <xTaskGenericCreate+0x200>)
  401422:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401426:	4b2d      	ldr	r3, [pc, #180]	; (4014dc <xTaskGenericCreate+0x204>)
  401428:	601e      	str	r6, [r3, #0]
  40142a:	e009      	b.n	401440 <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  40142c:	4b2c      	ldr	r3, [pc, #176]	; (4014e0 <xTaskGenericCreate+0x208>)
  40142e:	681b      	ldr	r3, [r3, #0]
  401430:	b933      	cbnz	r3, 401440 <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401432:	4b22      	ldr	r3, [pc, #136]	; (4014bc <xTaskGenericCreate+0x1e4>)
  401434:	681b      	ldr	r3, [r3, #0]
  401436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401438:	429f      	cmp	r7, r3
  40143a:	d301      	bcc.n	401440 <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  40143c:	4b1f      	ldr	r3, [pc, #124]	; (4014bc <xTaskGenericCreate+0x1e4>)
  40143e:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  401440:	4a28      	ldr	r2, [pc, #160]	; (4014e4 <xTaskGenericCreate+0x20c>)
  401442:	6813      	ldr	r3, [r2, #0]
  401444:	3301      	adds	r3, #1
  401446:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401448:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  40144a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40144c:	4926      	ldr	r1, [pc, #152]	; (4014e8 <xTaskGenericCreate+0x210>)
  40144e:	680b      	ldr	r3, [r1, #0]
  401450:	2201      	movs	r2, #1
  401452:	4082      	lsls	r2, r0
  401454:	4313      	orrs	r3, r2
  401456:	600b      	str	r3, [r1, #0]
  401458:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40145c:	4b18      	ldr	r3, [pc, #96]	; (4014c0 <xTaskGenericCreate+0x1e8>)
  40145e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401462:	4649      	mov	r1, r9
  401464:	4b21      	ldr	r3, [pc, #132]	; (4014ec <xTaskGenericCreate+0x214>)
  401466:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401468:	4b21      	ldr	r3, [pc, #132]	; (4014f0 <xTaskGenericCreate+0x218>)
  40146a:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  40146c:	4b1c      	ldr	r3, [pc, #112]	; (4014e0 <xTaskGenericCreate+0x208>)
  40146e:	681b      	ldr	r3, [r3, #0]
  401470:	b173      	cbz	r3, 401490 <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  401472:	4b12      	ldr	r3, [pc, #72]	; (4014bc <xTaskGenericCreate+0x1e4>)
  401474:	681b      	ldr	r3, [r3, #0]
  401476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401478:	429f      	cmp	r7, r3
  40147a:	d90b      	bls.n	401494 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  40147c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401480:	4b1c      	ldr	r3, [pc, #112]	; (4014f4 <xTaskGenericCreate+0x21c>)
  401482:	601a      	str	r2, [r3, #0]
  401484:	f3bf 8f4f 	dsb	sy
  401488:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  40148c:	2001      	movs	r0, #1
  40148e:	e005      	b.n	40149c <xTaskGenericCreate+0x1c4>
  401490:	2001      	movs	r0, #1
  401492:	e003      	b.n	40149c <xTaskGenericCreate+0x1c4>
  401494:	2001      	movs	r0, #1
  401496:	e001      	b.n	40149c <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401498:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  40149c:	b003      	add	sp, #12
  40149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014a2:	bf00      	nop
  4014a4:	00400865 	.word	0x00400865
  4014a8:	00406291 	.word	0x00406291
  4014ac:	004008c5 	.word	0x004008c5
  4014b0:	004005bd 	.word	0x004005bd
  4014b4:	00400609 	.word	0x00400609
  4014b8:	2040be98 	.word	0x2040be98
  4014bc:	2040be70 	.word	0x2040be70
  4014c0:	2040bd94 	.word	0x2040bd94
  4014c4:	004008e1 	.word	0x004008e1
  4014c8:	2040be9c 	.word	0x2040be9c
  4014cc:	2040be74 	.word	0x2040be74
  4014d0:	2040be5c 	.word	0x2040be5c
  4014d4:	2040beb0 	.word	0x2040beb0
  4014d8:	2040bd6c 	.word	0x2040bd6c
  4014dc:	2040bd8c 	.word	0x2040bd8c
  4014e0:	2040bd70 	.word	0x2040bd70
  4014e4:	2040be94 	.word	0x2040be94
  4014e8:	2040bec4 	.word	0x2040bec4
  4014ec:	00400901 	.word	0x00400901
  4014f0:	00400655 	.word	0x00400655
  4014f4:	e000ed04 	.word	0xe000ed04
  4014f8:	004008f9 	.word	0x004008f9
  4014fc:	2040bd78 	.word	0x2040bd78

00401500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  401500:	b510      	push	{r4, lr}
  401502:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401504:	2300      	movs	r3, #0
  401506:	9300      	str	r3, [sp, #0]
  401508:	9301      	str	r3, [sp, #4]
  40150a:	9302      	str	r3, [sp, #8]
  40150c:	9303      	str	r3, [sp, #12]
  40150e:	4818      	ldr	r0, [pc, #96]	; (401570 <vTaskStartScheduler+0x70>)
  401510:	4918      	ldr	r1, [pc, #96]	; (401574 <vTaskStartScheduler+0x74>)
  401512:	2282      	movs	r2, #130	; 0x82
  401514:	4c18      	ldr	r4, [pc, #96]	; (401578 <vTaskStartScheduler+0x78>)
  401516:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401518:	2801      	cmp	r0, #1
  40151a:	d11a      	bne.n	401552 <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  40151c:	4b17      	ldr	r3, [pc, #92]	; (40157c <vTaskStartScheduler+0x7c>)
  40151e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  401520:	2801      	cmp	r0, #1
  401522:	d116      	bne.n	401552 <vTaskStartScheduler+0x52>
  401524:	f04f 0380 	mov.w	r3, #128	; 0x80
  401528:	b672      	cpsid	i
  40152a:	f383 8811 	msr	BASEPRI, r3
  40152e:	f3bf 8f6f 	isb	sy
  401532:	f3bf 8f4f 	dsb	sy
  401536:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401538:	f04f 32ff 	mov.w	r2, #4294967295
  40153c:	4b10      	ldr	r3, [pc, #64]	; (401580 <vTaskStartScheduler+0x80>)
  40153e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401540:	2201      	movs	r2, #1
  401542:	4b10      	ldr	r3, [pc, #64]	; (401584 <vTaskStartScheduler+0x84>)
  401544:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401546:	2200      	movs	r2, #0
  401548:	4b0f      	ldr	r3, [pc, #60]	; (401588 <vTaskStartScheduler+0x88>)
  40154a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40154c:	4b0f      	ldr	r3, [pc, #60]	; (40158c <vTaskStartScheduler+0x8c>)
  40154e:	4798      	blx	r3
  401550:	e00b      	b.n	40156a <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  401552:	b950      	cbnz	r0, 40156a <vTaskStartScheduler+0x6a>
  401554:	f04f 0380 	mov.w	r3, #128	; 0x80
  401558:	b672      	cpsid	i
  40155a:	f383 8811 	msr	BASEPRI, r3
  40155e:	f3bf 8f6f 	isb	sy
  401562:	f3bf 8f4f 	dsb	sy
  401566:	b662      	cpsie	i
  401568:	e7fe      	b.n	401568 <vTaskStartScheduler+0x68>
	}
}
  40156a:	b004      	add	sp, #16
  40156c:	bd10      	pop	{r4, pc}
  40156e:	bf00      	nop
  401570:	00401889 	.word	0x00401889
  401574:	00406480 	.word	0x00406480
  401578:	004012d9 	.word	0x004012d9
  40157c:	00401e8d 	.word	0x00401e8d
  401580:	2040be90 	.word	0x2040be90
  401584:	2040bd70 	.word	0x2040bd70
  401588:	2040be8c 	.word	0x2040be8c
  40158c:	0040073d 	.word	0x0040073d

00401590 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  401590:	4a02      	ldr	r2, [pc, #8]	; (40159c <vTaskSuspendAll+0xc>)
  401592:	6813      	ldr	r3, [r2, #0]
  401594:	3301      	adds	r3, #1
  401596:	6013      	str	r3, [r2, #0]
  401598:	4770      	bx	lr
  40159a:	bf00      	nop
  40159c:	2040be88 	.word	0x2040be88

004015a0 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  4015a0:	4b01      	ldr	r3, [pc, #4]	; (4015a8 <xTaskGetTickCount+0x8>)
  4015a2:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  4015a4:	4770      	bx	lr
  4015a6:	bf00      	nop
  4015a8:	2040be8c 	.word	0x2040be8c

004015ac <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  4015ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4015b0:	4b3d      	ldr	r3, [pc, #244]	; (4016a8 <xTaskIncrementTick+0xfc>)
  4015b2:	681b      	ldr	r3, [r3, #0]
  4015b4:	2b00      	cmp	r3, #0
  4015b6:	d16a      	bne.n	40168e <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  4015b8:	4b3c      	ldr	r3, [pc, #240]	; (4016ac <xTaskIncrementTick+0x100>)
  4015ba:	681a      	ldr	r2, [r3, #0]
  4015bc:	3201      	adds	r2, #1
  4015be:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  4015c0:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  4015c2:	b9d6      	cbnz	r6, 4015fa <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  4015c4:	4b3a      	ldr	r3, [pc, #232]	; (4016b0 <xTaskIncrementTick+0x104>)
  4015c6:	681b      	ldr	r3, [r3, #0]
  4015c8:	681b      	ldr	r3, [r3, #0]
  4015ca:	b153      	cbz	r3, 4015e2 <xTaskIncrementTick+0x36>
  4015cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015d0:	b672      	cpsid	i
  4015d2:	f383 8811 	msr	BASEPRI, r3
  4015d6:	f3bf 8f6f 	isb	sy
  4015da:	f3bf 8f4f 	dsb	sy
  4015de:	b662      	cpsie	i
  4015e0:	e7fe      	b.n	4015e0 <xTaskIncrementTick+0x34>
  4015e2:	4a33      	ldr	r2, [pc, #204]	; (4016b0 <xTaskIncrementTick+0x104>)
  4015e4:	6811      	ldr	r1, [r2, #0]
  4015e6:	4b33      	ldr	r3, [pc, #204]	; (4016b4 <xTaskIncrementTick+0x108>)
  4015e8:	6818      	ldr	r0, [r3, #0]
  4015ea:	6010      	str	r0, [r2, #0]
  4015ec:	6019      	str	r1, [r3, #0]
  4015ee:	4a32      	ldr	r2, [pc, #200]	; (4016b8 <xTaskIncrementTick+0x10c>)
  4015f0:	6813      	ldr	r3, [r2, #0]
  4015f2:	3301      	adds	r3, #1
  4015f4:	6013      	str	r3, [r2, #0]
  4015f6:	4b31      	ldr	r3, [pc, #196]	; (4016bc <xTaskIncrementTick+0x110>)
  4015f8:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  4015fa:	4b31      	ldr	r3, [pc, #196]	; (4016c0 <xTaskIncrementTick+0x114>)
  4015fc:	681b      	ldr	r3, [r3, #0]
  4015fe:	429e      	cmp	r6, r3
  401600:	d201      	bcs.n	401606 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401602:	2400      	movs	r4, #0
  401604:	e037      	b.n	401676 <xTaskIncrementTick+0xca>
  401606:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401608:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4016b0 <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40160c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4016dc <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401610:	4f2c      	ldr	r7, [pc, #176]	; (4016c4 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401612:	f8d9 3000 	ldr.w	r3, [r9]
  401616:	681b      	ldr	r3, [r3, #0]
  401618:	b923      	cbnz	r3, 401624 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  40161a:	f04f 32ff 	mov.w	r2, #4294967295
  40161e:	4b28      	ldr	r3, [pc, #160]	; (4016c0 <xTaskIncrementTick+0x114>)
  401620:	601a      	str	r2, [r3, #0]
						break;
  401622:	e028      	b.n	401676 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401624:	f8d9 3000 	ldr.w	r3, [r9]
  401628:	68db      	ldr	r3, [r3, #12]
  40162a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40162c:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  40162e:	429e      	cmp	r6, r3
  401630:	d202      	bcs.n	401638 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  401632:	4a23      	ldr	r2, [pc, #140]	; (4016c0 <xTaskIncrementTick+0x114>)
  401634:	6013      	str	r3, [r2, #0]
							break;
  401636:	e01e      	b.n	401676 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401638:	f105 0a04 	add.w	sl, r5, #4
  40163c:	4650      	mov	r0, sl
  40163e:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401640:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401642:	b113      	cbz	r3, 40164a <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401644:	f105 0018 	add.w	r0, r5, #24
  401648:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  40164a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  40164c:	683b      	ldr	r3, [r7, #0]
  40164e:	2201      	movs	r2, #1
  401650:	4082      	lsls	r2, r0
  401652:	4313      	orrs	r3, r2
  401654:	603b      	str	r3, [r7, #0]
  401656:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40165a:	4b1b      	ldr	r3, [pc, #108]	; (4016c8 <xTaskIncrementTick+0x11c>)
  40165c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401660:	4651      	mov	r1, sl
  401662:	4b1a      	ldr	r3, [pc, #104]	; (4016cc <xTaskIncrementTick+0x120>)
  401664:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401666:	4b1a      	ldr	r3, [pc, #104]	; (4016d0 <xTaskIncrementTick+0x124>)
  401668:	681b      	ldr	r3, [r3, #0]
  40166a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  40166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  40166e:	429a      	cmp	r2, r3
  401670:	bf28      	it	cs
  401672:	2401      	movcs	r4, #1
  401674:	e7cd      	b.n	401612 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401676:	4b16      	ldr	r3, [pc, #88]	; (4016d0 <xTaskIncrementTick+0x124>)
  401678:	681b      	ldr	r3, [r3, #0]
  40167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40167c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401680:	4a11      	ldr	r2, [pc, #68]	; (4016c8 <xTaskIncrementTick+0x11c>)
  401682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401686:	2b02      	cmp	r3, #2
  401688:	bf28      	it	cs
  40168a:	2401      	movcs	r4, #1
  40168c:	e004      	b.n	401698 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  40168e:	4a11      	ldr	r2, [pc, #68]	; (4016d4 <xTaskIncrementTick+0x128>)
  401690:	6813      	ldr	r3, [r2, #0]
  401692:	3301      	adds	r3, #1
  401694:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401696:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401698:	4b0f      	ldr	r3, [pc, #60]	; (4016d8 <xTaskIncrementTick+0x12c>)
  40169a:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  40169c:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  40169e:	bf0c      	ite	eq
  4016a0:	4620      	moveq	r0, r4
  4016a2:	2001      	movne	r0, #1
  4016a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4016a8:	2040be88 	.word	0x2040be88
  4016ac:	2040be8c 	.word	0x2040be8c
  4016b0:	2040bd6c 	.word	0x2040bd6c
  4016b4:	2040bd8c 	.word	0x2040bd8c
  4016b8:	2040bd68 	.word	0x2040bd68
  4016bc:	00401255 	.word	0x00401255
  4016c0:	2040be90 	.word	0x2040be90
  4016c4:	2040bec4 	.word	0x2040bec4
  4016c8:	2040bd94 	.word	0x2040bd94
  4016cc:	00400901 	.word	0x00400901
  4016d0:	2040be70 	.word	0x2040be70
  4016d4:	2040bd90 	.word	0x2040bd90
  4016d8:	2040bec8 	.word	0x2040bec8
  4016dc:	0040094d 	.word	0x0040094d

004016e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  4016e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4016e4:	4b36      	ldr	r3, [pc, #216]	; (4017c0 <xTaskResumeAll+0xe0>)
  4016e6:	681b      	ldr	r3, [r3, #0]
  4016e8:	b953      	cbnz	r3, 401700 <xTaskResumeAll+0x20>
  4016ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ee:	b672      	cpsid	i
  4016f0:	f383 8811 	msr	BASEPRI, r3
  4016f4:	f3bf 8f6f 	isb	sy
  4016f8:	f3bf 8f4f 	dsb	sy
  4016fc:	b662      	cpsie	i
  4016fe:	e7fe      	b.n	4016fe <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  401700:	4b30      	ldr	r3, [pc, #192]	; (4017c4 <xTaskResumeAll+0xe4>)
  401702:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401704:	4b2e      	ldr	r3, [pc, #184]	; (4017c0 <xTaskResumeAll+0xe0>)
  401706:	681a      	ldr	r2, [r3, #0]
  401708:	3a01      	subs	r2, #1
  40170a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40170c:	681b      	ldr	r3, [r3, #0]
  40170e:	2b00      	cmp	r3, #0
  401710:	d14d      	bne.n	4017ae <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401712:	4b2d      	ldr	r3, [pc, #180]	; (4017c8 <xTaskResumeAll+0xe8>)
  401714:	681b      	ldr	r3, [r3, #0]
  401716:	bb0b      	cbnz	r3, 40175c <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401718:	2400      	movs	r4, #0
  40171a:	e04b      	b.n	4017b4 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40171c:	68fb      	ldr	r3, [r7, #12]
  40171e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401720:	f104 0018 	add.w	r0, r4, #24
  401724:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401726:	f104 0804 	add.w	r8, r4, #4
  40172a:	4640      	mov	r0, r8
  40172c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40172e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401730:	682b      	ldr	r3, [r5, #0]
  401732:	2201      	movs	r2, #1
  401734:	4082      	lsls	r2, r0
  401736:	4313      	orrs	r3, r2
  401738:	602b      	str	r3, [r5, #0]
  40173a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40173e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401742:	4641      	mov	r1, r8
  401744:	4b21      	ldr	r3, [pc, #132]	; (4017cc <xTaskResumeAll+0xec>)
  401746:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401748:	4b21      	ldr	r3, [pc, #132]	; (4017d0 <xTaskResumeAll+0xf0>)
  40174a:	681b      	ldr	r3, [r3, #0]
  40174c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401750:	429a      	cmp	r2, r3
  401752:	d308      	bcc.n	401766 <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401754:	2201      	movs	r2, #1
  401756:	4b1f      	ldr	r3, [pc, #124]	; (4017d4 <xTaskResumeAll+0xf4>)
  401758:	601a      	str	r2, [r3, #0]
  40175a:	e004      	b.n	401766 <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  40175c:	4f1e      	ldr	r7, [pc, #120]	; (4017d8 <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40175e:	4e1f      	ldr	r6, [pc, #124]	; (4017dc <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  401760:	4d1f      	ldr	r5, [pc, #124]	; (4017e0 <xTaskResumeAll+0x100>)
  401762:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4017f4 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401766:	683b      	ldr	r3, [r7, #0]
  401768:	2b00      	cmp	r3, #0
  40176a:	d1d7      	bne.n	40171c <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40176c:	4b1d      	ldr	r3, [pc, #116]	; (4017e4 <xTaskResumeAll+0x104>)
  40176e:	681b      	ldr	r3, [r3, #0]
  401770:	b17b      	cbz	r3, 401792 <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401772:	4b1c      	ldr	r3, [pc, #112]	; (4017e4 <xTaskResumeAll+0x104>)
  401774:	681b      	ldr	r3, [r3, #0]
  401776:	b163      	cbz	r3, 401792 <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401778:	4e1b      	ldr	r6, [pc, #108]	; (4017e8 <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  40177a:	4d16      	ldr	r5, [pc, #88]	; (4017d4 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  40177c:	4c19      	ldr	r4, [pc, #100]	; (4017e4 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  40177e:	47b0      	blx	r6
  401780:	b108      	cbz	r0, 401786 <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  401782:	2301      	movs	r3, #1
  401784:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401786:	6823      	ldr	r3, [r4, #0]
  401788:	3b01      	subs	r3, #1
  40178a:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40178c:	6823      	ldr	r3, [r4, #0]
  40178e:	2b00      	cmp	r3, #0
  401790:	d1f5      	bne.n	40177e <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  401792:	4b10      	ldr	r3, [pc, #64]	; (4017d4 <xTaskResumeAll+0xf4>)
  401794:	681b      	ldr	r3, [r3, #0]
  401796:	2b01      	cmp	r3, #1
  401798:	d10b      	bne.n	4017b2 <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  40179a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40179e:	4b13      	ldr	r3, [pc, #76]	; (4017ec <xTaskResumeAll+0x10c>)
  4017a0:	601a      	str	r2, [r3, #0]
  4017a2:	f3bf 8f4f 	dsb	sy
  4017a6:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  4017aa:	2401      	movs	r4, #1
  4017ac:	e002      	b.n	4017b4 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  4017ae:	2400      	movs	r4, #0
  4017b0:	e000      	b.n	4017b4 <xTaskResumeAll+0xd4>
  4017b2:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4017b4:	4b0e      	ldr	r3, [pc, #56]	; (4017f0 <xTaskResumeAll+0x110>)
  4017b6:	4798      	blx	r3

	return xAlreadyYielded;
}
  4017b8:	4620      	mov	r0, r4
  4017ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4017be:	bf00      	nop
  4017c0:	2040be88 	.word	0x2040be88
  4017c4:	00400609 	.word	0x00400609
  4017c8:	2040be98 	.word	0x2040be98
  4017cc:	00400901 	.word	0x00400901
  4017d0:	2040be70 	.word	0x2040be70
  4017d4:	2040bec8 	.word	0x2040bec8
  4017d8:	2040be74 	.word	0x2040be74
  4017dc:	0040094d 	.word	0x0040094d
  4017e0:	2040bec4 	.word	0x2040bec4
  4017e4:	2040bd90 	.word	0x2040bd90
  4017e8:	004015ad 	.word	0x004015ad
  4017ec:	e000ed04 	.word	0xe000ed04
  4017f0:	00400655 	.word	0x00400655
  4017f4:	2040bd94 	.word	0x2040bd94

004017f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  4017f8:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  4017fa:	2800      	cmp	r0, #0
  4017fc:	d029      	beq.n	401852 <vTaskDelay+0x5a>
  4017fe:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  401800:	4b18      	ldr	r3, [pc, #96]	; (401864 <vTaskDelay+0x6c>)
  401802:	681b      	ldr	r3, [r3, #0]
  401804:	b153      	cbz	r3, 40181c <vTaskDelay+0x24>
  401806:	f04f 0380 	mov.w	r3, #128	; 0x80
  40180a:	b672      	cpsid	i
  40180c:	f383 8811 	msr	BASEPRI, r3
  401810:	f3bf 8f6f 	isb	sy
  401814:	f3bf 8f4f 	dsb	sy
  401818:	b662      	cpsie	i
  40181a:	e7fe      	b.n	40181a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40181c:	4b12      	ldr	r3, [pc, #72]	; (401868 <vTaskDelay+0x70>)
  40181e:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  401820:	4b12      	ldr	r3, [pc, #72]	; (40186c <vTaskDelay+0x74>)
  401822:	681b      	ldr	r3, [r3, #0]
  401824:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401826:	4b12      	ldr	r3, [pc, #72]	; (401870 <vTaskDelay+0x78>)
  401828:	6818      	ldr	r0, [r3, #0]
  40182a:	3004      	adds	r0, #4
  40182c:	4b11      	ldr	r3, [pc, #68]	; (401874 <vTaskDelay+0x7c>)
  40182e:	4798      	blx	r3
  401830:	b948      	cbnz	r0, 401846 <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401832:	4b0f      	ldr	r3, [pc, #60]	; (401870 <vTaskDelay+0x78>)
  401834:	681a      	ldr	r2, [r3, #0]
  401836:	4910      	ldr	r1, [pc, #64]	; (401878 <vTaskDelay+0x80>)
  401838:	680b      	ldr	r3, [r1, #0]
  40183a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40183c:	2201      	movs	r2, #1
  40183e:	4082      	lsls	r2, r0
  401840:	ea23 0302 	bic.w	r3, r3, r2
  401844:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401846:	4620      	mov	r0, r4
  401848:	4b0c      	ldr	r3, [pc, #48]	; (40187c <vTaskDelay+0x84>)
  40184a:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  40184c:	4b0c      	ldr	r3, [pc, #48]	; (401880 <vTaskDelay+0x88>)
  40184e:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  401850:	b938      	cbnz	r0, 401862 <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  401852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401856:	4b0b      	ldr	r3, [pc, #44]	; (401884 <vTaskDelay+0x8c>)
  401858:	601a      	str	r2, [r3, #0]
  40185a:	f3bf 8f4f 	dsb	sy
  40185e:	f3bf 8f6f 	isb	sy
  401862:	bd10      	pop	{r4, pc}
  401864:	2040be88 	.word	0x2040be88
  401868:	00401591 	.word	0x00401591
  40186c:	2040be8c 	.word	0x2040be8c
  401870:	2040be70 	.word	0x2040be70
  401874:	0040094d 	.word	0x0040094d
  401878:	2040bec4 	.word	0x2040bec4
  40187c:	00401281 	.word	0x00401281
  401880:	004016e1 	.word	0x004016e1
  401884:	e000ed04 	.word	0xe000ed04

00401888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401888:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40188a:	4d18      	ldr	r5, [pc, #96]	; (4018ec <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40188c:	4e18      	ldr	r6, [pc, #96]	; (4018f0 <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  40188e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 401910 <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  401892:	4f18      	ldr	r7, [pc, #96]	; (4018f4 <prvIdleTask+0x6c>)
  401894:	e019      	b.n	4018ca <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401896:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401898:	6834      	ldr	r4, [r6, #0]
			}
			( void ) xTaskResumeAll();
  40189a:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
  40189c:	b1ac      	cbz	r4, 4018ca <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  40189e:	4b16      	ldr	r3, [pc, #88]	; (4018f8 <prvIdleTask+0x70>)
  4018a0:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4018a2:	68f3      	ldr	r3, [r6, #12]
  4018a4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4018a6:	1d20      	adds	r0, r4, #4
  4018a8:	4b14      	ldr	r3, [pc, #80]	; (4018fc <prvIdleTask+0x74>)
  4018aa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4018ac:	4a14      	ldr	r2, [pc, #80]	; (401900 <prvIdleTask+0x78>)
  4018ae:	6813      	ldr	r3, [r2, #0]
  4018b0:	3b01      	subs	r3, #1
  4018b2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4018b4:	682b      	ldr	r3, [r5, #0]
  4018b6:	3b01      	subs	r3, #1
  4018b8:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  4018ba:	4b12      	ldr	r3, [pc, #72]	; (401904 <prvIdleTask+0x7c>)
  4018bc:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  4018be:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4018c0:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401914 <prvIdleTask+0x8c>
  4018c4:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  4018c6:	4620      	mov	r0, r4
  4018c8:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4018ca:	682b      	ldr	r3, [r5, #0]
  4018cc:	2b00      	cmp	r3, #0
  4018ce:	d1e2      	bne.n	401896 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4018d0:	4b0d      	ldr	r3, [pc, #52]	; (401908 <prvIdleTask+0x80>)
  4018d2:	681b      	ldr	r3, [r3, #0]
  4018d4:	2b01      	cmp	r3, #1
  4018d6:	d9f8      	bls.n	4018ca <prvIdleTask+0x42>
			{
				taskYIELD();
  4018d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018dc:	4b0b      	ldr	r3, [pc, #44]	; (40190c <prvIdleTask+0x84>)
  4018de:	601a      	str	r2, [r3, #0]
  4018e0:	f3bf 8f4f 	dsb	sy
  4018e4:	f3bf 8f6f 	isb	sy
  4018e8:	e7d1      	b.n	40188e <prvIdleTask+0x6>
  4018ea:	bf00      	nop
  4018ec:	2040bd74 	.word	0x2040bd74
  4018f0:	2040be5c 	.word	0x2040be5c
  4018f4:	004016e1 	.word	0x004016e1
  4018f8:	00400609 	.word	0x00400609
  4018fc:	0040094d 	.word	0x0040094d
  401900:	2040be98 	.word	0x2040be98
  401904:	00400655 	.word	0x00400655
  401908:	2040bd94 	.word	0x2040bd94
  40190c:	e000ed04 	.word	0xe000ed04
  401910:	00401591 	.word	0x00401591
  401914:	004008c5 	.word	0x004008c5

00401918 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401918:	4b20      	ldr	r3, [pc, #128]	; (40199c <vTaskSwitchContext+0x84>)
  40191a:	681b      	ldr	r3, [r3, #0]
  40191c:	b11b      	cbz	r3, 401926 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  40191e:	2201      	movs	r2, #1
  401920:	4b1f      	ldr	r3, [pc, #124]	; (4019a0 <vTaskSwitchContext+0x88>)
  401922:	601a      	str	r2, [r3, #0]
  401924:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  401926:	2200      	movs	r2, #0
  401928:	4b1d      	ldr	r3, [pc, #116]	; (4019a0 <vTaskSwitchContext+0x88>)
  40192a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40192c:	4b1d      	ldr	r3, [pc, #116]	; (4019a4 <vTaskSwitchContext+0x8c>)
  40192e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  401930:	fab3 f383 	clz	r3, r3
  401934:	b2db      	uxtb	r3, r3
  401936:	f1c3 031f 	rsb	r3, r3, #31
  40193a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40193e:	4a1a      	ldr	r2, [pc, #104]	; (4019a8 <vTaskSwitchContext+0x90>)
  401940:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401944:	b952      	cbnz	r2, 40195c <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401946:	f04f 0380 	mov.w	r3, #128	; 0x80
  40194a:	b672      	cpsid	i
  40194c:	f383 8811 	msr	BASEPRI, r3
  401950:	f3bf 8f6f 	isb	sy
  401954:	f3bf 8f4f 	dsb	sy
  401958:	b662      	cpsie	i
  40195a:	e7fe      	b.n	40195a <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  40195c:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40195e:	4a12      	ldr	r2, [pc, #72]	; (4019a8 <vTaskSwitchContext+0x90>)
  401960:	0099      	lsls	r1, r3, #2
  401962:	18c8      	adds	r0, r1, r3
  401964:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401968:	6844      	ldr	r4, [r0, #4]
  40196a:	6864      	ldr	r4, [r4, #4]
  40196c:	6044      	str	r4, [r0, #4]
  40196e:	4602      	mov	r2, r0
  401970:	3208      	adds	r2, #8
  401972:	4294      	cmp	r4, r2
  401974:	d106      	bne.n	401984 <vTaskSwitchContext+0x6c>
  401976:	6860      	ldr	r0, [r4, #4]
  401978:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40197c:	4a0a      	ldr	r2, [pc, #40]	; (4019a8 <vTaskSwitchContext+0x90>)
  40197e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  401982:	6050      	str	r0, [r2, #4]
  401984:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401988:	4a07      	ldr	r2, [pc, #28]	; (4019a8 <vTaskSwitchContext+0x90>)
  40198a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40198e:	685b      	ldr	r3, [r3, #4]
  401990:	68da      	ldr	r2, [r3, #12]
  401992:	4b06      	ldr	r3, [pc, #24]	; (4019ac <vTaskSwitchContext+0x94>)
  401994:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401996:	f85d 4b04 	ldr.w	r4, [sp], #4
  40199a:	4770      	bx	lr
  40199c:	2040be88 	.word	0x2040be88
  4019a0:	2040bec8 	.word	0x2040bec8
  4019a4:	2040bec4 	.word	0x2040bec4
  4019a8:	2040bd94 	.word	0x2040bd94
  4019ac:	2040be70 	.word	0x2040be70

004019b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  4019b0:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  4019b2:	b950      	cbnz	r0, 4019ca <vTaskPlaceOnEventList+0x1a>
  4019b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019b8:	b672      	cpsid	i
  4019ba:	f383 8811 	msr	BASEPRI, r3
  4019be:	f3bf 8f6f 	isb	sy
  4019c2:	f3bf 8f4f 	dsb	sy
  4019c6:	b662      	cpsie	i
  4019c8:	e7fe      	b.n	4019c8 <vTaskPlaceOnEventList+0x18>
  4019ca:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4019cc:	4d11      	ldr	r5, [pc, #68]	; (401a14 <vTaskPlaceOnEventList+0x64>)
  4019ce:	6829      	ldr	r1, [r5, #0]
  4019d0:	3118      	adds	r1, #24
  4019d2:	4b11      	ldr	r3, [pc, #68]	; (401a18 <vTaskPlaceOnEventList+0x68>)
  4019d4:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4019d6:	6828      	ldr	r0, [r5, #0]
  4019d8:	3004      	adds	r0, #4
  4019da:	4b10      	ldr	r3, [pc, #64]	; (401a1c <vTaskPlaceOnEventList+0x6c>)
  4019dc:	4798      	blx	r3
  4019de:	b940      	cbnz	r0, 4019f2 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4019e0:	682a      	ldr	r2, [r5, #0]
  4019e2:	490f      	ldr	r1, [pc, #60]	; (401a20 <vTaskPlaceOnEventList+0x70>)
  4019e4:	680b      	ldr	r3, [r1, #0]
  4019e6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4019e8:	2201      	movs	r2, #1
  4019ea:	4082      	lsls	r2, r0
  4019ec:	ea23 0302 	bic.w	r3, r3, r2
  4019f0:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  4019f2:	f1b4 3fff 	cmp.w	r4, #4294967295
  4019f6:	d106      	bne.n	401a06 <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4019f8:	4b06      	ldr	r3, [pc, #24]	; (401a14 <vTaskPlaceOnEventList+0x64>)
  4019fa:	6819      	ldr	r1, [r3, #0]
  4019fc:	4809      	ldr	r0, [pc, #36]	; (401a24 <vTaskPlaceOnEventList+0x74>)
  4019fe:	3104      	adds	r1, #4
  401a00:	4b09      	ldr	r3, [pc, #36]	; (401a28 <vTaskPlaceOnEventList+0x78>)
  401a02:	4798      	blx	r3
  401a04:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401a06:	4b09      	ldr	r3, [pc, #36]	; (401a2c <vTaskPlaceOnEventList+0x7c>)
  401a08:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a0a:	4420      	add	r0, r4
  401a0c:	4b08      	ldr	r3, [pc, #32]	; (401a30 <vTaskPlaceOnEventList+0x80>)
  401a0e:	4798      	blx	r3
  401a10:	bd38      	pop	{r3, r4, r5, pc}
  401a12:	bf00      	nop
  401a14:	2040be70 	.word	0x2040be70
  401a18:	00400919 	.word	0x00400919
  401a1c:	0040094d 	.word	0x0040094d
  401a20:	2040bec4 	.word	0x2040bec4
  401a24:	2040beb0 	.word	0x2040beb0
  401a28:	00400901 	.word	0x00400901
  401a2c:	2040be8c 	.word	0x2040be8c
  401a30:	00401281 	.word	0x00401281

00401a34 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401a34:	b950      	cbnz	r0, 401a4c <vTaskPlaceOnEventListRestricted+0x18>
  401a36:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a3a:	b672      	cpsid	i
  401a3c:	f383 8811 	msr	BASEPRI, r3
  401a40:	f3bf 8f6f 	isb	sy
  401a44:	f3bf 8f4f 	dsb	sy
  401a48:	b662      	cpsie	i
  401a4a:	e7fe      	b.n	401a4a <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401a4c:	b570      	push	{r4, r5, r6, lr}
  401a4e:	4615      	mov	r5, r2
  401a50:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a52:	4e11      	ldr	r6, [pc, #68]	; (401a98 <vTaskPlaceOnEventListRestricted+0x64>)
  401a54:	6831      	ldr	r1, [r6, #0]
  401a56:	3118      	adds	r1, #24
  401a58:	4b10      	ldr	r3, [pc, #64]	; (401a9c <vTaskPlaceOnEventListRestricted+0x68>)
  401a5a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401a5c:	6830      	ldr	r0, [r6, #0]
  401a5e:	3004      	adds	r0, #4
  401a60:	4b0f      	ldr	r3, [pc, #60]	; (401aa0 <vTaskPlaceOnEventListRestricted+0x6c>)
  401a62:	4798      	blx	r3
  401a64:	b940      	cbnz	r0, 401a78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401a66:	6832      	ldr	r2, [r6, #0]
  401a68:	490e      	ldr	r1, [pc, #56]	; (401aa4 <vTaskPlaceOnEventListRestricted+0x70>)
  401a6a:	680b      	ldr	r3, [r1, #0]
  401a6c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401a6e:	2201      	movs	r2, #1
  401a70:	4082      	lsls	r2, r0
  401a72:	ea23 0302 	bic.w	r3, r3, r2
  401a76:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401a78:	2d01      	cmp	r5, #1
  401a7a:	d106      	bne.n	401a8a <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a7c:	4b06      	ldr	r3, [pc, #24]	; (401a98 <vTaskPlaceOnEventListRestricted+0x64>)
  401a7e:	6819      	ldr	r1, [r3, #0]
  401a80:	4809      	ldr	r0, [pc, #36]	; (401aa8 <vTaskPlaceOnEventListRestricted+0x74>)
  401a82:	3104      	adds	r1, #4
  401a84:	4b05      	ldr	r3, [pc, #20]	; (401a9c <vTaskPlaceOnEventListRestricted+0x68>)
  401a86:	4798      	blx	r3
  401a88:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401a8a:	4b08      	ldr	r3, [pc, #32]	; (401aac <vTaskPlaceOnEventListRestricted+0x78>)
  401a8c:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a8e:	4420      	add	r0, r4
  401a90:	4b07      	ldr	r3, [pc, #28]	; (401ab0 <vTaskPlaceOnEventListRestricted+0x7c>)
  401a92:	4798      	blx	r3
  401a94:	bd70      	pop	{r4, r5, r6, pc}
  401a96:	bf00      	nop
  401a98:	2040be70 	.word	0x2040be70
  401a9c:	00400901 	.word	0x00400901
  401aa0:	0040094d 	.word	0x0040094d
  401aa4:	2040bec4 	.word	0x2040bec4
  401aa8:	2040beb0 	.word	0x2040beb0
  401aac:	2040be8c 	.word	0x2040be8c
  401ab0:	00401281 	.word	0x00401281

00401ab4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  401ab4:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401ab6:	68c3      	ldr	r3, [r0, #12]
  401ab8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401aba:	b954      	cbnz	r4, 401ad2 <xTaskRemoveFromEventList+0x1e>
  401abc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ac0:	b672      	cpsid	i
  401ac2:	f383 8811 	msr	BASEPRI, r3
  401ac6:	f3bf 8f6f 	isb	sy
  401aca:	f3bf 8f4f 	dsb	sy
  401ace:	b662      	cpsie	i
  401ad0:	e7fe      	b.n	401ad0 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401ad2:	f104 0518 	add.w	r5, r4, #24
  401ad6:	4628      	mov	r0, r5
  401ad8:	4b14      	ldr	r3, [pc, #80]	; (401b2c <xTaskRemoveFromEventList+0x78>)
  401ada:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401adc:	4b14      	ldr	r3, [pc, #80]	; (401b30 <xTaskRemoveFromEventList+0x7c>)
  401ade:	681b      	ldr	r3, [r3, #0]
  401ae0:	b99b      	cbnz	r3, 401b0a <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401ae2:	1d25      	adds	r5, r4, #4
  401ae4:	4628      	mov	r0, r5
  401ae6:	4b11      	ldr	r3, [pc, #68]	; (401b2c <xTaskRemoveFromEventList+0x78>)
  401ae8:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401aea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401aec:	4911      	ldr	r1, [pc, #68]	; (401b34 <xTaskRemoveFromEventList+0x80>)
  401aee:	680b      	ldr	r3, [r1, #0]
  401af0:	2201      	movs	r2, #1
  401af2:	4082      	lsls	r2, r0
  401af4:	4313      	orrs	r3, r2
  401af6:	600b      	str	r3, [r1, #0]
  401af8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401afc:	4b0e      	ldr	r3, [pc, #56]	; (401b38 <xTaskRemoveFromEventList+0x84>)
  401afe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b02:	4629      	mov	r1, r5
  401b04:	4b0d      	ldr	r3, [pc, #52]	; (401b3c <xTaskRemoveFromEventList+0x88>)
  401b06:	4798      	blx	r3
  401b08:	e003      	b.n	401b12 <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b0a:	480d      	ldr	r0, [pc, #52]	; (401b40 <xTaskRemoveFromEventList+0x8c>)
  401b0c:	4629      	mov	r1, r5
  401b0e:	4b0b      	ldr	r3, [pc, #44]	; (401b3c <xTaskRemoveFromEventList+0x88>)
  401b10:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b12:	4b0c      	ldr	r3, [pc, #48]	; (401b44 <xTaskRemoveFromEventList+0x90>)
  401b14:	681b      	ldr	r3, [r3, #0]
  401b16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b1a:	429a      	cmp	r2, r3
  401b1c:	d903      	bls.n	401b26 <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  401b1e:	2001      	movs	r0, #1
  401b20:	4b09      	ldr	r3, [pc, #36]	; (401b48 <xTaskRemoveFromEventList+0x94>)
  401b22:	6018      	str	r0, [r3, #0]
  401b24:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  401b26:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  401b28:	bd38      	pop	{r3, r4, r5, pc}
  401b2a:	bf00      	nop
  401b2c:	0040094d 	.word	0x0040094d
  401b30:	2040be88 	.word	0x2040be88
  401b34:	2040bec4 	.word	0x2040bec4
  401b38:	2040bd94 	.word	0x2040bd94
  401b3c:	00400901 	.word	0x00400901
  401b40:	2040be74 	.word	0x2040be74
  401b44:	2040be70 	.word	0x2040be70
  401b48:	2040bec8 	.word	0x2040bec8

00401b4c <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  401b4c:	b950      	cbnz	r0, 401b64 <vTaskSetTimeOutState+0x18>
  401b4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b52:	b672      	cpsid	i
  401b54:	f383 8811 	msr	BASEPRI, r3
  401b58:	f3bf 8f6f 	isb	sy
  401b5c:	f3bf 8f4f 	dsb	sy
  401b60:	b662      	cpsie	i
  401b62:	e7fe      	b.n	401b62 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b64:	4a03      	ldr	r2, [pc, #12]	; (401b74 <vTaskSetTimeOutState+0x28>)
  401b66:	6812      	ldr	r2, [r2, #0]
  401b68:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401b6a:	4a03      	ldr	r2, [pc, #12]	; (401b78 <vTaskSetTimeOutState+0x2c>)
  401b6c:	6812      	ldr	r2, [r2, #0]
  401b6e:	6042      	str	r2, [r0, #4]
  401b70:	4770      	bx	lr
  401b72:	bf00      	nop
  401b74:	2040bd68 	.word	0x2040bd68
  401b78:	2040be8c 	.word	0x2040be8c

00401b7c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  401b7c:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  401b7e:	b950      	cbnz	r0, 401b96 <xTaskCheckForTimeOut+0x1a>
  401b80:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b84:	b672      	cpsid	i
  401b86:	f383 8811 	msr	BASEPRI, r3
  401b8a:	f3bf 8f6f 	isb	sy
  401b8e:	f3bf 8f4f 	dsb	sy
  401b92:	b662      	cpsie	i
  401b94:	e7fe      	b.n	401b94 <xTaskCheckForTimeOut+0x18>
  401b96:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401b98:	b951      	cbnz	r1, 401bb0 <xTaskCheckForTimeOut+0x34>
  401b9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b9e:	b672      	cpsid	i
  401ba0:	f383 8811 	msr	BASEPRI, r3
  401ba4:	f3bf 8f6f 	isb	sy
  401ba8:	f3bf 8f4f 	dsb	sy
  401bac:	b662      	cpsie	i
  401bae:	e7fe      	b.n	401bae <xTaskCheckForTimeOut+0x32>
  401bb0:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  401bb2:	4b12      	ldr	r3, [pc, #72]	; (401bfc <xTaskCheckForTimeOut+0x80>)
  401bb4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  401bb6:	4b12      	ldr	r3, [pc, #72]	; (401c00 <xTaskCheckForTimeOut+0x84>)
  401bb8:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401bba:	682b      	ldr	r3, [r5, #0]
  401bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bc0:	d013      	beq.n	401bea <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401bc2:	4a10      	ldr	r2, [pc, #64]	; (401c04 <xTaskCheckForTimeOut+0x88>)
  401bc4:	6812      	ldr	r2, [r2, #0]
  401bc6:	6820      	ldr	r0, [r4, #0]
  401bc8:	4290      	cmp	r0, r2
  401bca:	d002      	beq.n	401bd2 <xTaskCheckForTimeOut+0x56>
  401bcc:	6862      	ldr	r2, [r4, #4]
  401bce:	4291      	cmp	r1, r2
  401bd0:	d20d      	bcs.n	401bee <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401bd2:	6862      	ldr	r2, [r4, #4]
  401bd4:	1a88      	subs	r0, r1, r2
  401bd6:	4283      	cmp	r3, r0
  401bd8:	d90b      	bls.n	401bf2 <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401bda:	1a52      	subs	r2, r2, r1
  401bdc:	4413      	add	r3, r2
  401bde:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401be0:	4620      	mov	r0, r4
  401be2:	4b09      	ldr	r3, [pc, #36]	; (401c08 <xTaskCheckForTimeOut+0x8c>)
  401be4:	4798      	blx	r3
			xReturn = pdFALSE;
  401be6:	2400      	movs	r4, #0
  401be8:	e004      	b.n	401bf4 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401bea:	2400      	movs	r4, #0
  401bec:	e002      	b.n	401bf4 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401bee:	2401      	movs	r4, #1
  401bf0:	e000      	b.n	401bf4 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401bf2:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401bf4:	4b05      	ldr	r3, [pc, #20]	; (401c0c <xTaskCheckForTimeOut+0x90>)
  401bf6:	4798      	blx	r3

	return xReturn;
}
  401bf8:	4620      	mov	r0, r4
  401bfa:	bd38      	pop	{r3, r4, r5, pc}
  401bfc:	00400609 	.word	0x00400609
  401c00:	2040be8c 	.word	0x2040be8c
  401c04:	2040bd68 	.word	0x2040bd68
  401c08:	00401b4d 	.word	0x00401b4d
  401c0c:	00400655 	.word	0x00400655

00401c10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  401c10:	2201      	movs	r2, #1
  401c12:	4b01      	ldr	r3, [pc, #4]	; (401c18 <vTaskMissedYield+0x8>)
  401c14:	601a      	str	r2, [r3, #0]
  401c16:	4770      	bx	lr
  401c18:	2040bec8 	.word	0x2040bec8

00401c1c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c1c:	4b05      	ldr	r3, [pc, #20]	; (401c34 <xTaskGetSchedulerState+0x18>)
  401c1e:	681b      	ldr	r3, [r3, #0]
  401c20:	b133      	cbz	r3, 401c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c22:	4b05      	ldr	r3, [pc, #20]	; (401c38 <xTaskGetSchedulerState+0x1c>)
  401c24:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c26:	2b00      	cmp	r3, #0
  401c28:	bf0c      	ite	eq
  401c2a:	2002      	moveq	r0, #2
  401c2c:	2000      	movne	r0, #0
  401c2e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c30:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  401c32:	4770      	bx	lr
  401c34:	2040bd70 	.word	0x2040bd70
  401c38:	2040be88 	.word	0x2040be88

00401c3c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401c3c:	2800      	cmp	r0, #0
  401c3e:	d045      	beq.n	401ccc <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  401c40:	b538      	push	{r3, r4, r5, lr}
  401c42:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c44:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401c46:	4922      	ldr	r1, [pc, #136]	; (401cd0 <vTaskPriorityInherit+0x94>)
  401c48:	6809      	ldr	r1, [r1, #0]
  401c4a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c4c:	428a      	cmp	r2, r1
  401c4e:	d23c      	bcs.n	401cca <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401c50:	6981      	ldr	r1, [r0, #24]
  401c52:	2900      	cmp	r1, #0
  401c54:	db05      	blt.n	401c62 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c56:	491e      	ldr	r1, [pc, #120]	; (401cd0 <vTaskPriorityInherit+0x94>)
  401c58:	6809      	ldr	r1, [r1, #0]
  401c5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c5c:	f1c1 010a 	rsb	r1, r1, #10
  401c60:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401c62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401c66:	491b      	ldr	r1, [pc, #108]	; (401cd4 <vTaskPriorityInherit+0x98>)
  401c68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401c6c:	6959      	ldr	r1, [r3, #20]
  401c6e:	4291      	cmp	r1, r2
  401c70:	d127      	bne.n	401cc2 <vTaskPriorityInherit+0x86>
  401c72:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401c74:	1d1d      	adds	r5, r3, #4
  401c76:	4628      	mov	r0, r5
  401c78:	4b17      	ldr	r3, [pc, #92]	; (401cd8 <vTaskPriorityInherit+0x9c>)
  401c7a:	4798      	blx	r3
  401c7c:	b970      	cbnz	r0, 401c9c <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401c7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401c80:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401c84:	4a13      	ldr	r2, [pc, #76]	; (401cd4 <vTaskPriorityInherit+0x98>)
  401c86:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401c8a:	b93a      	cbnz	r2, 401c9c <vTaskPriorityInherit+0x60>
  401c8c:	4813      	ldr	r0, [pc, #76]	; (401cdc <vTaskPriorityInherit+0xa0>)
  401c8e:	6802      	ldr	r2, [r0, #0]
  401c90:	2101      	movs	r1, #1
  401c92:	fa01 f303 	lsl.w	r3, r1, r3
  401c96:	ea22 0303 	bic.w	r3, r2, r3
  401c9a:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c9c:	4b0c      	ldr	r3, [pc, #48]	; (401cd0 <vTaskPriorityInherit+0x94>)
  401c9e:	681b      	ldr	r3, [r3, #0]
  401ca0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401ca2:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401ca4:	490d      	ldr	r1, [pc, #52]	; (401cdc <vTaskPriorityInherit+0xa0>)
  401ca6:	680a      	ldr	r2, [r1, #0]
  401ca8:	2301      	movs	r3, #1
  401caa:	4083      	lsls	r3, r0
  401cac:	4313      	orrs	r3, r2
  401cae:	600b      	str	r3, [r1, #0]
  401cb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401cb4:	4b07      	ldr	r3, [pc, #28]	; (401cd4 <vTaskPriorityInherit+0x98>)
  401cb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401cba:	4629      	mov	r1, r5
  401cbc:	4b08      	ldr	r3, [pc, #32]	; (401ce0 <vTaskPriorityInherit+0xa4>)
  401cbe:	4798      	blx	r3
  401cc0:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cc2:	4a03      	ldr	r2, [pc, #12]	; (401cd0 <vTaskPriorityInherit+0x94>)
  401cc4:	6812      	ldr	r2, [r2, #0]
  401cc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  401cca:	bd38      	pop	{r3, r4, r5, pc}
  401ccc:	4770      	bx	lr
  401cce:	bf00      	nop
  401cd0:	2040be70 	.word	0x2040be70
  401cd4:	2040bd94 	.word	0x2040bd94
  401cd8:	0040094d 	.word	0x0040094d
  401cdc:	2040bec4 	.word	0x2040bec4
  401ce0:	00400901 	.word	0x00400901

00401ce4 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401ce4:	2800      	cmp	r0, #0
  401ce6:	d04e      	beq.n	401d86 <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  401ce8:	b538      	push	{r3, r4, r5, lr}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401cea:	4a29      	ldr	r2, [pc, #164]	; (401d90 <xTaskPriorityDisinherit+0xac>)
  401cec:	6812      	ldr	r2, [r2, #0]
  401cee:	4290      	cmp	r0, r2
  401cf0:	d00a      	beq.n	401d08 <xTaskPriorityDisinherit+0x24>
  401cf2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cf6:	b672      	cpsid	i
  401cf8:	f383 8811 	msr	BASEPRI, r3
  401cfc:	f3bf 8f6f 	isb	sy
  401d00:	f3bf 8f4f 	dsb	sy
  401d04:	b662      	cpsie	i
  401d06:	e7fe      	b.n	401d06 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
  401d08:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401d0a:	b952      	cbnz	r2, 401d22 <xTaskPriorityDisinherit+0x3e>
  401d0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d10:	b672      	cpsid	i
  401d12:	f383 8811 	msr	BASEPRI, r3
  401d16:	f3bf 8f6f 	isb	sy
  401d1a:	f3bf 8f4f 	dsb	sy
  401d1e:	b662      	cpsie	i
  401d20:	e7fe      	b.n	401d20 <xTaskPriorityDisinherit+0x3c>
			( pxTCB->uxMutexesHeld )--;
  401d22:	3a01      	subs	r2, #1
  401d24:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d26:	2a00      	cmp	r2, #0
  401d28:	d12f      	bne.n	401d8a <xTaskPriorityDisinherit+0xa6>
			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  401d2a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  401d2c:	6c82      	ldr	r2, [r0, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d2e:	4291      	cmp	r1, r2
  401d30:	d02b      	beq.n	401d8a <xTaskPriorityDisinherit+0xa6>
  401d32:	4604      	mov	r4, r0
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d34:	1d05      	adds	r5, r0, #4
  401d36:	4628      	mov	r0, r5
  401d38:	4b16      	ldr	r3, [pc, #88]	; (401d94 <xTaskPriorityDisinherit+0xb0>)
  401d3a:	4798      	blx	r3
  401d3c:	b968      	cbnz	r0, 401d5a <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401d3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401d40:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401d44:	4b14      	ldr	r3, [pc, #80]	; (401d98 <xTaskPriorityDisinherit+0xb4>)
  401d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d4a:	b933      	cbnz	r3, 401d5a <xTaskPriorityDisinherit+0x76>
  401d4c:	4813      	ldr	r0, [pc, #76]	; (401d9c <xTaskPriorityDisinherit+0xb8>)
  401d4e:	6803      	ldr	r3, [r0, #0]
  401d50:	2201      	movs	r2, #1
  401d52:	408a      	lsls	r2, r1
  401d54:	ea23 0302 	bic.w	r3, r3, r2
  401d58:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d5a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401d5c:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d5e:	f1c0 030a 	rsb	r3, r0, #10
  401d62:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401d64:	4a0d      	ldr	r2, [pc, #52]	; (401d9c <xTaskPriorityDisinherit+0xb8>)
  401d66:	6813      	ldr	r3, [r2, #0]
  401d68:	2401      	movs	r4, #1
  401d6a:	fa04 f100 	lsl.w	r1, r4, r0
  401d6e:	430b      	orrs	r3, r1
  401d70:	6013      	str	r3, [r2, #0]
  401d72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d76:	4b08      	ldr	r3, [pc, #32]	; (401d98 <xTaskPriorityDisinherit+0xb4>)
  401d78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d7c:	4629      	mov	r1, r5
  401d7e:	4b08      	ldr	r3, [pc, #32]	; (401da0 <xTaskPriorityDisinherit+0xbc>)
  401d80:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401d82:	4620      	mov	r0, r4
  401d84:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401d86:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401d88:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401d8a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401d8c:	bd38      	pop	{r3, r4, r5, pc}
  401d8e:	bf00      	nop
  401d90:	2040be70 	.word	0x2040be70
  401d94:	0040094d 	.word	0x0040094d
  401d98:	2040bd94 	.word	0x2040bd94
  401d9c:	2040bec4 	.word	0x2040bec4
  401da0:	00400901 	.word	0x00400901

00401da4 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401da4:	4b05      	ldr	r3, [pc, #20]	; (401dbc <pvTaskIncrementMutexHeldCount+0x18>)
  401da6:	681b      	ldr	r3, [r3, #0]
  401da8:	b123      	cbz	r3, 401db4 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401daa:	4b04      	ldr	r3, [pc, #16]	; (401dbc <pvTaskIncrementMutexHeldCount+0x18>)
  401dac:	681a      	ldr	r2, [r3, #0]
  401dae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401db0:	3301      	adds	r3, #1
  401db2:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401db4:	4b01      	ldr	r3, [pc, #4]	; (401dbc <pvTaskIncrementMutexHeldCount+0x18>)
  401db6:	6818      	ldr	r0, [r3, #0]
	}
  401db8:	4770      	bx	lr
  401dba:	bf00      	nop
  401dbc:	2040be70 	.word	0x2040be70

00401dc0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401dc0:	b510      	push	{r4, lr}
  401dc2:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401dc4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401dc6:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
  401dc8:	4291      	cmp	r1, r2
  401dca:	d80a      	bhi.n	401de2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401dcc:	1ad2      	subs	r2, r2, r3
  401dce:	6983      	ldr	r3, [r0, #24]
  401dd0:	429a      	cmp	r2, r3
  401dd2:	d211      	bcs.n	401df8 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401dd4:	4b0a      	ldr	r3, [pc, #40]	; (401e00 <prvInsertTimerInActiveList+0x40>)
  401dd6:	6818      	ldr	r0, [r3, #0]
  401dd8:	1d21      	adds	r1, r4, #4
  401dda:	4b0a      	ldr	r3, [pc, #40]	; (401e04 <prvInsertTimerInActiveList+0x44>)
  401ddc:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401dde:	2000      	movs	r0, #0
  401de0:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401de2:	4299      	cmp	r1, r3
  401de4:	d301      	bcc.n	401dea <prvInsertTimerInActiveList+0x2a>
  401de6:	429a      	cmp	r2, r3
  401de8:	d308      	bcc.n	401dfc <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401dea:	4b07      	ldr	r3, [pc, #28]	; (401e08 <prvInsertTimerInActiveList+0x48>)
  401dec:	6818      	ldr	r0, [r3, #0]
  401dee:	1d21      	adds	r1, r4, #4
  401df0:	4b04      	ldr	r3, [pc, #16]	; (401e04 <prvInsertTimerInActiveList+0x44>)
  401df2:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401df4:	2000      	movs	r0, #0
  401df6:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401df8:	2001      	movs	r0, #1
  401dfa:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401dfc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401dfe:	bd10      	pop	{r4, pc}
  401e00:	2040bf00 	.word	0x2040bf00
  401e04:	00400919 	.word	0x00400919
  401e08:	2040becc 	.word	0x2040becc

00401e0c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401e0c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401e0e:	4b14      	ldr	r3, [pc, #80]	; (401e60 <prvCheckForValidListAndQueue+0x54>)
  401e10:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401e12:	4b14      	ldr	r3, [pc, #80]	; (401e64 <prvCheckForValidListAndQueue+0x58>)
  401e14:	681b      	ldr	r3, [r3, #0]
  401e16:	bb03      	cbnz	r3, 401e5a <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  401e18:	4d13      	ldr	r5, [pc, #76]	; (401e68 <prvCheckForValidListAndQueue+0x5c>)
  401e1a:	4628      	mov	r0, r5
  401e1c:	4e13      	ldr	r6, [pc, #76]	; (401e6c <prvCheckForValidListAndQueue+0x60>)
  401e1e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401e20:	4c13      	ldr	r4, [pc, #76]	; (401e70 <prvCheckForValidListAndQueue+0x64>)
  401e22:	4620      	mov	r0, r4
  401e24:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401e26:	4b13      	ldr	r3, [pc, #76]	; (401e74 <prvCheckForValidListAndQueue+0x68>)
  401e28:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401e2a:	4b13      	ldr	r3, [pc, #76]	; (401e78 <prvCheckForValidListAndQueue+0x6c>)
  401e2c:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401e2e:	2005      	movs	r0, #5
  401e30:	2110      	movs	r1, #16
  401e32:	2200      	movs	r2, #0
  401e34:	4b11      	ldr	r3, [pc, #68]	; (401e7c <prvCheckForValidListAndQueue+0x70>)
  401e36:	4798      	blx	r3
  401e38:	4b0a      	ldr	r3, [pc, #40]	; (401e64 <prvCheckForValidListAndQueue+0x58>)
  401e3a:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401e3c:	b950      	cbnz	r0, 401e54 <prvCheckForValidListAndQueue+0x48>
  401e3e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e42:	b672      	cpsid	i
  401e44:	f383 8811 	msr	BASEPRI, r3
  401e48:	f3bf 8f6f 	isb	sy
  401e4c:	f3bf 8f4f 	dsb	sy
  401e50:	b662      	cpsie	i
  401e52:	e7fe      	b.n	401e52 <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401e54:	490a      	ldr	r1, [pc, #40]	; (401e80 <prvCheckForValidListAndQueue+0x74>)
  401e56:	4b0b      	ldr	r3, [pc, #44]	; (401e84 <prvCheckForValidListAndQueue+0x78>)
  401e58:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401e5a:	4b0b      	ldr	r3, [pc, #44]	; (401e88 <prvCheckForValidListAndQueue+0x7c>)
  401e5c:	4798      	blx	r3
  401e5e:	bd70      	pop	{r4, r5, r6, pc}
  401e60:	00400609 	.word	0x00400609
  401e64:	2040befc 	.word	0x2040befc
  401e68:	2040bed0 	.word	0x2040bed0
  401e6c:	004008e1 	.word	0x004008e1
  401e70:	2040bee4 	.word	0x2040bee4
  401e74:	2040becc 	.word	0x2040becc
  401e78:	2040bf00 	.word	0x2040bf00
  401e7c:	00400bd5 	.word	0x00400bd5
  401e80:	00406498 	.word	0x00406498
  401e84:	004011d1 	.word	0x004011d1
  401e88:	00400655 	.word	0x00400655

00401e8c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  401e8c:	b510      	push	{r4, lr}
  401e8e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401e90:	4b0f      	ldr	r3, [pc, #60]	; (401ed0 <xTimerCreateTimerTask+0x44>)
  401e92:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401e94:	4b0f      	ldr	r3, [pc, #60]	; (401ed4 <xTimerCreateTimerTask+0x48>)
  401e96:	681b      	ldr	r3, [r3, #0]
  401e98:	b163      	cbz	r3, 401eb4 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401e9a:	2309      	movs	r3, #9
  401e9c:	9300      	str	r3, [sp, #0]
  401e9e:	2300      	movs	r3, #0
  401ea0:	9301      	str	r3, [sp, #4]
  401ea2:	9302      	str	r3, [sp, #8]
  401ea4:	9303      	str	r3, [sp, #12]
  401ea6:	480c      	ldr	r0, [pc, #48]	; (401ed8 <xTimerCreateTimerTask+0x4c>)
  401ea8:	490c      	ldr	r1, [pc, #48]	; (401edc <xTimerCreateTimerTask+0x50>)
  401eaa:	f44f 7282 	mov.w	r2, #260	; 0x104
  401eae:	4c0c      	ldr	r4, [pc, #48]	; (401ee0 <xTimerCreateTimerTask+0x54>)
  401eb0:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  401eb2:	b950      	cbnz	r0, 401eca <xTimerCreateTimerTask+0x3e>
  401eb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eb8:	b672      	cpsid	i
  401eba:	f383 8811 	msr	BASEPRI, r3
  401ebe:	f3bf 8f6f 	isb	sy
  401ec2:	f3bf 8f4f 	dsb	sy
  401ec6:	b662      	cpsie	i
  401ec8:	e7fe      	b.n	401ec8 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  401eca:	b004      	add	sp, #16
  401ecc:	bd10      	pop	{r4, pc}
  401ece:	bf00      	nop
  401ed0:	00401e0d 	.word	0x00401e0d
  401ed4:	2040befc 	.word	0x2040befc
  401ed8:	0040201d 	.word	0x0040201d
  401edc:	004064a0 	.word	0x004064a0
  401ee0:	004012d9 	.word	0x004012d9

00401ee4 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  401ee4:	b950      	cbnz	r0, 401efc <xTimerGenericCommand+0x18>
  401ee6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eea:	b672      	cpsid	i
  401eec:	f383 8811 	msr	BASEPRI, r3
  401ef0:	f3bf 8f6f 	isb	sy
  401ef4:	f3bf 8f4f 	dsb	sy
  401ef8:	b662      	cpsie	i
  401efa:	e7fe      	b.n	401efa <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  401efc:	b530      	push	{r4, r5, lr}
  401efe:	b085      	sub	sp, #20
  401f00:	4615      	mov	r5, r2
  401f02:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401f04:	4a12      	ldr	r2, [pc, #72]	; (401f50 <xTimerGenericCommand+0x6c>)
  401f06:	6810      	ldr	r0, [r2, #0]
  401f08:	b1f0      	cbz	r0, 401f48 <xTimerGenericCommand+0x64>
  401f0a:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401f0c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401f0e:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401f10:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401f12:	2905      	cmp	r1, #5
  401f14:	dc13      	bgt.n	401f3e <xTimerGenericCommand+0x5a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401f16:	4b0f      	ldr	r3, [pc, #60]	; (401f54 <xTimerGenericCommand+0x70>)
  401f18:	4798      	blx	r3
  401f1a:	2802      	cmp	r0, #2
  401f1c:	d107      	bne.n	401f2e <xTimerGenericCommand+0x4a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401f1e:	4b0c      	ldr	r3, [pc, #48]	; (401f50 <xTimerGenericCommand+0x6c>)
  401f20:	6818      	ldr	r0, [r3, #0]
  401f22:	4669      	mov	r1, sp
  401f24:	9a08      	ldr	r2, [sp, #32]
  401f26:	2300      	movs	r3, #0
  401f28:	4c0b      	ldr	r4, [pc, #44]	; (401f58 <xTimerGenericCommand+0x74>)
  401f2a:	47a0      	blx	r4
  401f2c:	e00d      	b.n	401f4a <xTimerGenericCommand+0x66>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401f2e:	4b08      	ldr	r3, [pc, #32]	; (401f50 <xTimerGenericCommand+0x6c>)
  401f30:	6818      	ldr	r0, [r3, #0]
  401f32:	4669      	mov	r1, sp
  401f34:	2200      	movs	r2, #0
  401f36:	4613      	mov	r3, r2
  401f38:	4c07      	ldr	r4, [pc, #28]	; (401f58 <xTimerGenericCommand+0x74>)
  401f3a:	47a0      	blx	r4
  401f3c:	e005      	b.n	401f4a <xTimerGenericCommand+0x66>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401f3e:	4669      	mov	r1, sp
  401f40:	2300      	movs	r3, #0
  401f42:	4c06      	ldr	r4, [pc, #24]	; (401f5c <xTimerGenericCommand+0x78>)
  401f44:	47a0      	blx	r4
  401f46:	e000      	b.n	401f4a <xTimerGenericCommand+0x66>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  401f48:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  401f4a:	b005      	add	sp, #20
  401f4c:	bd30      	pop	{r4, r5, pc}
  401f4e:	bf00      	nop
  401f50:	2040befc 	.word	0x2040befc
  401f54:	00401c1d 	.word	0x00401c1d
  401f58:	00400c59 	.word	0x00400c59
  401f5c:	00400e35 	.word	0x00400e35

00401f60 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  401f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f64:	b082      	sub	sp, #8
  401f66:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  401f68:	4b25      	ldr	r3, [pc, #148]	; (402000 <prvSampleTimeNow+0xa0>)
  401f6a:	4798      	blx	r3
  401f6c:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  401f6e:	4b25      	ldr	r3, [pc, #148]	; (402004 <prvSampleTimeNow+0xa4>)
  401f70:	681b      	ldr	r3, [r3, #0]
  401f72:	4298      	cmp	r0, r3
  401f74:	d23b      	bcs.n	401fee <prvSampleTimeNow+0x8e>
  401f76:	e02b      	b.n	401fd0 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f78:	68db      	ldr	r3, [r3, #12]
  401f7a:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f7e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f80:	f104 0904 	add.w	r9, r4, #4
  401f84:	4648      	mov	r0, r9
  401f86:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f8a:	4620      	mov	r0, r4
  401f8c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401f8e:	69e3      	ldr	r3, [r4, #28]
  401f90:	2b01      	cmp	r3, #1
  401f92:	d11f      	bne.n	401fd4 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401f94:	69a3      	ldr	r3, [r4, #24]
  401f96:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401f98:	4553      	cmp	r3, sl
  401f9a:	d906      	bls.n	401faa <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401f9c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401f9e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401fa0:	6828      	ldr	r0, [r5, #0]
  401fa2:	4649      	mov	r1, r9
  401fa4:	4b18      	ldr	r3, [pc, #96]	; (402008 <prvSampleTimeNow+0xa8>)
  401fa6:	4798      	blx	r3
  401fa8:	e014      	b.n	401fd4 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401faa:	2300      	movs	r3, #0
  401fac:	9300      	str	r3, [sp, #0]
  401fae:	4620      	mov	r0, r4
  401fb0:	4619      	mov	r1, r3
  401fb2:	4652      	mov	r2, sl
  401fb4:	4c15      	ldr	r4, [pc, #84]	; (40200c <prvSampleTimeNow+0xac>)
  401fb6:	47a0      	blx	r4
				configASSERT( xResult );
  401fb8:	b960      	cbnz	r0, 401fd4 <prvSampleTimeNow+0x74>
  401fba:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fbe:	b672      	cpsid	i
  401fc0:	f383 8811 	msr	BASEPRI, r3
  401fc4:	f3bf 8f6f 	isb	sy
  401fc8:	f3bf 8f4f 	dsb	sy
  401fcc:	b662      	cpsie	i
  401fce:	e7fe      	b.n	401fce <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401fd0:	4d0f      	ldr	r5, [pc, #60]	; (402010 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fd2:	4e10      	ldr	r6, [pc, #64]	; (402014 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401fd4:	682b      	ldr	r3, [r5, #0]
  401fd6:	681a      	ldr	r2, [r3, #0]
  401fd8:	2a00      	cmp	r2, #0
  401fda:	d1cd      	bne.n	401f78 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  401fdc:	4a0e      	ldr	r2, [pc, #56]	; (402018 <prvSampleTimeNow+0xb8>)
  401fde:	6810      	ldr	r0, [r2, #0]
  401fe0:	490b      	ldr	r1, [pc, #44]	; (402010 <prvSampleTimeNow+0xb0>)
  401fe2:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401fe4:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  401fe6:	2301      	movs	r3, #1
  401fe8:	f8c8 3000 	str.w	r3, [r8]
  401fec:	e002      	b.n	401ff4 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  401fee:	2300      	movs	r3, #0
  401ff0:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  401ff4:	4b03      	ldr	r3, [pc, #12]	; (402004 <prvSampleTimeNow+0xa4>)
  401ff6:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  401ff8:	4638      	mov	r0, r7
  401ffa:	b002      	add	sp, #8
  401ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402000:	004015a1 	.word	0x004015a1
  402004:	2040bef8 	.word	0x2040bef8
  402008:	00400919 	.word	0x00400919
  40200c:	00401ee5 	.word	0x00401ee5
  402010:	2040becc 	.word	0x2040becc
  402014:	0040094d 	.word	0x0040094d
  402018:	2040bf00 	.word	0x2040bf00

0040201c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  40201c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402020:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402022:	4c69      	ldr	r4, [pc, #420]	; (4021c8 <prvTimerTask+0x1ac>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402024:	4f69      	ldr	r7, [pc, #420]	; (4021cc <prvTimerTask+0x1b0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402026:	4d6a      	ldr	r5, [pc, #424]	; (4021d0 <prvTimerTask+0x1b4>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402028:	4b6a      	ldr	r3, [pc, #424]	; (4021d4 <prvTimerTask+0x1b8>)
  40202a:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40202c:	681a      	ldr	r2, [r3, #0]
  40202e:	2a00      	cmp	r2, #0
  402030:	f000 80bf 	beq.w	4021b2 <prvTimerTask+0x196>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402034:	68db      	ldr	r3, [r3, #12]
  402036:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402038:	4b67      	ldr	r3, [pc, #412]	; (4021d8 <prvTimerTask+0x1bc>)
  40203a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40203c:	a804      	add	r0, sp, #16
  40203e:	4b67      	ldr	r3, [pc, #412]	; (4021dc <prvTimerTask+0x1c0>)
  402040:	4798      	blx	r3
  402042:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402044:	9b04      	ldr	r3, [sp, #16]
  402046:	2b00      	cmp	r3, #0
  402048:	d14d      	bne.n	4020e6 <prvTimerTask+0xca>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40204a:	42b0      	cmp	r0, r6
  40204c:	d339      	bcc.n	4020c2 <prvTimerTask+0xa6>
			{
				( void ) xTaskResumeAll();
  40204e:	4b64      	ldr	r3, [pc, #400]	; (4021e0 <prvTimerTask+0x1c4>)
  402050:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402052:	4b60      	ldr	r3, [pc, #384]	; (4021d4 <prvTimerTask+0x1b8>)
  402054:	681b      	ldr	r3, [r3, #0]
  402056:	68db      	ldr	r3, [r3, #12]
  402058:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40205c:	f109 0004 	add.w	r0, r9, #4
  402060:	4b60      	ldr	r3, [pc, #384]	; (4021e4 <prvTimerTask+0x1c8>)
  402062:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402064:	f8d9 301c 	ldr.w	r3, [r9, #28]
  402068:	2b01      	cmp	r3, #1
  40206a:	d11d      	bne.n	4020a8 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40206c:	f8d9 1018 	ldr.w	r1, [r9, #24]
  402070:	4648      	mov	r0, r9
  402072:	4431      	add	r1, r6
  402074:	4642      	mov	r2, r8
  402076:	4633      	mov	r3, r6
  402078:	f8df c178 	ldr.w	ip, [pc, #376]	; 4021f4 <prvTimerTask+0x1d8>
  40207c:	47e0      	blx	ip
  40207e:	2801      	cmp	r0, #1
  402080:	d112      	bne.n	4020a8 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402082:	2300      	movs	r3, #0
  402084:	9300      	str	r3, [sp, #0]
  402086:	4648      	mov	r0, r9
  402088:	4619      	mov	r1, r3
  40208a:	4632      	mov	r2, r6
  40208c:	4e56      	ldr	r6, [pc, #344]	; (4021e8 <prvTimerTask+0x1cc>)
  40208e:	47b0      	blx	r6
			configASSERT( xResult );
  402090:	b950      	cbnz	r0, 4020a8 <prvTimerTask+0x8c>
  402092:	f04f 0380 	mov.w	r3, #128	; 0x80
  402096:	b672      	cpsid	i
  402098:	f383 8811 	msr	BASEPRI, r3
  40209c:	f3bf 8f6f 	isb	sy
  4020a0:	f3bf 8f4f 	dsb	sy
  4020a4:	b662      	cpsie	i
  4020a6:	e7fe      	b.n	4020a6 <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4020a8:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  4020ac:	4648      	mov	r0, r9
  4020ae:	4798      	blx	r3
  4020b0:	e077      	b.n	4021a2 <prvTimerTask+0x186>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4020b2:	4b4e      	ldr	r3, [pc, #312]	; (4021ec <prvTimerTask+0x1d0>)
  4020b4:	681b      	ldr	r3, [r3, #0]
  4020b6:	681a      	ldr	r2, [r3, #0]
  4020b8:	fab2 f282 	clz	r2, r2
  4020bc:	0952      	lsrs	r2, r2, #5
  4020be:	2600      	movs	r6, #0
  4020c0:	e000      	b.n	4020c4 <prvTimerTask+0xa8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4020c2:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4020c4:	6820      	ldr	r0, [r4, #0]
  4020c6:	ebc8 0106 	rsb	r1, r8, r6
  4020ca:	4b49      	ldr	r3, [pc, #292]	; (4021f0 <prvTimerTask+0x1d4>)
  4020cc:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  4020ce:	4b44      	ldr	r3, [pc, #272]	; (4021e0 <prvTimerTask+0x1c4>)
  4020d0:	4798      	blx	r3
  4020d2:	2800      	cmp	r0, #0
  4020d4:	d165      	bne.n	4021a2 <prvTimerTask+0x186>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  4020d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4020da:	603b      	str	r3, [r7, #0]
  4020dc:	f3bf 8f4f 	dsb	sy
  4020e0:	f3bf 8f6f 	isb	sy
  4020e4:	e05d      	b.n	4021a2 <prvTimerTask+0x186>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  4020e6:	4b3e      	ldr	r3, [pc, #248]	; (4021e0 <prvTimerTask+0x1c4>)
  4020e8:	4798      	blx	r3
  4020ea:	e05a      	b.n	4021a2 <prvTimerTask+0x186>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4020ec:	9b04      	ldr	r3, [sp, #16]
  4020ee:	2b00      	cmp	r3, #0
  4020f0:	da06      	bge.n	402100 <prvTimerTask+0xe4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4020f2:	9806      	ldr	r0, [sp, #24]
  4020f4:	9907      	ldr	r1, [sp, #28]
  4020f6:	9b05      	ldr	r3, [sp, #20]
  4020f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4020fa:	9b04      	ldr	r3, [sp, #16]
  4020fc:	2b00      	cmp	r3, #0
  4020fe:	db50      	blt.n	4021a2 <prvTimerTask+0x186>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402100:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402102:	6973      	ldr	r3, [r6, #20]
  402104:	b113      	cbz	r3, 40210c <prvTimerTask+0xf0>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402106:	1d30      	adds	r0, r6, #4
  402108:	4b36      	ldr	r3, [pc, #216]	; (4021e4 <prvTimerTask+0x1c8>)
  40210a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40210c:	a803      	add	r0, sp, #12
  40210e:	4b33      	ldr	r3, [pc, #204]	; (4021dc <prvTimerTask+0x1c0>)
  402110:	4798      	blx	r3
  402112:	4686      	mov	lr, r0

			switch( xMessage.xMessageID )
  402114:	9a04      	ldr	r2, [sp, #16]
  402116:	2a09      	cmp	r2, #9
  402118:	d843      	bhi.n	4021a2 <prvTimerTask+0x186>
  40211a:	e8df f002 	tbb	[pc, r2]
  40211e:	0505      	.short	0x0505
  402120:	3f2a4205 	.word	0x3f2a4205
  402124:	2a420505 	.word	0x2a420505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402128:	9b05      	ldr	r3, [sp, #20]
  40212a:	69b1      	ldr	r1, [r6, #24]
  40212c:	4630      	mov	r0, r6
  40212e:	4419      	add	r1, r3
  402130:	4672      	mov	r2, lr
  402132:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 4021f4 <prvTimerTask+0x1d8>
  402136:	47e0      	blx	ip
  402138:	2801      	cmp	r0, #1
  40213a:	d132      	bne.n	4021a2 <prvTimerTask+0x186>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40213c:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40213e:	4630      	mov	r0, r6
  402140:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402142:	69f3      	ldr	r3, [r6, #28]
  402144:	2b01      	cmp	r3, #1
  402146:	d12c      	bne.n	4021a2 <prvTimerTask+0x186>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402148:	69b2      	ldr	r2, [r6, #24]
  40214a:	2300      	movs	r3, #0
  40214c:	9300      	str	r3, [sp, #0]
  40214e:	4630      	mov	r0, r6
  402150:	4619      	mov	r1, r3
  402152:	9e05      	ldr	r6, [sp, #20]
  402154:	4432      	add	r2, r6
  402156:	4e24      	ldr	r6, [pc, #144]	; (4021e8 <prvTimerTask+0x1cc>)
  402158:	47b0      	blx	r6
							configASSERT( xResult );
  40215a:	bb10      	cbnz	r0, 4021a2 <prvTimerTask+0x186>
  40215c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402160:	b672      	cpsid	i
  402162:	f383 8811 	msr	BASEPRI, r3
  402166:	f3bf 8f6f 	isb	sy
  40216a:	f3bf 8f4f 	dsb	sy
  40216e:	b662      	cpsie	i
  402170:	e7fe      	b.n	402170 <prvTimerTask+0x154>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402172:	9905      	ldr	r1, [sp, #20]
  402174:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402176:	b951      	cbnz	r1, 40218e <prvTimerTask+0x172>
  402178:	f04f 0380 	mov.w	r3, #128	; 0x80
  40217c:	b672      	cpsid	i
  40217e:	f383 8811 	msr	BASEPRI, r3
  402182:	f3bf 8f6f 	isb	sy
  402186:	f3bf 8f4f 	dsb	sy
  40218a:	b662      	cpsie	i
  40218c:	e7fe      	b.n	40218c <prvTimerTask+0x170>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40218e:	4630      	mov	r0, r6
  402190:	4471      	add	r1, lr
  402192:	4672      	mov	r2, lr
  402194:	4673      	mov	r3, lr
  402196:	4e17      	ldr	r6, [pc, #92]	; (4021f4 <prvTimerTask+0x1d8>)
  402198:	47b0      	blx	r6
  40219a:	e002      	b.n	4021a2 <prvTimerTask+0x186>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  40219c:	4630      	mov	r0, r6
  40219e:	4b16      	ldr	r3, [pc, #88]	; (4021f8 <prvTimerTask+0x1dc>)
  4021a0:	4798      	blx	r3
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4021a2:	6820      	ldr	r0, [r4, #0]
  4021a4:	a904      	add	r1, sp, #16
  4021a6:	2200      	movs	r2, #0
  4021a8:	4613      	mov	r3, r2
  4021aa:	47a8      	blx	r5
  4021ac:	2800      	cmp	r0, #0
  4021ae:	d19d      	bne.n	4020ec <prvTimerTask+0xd0>
  4021b0:	e73a      	b.n	402028 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  4021b2:	4b09      	ldr	r3, [pc, #36]	; (4021d8 <prvTimerTask+0x1bc>)
  4021b4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4021b6:	a804      	add	r0, sp, #16
  4021b8:	4b08      	ldr	r3, [pc, #32]	; (4021dc <prvTimerTask+0x1c0>)
  4021ba:	4798      	blx	r3
  4021bc:	4680      	mov	r8, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4021be:	9b04      	ldr	r3, [sp, #16]
  4021c0:	2b00      	cmp	r3, #0
  4021c2:	f43f af76 	beq.w	4020b2 <prvTimerTask+0x96>
  4021c6:	e78e      	b.n	4020e6 <prvTimerTask+0xca>
  4021c8:	2040befc 	.word	0x2040befc
  4021cc:	e000ed04 	.word	0xe000ed04
  4021d0:	0040100d 	.word	0x0040100d
  4021d4:	2040becc 	.word	0x2040becc
  4021d8:	00401591 	.word	0x00401591
  4021dc:	00401f61 	.word	0x00401f61
  4021e0:	004016e1 	.word	0x004016e1
  4021e4:	0040094d 	.word	0x0040094d
  4021e8:	00401ee5 	.word	0x00401ee5
  4021ec:	2040bf00 	.word	0x2040bf00
  4021f0:	00401205 	.word	0x00401205
  4021f4:	00401dc1 	.word	0x00401dc1
  4021f8:	004008c5 	.word	0x004008c5

004021fc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4021fc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4021fe:	4810      	ldr	r0, [pc, #64]	; (402240 <sysclk_init+0x44>)
  402200:	4b10      	ldr	r3, [pc, #64]	; (402244 <sysclk_init+0x48>)
  402202:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  402204:	2000      	movs	r0, #0
  402206:	213e      	movs	r1, #62	; 0x3e
  402208:	4b0f      	ldr	r3, [pc, #60]	; (402248 <sysclk_init+0x4c>)
  40220a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40220c:	4c0f      	ldr	r4, [pc, #60]	; (40224c <sysclk_init+0x50>)
  40220e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  402210:	2800      	cmp	r0, #0
  402212:	d0fc      	beq.n	40220e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402214:	4b0e      	ldr	r3, [pc, #56]	; (402250 <sysclk_init+0x54>)
  402216:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402218:	4a0e      	ldr	r2, [pc, #56]	; (402254 <sysclk_init+0x58>)
  40221a:	4b0f      	ldr	r3, [pc, #60]	; (402258 <sysclk_init+0x5c>)
  40221c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40221e:	4c0f      	ldr	r4, [pc, #60]	; (40225c <sysclk_init+0x60>)
  402220:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  402222:	2800      	cmp	r0, #0
  402224:	d0fc      	beq.n	402220 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402226:	2002      	movs	r0, #2
  402228:	4b0d      	ldr	r3, [pc, #52]	; (402260 <sysclk_init+0x64>)
  40222a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40222c:	2000      	movs	r0, #0
  40222e:	4b0d      	ldr	r3, [pc, #52]	; (402264 <sysclk_init+0x68>)
  402230:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  402232:	4b0d      	ldr	r3, [pc, #52]	; (402268 <sysclk_init+0x6c>)
  402234:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402236:	4802      	ldr	r0, [pc, #8]	; (402240 <sysclk_init+0x44>)
  402238:	4b02      	ldr	r3, [pc, #8]	; (402244 <sysclk_init+0x48>)
  40223a:	4798      	blx	r3
  40223c:	bd10      	pop	{r4, pc}
  40223e:	bf00      	nop
  402240:	11e1a300 	.word	0x11e1a300
  402244:	00402c2d 	.word	0x00402c2d
  402248:	00402675 	.word	0x00402675
  40224c:	004026c9 	.word	0x004026c9
  402250:	004026d9 	.word	0x004026d9
  402254:	20183f01 	.word	0x20183f01
  402258:	400e0600 	.word	0x400e0600
  40225c:	004026e9 	.word	0x004026e9
  402260:	004025d5 	.word	0x004025d5
  402264:	0040260d 	.word	0x0040260d
  402268:	00402b19 	.word	0x00402b19

0040226c <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  40226c:	b570      	push	{r4, r5, r6, lr}
  40226e:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  402270:	6b03      	ldr	r3, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  402272:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  402274:	4013      	ands	r3, r2
  402276:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  402278:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  40227a:	4e1a      	ldr	r6, [pc, #104]	; (4022e4 <afec_process_callback+0x78>)
  40227c:	4d1a      	ldr	r5, [pc, #104]	; (4022e8 <afec_process_callback+0x7c>)
  40227e:	42a8      	cmp	r0, r5
  402280:	bf14      	ite	ne
  402282:	2000      	movne	r0, #0
  402284:	2001      	moveq	r0, #1
  402286:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  402288:	2c0b      	cmp	r4, #11
  40228a:	d80a      	bhi.n	4022a2 <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  40228c:	9a01      	ldr	r2, [sp, #4]
  40228e:	2301      	movs	r3, #1
  402290:	40a3      	lsls	r3, r4
  402292:	4213      	tst	r3, r2
  402294:	d020      	beq.n	4022d8 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  402296:	192b      	adds	r3, r5, r4
  402298:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  40229c:	b1e3      	cbz	r3, 4022d8 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  40229e:	4798      	blx	r3
  4022a0:	e01a      	b.n	4022d8 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  4022a2:	2c0e      	cmp	r4, #14
  4022a4:	d80c      	bhi.n	4022c0 <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  4022a6:	9a01      	ldr	r2, [sp, #4]
  4022a8:	f104 010c 	add.w	r1, r4, #12
  4022ac:	2301      	movs	r3, #1
  4022ae:	408b      	lsls	r3, r1
  4022b0:	4213      	tst	r3, r2
  4022b2:	d011      	beq.n	4022d8 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4022b4:	192b      	adds	r3, r5, r4
  4022b6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4022ba:	b16b      	cbz	r3, 4022d8 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4022bc:	4798      	blx	r3
  4022be:	e00b      	b.n	4022d8 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4022c0:	9a01      	ldr	r2, [sp, #4]
  4022c2:	f104 010f 	add.w	r1, r4, #15
  4022c6:	2301      	movs	r3, #1
  4022c8:	408b      	lsls	r3, r1
  4022ca:	4213      	tst	r3, r2
  4022cc:	d004      	beq.n	4022d8 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4022ce:	192b      	adds	r3, r5, r4
  4022d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4022d4:	b103      	cbz	r3, 4022d8 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4022d6:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4022d8:	3401      	adds	r4, #1
  4022da:	2c10      	cmp	r4, #16
  4022dc:	d1d4      	bne.n	402288 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4022de:	b002      	add	sp, #8
  4022e0:	bd70      	pop	{r4, r5, r6, pc}
  4022e2:	bf00      	nop
  4022e4:	2040bf70 	.word	0x2040bf70
  4022e8:	40064000 	.word	0x40064000

004022ec <afec_get_config_defaults>:
void afec_get_config_defaults(struct afec_config *const cfg)
{
	/* Sanity check argument. */
	Assert(cfg);

	cfg->resolution = AFEC_12_BITS;
  4022ec:	2200      	movs	r2, #0
  4022ee:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4022f0:	4b08      	ldr	r3, [pc, #32]	; (402314 <afec_get_config_defaults+0x28>)
  4022f2:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  4022f4:	4b08      	ldr	r3, [pc, #32]	; (402318 <afec_get_config_defaults+0x2c>)
  4022f6:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  4022f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  4022fc:	60c3      	str	r3, [r0, #12]
	#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
		cfg->settling_time = AFEC_SETTLING_TIME_0;
	#endif	
		cfg->tracktim = 2;
  4022fe:	2302      	movs	r3, #2
  402300:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  402302:	2301      	movs	r3, #1
  402304:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  402306:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  402308:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  40230a:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  40230c:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40230e:	7583      	strb	r3, [r0, #22]
  402310:	4770      	bx	lr
  402312:	bf00      	nop
  402314:	11e1a300 	.word	0x11e1a300
  402318:	005b8d80 	.word	0x005b8d80

0040231c <afec_init>:
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40231c:	6b03      	ldr	r3, [r0, #48]	; 0x30
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  40231e:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  402322:	d14d      	bne.n	4023c0 <afec_init+0xa4>
 *
 * \retval STATUS_OK  Initialization is finished.
 * \retval STATUS_ERR_BUSY  Initialization failed.
 */
enum status_code afec_init(Afec *const afec, struct afec_config *config)
{
  402324:	b430      	push	{r4, r5}
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
	}

	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
  402326:	2201      	movs	r2, #1
  402328:	6002      	str	r2, [r0, #0]
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40232a:	7cca      	ldrb	r2, [r1, #19]
  40232c:	2a00      	cmp	r2, #0
  40232e:	bf18      	it	ne
  402330:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
  402334:	68ca      	ldr	r2, [r1, #12]
  402336:	f442 0400 	orr.w	r4, r2, #8388608	; 0x800000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  40233a:	684a      	ldr	r2, [r1, #4]
  40233c:	688d      	ldr	r5, [r1, #8]
  40233e:	fbb2 f2f5 	udiv	r2, r2, r5
  402342:	3a01      	subs	r2, #1
  402344:	0212      	lsls	r2, r2, #8
  402346:	b292      	uxth	r2, r2
  402348:	4322      	orrs	r2, r4
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  40234a:	7c0c      	ldrb	r4, [r1, #16]
  40234c:	0624      	lsls	r4, r4, #24
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
			AFEC_MR_ONE |
  40234e:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
  402352:	4322      	orrs	r2, r4
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
  402354:	7c4c      	ldrb	r4, [r1, #17]
  402356:	0724      	lsls	r4, r4, #28
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  402358:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  40235c:	4322      	orrs	r2, r4
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  40235e:	4313      	orrs	r3, r2
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;
  402360:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  402362:	7d0b      	ldrb	r3, [r1, #20]
  402364:	2b00      	cmp	r3, #0
  402366:	bf14      	ite	ne
  402368:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
  40236c:	2200      	moveq	r2, #0
  40236e:	680b      	ldr	r3, [r1, #0]
  402370:	431a      	orrs	r2, r3
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  402372:	7d4b      	ldrb	r3, [r1, #21]
  402374:	2b00      	cmp	r3, #0
  402376:	bf14      	ite	ne
  402378:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
  40237c:	2300      	moveq	r3, #0
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
			(config->resolution) |
  40237e:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
			(config->startup_time);

	afec->AFEC_MR = reg;

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  402380:	6083      	str	r3, [r0, #8]
			(config->resolution) |
			(config->stm ? AFEC_EMR_STM : 0);
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  402382:	7d8b      	ldrb	r3, [r1, #22]
  402384:	021b      	lsls	r3, r3, #8
  402386:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40238a:	f043 030c 	orr.w	r3, r3, #12
  40238e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
	/* Reset and configure the AFEC module */
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
  402392:	4b12      	ldr	r3, [pc, #72]	; (4023dc <afec_init+0xc0>)
  402394:	4298      	cmp	r0, r3
  402396:	d106      	bne.n	4023a6 <afec_init+0x8a>
  402398:	e017      	b.n	4023ca <afec_init+0xae>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  40239a:	f843 2f04 	str.w	r2, [r3, #4]!
	afec->AFEC_CR = AFEC_CR_SWRST;
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  40239e:	428b      	cmp	r3, r1
  4023a0:	d1fb      	bne.n	40239a <afec_init+0x7e>
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  4023a2:	2000      	movs	r0, #0
  4023a4:	e016      	b.n	4023d4 <afec_init+0xb8>
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
  4023a6:	4b0e      	ldr	r3, [pc, #56]	; (4023e0 <afec_init+0xc4>)
  4023a8:	4298      	cmp	r0, r3
  4023aa:	d10c      	bne.n	4023c6 <afec_init+0xaa>
  4023ac:	4b0d      	ldr	r3, [pc, #52]	; (4023e4 <afec_init+0xc8>)
  4023ae:	f103 0140 	add.w	r1, r3, #64	; 0x40
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
  4023b2:	2200      	movs	r2, #0
  4023b4:	f843 2f04 	str.w	r2, [r3, #4]!
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
		}
	}
	if(afec == AFEC1) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  4023b8:	428b      	cmp	r3, r1
  4023ba:	d1fb      	bne.n	4023b4 <afec_init+0x98>
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  4023bc:	2000      	movs	r0, #0
  4023be:	e009      	b.n	4023d4 <afec_init+0xb8>
{
	Assert(afec);
	Assert(config);

	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
		return STATUS_ERR_BUSY;
  4023c0:	2019      	movs	r0, #25
  4023c2:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  4023c4:	4770      	bx	lr
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
  4023c6:	2000      	movs	r0, #0
  4023c8:	e004      	b.n	4023d4 <afec_init+0xb8>
  4023ca:	4b07      	ldr	r3, [pc, #28]	; (4023e8 <afec_init+0xcc>)
  4023cc:	f103 0140 	add.w	r1, r3, #64	; 0x40
	afec_set_config(afec, config);

	uint32_t i;
	if(afec == AFEC0) {
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
			afec_callback_pointer[0][i] = 0;
  4023d0:	2200      	movs	r2, #0
  4023d2:	e7e2      	b.n	40239a <afec_init+0x7e>
  4023d4:	b240      	sxtb	r0, r0
			afec_callback_pointer[1][i] = 0;
		}
	}

	return STATUS_OK;
}
  4023d6:	bc30      	pop	{r4, r5}
  4023d8:	4770      	bx	lr
  4023da:	bf00      	nop
  4023dc:	4003c000 	.word	0x4003c000
  4023e0:	40064000 	.word	0x40064000
  4023e4:	2040bfac 	.word	0x2040bfac
  4023e8:	2040bf6c 	.word	0x2040bf6c

004023ec <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4023ec:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4023ee:	4802      	ldr	r0, [pc, #8]	; (4023f8 <AFEC0_Handler+0xc>)
  4023f0:	4b02      	ldr	r3, [pc, #8]	; (4023fc <AFEC0_Handler+0x10>)
  4023f2:	4798      	blx	r3
  4023f4:	bd08      	pop	{r3, pc}
  4023f6:	bf00      	nop
  4023f8:	4003c000 	.word	0x4003c000
  4023fc:	0040226d 	.word	0x0040226d

00402400 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  402400:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  402402:	4802      	ldr	r0, [pc, #8]	; (40240c <AFEC1_Handler+0xc>)
  402404:	4b02      	ldr	r3, [pc, #8]	; (402410 <AFEC1_Handler+0x10>)
  402406:	4798      	blx	r3
  402408:	bd08      	pop	{r3, pc}
  40240a:	bf00      	nop
  40240c:	40064000 	.word	0x40064000
  402410:	0040226d 	.word	0x0040226d

00402414 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  402414:	b500      	push	{lr}
  402416:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  402418:	4b13      	ldr	r3, [pc, #76]	; (402468 <afec_enable+0x54>)
  40241a:	4298      	cmp	r0, r3
  40241c:	bf0c      	ite	eq
  40241e:	2028      	moveq	r0, #40	; 0x28
  402420:	201d      	movne	r0, #29
  402422:	4b12      	ldr	r3, [pc, #72]	; (40246c <afec_enable+0x58>)
  402424:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  402426:	4b12      	ldr	r3, [pc, #72]	; (402470 <afec_enable+0x5c>)
  402428:	789b      	ldrb	r3, [r3, #2]
  40242a:	2bff      	cmp	r3, #255	; 0xff
  40242c:	d100      	bne.n	402430 <afec_enable+0x1c>
  40242e:	e7fe      	b.n	40242e <afec_enable+0x1a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  402430:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402434:	fab3 f383 	clz	r3, r3
  402438:	095b      	lsrs	r3, r3, #5
  40243a:	9301      	str	r3, [sp, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40243c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40243e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402442:	2200      	movs	r2, #0
  402444:	4b0b      	ldr	r3, [pc, #44]	; (402474 <afec_enable+0x60>)
  402446:	701a      	strb	r2, [r3, #0]
	return flags;
  402448:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  40244a:	4a09      	ldr	r2, [pc, #36]	; (402470 <afec_enable+0x5c>)
  40244c:	7893      	ldrb	r3, [r2, #2]
  40244e:	3301      	adds	r3, #1
  402450:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  402452:	b129      	cbz	r1, 402460 <afec_enable+0x4c>
		cpu_irq_enable();
  402454:	2201      	movs	r2, #1
  402456:	4b07      	ldr	r3, [pc, #28]	; (402474 <afec_enable+0x60>)
  402458:	701a      	strb	r2, [r3, #0]
  40245a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40245e:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  402460:	b003      	add	sp, #12
  402462:	f85d fb04 	ldr.w	pc, [sp], #4
  402466:	bf00      	nop
  402468:	40064000 	.word	0x40064000
  40246c:	004026f9 	.word	0x004026f9
  402470:	2040bf28 	.word	0x2040bf28
  402474:	20400010 	.word	0x20400010

00402478 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  402478:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40247c:	0052      	lsls	r2, r2, #1
  40247e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  402482:	fbb3 f2f2 	udiv	r2, r3, r2
  402486:	3a01      	subs	r2, #1
  402488:	f3c2 020d 	ubfx	r2, r2, #0, #14
  40248c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  402490:	4770      	bx	lr
  402492:	bf00      	nop

00402494 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  402494:	6301      	str	r1, [r0, #48]	; 0x30
  402496:	4770      	bx	lr

00402498 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402498:	6341      	str	r1, [r0, #52]	; 0x34
  40249a:	4770      	bx	lr

0040249c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40249c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40249e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4024a2:	d02f      	beq.n	402504 <pio_set_peripheral+0x68>
  4024a4:	d807      	bhi.n	4024b6 <pio_set_peripheral+0x1a>
  4024a6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4024aa:	d014      	beq.n	4024d6 <pio_set_peripheral+0x3a>
  4024ac:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4024b0:	d01e      	beq.n	4024f0 <pio_set_peripheral+0x54>
  4024b2:	b939      	cbnz	r1, 4024c4 <pio_set_peripheral+0x28>
  4024b4:	4770      	bx	lr
  4024b6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4024ba:	d037      	beq.n	40252c <pio_set_peripheral+0x90>
  4024bc:	d804      	bhi.n	4024c8 <pio_set_peripheral+0x2c>
  4024be:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4024c2:	d029      	beq.n	402518 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4024c4:	6042      	str	r2, [r0, #4]
  4024c6:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4024c8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4024cc:	d02e      	beq.n	40252c <pio_set_peripheral+0x90>
  4024ce:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4024d2:	d02b      	beq.n	40252c <pio_set_peripheral+0x90>
  4024d4:	e7f6      	b.n	4024c4 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4024d6:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024d8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4024da:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4024dc:	43d3      	mvns	r3, r2
  4024de:	4021      	ands	r1, r4
  4024e0:	4019      	ands	r1, r3
  4024e2:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024e4:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4024e6:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4024e8:	4021      	ands	r1, r4
  4024ea:	400b      	ands	r3, r1
  4024ec:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4024ee:	e01a      	b.n	402526 <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4024f0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4024f2:	4313      	orrs	r3, r2
  4024f4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4024f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4024f8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4024fa:	400b      	ands	r3, r1
  4024fc:	ea23 0302 	bic.w	r3, r3, r2
  402500:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402502:	e7df      	b.n	4024c4 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402504:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402506:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402508:	400b      	ands	r3, r1
  40250a:	ea23 0302 	bic.w	r3, r3, r2
  40250e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402510:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402512:	4313      	orrs	r3, r2
  402514:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402516:	e7d5      	b.n	4024c4 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402518:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40251a:	4313      	orrs	r3, r2
  40251c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40251e:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  402520:	4313      	orrs	r3, r2
  402522:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402524:	e7ce      	b.n	4024c4 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  402526:	6042      	str	r2, [r0, #4]
}
  402528:	f85d 4b04 	ldr.w	r4, [sp], #4
  40252c:	4770      	bx	lr
  40252e:	bf00      	nop

00402530 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  402530:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  402532:	f012 0f01 	tst.w	r2, #1
  402536:	d001      	beq.n	40253c <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  402538:	6641      	str	r1, [r0, #100]	; 0x64
  40253a:	e000      	b.n	40253e <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40253c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40253e:	f012 0f0a 	tst.w	r2, #10
  402542:	d001      	beq.n	402548 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  402544:	6201      	str	r1, [r0, #32]
  402546:	e000      	b.n	40254a <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  402548:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40254a:	f012 0f02 	tst.w	r2, #2
  40254e:	d002      	beq.n	402556 <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  402550:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  402554:	e004      	b.n	402560 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  402556:	f012 0f08 	tst.w	r2, #8
  40255a:	d001      	beq.n	402560 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40255c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  402560:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  402562:	6001      	str	r1, [r0, #0]
  402564:	4770      	bx	lr
  402566:	bf00      	nop

00402568 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  402568:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40256a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40256c:	9c01      	ldr	r4, [sp, #4]
  40256e:	b10c      	cbz	r4, 402574 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  402570:	6641      	str	r1, [r0, #100]	; 0x64
  402572:	e000      	b.n	402576 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  402574:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  402576:	b10b      	cbz	r3, 40257c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402578:	6501      	str	r1, [r0, #80]	; 0x50
  40257a:	e000      	b.n	40257e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  40257c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  40257e:	b10a      	cbz	r2, 402584 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402580:	6301      	str	r1, [r0, #48]	; 0x30
  402582:	e000      	b.n	402586 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  402584:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  402586:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402588:	6001      	str	r1, [r0, #0]
}
  40258a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40258e:	4770      	bx	lr

00402590 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402590:	f012 0f10 	tst.w	r2, #16
  402594:	d012      	beq.n	4025bc <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  402596:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  40259a:	f012 0f20 	tst.w	r2, #32
  40259e:	d002      	beq.n	4025a6 <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4025a0:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  4025a4:	e001      	b.n	4025aa <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4025a6:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4025aa:	f012 0f40 	tst.w	r2, #64	; 0x40
  4025ae:	d002      	beq.n	4025b6 <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4025b0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4025b4:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4025b6:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4025ba:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4025bc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4025c0:	4770      	bx	lr
  4025c2:	bf00      	nop

004025c4 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  4025c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  4025c6:	6401      	str	r1, [r0, #64]	; 0x40
  4025c8:	4770      	bx	lr
  4025ca:	bf00      	nop

004025cc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4025cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4025ce:	4770      	bx	lr

004025d0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4025d0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4025d2:	4770      	bx	lr

004025d4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4025d4:	2803      	cmp	r0, #3
  4025d6:	d007      	beq.n	4025e8 <pmc_mck_set_division+0x14>
  4025d8:	2804      	cmp	r0, #4
  4025da:	d008      	beq.n	4025ee <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4025dc:	2802      	cmp	r0, #2
  4025de:	bf0c      	ite	eq
  4025e0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4025e4:	2100      	movne	r1, #0
  4025e6:	e004      	b.n	4025f2 <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4025e8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4025ec:	e001      	b.n	4025f2 <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4025ee:	f44f 7100 	mov.w	r1, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4025f2:	4a05      	ldr	r2, [pc, #20]	; (402608 <pmc_mck_set_division+0x34>)
  4025f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4025f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4025fa:	430b      	orrs	r3, r1
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  4025fc:	6313      	str	r3, [r2, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4025fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
  402600:	f013 0f08 	tst.w	r3, #8
  402604:	d0fb      	beq.n	4025fe <pmc_mck_set_division+0x2a>
}
  402606:	4770      	bx	lr
  402608:	400e0600 	.word	0x400e0600

0040260c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40260c:	4a18      	ldr	r2, [pc, #96]	; (402670 <pmc_switch_mck_to_pllack+0x64>)
  40260e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  402610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402614:	4318      	orrs	r0, r3
  402616:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402618:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40261a:	f013 0f08 	tst.w	r3, #8
  40261e:	d003      	beq.n	402628 <pmc_switch_mck_to_pllack+0x1c>
  402620:	e009      	b.n	402636 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402622:	3b01      	subs	r3, #1
  402624:	d103      	bne.n	40262e <pmc_switch_mck_to_pllack+0x22>
  402626:	e01e      	b.n	402666 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402628:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40262c:	4910      	ldr	r1, [pc, #64]	; (402670 <pmc_switch_mck_to_pllack+0x64>)
  40262e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  402630:	f012 0f08 	tst.w	r2, #8
  402634:	d0f5      	beq.n	402622 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  402636:	4a0e      	ldr	r2, [pc, #56]	; (402670 <pmc_switch_mck_to_pllack+0x64>)
  402638:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40263a:	f023 0303 	bic.w	r3, r3, #3
  40263e:	f043 0302 	orr.w	r3, r3, #2
  402642:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402644:	6e90      	ldr	r0, [r2, #104]	; 0x68
  402646:	f010 0008 	ands.w	r0, r0, #8
  40264a:	d004      	beq.n	402656 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  40264c:	2000      	movs	r0, #0
  40264e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  402650:	3b01      	subs	r3, #1
  402652:	d103      	bne.n	40265c <pmc_switch_mck_to_pllack+0x50>
  402654:	e009      	b.n	40266a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402656:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40265a:	4905      	ldr	r1, [pc, #20]	; (402670 <pmc_switch_mck_to_pllack+0x64>)
  40265c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40265e:	f012 0f08 	tst.w	r2, #8
  402662:	d0f5      	beq.n	402650 <pmc_switch_mck_to_pllack+0x44>
  402664:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  402666:	2001      	movs	r0, #1
  402668:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40266a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40266c:	4770      	bx	lr
  40266e:	bf00      	nop
  402670:	400e0600 	.word	0x400e0600

00402674 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402674:	b138      	cbz	r0, 402686 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402676:	490e      	ldr	r1, [pc, #56]	; (4026b0 <pmc_switch_mainck_to_xtal+0x3c>)
  402678:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40267a:	4a0e      	ldr	r2, [pc, #56]	; (4026b4 <pmc_switch_mainck_to_xtal+0x40>)
  40267c:	401a      	ands	r2, r3
  40267e:	4b0e      	ldr	r3, [pc, #56]	; (4026b8 <pmc_switch_mainck_to_xtal+0x44>)
  402680:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402682:	620b      	str	r3, [r1, #32]
  402684:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402686:	480a      	ldr	r0, [pc, #40]	; (4026b0 <pmc_switch_mainck_to_xtal+0x3c>)
  402688:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40268a:	4a0c      	ldr	r2, [pc, #48]	; (4026bc <pmc_switch_mainck_to_xtal+0x48>)
  40268c:	401a      	ands	r2, r3
  40268e:	4b0c      	ldr	r3, [pc, #48]	; (4026c0 <pmc_switch_mainck_to_xtal+0x4c>)
  402690:	4313      	orrs	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402692:	0209      	lsls	r1, r1, #8
  402694:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402696:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402698:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40269a:	4602      	mov	r2, r0
  40269c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40269e:	f013 0f01 	tst.w	r3, #1
  4026a2:	d0fb      	beq.n	40269c <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4026a4:	4a02      	ldr	r2, [pc, #8]	; (4026b0 <pmc_switch_mainck_to_xtal+0x3c>)
  4026a6:	6a11      	ldr	r1, [r2, #32]
  4026a8:	4b06      	ldr	r3, [pc, #24]	; (4026c4 <pmc_switch_mainck_to_xtal+0x50>)
  4026aa:	430b      	orrs	r3, r1
  4026ac:	6213      	str	r3, [r2, #32]
  4026ae:	4770      	bx	lr
  4026b0:	400e0600 	.word	0x400e0600
  4026b4:	fec8fffc 	.word	0xfec8fffc
  4026b8:	01370002 	.word	0x01370002
  4026bc:	ffc8fffc 	.word	0xffc8fffc
  4026c0:	00370001 	.word	0x00370001
  4026c4:	01370000 	.word	0x01370000

004026c8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4026c8:	4b02      	ldr	r3, [pc, #8]	; (4026d4 <pmc_osc_is_ready_mainck+0xc>)
  4026ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4026cc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4026d0:	4770      	bx	lr
  4026d2:	bf00      	nop
  4026d4:	400e0600 	.word	0x400e0600

004026d8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4026d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4026dc:	4b01      	ldr	r3, [pc, #4]	; (4026e4 <pmc_disable_pllack+0xc>)
  4026de:	629a      	str	r2, [r3, #40]	; 0x28
  4026e0:	4770      	bx	lr
  4026e2:	bf00      	nop
  4026e4:	400e0600 	.word	0x400e0600

004026e8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4026e8:	4b02      	ldr	r3, [pc, #8]	; (4026f4 <pmc_is_locked_pllack+0xc>)
  4026ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4026ec:	f000 0002 	and.w	r0, r0, #2
  4026f0:	4770      	bx	lr
  4026f2:	bf00      	nop
  4026f4:	400e0600 	.word	0x400e0600

004026f8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4026f8:	283f      	cmp	r0, #63	; 0x3f
  4026fa:	d81e      	bhi.n	40273a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4026fc:	281f      	cmp	r0, #31
  4026fe:	d80c      	bhi.n	40271a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402700:	4b11      	ldr	r3, [pc, #68]	; (402748 <pmc_enable_periph_clk+0x50>)
  402702:	699a      	ldr	r2, [r3, #24]
  402704:	2301      	movs	r3, #1
  402706:	4083      	lsls	r3, r0
  402708:	401a      	ands	r2, r3
  40270a:	4293      	cmp	r3, r2
  40270c:	d017      	beq.n	40273e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40270e:	2301      	movs	r3, #1
  402710:	4083      	lsls	r3, r0
  402712:	4a0d      	ldr	r2, [pc, #52]	; (402748 <pmc_enable_periph_clk+0x50>)
  402714:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  402716:	2000      	movs	r0, #0
  402718:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40271a:	4b0b      	ldr	r3, [pc, #44]	; (402748 <pmc_enable_periph_clk+0x50>)
  40271c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402720:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402722:	2301      	movs	r3, #1
  402724:	4083      	lsls	r3, r0
  402726:	401a      	ands	r2, r3
  402728:	4293      	cmp	r3, r2
  40272a:	d00a      	beq.n	402742 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40272c:	2301      	movs	r3, #1
  40272e:	4083      	lsls	r3, r0
  402730:	4a05      	ldr	r2, [pc, #20]	; (402748 <pmc_enable_periph_clk+0x50>)
  402732:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402736:	2000      	movs	r0, #0
  402738:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  40273a:	2001      	movs	r0, #1
  40273c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40273e:	2000      	movs	r0, #0
  402740:	4770      	bx	lr
  402742:	2000      	movs	r0, #0
}
  402744:	4770      	bx	lr
  402746:	bf00      	nop
  402748:	400e0600 	.word	0x400e0600

0040274c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  40274c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  40274e:	23ac      	movs	r3, #172	; 0xac
  402750:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  402752:	680b      	ldr	r3, [r1, #0]
  402754:	684a      	ldr	r2, [r1, #4]
  402756:	fbb3 f3f2 	udiv	r3, r3, r2
  40275a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  40275c:	1e5c      	subs	r4, r3, #1
  40275e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  402762:	4294      	cmp	r4, r2
  402764:	d806      	bhi.n	402774 <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  402766:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  402768:	688b      	ldr	r3, [r1, #8]
  40276a:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40276c:	2350      	movs	r3, #80	; 0x50
  40276e:	6003      	str	r3, [r0, #0]

	return 0;
  402770:	2000      	movs	r0, #0
  402772:	e000      	b.n	402776 <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402774:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402776:	f85d 4b04 	ldr.w	r4, [sp], #4
  40277a:	4770      	bx	lr

0040277c <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  40277c:	2340      	movs	r3, #64	; 0x40
  40277e:	6003      	str	r3, [r0, #0]
  402780:	4770      	bx	lr
  402782:	bf00      	nop

00402784 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402784:	2310      	movs	r3, #16
  402786:	6003      	str	r3, [r0, #0]
  402788:	4770      	bx	lr
  40278a:	bf00      	nop

0040278c <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  40278c:	2350      	movs	r3, #80	; 0x50
  40278e:	6003      	str	r3, [r0, #0]
  402790:	4770      	bx	lr
  402792:	bf00      	nop

00402794 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402794:	6081      	str	r1, [r0, #8]
  402796:	4770      	bx	lr

00402798 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  402798:	6940      	ldr	r0, [r0, #20]
}
  40279a:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40279e:	4770      	bx	lr

004027a0 <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  4027a0:	6201      	str	r1, [r0, #32]
  4027a2:	4770      	bx	lr

004027a4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4027a4:	6943      	ldr	r3, [r0, #20]
  4027a6:	f013 0f02 	tst.w	r3, #2
  4027aa:	d002      	beq.n	4027b2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4027ac:	61c1      	str	r1, [r0, #28]
	return 0;
  4027ae:	2000      	movs	r0, #0
  4027b0:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  4027b2:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  4027b4:	4770      	bx	lr
  4027b6:	bf00      	nop

004027b8 <board_init>:
#define PIOD_SPI					PIO_PD20|PIO_PD21|PIO_PD22
#define PIOB_SPI					PIO_PB2


void board_init(void)
{
  4027b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4027bc:	b08f      	sub	sp, #60	; 0x3c
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  4027be:	4878      	ldr	r0, [pc, #480]	; (4029a0 <board_init+0x1e8>)
  4027c0:	2100      	movs	r1, #0
  4027c2:	4b78      	ldr	r3, [pc, #480]	; (4029a4 <board_init+0x1ec>)
  4027c4:	4798      	blx	r3
	sysclk_init();
  4027c6:	4b78      	ldr	r3, [pc, #480]	; (4029a8 <board_init+0x1f0>)
  4027c8:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  4027ca:	4b78      	ldr	r3, [pc, #480]	; (4029ac <board_init+0x1f4>)
  4027cc:	ac0b      	add	r4, sp, #44	; 0x2c
  4027ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  4027d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4027d6:	2008      	movs	r0, #8
  4027d8:	4e75      	ldr	r6, [pc, #468]	; (4029b0 <board_init+0x1f8>)
  4027da:	47b0      	blx	r6
		UART_SERIAL_PARITY,
		UART_SERIAL_STOP_BIT,
		UART_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(ID_UART1);
	pmc_enable_periph_clk(ID_UART1);
  4027dc:	2008      	movs	r0, #8
  4027de:	47b0      	blx	r6
	uart_init(UART1, &usart_console_settings);
  4027e0:	4874      	ldr	r0, [pc, #464]	; (4029b4 <board_init+0x1fc>)
  4027e2:	4621      	mov	r1, r4
  4027e4:	4b74      	ldr	r3, [pc, #464]	; (4029b8 <board_init+0x200>)
  4027e6:	4798      	blx	r3
	uart_enable(UART1);
  4027e8:	4872      	ldr	r0, [pc, #456]	; (4029b4 <board_init+0x1fc>)
  4027ea:	4b74      	ldr	r3, [pc, #464]	; (4029bc <board_init+0x204>)
  4027ec:	4798      	blx	r3
	uart_enable_tx(UART1);
  4027ee:	4871      	ldr	r0, [pc, #452]	; (4029b4 <board_init+0x1fc>)
  4027f0:	4b73      	ldr	r3, [pc, #460]	; (4029c0 <board_init+0x208>)
  4027f2:	4798      	blx	r3
	uart_enable_rx(UART1);
  4027f4:	486f      	ldr	r0, [pc, #444]	; (4029b4 <board_init+0x1fc>)
  4027f6:	4b73      	ldr	r3, [pc, #460]	; (4029c4 <board_init+0x20c>)
  4027f8:	4798      	blx	r3
	uart_set_clock_divisor(UART1,(83/1)); //Pippin had GLOBAL_SLOWDOWN IT WAS VALUED 1
  4027fa:	486e      	ldr	r0, [pc, #440]	; (4029b4 <board_init+0x1fc>)
  4027fc:	2153      	movs	r1, #83	; 0x53
  4027fe:	4b72      	ldr	r3, [pc, #456]	; (4029c8 <board_init+0x210>)
  402800:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  402802:	200a      	movs	r0, #10
  402804:	47b0      	blx	r6
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,1<<4 | 1<<5);
  402806:	4871      	ldr	r0, [pc, #452]	; (4029cc <board_init+0x214>)
  402808:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40280c:	2230      	movs	r2, #48	; 0x30
  40280e:	f8df b250 	ldr.w	fp, [pc, #592]	; 402a60 <board_init+0x2a8>
  402812:	47d8      	blx	fp
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 115200\nBits: 8\nNo stop bits \n");
  402814:	486e      	ldr	r0, [pc, #440]	; (4029d0 <board_init+0x218>)
  402816:	4d6f      	ldr	r5, [pc, #444]	; (4029d4 <board_init+0x21c>)
  402818:	47a8      	blx	r5
	   ######################################
	   ###################################### */
	//sendDebugString("LED INITIALIZATION - STARTED\n");
		//pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
		//pmc_enable_periph_clk(ID_PIOA);
		pmc_enable_periph_clk(ID_PIOD);
  40281a:	2010      	movs	r0, #16
  40281c:	47b0      	blx	r6
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  40281e:	2400      	movs	r4, #0
  402820:	9400      	str	r4, [sp, #0]
  402822:	486d      	ldr	r0, [pc, #436]	; (4029d8 <board_init+0x220>)
  402824:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402828:	4622      	mov	r2, r4
  40282a:	4623      	mov	r3, r4
  40282c:	f8df a234 	ldr.w	sl, [pc, #564]	; 402a64 <board_init+0x2ac>
  402830:	47d0      	blx	sl
		pio_set_output(LED2,LOW,DISABLE,DISABLE);
  402832:	9400      	str	r4, [sp, #0]
  402834:	4868      	ldr	r0, [pc, #416]	; (4029d8 <board_init+0x220>)
  402836:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40283a:	4622      	mov	r2, r4
  40283c:	4623      	mov	r3, r4
  40283e:	47d0      	blx	sl
			}afec_ch_cfg;
		
		afec_ch_cfg.diff = false;
		afec_ch_cfg.gain = AFEC_GAINVALUE_0;
		
		pmc_enable_periph_clk(AFEC0);
  402840:	f8df 8224 	ldr.w	r8, [pc, #548]	; 402a68 <board_init+0x2b0>
  402844:	4640      	mov	r0, r8
  402846:	47b0      	blx	r6
		
		//afec_disable(AFEC0);
		afec_get_config_defaults(&afec_cfg);
  402848:	a804      	add	r0, sp, #16
  40284a:	4b64      	ldr	r3, [pc, #400]	; (4029dc <board_init+0x224>)
  40284c:	4798      	blx	r3
		afec_init(AFEC0, &afec_cfg);
  40284e:	4640      	mov	r0, r8
  402850:	a904      	add	r1, sp, #16
  402852:	4b63      	ldr	r3, [pc, #396]	; (4029e0 <board_init+0x228>)
  402854:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  402856:	f8c8 4064 	str.w	r4, [r8, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  40285a:	f240 13ff 	movw	r3, #511	; 0x1ff
  40285e:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  402862:	2701      	movs	r7, #1
  402864:	f8c8 7064 	str.w	r7, [r8, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  402868:	f8c8 306c 	str.w	r3, [r8, #108]	; 0x6c
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  40286c:	f8c8 7014 	str.w	r7, [r8, #20]
  402870:	2302      	movs	r3, #2
  402872:	f8c8 3014 	str.w	r3, [r8, #20]
		
		afec_channel_enable(AFEC0, AFEC_CHANNEL_0);
		afec_channel_enable(AFEC0, AFEC_CHANNEL_1);
		
		//afec_ch_set_config(AFEC0,AFEC_CHANNEL_0,&afec_ch_cfg);
		afec_enable(AFEC0);
  402876:	4640      	mov	r0, r8
  402878:	4b5a      	ldr	r3, [pc, #360]	; (4029e4 <board_init+0x22c>)
  40287a:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable SPI
	   ######################################
	   ###################################### */
		sendDebugString("SPI INITIALIZATION - STARTED\n");
  40287c:	485a      	ldr	r0, [pc, #360]	; (4029e8 <board_init+0x230>)
  40287e:	47a8      	blx	r5
  402880:	2015      	movs	r0, #21
  402882:	47b0      	blx	r6
		sysclk_enable_peripheral_clock(ID_SPI0);
		pmc_enable_periph_clk(ID_PIOD);
  402884:	2010      	movs	r0, #16
  402886:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOB);
  402888:	200b      	movs	r0, #11
  40288a:	47b0      	blx	r6
		
		struct spi_device spidevice;
		spidevice.id = 0;
  40288c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
  402890:	f848 4d2c 	str.w	r4, [r8, #-44]!
		
		
		//Set up SPI
		spi_master_init(SPI0);
  402894:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 402a6c <board_init+0x2b4>
  402898:	4648      	mov	r0, r9
  40289a:	4b54      	ldr	r3, [pc, #336]	; (4029ec <board_init+0x234>)
  40289c:	4798      	blx	r3
		spi_master_setup_device(SPI0,&spidevice,SPI_MODE_0,16000000,0); //was 16000000
  40289e:	9400      	str	r4, [sp, #0]
  4028a0:	4648      	mov	r0, r9
  4028a2:	4641      	mov	r1, r8
  4028a4:	4622      	mov	r2, r4
  4028a6:	4b52      	ldr	r3, [pc, #328]	; (4029f0 <board_init+0x238>)
  4028a8:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 402a70 <board_init+0x2b8>
  4028ac:	47e0      	blx	ip
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4028ae:	f8c9 7000 	str.w	r7, [r9]
		spi_enable(SPI0);
		spi_select_device(SPI0,&spidevice);
  4028b2:	4648      	mov	r0, r9
  4028b4:	4641      	mov	r1, r8
  4028b6:	4b4f      	ldr	r3, [pc, #316]	; (4029f4 <board_init+0x23c>)
  4028b8:	4798      	blx	r3
		spi_disable_loopback(SPI0);
		spi_set_peripheral_chip_select_value(SPI0,spi_get_pcs(DEFAULT_CHIP_ID))*/
		
		
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_B,PIOD_SPI);
  4028ba:	4847      	ldr	r0, [pc, #284]	; (4029d8 <board_init+0x220>)
  4028bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4028c0:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
  4028c4:	47d8      	blx	fp
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,PIOB_SPI);
  4028c6:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 402a74 <board_init+0x2bc>
  4028ca:	4640      	mov	r0, r8
  4028cc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4028d0:	2204      	movs	r2, #4
  4028d2:	47d8      	blx	fp
		sendDebugString("SPI INITIALIZATION - FINISHED\n");
  4028d4:	4848      	ldr	r0, [pc, #288]	; (4029f8 <board_init+0x240>)
  4028d6:	47a8      	blx	r5
		sendDebugString("DWM1000 INITIALIZATION - STARTED\n");
  4028d8:	4848      	ldr	r0, [pc, #288]	; (4029fc <board_init+0x244>)
  4028da:	47a8      	blx	r5
		pio_set_output(PIOB_DWM_RESET,LOW,DISABLE,DISABLE);
  4028dc:	9400      	str	r4, [sp, #0]
  4028de:	4640      	mov	r0, r8
  4028e0:	4639      	mov	r1, r7
  4028e2:	4622      	mov	r2, r4
  4028e4:	4623      	mov	r3, r4
  4028e6:	47d0      	blx	sl
		pio_set(PIOB_DWM_RESET);
  4028e8:	4640      	mov	r0, r8
  4028ea:	4639      	mov	r1, r7
  4028ec:	4b44      	ldr	r3, [pc, #272]	; (402a00 <board_init+0x248>)
  4028ee:	4798      	blx	r3
		pio_clear(PIOB_DWM_RESET);
  4028f0:	4640      	mov	r0, r8
  4028f2:	4639      	mov	r1, r7
  4028f4:	4b43      	ldr	r3, [pc, #268]	; (402a04 <board_init+0x24c>)
  4028f6:	4798      	blx	r3
		
		delay_ms(10);
  4028f8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 402a78 <board_init+0x2c0>
  4028fc:	4640      	mov	r0, r8
  4028fe:	4c42      	ldr	r4, [pc, #264]	; (402a08 <board_init+0x250>)
  402900:	47a0      	blx	r4
		//DW1000_initialise();
		DW1000_initialise();
  402902:	4b42      	ldr	r3, [pc, #264]	; (402a0c <board_init+0x254>)
  402904:	4798      	blx	r3
		delay_ms(10);
  402906:	4640      	mov	r0, r8
  402908:	47a0      	blx	r4
		DW1000_toggleGPIO_MODE();
  40290a:	4b41      	ldr	r3, [pc, #260]	; (402a10 <board_init+0x258>)
  40290c:	4798      	blx	r3
		
		
		
		sendDebugString("DWM1000 INITIALIZATION - FINISHED\n");
  40290e:	4841      	ldr	r0, [pc, #260]	; (402a14 <board_init+0x25c>)
  402910:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  402912:	4841      	ldr	r0, [pc, #260]	; (402a18 <board_init+0x260>)
  402914:	47a8      	blx	r5
		wdt_disable(WDT);
  402916:	4841      	ldr	r0, [pc, #260]	; (402a1c <board_init+0x264>)
  402918:	4b41      	ldr	r3, [pc, #260]	; (402a20 <board_init+0x268>)
  40291a:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  40291c:	4841      	ldr	r0, [pc, #260]	; (402a24 <board_init+0x26c>)
  40291e:	47a8      	blx	r5
		/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  402920:	4841      	ldr	r0, [pc, #260]	; (402a28 <board_init+0x270>)
  402922:	47a8      	blx	r5
		cpu_irq_enable();
  402924:	4b41      	ldr	r3, [pc, #260]	; (402a2c <board_init+0x274>)
  402926:	701f      	strb	r7, [r3, #0]
  402928:	f3bf 8f5f 	dmb	sy
  40292c:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  40292e:	4840      	ldr	r0, [pc, #256]	; (402a30 <board_init+0x278>)
  402930:	47a8      	blx	r5
	/* ######################################
	   ######################################
                  Setup Switches
	   ######################################
	   ###################################### */
		pmc_enable_periph_clk(ID_PIOA);
  402932:	200a      	movs	r0, #10
  402934:	47b0      	blx	r6
		pio_set_input(PIOA,PIOA_BUTTSANDDIR,PIO_PULLUP|PIO_DEBOUNCE);
  402936:	4e3f      	ldr	r6, [pc, #252]	; (402a34 <board_init+0x27c>)
  402938:	4824      	ldr	r0, [pc, #144]	; (4029cc <board_init+0x214>)
  40293a:	4631      	mov	r1, r6
  40293c:	2209      	movs	r2, #9
  40293e:	4b3e      	ldr	r3, [pc, #248]	; (402a38 <board_init+0x280>)
  402940:	4798      	blx	r3
		pio_set_debounce_filter(PIOA,PIOA_BUTTSANDDIR,100);
  402942:	4822      	ldr	r0, [pc, #136]	; (4029cc <board_init+0x214>)
  402944:	4631      	mov	r1, r6
  402946:	2264      	movs	r2, #100	; 0x64
  402948:	4b3c      	ldr	r3, [pc, #240]	; (402a3c <board_init+0x284>)
  40294a:	4798      	blx	r3
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIPHERAL IRQ INITIALIZATION - STARTED\n");
  40294c:	483c      	ldr	r0, [pc, #240]	; (402a40 <board_init+0x288>)
  40294e:	47a8      	blx	r5
		//NVIC_ClearPendingIRQ(ISI_IRQn);
		//NVIC_SetPriority(ISI_IRQn,7);
		//NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART1,UART_IER_RXRDY);
  402950:	4818      	ldr	r0, [pc, #96]	; (4029b4 <board_init+0x1fc>)
  402952:	4639      	mov	r1, r7
  402954:	4b3b      	ldr	r3, [pc, #236]	; (402a44 <board_init+0x28c>)
  402956:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402958:	4c3b      	ldr	r4, [pc, #236]	; (402a48 <board_init+0x290>)
  40295a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40295e:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402962:	27c0      	movs	r7, #192	; 0xc0
  402964:	f884 7308 	strb.w	r7, [r4, #776]	; 0x308
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402968:	6023      	str	r3, [r4, #0]
		NVIC_ClearPendingIRQ(UART1_IRQn);
		NVIC_SetPriority(UART1_IRQn,6);
		NVIC_EnableIRQ(UART1_IRQn);
		sendDebugString("PERIPHERAL IRQ INITIALIZATION - FINISHED\n");
  40296a:	4838      	ldr	r0, [pc, #224]	; (402a4c <board_init+0x294>)
  40296c:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40296e:	f44f 6580 	mov.w	r5, #1024	; 0x400
  402972:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402976:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40297a:	f884 730a 	strb.w	r7, [r4, #778]	; 0x30a

		NVIC_DisableIRQ(PIOA_IRQn);
		NVIC_ClearPendingIRQ(PIOA_IRQn);
		NVIC_SetPriority(PIOA_IRQn, 6);
		pio_enable_interrupt(PIOA,PIOA_BUTTSANDDIR);
  40297e:	4813      	ldr	r0, [pc, #76]	; (4029cc <board_init+0x214>)
  402980:	4631      	mov	r1, r6
  402982:	4b33      	ldr	r3, [pc, #204]	; (402a50 <board_init+0x298>)
  402984:	4798      	blx	r3
		pio_configure_interrupt(PIOA,PIOA_BUTTONS, PIO_IT_FALL_EDGE);
  402986:	4811      	ldr	r0, [pc, #68]	; (4029cc <board_init+0x214>)
  402988:	4932      	ldr	r1, [pc, #200]	; (402a54 <board_init+0x29c>)
  40298a:	2250      	movs	r2, #80	; 0x50
  40298c:	4e32      	ldr	r6, [pc, #200]	; (402a58 <board_init+0x2a0>)
  40298e:	47b0      	blx	r6
		pio_configure_interrupt(PIOA,PIOA_DIRECTIONS, PIO_IT_EDGE);
  402990:	480e      	ldr	r0, [pc, #56]	; (4029cc <board_init+0x214>)
  402992:	4932      	ldr	r1, [pc, #200]	; (402a5c <board_init+0x2a4>)
  402994:	2240      	movs	r2, #64	; 0x40
  402996:	47b0      	blx	r6
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402998:	6025      	str	r5, [r4, #0]
		NVIC_EnableIRQ(PIOA_IRQn);
		
		 
}
  40299a:	b00f      	add	sp, #60	; 0x3c
  40299c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4029a0:	400e1810 	.word	0x400e1810
  4029a4:	00400519 	.word	0x00400519
  4029a8:	004021fd 	.word	0x004021fd
  4029ac:	004064a8 	.word	0x004064a8
  4029b0:	004026f9 	.word	0x004026f9
  4029b4:	400e0a00 	.word	0x400e0a00
  4029b8:	0040274d 	.word	0x0040274d
  4029bc:	0040278d 	.word	0x0040278d
  4029c0:	0040277d 	.word	0x0040277d
  4029c4:	00402785 	.word	0x00402785
  4029c8:	004027a1 	.word	0x004027a1
  4029cc:	400e0e00 	.word	0x400e0e00
  4029d0:	004064b4 	.word	0x004064b4
  4029d4:	00402ca9 	.word	0x00402ca9
  4029d8:	400e1400 	.word	0x400e1400
  4029dc:	004022ed 	.word	0x004022ed
  4029e0:	0040231d 	.word	0x0040231d
  4029e4:	00402415 	.word	0x00402415
  4029e8:	00406518 	.word	0x00406518
  4029ec:	0040019d 	.word	0x0040019d
  4029f0:	00f42400 	.word	0x00f42400
  4029f4:	0040026d 	.word	0x0040026d
  4029f8:	00406538 	.word	0x00406538
  4029fc:	00406558 	.word	0x00406558
  402a00:	00402495 	.word	0x00402495
  402a04:	00402499 	.word	0x00402499
  402a08:	20400001 	.word	0x20400001
  402a0c:	00402ea9 	.word	0x00402ea9
  402a10:	004030c5 	.word	0x004030c5
  402a14:	0040657c 	.word	0x0040657c
  402a18:	004065a0 	.word	0x004065a0
  402a1c:	400e1850 	.word	0x400e1850
  402a20:	00400545 	.word	0x00400545
  402a24:	004065c4 	.word	0x004065c4
  402a28:	004065e8 	.word	0x004065e8
  402a2c:	20400010 	.word	0x20400010
  402a30:	00406610 	.word	0x00406610
  402a34:	01dff800 	.word	0x01dff800
  402a38:	00402531 	.word	0x00402531
  402a3c:	00402479 	.word	0x00402479
  402a40:	00406638 	.word	0x00406638
  402a44:	00402795 	.word	0x00402795
  402a48:	e000e100 	.word	0xe000e100
  402a4c:	00406664 	.word	0x00406664
  402a50:	004025c5 	.word	0x004025c5
  402a54:	01043800 	.word	0x01043800
  402a58:	00402591 	.word	0x00402591
  402a5c:	00dbc000 	.word	0x00dbc000
  402a60:	0040249d 	.word	0x0040249d
  402a64:	00402569 	.word	0x00402569
  402a68:	4003c000 	.word	0x4003c000
  402a6c:	40008000 	.word	0x40008000
  402a70:	004001f1 	.word	0x004001f1
  402a74:	400e1000 	.word	0x400e1000
  402a78:	0007b784 	.word	0x0007b784

00402a7c <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
  402a7c:	e7fe      	b.n	402a7c <Dummy_Handler>
  402a7e:	bf00      	nop

00402a80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402a80:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  402a82:	4b19      	ldr	r3, [pc, #100]	; (402ae8 <Reset_Handler+0x68>)
  402a84:	4a19      	ldr	r2, [pc, #100]	; (402aec <Reset_Handler+0x6c>)
  402a86:	429a      	cmp	r2, r3
  402a88:	d003      	beq.n	402a92 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  402a8a:	4b19      	ldr	r3, [pc, #100]	; (402af0 <Reset_Handler+0x70>)
  402a8c:	4a16      	ldr	r2, [pc, #88]	; (402ae8 <Reset_Handler+0x68>)
  402a8e:	429a      	cmp	r2, r3
  402a90:	d304      	bcc.n	402a9c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402a92:	4b18      	ldr	r3, [pc, #96]	; (402af4 <Reset_Handler+0x74>)
  402a94:	4a18      	ldr	r2, [pc, #96]	; (402af8 <Reset_Handler+0x78>)
  402a96:	429a      	cmp	r2, r3
  402a98:	d310      	bcc.n	402abc <Reset_Handler+0x3c>
  402a9a:	e01b      	b.n	402ad4 <Reset_Handler+0x54>
  402a9c:	4912      	ldr	r1, [pc, #72]	; (402ae8 <Reset_Handler+0x68>)
  402a9e:	1d0a      	adds	r2, r1, #4
  402aa0:	4b16      	ldr	r3, [pc, #88]	; (402afc <Reset_Handler+0x7c>)
  402aa2:	1a9b      	subs	r3, r3, r2
  402aa4:	f023 0303 	bic.w	r3, r3, #3
  402aa8:	3304      	adds	r3, #4
  402aaa:	4a10      	ldr	r2, [pc, #64]	; (402aec <Reset_Handler+0x6c>)
  402aac:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  402aae:	f852 0b04 	ldr.w	r0, [r2], #4
  402ab2:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  402ab6:	429a      	cmp	r2, r3
  402ab8:	d1f9      	bne.n	402aae <Reset_Handler+0x2e>
  402aba:	e7ea      	b.n	402a92 <Reset_Handler+0x12>
  402abc:	4b10      	ldr	r3, [pc, #64]	; (402b00 <Reset_Handler+0x80>)
  402abe:	4a11      	ldr	r2, [pc, #68]	; (402b04 <Reset_Handler+0x84>)
  402ac0:	1ad2      	subs	r2, r2, r3
  402ac2:	f022 0203 	bic.w	r2, r2, #3
  402ac6:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402ac8:	3b04      	subs	r3, #4
                *pDest++ = 0;
  402aca:	2100      	movs	r1, #0
  402acc:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402ad0:	4293      	cmp	r3, r2
  402ad2:	d1fb      	bne.n	402acc <Reset_Handler+0x4c>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  402ad4:	4a0c      	ldr	r2, [pc, #48]	; (402b08 <Reset_Handler+0x88>)
  402ad6:	4b0d      	ldr	r3, [pc, #52]	; (402b0c <Reset_Handler+0x8c>)
  402ad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402adc:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  402ade:	4b0c      	ldr	r3, [pc, #48]	; (402b10 <Reset_Handler+0x90>)
  402ae0:	4798      	blx	r3

        /* Branch to main function */
        main();
  402ae2:	4b0c      	ldr	r3, [pc, #48]	; (402b14 <Reset_Handler+0x94>)
  402ae4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  402ae6:	e7fe      	b.n	402ae6 <Reset_Handler+0x66>
  402ae8:	20400000 	.word	0x20400000
  402aec:	0040696c 	.word	0x0040696c
  402af0:	2040044c 	.word	0x2040044c
  402af4:	2040c01c 	.word	0x2040c01c
  402af8:	2040044c 	.word	0x2040044c
  402afc:	2040044f 	.word	0x2040044f
  402b00:	20400450 	.word	0x20400450
  402b04:	2040c01f 	.word	0x2040c01f
  402b08:	e000ed00 	.word	0xe000ed00
  402b0c:	00400000 	.word	0x00400000
  402b10:	0040610d 	.word	0x0040610d
  402b14:	0040340d 	.word	0x0040340d

00402b18 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402b18:	4b3d      	ldr	r3, [pc, #244]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b1c:	f003 0303 	and.w	r3, r3, #3
  402b20:	2b01      	cmp	r3, #1
  402b22:	d012      	beq.n	402b4a <SystemCoreClockUpdate+0x32>
  402b24:	b113      	cbz	r3, 402b2c <SystemCoreClockUpdate+0x14>
  402b26:	2b02      	cmp	r3, #2
  402b28:	d02c      	beq.n	402b84 <SystemCoreClockUpdate+0x6c>
  402b2a:	e05a      	b.n	402be2 <SystemCoreClockUpdate+0xca>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402b2c:	4b39      	ldr	r3, [pc, #228]	; (402c14 <SystemCoreClockUpdate+0xfc>)
  402b2e:	695b      	ldr	r3, [r3, #20]
  402b30:	f013 0f80 	tst.w	r3, #128	; 0x80
  402b34:	d004      	beq.n	402b40 <SystemCoreClockUpdate+0x28>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402b36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402b3a:	4b37      	ldr	r3, [pc, #220]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402b3c:	601a      	str	r2, [r3, #0]
  402b3e:	e050      	b.n	402be2 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402b40:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  402b44:	4b34      	ldr	r3, [pc, #208]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402b46:	601a      	str	r2, [r3, #0]
  402b48:	e04b      	b.n	402be2 <SystemCoreClockUpdate+0xca>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402b4a:	4b31      	ldr	r3, [pc, #196]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402b4c:	6a1b      	ldr	r3, [r3, #32]
  402b4e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402b52:	d003      	beq.n	402b5c <SystemCoreClockUpdate+0x44>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402b54:	4a31      	ldr	r2, [pc, #196]	; (402c1c <SystemCoreClockUpdate+0x104>)
  402b56:	4b30      	ldr	r3, [pc, #192]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402b58:	601a      	str	r2, [r3, #0]
  402b5a:	e042      	b.n	402be2 <SystemCoreClockUpdate+0xca>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402b5c:	4a30      	ldr	r2, [pc, #192]	; (402c20 <SystemCoreClockUpdate+0x108>)
  402b5e:	4b2e      	ldr	r3, [pc, #184]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402b60:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402b62:	4b2b      	ldr	r3, [pc, #172]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402b64:	6a1b      	ldr	r3, [r3, #32]
  402b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402b6a:	2b10      	cmp	r3, #16
  402b6c:	d002      	beq.n	402b74 <SystemCoreClockUpdate+0x5c>
  402b6e:	2b20      	cmp	r3, #32
  402b70:	d004      	beq.n	402b7c <SystemCoreClockUpdate+0x64>
  402b72:	e036      	b.n	402be2 <SystemCoreClockUpdate+0xca>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402b74:	4a2b      	ldr	r2, [pc, #172]	; (402c24 <SystemCoreClockUpdate+0x10c>)
  402b76:	4b28      	ldr	r3, [pc, #160]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402b78:	601a      	str	r2, [r3, #0]
          break;
  402b7a:	e032      	b.n	402be2 <SystemCoreClockUpdate+0xca>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402b7c:	4a27      	ldr	r2, [pc, #156]	; (402c1c <SystemCoreClockUpdate+0x104>)
  402b7e:	4b26      	ldr	r3, [pc, #152]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402b80:	601a      	str	r2, [r3, #0]
          break;
  402b82:	e02e      	b.n	402be2 <SystemCoreClockUpdate+0xca>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402b84:	4b22      	ldr	r3, [pc, #136]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402b86:	6a1b      	ldr	r3, [r3, #32]
  402b88:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402b8c:	d003      	beq.n	402b96 <SystemCoreClockUpdate+0x7e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  402b8e:	4a23      	ldr	r2, [pc, #140]	; (402c1c <SystemCoreClockUpdate+0x104>)
  402b90:	4b21      	ldr	r3, [pc, #132]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402b92:	601a      	str	r2, [r3, #0]
  402b94:	e012      	b.n	402bbc <SystemCoreClockUpdate+0xa4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402b96:	4a22      	ldr	r2, [pc, #136]	; (402c20 <SystemCoreClockUpdate+0x108>)
  402b98:	4b1f      	ldr	r3, [pc, #124]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402b9a:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402b9c:	4b1c      	ldr	r3, [pc, #112]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402b9e:	6a1b      	ldr	r3, [r3, #32]
  402ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402ba4:	2b10      	cmp	r3, #16
  402ba6:	d002      	beq.n	402bae <SystemCoreClockUpdate+0x96>
  402ba8:	2b20      	cmp	r3, #32
  402baa:	d004      	beq.n	402bb6 <SystemCoreClockUpdate+0x9e>
  402bac:	e006      	b.n	402bbc <SystemCoreClockUpdate+0xa4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402bae:	4a1d      	ldr	r2, [pc, #116]	; (402c24 <SystemCoreClockUpdate+0x10c>)
  402bb0:	4b19      	ldr	r3, [pc, #100]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402bb2:	601a      	str	r2, [r3, #0]
          break;
  402bb4:	e002      	b.n	402bbc <SystemCoreClockUpdate+0xa4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  402bb6:	4a19      	ldr	r2, [pc, #100]	; (402c1c <SystemCoreClockUpdate+0x104>)
  402bb8:	4b17      	ldr	r3, [pc, #92]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402bba:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402bbc:	4b14      	ldr	r3, [pc, #80]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402bc0:	f003 0303 	and.w	r3, r3, #3
  402bc4:	2b02      	cmp	r3, #2
  402bc6:	d10c      	bne.n	402be2 <SystemCoreClockUpdate+0xca>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402bc8:	4a11      	ldr	r2, [pc, #68]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402bca:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402bcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  402bce:	4812      	ldr	r0, [pc, #72]	; (402c18 <SystemCoreClockUpdate+0x100>)
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  402bd0:	f3c3 410a 	ubfx	r1, r3, #16, #11
  402bd4:	6803      	ldr	r3, [r0, #0]
  402bd6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402bda:	b2d2      	uxtb	r2, r2
  402bdc:	fbb3 f3f2 	udiv	r3, r3, r2
  402be0:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  402be2:	4b0b      	ldr	r3, [pc, #44]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402bea:	2b70      	cmp	r3, #112	; 0x70
  402bec:	d107      	bne.n	402bfe <SystemCoreClockUpdate+0xe6>
  {
    SystemCoreClock /= 3U;
  402bee:	4a0a      	ldr	r2, [pc, #40]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402bf0:	6813      	ldr	r3, [r2, #0]
  402bf2:	490d      	ldr	r1, [pc, #52]	; (402c28 <SystemCoreClockUpdate+0x110>)
  402bf4:	fba1 1303 	umull	r1, r3, r1, r3
  402bf8:	085b      	lsrs	r3, r3, #1
  402bfa:	6013      	str	r3, [r2, #0]
  402bfc:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402bfe:	4b04      	ldr	r3, [pc, #16]	; (402c10 <SystemCoreClockUpdate+0xf8>)
  402c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  402c02:	4905      	ldr	r1, [pc, #20]	; (402c18 <SystemCoreClockUpdate+0x100>)
  402c04:	f3c2 1202 	ubfx	r2, r2, #4, #3
  402c08:	680b      	ldr	r3, [r1, #0]
  402c0a:	40d3      	lsrs	r3, r2
  402c0c:	600b      	str	r3, [r1, #0]
  402c0e:	4770      	bx	lr
  402c10:	400e0600 	.word	0x400e0600
  402c14:	400e1810 	.word	0x400e1810
  402c18:	20400014 	.word	0x20400014
  402c1c:	00b71b00 	.word	0x00b71b00
  402c20:	003d0900 	.word	0x003d0900
  402c24:	007a1200 	.word	0x007a1200
  402c28:	aaaaaaab 	.word	0xaaaaaaab

00402c2c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402c2c:	4b14      	ldr	r3, [pc, #80]	; (402c80 <system_init_flash+0x54>)
  402c2e:	4298      	cmp	r0, r3
  402c30:	d804      	bhi.n	402c3c <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402c32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402c36:	4b13      	ldr	r3, [pc, #76]	; (402c84 <system_init_flash+0x58>)
  402c38:	601a      	str	r2, [r3, #0]
  402c3a:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402c3c:	4b12      	ldr	r3, [pc, #72]	; (402c88 <system_init_flash+0x5c>)
  402c3e:	4298      	cmp	r0, r3
  402c40:	d803      	bhi.n	402c4a <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402c42:	4a12      	ldr	r2, [pc, #72]	; (402c8c <system_init_flash+0x60>)
  402c44:	4b0f      	ldr	r3, [pc, #60]	; (402c84 <system_init_flash+0x58>)
  402c46:	601a      	str	r2, [r3, #0]
  402c48:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402c4a:	4b11      	ldr	r3, [pc, #68]	; (402c90 <system_init_flash+0x64>)
  402c4c:	4298      	cmp	r0, r3
  402c4e:	d803      	bhi.n	402c58 <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402c50:	4a10      	ldr	r2, [pc, #64]	; (402c94 <system_init_flash+0x68>)
  402c52:	4b0c      	ldr	r3, [pc, #48]	; (402c84 <system_init_flash+0x58>)
  402c54:	601a      	str	r2, [r3, #0]
  402c56:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402c58:	4b0f      	ldr	r3, [pc, #60]	; (402c98 <system_init_flash+0x6c>)
  402c5a:	4298      	cmp	r0, r3
  402c5c:	d803      	bhi.n	402c66 <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402c5e:	4a0f      	ldr	r2, [pc, #60]	; (402c9c <system_init_flash+0x70>)
  402c60:	4b08      	ldr	r3, [pc, #32]	; (402c84 <system_init_flash+0x58>)
  402c62:	601a      	str	r2, [r3, #0]
  402c64:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402c66:	4b0e      	ldr	r3, [pc, #56]	; (402ca0 <system_init_flash+0x74>)
  402c68:	4298      	cmp	r0, r3
  402c6a:	d804      	bhi.n	402c76 <system_init_flash+0x4a>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402c6c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402c70:	4b04      	ldr	r3, [pc, #16]	; (402c84 <system_init_flash+0x58>)
  402c72:	601a      	str	r2, [r3, #0]
  402c74:	4770      	bx	lr
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402c76:	4a0b      	ldr	r2, [pc, #44]	; (402ca4 <system_init_flash+0x78>)
  402c78:	4b02      	ldr	r3, [pc, #8]	; (402c84 <system_init_flash+0x58>)
  402c7a:	601a      	str	r2, [r3, #0]
  402c7c:	4770      	bx	lr
  402c7e:	bf00      	nop
  402c80:	01312cff 	.word	0x01312cff
  402c84:	400e0c00 	.word	0x400e0c00
  402c88:	026259ff 	.word	0x026259ff
  402c8c:	04000100 	.word	0x04000100
  402c90:	039386ff 	.word	0x039386ff
  402c94:	04000200 	.word	0x04000200
  402c98:	04c4b3ff 	.word	0x04c4b3ff
  402c9c:	04000300 	.word	0x04000300
  402ca0:	05f5e0ff 	.word	0x05f5e0ff
  402ca4:	04000500 	.word	0x04000500

00402ca8 <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  402ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cac:	4680      	mov	r8, r0
  402cae:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  402cb0:	2600      	movs	r6, #0
  402cb2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 402ce8 <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART1));
  402cb6:	4d0a      	ldr	r5, [pc, #40]	; (402ce0 <sendDebugString+0x38>)
  402cb8:	4c0a      	ldr	r4, [pc, #40]	; (402ce4 <sendDebugString+0x3c>)
		uart_write(UART1,in[i]);
  402cba:	f8df a030 	ldr.w	sl, [pc, #48]	; 402cec <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  402cbe:	e008      	b.n	402cd2 <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART1));
  402cc0:	4620      	mov	r0, r4
  402cc2:	47a8      	blx	r5
  402cc4:	2800      	cmp	r0, #0
  402cc6:	d0fb      	beq.n	402cc0 <sendDebugString+0x18>
		uart_write(UART1,in[i]);
  402cc8:	4620      	mov	r0, r4
  402cca:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  402cce:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  402cd0:	3601      	adds	r6, #1
  402cd2:	4640      	mov	r0, r8
  402cd4:	47c8      	blx	r9
  402cd6:	4286      	cmp	r6, r0
  402cd8:	d3f2      	bcc.n	402cc0 <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART1));
		uart_write(UART1,in[i]);
	}
}
  402cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402cde:	bf00      	nop
  402ce0:	00402799 	.word	0x00402799
  402ce4:	400e0a00 	.word	0x400e0a00
  402ce8:	00406331 	.word	0x00406331
  402cec:	004027a5 	.word	0x004027a5

00402cf0 <DW1000_readReg>:
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  402cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402cf4:	b084      	sub	sp, #16
  402cf6:	af00      	add	r7, sp, #0
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
  402cf8:	1ddc      	adds	r4, r3, #7
  402cfa:	f024 0407 	bic.w	r4, r4, #7
  402cfe:	ebad 0d04 	sub.w	sp, sp, r4

	struct spi_device2{
		uint32_t id;
	}spidevice1;

	spidevice1.id = 0;
  402d02:	2400      	movs	r4, #0
  402d04:	603c      	str	r4, [r7, #0]


	/* Filter results more than 4 octets */
	if (n > 8) {
  402d06:	2b08      	cmp	r3, #8
  402d08:	dc47      	bgt.n	402d9a <DW1000_readReg+0xaa>
  402d0a:	466d      	mov	r5, sp
		return 0;									// TODO: return error
	}

	/* Generate header */
    if (!subindex) {
  402d0c:	b919      	cbnz	r1, 402d16 <DW1000_readReg+0x26>
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
  402d0e:	6078      	str	r0, [r7, #4]
/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
  402d10:	f04f 0a01 	mov.w	sl, #1
  402d14:	e012      	b.n	402d3c <DW1000_readReg+0x4c>
	/* Generate header */
    if (!subindex) {
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_READ_SUB | cmd;					// 0x40 OR with command if sub-index is present
  402d16:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  402d1a:	6078      	str	r0, [r7, #4]
    	if (offset < 128) {							// Check if extended sub-index is needed
  402d1c:	2a7f      	cmp	r2, #127	; 0x7f
  402d1e:	d803      	bhi.n	402d28 <DW1000_readReg+0x38>
    		header[1] = offset;						
  402d20:	60ba      	str	r2, [r7, #8]
    		headerLen = 2;
  402d22:	f04f 0a02 	mov.w	sl, #2
  402d26:	e009      	b.n	402d3c <DW1000_readReg+0x4c>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
  402d28:	f002 017f 	and.w	r1, r2, #127	; 0x7f
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  402d2c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402d30:	60b9      	str	r1, [r7, #8]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  402d32:	f3c2 12c7 	ubfx	r2, r2, #7, #8
  402d36:	60fa      	str	r2, [r7, #12]
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
    		headerLen = 3;
  402d38:	f04f 0a03 	mov.w	sl, #3
  402d3c:	461c      	mov	r4, r3
    	}
    }
	
	spi_select_device(SPI0,&spidevice1);
  402d3e:	4e1a      	ldr	r6, [pc, #104]	; (402da8 <DW1000_readReg+0xb8>)
  402d40:	4630      	mov	r0, r6
  402d42:	4639      	mov	r1, r7
  402d44:	4b19      	ldr	r3, [pc, #100]	; (402dac <DW1000_readReg+0xbc>)
  402d46:	4798      	blx	r3
	spi_write_packet(SPI0,header,headerLen);
  402d48:	4630      	mov	r0, r6
  402d4a:	1d39      	adds	r1, r7, #4
  402d4c:	4652      	mov	r2, sl
  402d4e:	4b18      	ldr	r3, [pc, #96]	; (402db0 <DW1000_readReg+0xc0>)
  402d50:	4798      	blx	r3


	spi_read_packet(SPI0,data,n);
  402d52:	4630      	mov	r0, r6
  402d54:	4629      	mov	r1, r5
  402d56:	4622      	mov	r2, r4
  402d58:	4b16      	ldr	r3, [pc, #88]	; (402db4 <DW1000_readReg+0xc4>)
  402d5a:	4798      	blx	r3
	spi_deselect_device(SPI0,&spidevice1);
  402d5c:	4630      	mov	r0, r6
  402d5e:	4639      	mov	r1, r7
  402d60:	4b15      	ldr	r3, [pc, #84]	; (402db8 <DW1000_readReg+0xc8>)
  402d62:	4798      	blx	r3
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  402d64:	2c01      	cmp	r4, #1
  402d66:	d413      	bmi.n	402d90 <DW1000_readReg+0xa0>
  402d68:	192b      	adds	r3, r5, r4
  402d6a:	4629      	mov	r1, r5
  402d6c:	2400      	movs	r4, #0
  402d6e:	2500      	movs	r5, #0
		result = (result << 8) | data[i];
  402d70:	ea4f 2905 	mov.w	r9, r5, lsl #8
  402d74:	ea49 6914 	orr.w	r9, r9, r4, lsr #24
  402d78:	ea4f 2804 	mov.w	r8, r4, lsl #8
  402d7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  402d80:	2500      	movs	r5, #0
  402d82:	ea44 0408 	orr.w	r4, r4, r8
  402d86:	ea45 0509 	orr.w	r5, r5, r9
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  402d8a:	428b      	cmp	r3, r1
  402d8c:	d1f0      	bne.n	402d70 <DW1000_readReg+0x80>
  402d8e:	e001      	b.n	402d94 <DW1000_readReg+0xa4>

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
	uint64_t result = 0;
  402d90:	2400      	movs	r4, #0
  402d92:	2500      	movs	r5, #0
	
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
  402d94:	4620      	mov	r0, r4
  402d96:	4629      	mov	r1, r5
  402d98:	e001      	b.n	402d9e <DW1000_readReg+0xae>
	spidevice1.id = 0;


	/* Filter results more than 4 octets */
	if (n > 8) {
		return 0;									// TODO: return error
  402d9a:	2000      	movs	r0, #0
  402d9c:	4601      	mov	r1, r0
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
}
  402d9e:	3710      	adds	r7, #16
  402da0:	46bd      	mov	sp, r7
  402da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402da6:	bf00      	nop
  402da8:	40008000 	.word	0x40008000
  402dac:	0040026d 	.word	0x0040026d
  402db0:	004002b9 	.word	0x004002b9
  402db4:	004002f1 	.word	0x004002f1
  402db8:	00400299 	.word	0x00400299

00402dbc <DW1000_writeReg>:

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
  402dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402dc0:	b087      	sub	sp, #28
  402dc2:	af00      	add	r7, sp, #0
  402dc4:	6078      	str	r0, [r7, #4]
  402dc6:	60b9      	str	r1, [r7, #8]
  402dc8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
  402dcc:	6cbe      	ldr	r6, [r7, #72]	; 0x48

	struct spi_device2{
		uint32_t id;
	}spidevice1;
	
	spidevice1.id = 0;
  402dce:	2300      	movs	r3, #0
  402dd0:	613b      	str	r3, [r7, #16]

	/* Split data buffer */
	uint8_t data[n];									// Array
  402dd2:	1df3      	adds	r3, r6, #7
  402dd4:	f023 0307 	bic.w	r3, r3, #7
  402dd8:	ebad 0d03 	sub.w	sp, sp, r3
  402ddc:	f8c7 d00c 	str.w	sp, [r7, #12]
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  402de0:	2e00      	cmp	r6, #0
  402de2:	dd25      	ble.n	402e30 <DW1000_writeReg+0x74>
  402de4:	eb0d 0b06 	add.w	fp, sp, r6
  402de8:	2300      	movs	r3, #0
  402dea:	20ff      	movs	r0, #255	; 0xff
  402dec:	2100      	movs	r1, #0
  402dee:	46ee      	mov	lr, sp
  402df0:	46dc      	mov	ip, fp
  402df2:	46c2      	mov	sl, r8
  402df4:	46cb      	mov	fp, r9
        data[i] = (buffer & mask) >> (i * 8);
  402df6:	ea00 080a 	and.w	r8, r0, sl
  402dfa:	ea01 090b 	and.w	r9, r1, fp
  402dfe:	f1c3 0520 	rsb	r5, r3, #32
  402e02:	f1a3 0420 	sub.w	r4, r3, #32
  402e06:	fa28 f803 	lsr.w	r8, r8, r3
  402e0a:	fa09 f505 	lsl.w	r5, r9, r5
  402e0e:	ea48 0805 	orr.w	r8, r8, r5
  402e12:	fa29 f404 	lsr.w	r4, r9, r4
  402e16:	ea48 0804 	orr.w	r8, r8, r4
  402e1a:	f80e 8b01 	strb.w	r8, [lr], #1
        mask = mask << 8;
  402e1e:	020c      	lsls	r4, r1, #8
  402e20:	ea44 6410 	orr.w	r4, r4, r0, lsr #24
  402e24:	0205      	lsls	r5, r0, #8
  402e26:	4628      	mov	r0, r5
  402e28:	4621      	mov	r1, r4
  402e2a:	3308      	adds	r3, #8
	spidevice1.id = 0;

	/* Split data buffer */
	uint8_t data[n];									// Array
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  402e2c:	45e6      	cmp	lr, ip
  402e2e:	d1e2      	bne.n	402df6 <DW1000_writeReg+0x3a>
        data[i] = (buffer & mask) >> (i * 8);
        mask = mask << 8;
    }

    /* Generate header */
    if (!subindex) {
  402e30:	68bb      	ldr	r3, [r7, #8]
  402e32:	b92b      	cbnz	r3, 402e40 <DW1000_writeReg+0x84>
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
  402e34:	687b      	ldr	r3, [r7, #4]
  402e36:	f063 007f 	orn	r0, r3, #127	; 0x7f
  402e3a:	7538      	strb	r0, [r7, #20]
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
  402e3c:	2501      	movs	r5, #1
  402e3e:	e00f      	b.n	402e60 <DW1000_writeReg+0xa4>
    /* Generate header */
    if (!subindex) {
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_WRITE_SUB | cmd;				// 0xC0 OR with command if sub-index is present
  402e40:	687b      	ldr	r3, [r7, #4]
  402e42:	f063 003f 	orn	r0, r3, #63	; 0x3f
  402e46:	7538      	strb	r0, [r7, #20]
    	if (offset < 128) {							// Check if extended sub-index is needed
  402e48:	2a7f      	cmp	r2, #127	; 0x7f
  402e4a:	d802      	bhi.n	402e52 <DW1000_writeReg+0x96>
    		header[1] = offset;						
  402e4c:	757a      	strb	r2, [r7, #21]
    		headerLen = 2;
  402e4e:	2502      	movs	r5, #2
  402e50:	e006      	b.n	402e60 <DW1000_writeReg+0xa4>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  402e52:	f062 037f 	orn	r3, r2, #127	; 0x7f
  402e56:	757b      	strb	r3, [r7, #21]
    		header[1] = offset;						
    		headerLen = 2;
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
  402e58:	f3c2 12c7 	ubfx	r2, r2, #7, #8
    		header[1] = 0x80 | sub1;
    		header[2] = sub2;
  402e5c:	75ba      	strb	r2, [r7, #22]
    		headerLen = 3;
  402e5e:	2503      	movs	r5, #3
    	}
    }
	//while(!(SPI0->SPI_SR & SPI_SR_TXEMPTY));
	spi_select_device(SPI0,&spidevice1);
  402e60:	4c0c      	ldr	r4, [pc, #48]	; (402e94 <DW1000_writeReg+0xd8>)
  402e62:	4620      	mov	r0, r4
  402e64:	f107 0110 	add.w	r1, r7, #16
  402e68:	4b0b      	ldr	r3, [pc, #44]	; (402e98 <DW1000_writeReg+0xdc>)
  402e6a:	4798      	blx	r3
	
	spi_write_packet(SPI0,header,headerLen);
  402e6c:	4620      	mov	r0, r4
  402e6e:	f107 0114 	add.w	r1, r7, #20
  402e72:	462a      	mov	r2, r5
  402e74:	4d09      	ldr	r5, [pc, #36]	; (402e9c <DW1000_writeReg+0xe0>)
  402e76:	47a8      	blx	r5
	
	//for(int i = 0;i<headerLen;i++){
	//	 spi_write(SPI0,header+i,NULL,NULL);
	//}
	
	spi_write_packet(SPI0,data,n);
  402e78:	4620      	mov	r0, r4
  402e7a:	68f9      	ldr	r1, [r7, #12]
  402e7c:	4632      	mov	r2, r6
  402e7e:	47a8      	blx	r5
	
	spi_deselect_device(SPI0,&spidevice1);
  402e80:	4620      	mov	r0, r4
  402e82:	f107 0110 	add.w	r1, r7, #16
  402e86:	4b06      	ldr	r3, [pc, #24]	; (402ea0 <DW1000_writeReg+0xe4>)
  402e88:	4798      	blx	r3
    //}
    //for (i = 0; i < n; i++) {
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}
  402e8a:	371c      	adds	r7, #28
  402e8c:	46bd      	mov	sp, r7
  402e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402e92:	bf00      	nop
  402e94:	40008000 	.word	0x40008000
  402e98:	0040026d 	.word	0x0040026d
  402e9c:	004002b9 	.word	0x004002b9
  402ea0:	00400299 	.word	0x00400299
  402ea4:	00000000 	.word	0x00000000

00402ea8 <DW1000_initialise>:
 * Preamble code:		5
 * Preamble length:		2048 (changed from 128)
 * PAC size:			64 (changed from 8)
 * SFD length:			64 (changed from 8 (standard))
 */
void DW1000_initialise() {
  402ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  402eaa:	b085      	sub	sp, #20
	//delay(5);
	//digitalWrite(DW1000__rst, HIGH);
	//delay(5);

	// Channel, preamble, bitrate selection
	 DW1000_writeReg(CHAN_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x10840011, CHAN_CTRL_LEN);
  402eac:	a383      	add	r3, pc, #524	; (adr r3, 4030bc <DW1000_initialise+0x214>)
  402eae:	e9d3 2300 	ldrd	r2, r3, [r3]
  402eb2:	e9cd 2300 	strd	r2, r3, [sp]
  402eb6:	2604      	movs	r6, #4
  402eb8:	9602      	str	r6, [sp, #8]
  402eba:	201f      	movs	r0, #31
  402ebc:	2100      	movs	r1, #0
  402ebe:	460a      	mov	r2, r1
  402ec0:	4c79      	ldr	r4, [pc, #484]	; (4030a8 <DW1000_initialise+0x200>)
  402ec2:	47a0      	blx	r4
	 //DW1000_writeReg(TX_FCTRL_ID, NO_SUB, NO_OFFSET, 0x0015400C, TX_FCTRL_LEN);
	 DW1000_writeReg(ACK_RESP_T_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x00000000, ACK_RESP_T_LEN); // changed
  402ec4:	2200      	movs	r2, #0
  402ec6:	2300      	movs	r3, #0
  402ec8:	e9cd 2300 	strd	r2, r3, [sp]
  402ecc:	9602      	str	r6, [sp, #8]
  402ece:	201a      	movs	r0, #26
  402ed0:	2100      	movs	r1, #0
  402ed2:	460a      	mov	r2, r1
  402ed4:	47a0      	blx	r4
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x20441200, SYS_CFG_LEN); // changed
  402ed6:	a36e      	add	r3, pc, #440	; (adr r3, 403090 <DW1000_initialise+0x1e8>)
  402ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
  402edc:	e9cd 2300 	strd	r2, r3, [sp]
  402ee0:	9602      	str	r6, [sp, #8]
  402ee2:	4630      	mov	r0, r6
  402ee4:	2100      	movs	r1, #0
  402ee6:	460a      	mov	r2, r1
  402ee8:	47a0      	blx	r4
	 DW1000_writeReg(TX_POWER_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, 0x1F1F1F1F, TX_POWER_LEN);
  402eea:	f04f 321f 	mov.w	r2, #522133279	; 0x1f1f1f1f
  402eee:	2300      	movs	r3, #0
  402ef0:	e9cd 2300 	strd	r2, r3, [sp]
  402ef4:	9602      	str	r6, [sp, #8]
  402ef6:	201e      	movs	r0, #30
  402ef8:	2100      	movs	r1, #0
  402efa:	460a      	mov	r2, r1
  402efc:	47a0      	blx	r4

	// Default values that should be modified
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE1_OFFSET, (AGC_TUNE1_16M & AGC_TUNE1_MASK), AGC_TUNE1_LEN);
  402efe:	f648 0270 	movw	r2, #34928	; 0x8870
  402f02:	2300      	movs	r3, #0
  402f04:	e9cd 2300 	strd	r2, r3, [sp]
  402f08:	2702      	movs	r7, #2
  402f0a:	9702      	str	r7, [sp, #8]
  402f0c:	2023      	movs	r0, #35	; 0x23
  402f0e:	2101      	movs	r1, #1
  402f10:	4632      	mov	r2, r6
  402f12:	47a0      	blx	r4
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE2_OFFSET, (AGC_TUNE2_VAL & AGC_TUNE2_MASK), AGC_TUNE2_LEN);
  402f14:	a360      	add	r3, pc, #384	; (adr r3, 403098 <DW1000_initialise+0x1f0>)
  402f16:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f1a:	e9cd 2300 	strd	r2, r3, [sp]
  402f1e:	9602      	str	r6, [sp, #8]
  402f20:	2023      	movs	r0, #35	; 0x23
  402f22:	2101      	movs	r1, #1
  402f24:	220c      	movs	r2, #12
  402f26:	47a0      	blx	r4
	 DW1000_writeReg(AGC_CTRL_ID, DW1000_SUB, AGC_TUNE3_OFFSET, (AGC_TUNE3_VAL & AGC_TUNE3_MASK), AGC_TUNE3_LEN);
  402f28:	2255      	movs	r2, #85	; 0x55
  402f2a:	2300      	movs	r3, #0
  402f2c:	e9cd 2300 	strd	r2, r3, [sp]
  402f30:	9702      	str	r7, [sp, #8]
  402f32:	2023      	movs	r0, #35	; 0x23
  402f34:	2101      	movs	r1, #1
  402f36:	2212      	movs	r2, #18
  402f38:	47a0      	blx	r4

	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE0b_OFFSET, 0x000A, DRX_TUNE0b_LEN); // changed
  402f3a:	220a      	movs	r2, #10
  402f3c:	2300      	movs	r3, #0
  402f3e:	e9cd 2300 	strd	r2, r3, [sp]
  402f42:	9702      	str	r7, [sp, #8]
  402f44:	2027      	movs	r0, #39	; 0x27
  402f46:	2101      	movs	r1, #1
  402f48:	463a      	mov	r2, r7
  402f4a:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE1a_OFFSET, 0x0087, DRX_TUNE1a_LEN);
  402f4c:	2287      	movs	r2, #135	; 0x87
  402f4e:	2300      	movs	r3, #0
  402f50:	e9cd 2300 	strd	r2, r3, [sp]
  402f54:	9702      	str	r7, [sp, #8]
  402f56:	2027      	movs	r0, #39	; 0x27
  402f58:	2101      	movs	r1, #1
  402f5a:	4632      	mov	r2, r6
  402f5c:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE1b_OFFSET, 0x0064, DRX_TUNE1b_LEN); // changed
  402f5e:	2264      	movs	r2, #100	; 0x64
  402f60:	2300      	movs	r3, #0
  402f62:	e9cd 2300 	strd	r2, r3, [sp]
  402f66:	9702      	str	r7, [sp, #8]
  402f68:	2027      	movs	r0, #39	; 0x27
  402f6a:	2101      	movs	r1, #1
  402f6c:	2206      	movs	r2, #6
  402f6e:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE2_OFFSET, 0x371A011D, DRX_TUNE2_LEN); // changed````
  402f70:	a34b      	add	r3, pc, #300	; (adr r3, 4030a0 <DW1000_initialise+0x1f8>)
  402f72:	e9d3 2300 	ldrd	r2, r3, [r3]
  402f76:	e9cd 2300 	strd	r2, r3, [sp]
  402f7a:	9602      	str	r6, [sp, #8]
  402f7c:	2027      	movs	r0, #39	; 0x27
  402f7e:	2101      	movs	r1, #1
  402f80:	2208      	movs	r2, #8
  402f82:	47a0      	blx	r4
	 DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_TUNE4H_OFFSET, 0x0028, DRX_TUNE4H_LEN); // changed
  402f84:	2228      	movs	r2, #40	; 0x28
  402f86:	2300      	movs	r3, #0
  402f88:	e9cd 2300 	strd	r2, r3, [sp]
  402f8c:	9702      	str	r7, [sp, #8]
  402f8e:	2027      	movs	r0, #39	; 0x27
  402f90:	2101      	movs	r1, #1
  402f92:	2226      	movs	r2, #38	; 0x26
  402f94:	47a0      	blx	r4
	 
	// DW1000_writeReg(DRX_CONF_ID, DW1000_SUB, DRX_SFDTOC_OFFSET, 0xFFFF, DRX_SFDTOC_LEN); // changed

	 DW1000_writeReg(RF_CONF_ID, DW1000_SUB, RF_RXCTRLH_OFFSET, 0xD8, 1);
  402f96:	22d8      	movs	r2, #216	; 0xd8
  402f98:	2300      	movs	r3, #0
  402f9a:	e9cd 2300 	strd	r2, r3, [sp]
  402f9e:	2501      	movs	r5, #1
  402fa0:	9502      	str	r5, [sp, #8]
  402fa2:	2028      	movs	r0, #40	; 0x28
  402fa4:	4629      	mov	r1, r5
  402fa6:	220b      	movs	r2, #11
  402fa8:	47a0      	blx	r4
	 DW1000_writeReg(RF_CONF_ID, DW1000_SUB, RF_TXCTRL_OFFSET, RF_TXCTRL_CH1, RF_TXCTRL_LEN);
  402faa:	f645 4240 	movw	r2, #23616	; 0x5c40
  402fae:	2300      	movs	r3, #0
  402fb0:	e9cd 2300 	strd	r2, r3, [sp]
  402fb4:	9602      	str	r6, [sp, #8]
  402fb6:	2028      	movs	r0, #40	; 0x28
  402fb8:	4629      	mov	r1, r5
  402fba:	220c      	movs	r2, #12
  402fbc:	47a0      	blx	r4

	 DW1000_writeReg(TX_CAL_ID, DW1000_SUB, TC_PGDELAY_OFFSET, TC_PGDELAY_CH1, TC_PGDELAY_LEN);
  402fbe:	22c9      	movs	r2, #201	; 0xc9
  402fc0:	2300      	movs	r3, #0
  402fc2:	e9cd 2300 	strd	r2, r3, [sp]
  402fc6:	9502      	str	r5, [sp, #8]
  402fc8:	202a      	movs	r0, #42	; 0x2a
  402fca:	4629      	mov	r1, r5
  402fcc:	220b      	movs	r2, #11
  402fce:	47a0      	blx	r4

	 DW1000_writeReg(FS_CTRL_ID, DW1000_SUB, FS_PLLCFG_OFFSET, FS_PLLCFG_CH1, FS_PLLCFG_LEN);
  402fd0:	4a36      	ldr	r2, [pc, #216]	; (4030ac <DW1000_initialise+0x204>)
  402fd2:	2300      	movs	r3, #0
  402fd4:	e9cd 2300 	strd	r2, r3, [sp]
  402fd8:	2305      	movs	r3, #5
  402fda:	9302      	str	r3, [sp, #8]
  402fdc:	202b      	movs	r0, #43	; 0x2b
  402fde:	4629      	mov	r1, r5
  402fe0:	2207      	movs	r2, #7
  402fe2:	47a0      	blx	r4
	 DW1000_writeReg(FS_CTRL_ID, DW1000_SUB, FS_PLLTUNE_OFFSET, FS_PLLTUNE_CH1, FS_PLLTUNE_LEN);
  402fe4:	221e      	movs	r2, #30
  402fe6:	2300      	movs	r3, #0
  402fe8:	e9cd 2300 	strd	r2, r3, [sp]
  402fec:	9502      	str	r5, [sp, #8]
  402fee:	202b      	movs	r0, #43	; 0x2b
  402ff0:	4629      	mov	r1, r5
  402ff2:	220b      	movs	r2, #11
  402ff4:	47a0      	blx	r4

	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_CFG1_OFFSET, 0x6D, LDE_CFG1_LEN);
  402ff6:	226d      	movs	r2, #109	; 0x6d
  402ff8:	2300      	movs	r3, #0
  402ffa:	e9cd 2300 	strd	r2, r3, [sp]
  402ffe:	9502      	str	r5, [sp, #8]
  403000:	202e      	movs	r0, #46	; 0x2e
  403002:	4629      	mov	r1, r5
  403004:	f640 0206 	movw	r2, #2054	; 0x806
  403008:	47a0      	blx	r4
	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_CFG2_OFFSET, 0x1607, LDE_CFG2_LEN);
  40300a:	f241 6207 	movw	r2, #5639	; 0x1607
  40300e:	2300      	movs	r3, #0
  403010:	e9cd 2300 	strd	r2, r3, [sp]
  403014:	9702      	str	r7, [sp, #8]
  403016:	202e      	movs	r0, #46	; 0x2e
  403018:	4629      	mov	r1, r5
  40301a:	f641 0206 	movw	r2, #6150	; 0x1806
  40301e:	47a0      	blx	r4
	 DW1000_writeReg(LDE_IF_ID, DW1000_SUB, LDE_REPC_OFFSET, (0x451E/8), LDE_REPC_LEN); // changed
  403020:	f640 02a3 	movw	r2, #2211	; 0x8a3
  403024:	2300      	movs	r3, #0
  403026:	e9cd 2300 	strd	r2, r3, [sp]
  40302a:	9702      	str	r7, [sp, #8]
  40302c:	202e      	movs	r0, #46	; 0x2e
  40302e:	4629      	mov	r1, r5
  403030:	f642 0204 	movw	r2, #10244	; 0x2804
  403034:	47a0      	blx	r4

	// Ensure CPLOCK and CPLL_LL flags are working correctly
	 DW1000_writeReg(EXT_SYNC_ID, DW1000_SUB, EC_CTRL_OFFSET, 0x4, EC_CTRL_LEN);
  403036:	2204      	movs	r2, #4
  403038:	2300      	movs	r3, #0
  40303a:	e9cd 2300 	strd	r2, r3, [sp]
  40303e:	9602      	str	r6, [sp, #8]
  403040:	2024      	movs	r0, #36	; 0x24
  403042:	4629      	mov	r1, r5
  403044:	2200      	movs	r2, #0
  403046:	47a0      	blx	r4
	 DW1000_writeReg(SYS_MASK_ID, DW1000_NO_SUB,DW1000_NO_OFFSET,1<<13,SYS_MASK_LEN);
  403048:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40304c:	2300      	movs	r3, #0
  40304e:	e9cd 2300 	strd	r2, r3, [sp]
  403052:	9602      	str	r6, [sp, #8]
  403054:	200e      	movs	r0, #14
  403056:	2100      	movs	r1, #0
  403058:	460a      	mov	r2, r1
  40305a:	47a0      	blx	r4
	 	DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x03,1);
  40305c:	2203      	movs	r2, #3
  40305e:	2300      	movs	r3, #0
  403060:	e9cd 2300 	strd	r2, r3, [sp]
  403064:	9502      	str	r5, [sp, #8]
  403066:	202d      	movs	r0, #45	; 0x2d
  403068:	4629      	mov	r1, r5
  40306a:	2206      	movs	r2, #6
  40306c:	47a0      	blx	r4
	// DW1000_writeReg(AON_ID, SUB, AON_WCFG_OFFSET, 0, AON_WCFG_LEN);
	 delay_ms(100);
  40306e:	4810      	ldr	r0, [pc, #64]	; (4030b0 <DW1000_initialise+0x208>)
  403070:	4b10      	ldr	r3, [pc, #64]	; (4030b4 <DW1000_initialise+0x20c>)
  403072:	4798      	blx	r3
	 //DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000,			2);
	 //delay_ms(2);
	 //DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, (0x0200),  2);

	 
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (0x10000738),  4);
  403074:	4a10      	ldr	r2, [pc, #64]	; (4030b8 <DW1000_initialise+0x210>)
  403076:	2300      	movs	r3, #0
  403078:	e9cd 2300 	strd	r2, r3, [sp]
  40307c:	9602      	str	r6, [sp, #8]
  40307e:	2036      	movs	r0, #54	; 0x36
  403080:	4629      	mov	r1, r5
  403082:	4632      	mov	r2, r6
  403084:	47a0      	blx	r4
	//long temp = DW1000_readReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, PMSC_CTRL1_LEN);
	//DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp & 0xFFFDFFFF), PMSC_CTRL1_LEN);
	//DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	//delay_us(150);
	//DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}
  403086:	b005      	add	sp, #20
  403088:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40308a:	bf00      	nop
  40308c:	f3af 8000 	nop.w
  403090:	20441200 	.word	0x20441200
  403094:	00000000 	.word	0x00000000
  403098:	2502a907 	.word	0x2502a907
  40309c:	00000000 	.word	0x00000000
  4030a0:	371a011d 	.word	0x371a011d
  4030a4:	00000000 	.word	0x00000000
  4030a8:	00402dbd 	.word	0x00402dbd
  4030ac:	09000407 	.word	0x09000407
  4030b0:	004d2b25 	.word	0x004d2b25
  4030b4:	20400001 	.word	0x20400001
  4030b8:	10000738 	.word	0x10000738
  4030bc:	10840011 	.word	0x10840011
  4030c0:	00000000 	.word	0x00000000

004030c4 <DW1000_toggleGPIO_MODE>:
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, SYS_CFG_LEN);
}


//if running this right after doing a reset of the DW1000 put in a dealy
void DW1000_toggleGPIO_MODE() {
  4030c4:	b570      	push	{r4, r5, r6, lr}
  4030c6:	b084      	sub	sp, #16
	uint32_t led = 0;
	//read the gio_mode register so we collect any of the reserved bits, not necessary for this one its all 0's  
	led = DW1000_readReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET, GPIO_MODE_LEN);
  4030c8:	2026      	movs	r0, #38	; 0x26
  4030ca:	2101      	movs	r1, #1
  4030cc:	2200      	movs	r2, #0
  4030ce:	2304      	movs	r3, #4
  4030d0:	4e18      	ldr	r6, [pc, #96]	; (403134 <DW1000_toggleGPIO_MODE+0x70>)
  4030d2:	47b0      	blx	r6
	//write to set up all the gpios as leds plus an extra 4 in the first 5, all the cool kids are doing it
	DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET,0x1540, GPIO_MODE_LEN);
  4030d4:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
  4030d8:	2300      	movs	r3, #0
  4030da:	e9cd 2300 	strd	r2, r3, [sp]
  4030de:	2404      	movs	r4, #4
  4030e0:	9402      	str	r4, [sp, #8]
  4030e2:	2026      	movs	r0, #38	; 0x26
  4030e4:	2101      	movs	r1, #1
  4030e6:	2200      	movs	r2, #0
  4030e8:	4d13      	ldr	r5, [pc, #76]	; (403138 <DW1000_toggleGPIO_MODE+0x74>)
  4030ea:	47a8      	blx	r5
	
	//read the ctrl0 register to get all those reserved bits
	led = DW1000_readReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, PMSC_CTRL0_LEN);
  4030ec:	2036      	movs	r0, #54	; 0x36
  4030ee:	2101      	movs	r1, #1
  4030f0:	2200      	movs	r2, #0
  4030f2:	4623      	mov	r3, r4
  4030f4:	47b0      	blx	r6
	led |= (1<<18) | (1<<23); //activate those 2 weird clocks bro
  4030f6:	f440 0004 	orr.w	r0, r0, #8650752	; 0x840000
	//and slam them in there
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL0_OFFSET, led, PMSC_CTRL0_LEN);
  4030fa:	2200      	movs	r2, #0
  4030fc:	9000      	str	r0, [sp, #0]
  4030fe:	9201      	str	r2, [sp, #4]
  403100:	9402      	str	r4, [sp, #8]
  403102:	2036      	movs	r0, #54	; 0x36
  403104:	2101      	movs	r1, #1
  403106:	47a8      	blx	r5
	led = PMSC_LEDC_BLNKEN | (1<<5);
	
	//this makes all the lights blink now
	led|= 0xf0000;
	//slam it in
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, led, PMSC_LEDC_LEN);
  403108:	4a0c      	ldr	r2, [pc, #48]	; (40313c <DW1000_toggleGPIO_MODE+0x78>)
  40310a:	2300      	movs	r3, #0
  40310c:	e9cd 2300 	strd	r2, r3, [sp]
  403110:	9402      	str	r4, [sp, #8]
  403112:	2036      	movs	r0, #54	; 0x36
  403114:	2101      	movs	r1, #1
  403116:	2228      	movs	r2, #40	; 0x28
  403118:	47a8      	blx	r5
	
	led &= ~0xf0000; //write the same thing without the blink now
	//and it should be ready to do stuff normally
	DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, led, PMSC_LEDC_LEN);
  40311a:	f44f 7290 	mov.w	r2, #288	; 0x120
  40311e:	2300      	movs	r3, #0
  403120:	e9cd 2300 	strd	r2, r3, [sp]
  403124:	9402      	str	r4, [sp, #8]
  403126:	2036      	movs	r0, #54	; 0x36
  403128:	2101      	movs	r1, #1
  40312a:	2228      	movs	r2, #40	; 0x28
  40312c:	47a8      	blx	r5
	
	
}
  40312e:	b004      	add	sp, #16
  403130:	bd70      	pop	{r4, r5, r6, pc}
  403132:	bf00      	nop
  403134:	00402cf1 	.word	0x00402cf1
  403138:	00402dbd 	.word	0x00402dbd
  40313c:	000f0120 	.word	0x000f0120

00403140 <DW1000_setTxFrameControl>:
 
void DW1000_setTxFrameControl(long buffer) {
  403140:	b500      	push	{lr}
  403142:	b085      	sub	sp, #20
	 DW1000_writeReg(TX_FCTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, TX_FCTRL_LEN);
  403144:	17c1      	asrs	r1, r0, #31
  403146:	e9cd 0100 	strd	r0, r1, [sp]
  40314a:	2305      	movs	r3, #5
  40314c:	9302      	str	r3, [sp, #8]
  40314e:	2008      	movs	r0, #8
  403150:	2100      	movs	r1, #0
  403152:	460a      	mov	r2, r1
  403154:	4b02      	ldr	r3, [pc, #8]	; (403160 <DW1000_setTxFrameControl+0x20>)
  403156:	4798      	blx	r3
}
  403158:	b005      	add	sp, #20
  40315a:	f85d fb04 	ldr.w	pc, [sp], #4
  40315e:	bf00      	nop
  403160:	00402dbd 	.word	0x00402dbd

00403164 <DW1000_writeTxBuffer>:

void DW1000_writeTxBuffer(uint16_t offset, uint64_t buffer, int n) {
  403164:	b510      	push	{r4, lr}
  403166:	b084      	sub	sp, #16
  403168:	4604      	mov	r4, r0
	 DW1000_writeReg(TX_BUFFER_ID, DW1000_SUB, offset, buffer, n);
  40316a:	e9cd 2300 	strd	r2, r3, [sp]
  40316e:	9b06      	ldr	r3, [sp, #24]
  403170:	9302      	str	r3, [sp, #8]
  403172:	2009      	movs	r0, #9
  403174:	2101      	movs	r1, #1
  403176:	4622      	mov	r2, r4
  403178:	4b01      	ldr	r3, [pc, #4]	; (403180 <DW1000_writeTxBuffer+0x1c>)
  40317a:	4798      	blx	r3
}
  40317c:	b004      	add	sp, #16
  40317e:	bd10      	pop	{r4, pc}
  403180:	00402dbd 	.word	0x00402dbd

00403184 <DW1000_startTx>:
uint64_t DW1000_readRxBuffer(uint16_t offset, int n) {
	uint64_t rxBuffer = DW1000_readReg(RX_BUFFER_ID, DW1000_NO_SUB, offset, n);
	return rxBuffer;
}

void DW1000_startTx() {
  403184:	b500      	push	{lr}
  403186:	b085      	sub	sp, #20
	 DW1000_writeReg(SYS_CTRL_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CTRL_TXSTRT, SYS_CTRL_LEN);
  403188:	2202      	movs	r2, #2
  40318a:	2300      	movs	r3, #0
  40318c:	e9cd 2300 	strd	r2, r3, [sp]
  403190:	2304      	movs	r3, #4
  403192:	9302      	str	r3, [sp, #8]
  403194:	200d      	movs	r0, #13
  403196:	2100      	movs	r1, #0
  403198:	460a      	mov	r2, r1
  40319a:	4b02      	ldr	r3, [pc, #8]	; (4031a4 <DW1000_startTx+0x20>)
  40319c:	4798      	blx	r3
}
  40319e:	b005      	add	sp, #20
  4031a0:	f85d fb04 	ldr.w	pc, [sp], #4
  4031a4:	00402dbd 	.word	0x00402dbd

004031a8 <cmdDWMsend>:
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}

void cmdDWMsend(char* tosend, int charlen) {
  4031a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4031ac:	b083      	sub	sp, #12
	for(int i = 0; i< charlen;i++){
  4031ae:	f1b1 0900 	subs.w	r9, r1, #0
  4031b2:	dd0f      	ble.n	4031d4 <cmdDWMsend+0x2c>
  4031b4:	4680      	mov	r8, r0
  4031b6:	eb00 0709 	add.w	r7, r0, r9
  4031ba:	4604      	mov	r4, r0
	DW1000_writeTxBuffer(i,tosend[i],1);
  4031bc:	2601      	movs	r6, #1
  4031be:	4d0c      	ldr	r5, [pc, #48]	; (4031f0 <cmdDWMsend+0x48>)
  4031c0:	ebc8 0004 	rsb	r0, r8, r4
  4031c4:	f814 2b01 	ldrb.w	r2, [r4], #1
  4031c8:	2300      	movs	r3, #0
  4031ca:	9600      	str	r6, [sp, #0]
  4031cc:	b280      	uxth	r0, r0
  4031ce:	47a8      	blx	r5
    //}
    //digitalWrite(_ss, HIGH);
}

void cmdDWMsend(char* tosend, int charlen) {
	for(int i = 0; i< charlen;i++){
  4031d0:	42bc      	cmp	r4, r7
  4031d2:	d1f5      	bne.n	4031c0 <cmdDWMsend+0x18>
	DW1000_writeTxBuffer(i,tosend[i],1);
	}
	DW1000_setTxFrameControl( 0x00090000 | 0x7F&charlen  );
  4031d4:	f009 007f 	and.w	r0, r9, #127	; 0x7f
  4031d8:	f440 2010 	orr.w	r0, r0, #589824	; 0x90000
  4031dc:	4b05      	ldr	r3, [pc, #20]	; (4031f4 <cmdDWMsend+0x4c>)
  4031de:	4798      	blx	r3
	DW1000_startTx();
  4031e0:	4b05      	ldr	r3, [pc, #20]	; (4031f8 <cmdDWMsend+0x50>)
  4031e2:	4798      	blx	r3
	delay_ms(5);
  4031e4:	4805      	ldr	r0, [pc, #20]	; (4031fc <cmdDWMsend+0x54>)
  4031e6:	4b06      	ldr	r3, [pc, #24]	; (403200 <cmdDWMsend+0x58>)
  4031e8:	4798      	blx	r3
}
  4031ea:	b003      	add	sp, #12
  4031ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4031f0:	00403165 	.word	0x00403165
  4031f4:	00403141 	.word	0x00403141
  4031f8:	00403185 	.word	0x00403185
  4031fc:	0003dbc2 	.word	0x0003dbc2
  403200:	20400001 	.word	0x20400001

00403204 <Task1>:
	/* Insert application code here, after the board has been initialized. */
}


//flashy task
void Task1 (void* pvParameters) {
  403204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int tg = 1;
	char buf[20];
	pio_clear(LED1);
  403206:	4d0f      	ldr	r5, [pc, #60]	; (403244 <Task1+0x40>)
  403208:	4628      	mov	r0, r5
  40320a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40320e:	4c0e      	ldr	r4, [pc, #56]	; (403248 <Task1+0x44>)
  403210:	47a0      	blx	r4
	pio_clear(LED2);
  403212:	4628      	mov	r0, r5
  403214:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403218:	47a0      	blx	r4
}


//flashy task
void Task1 (void* pvParameters) {
	int tg = 1;
  40321a:	2401      	movs	r4, #1
			pio_set(LED1);
			tg = !tg;
			//sendDebugString("On\n");
		}
		else {
			pio_clear(LED1);
  40321c:	4f0a      	ldr	r7, [pc, #40]	; (403248 <Task1+0x44>)
		//sprintf(buf,"anaMag:%f, anaAngle:%f\n",sqrt(AnaX*AnaX + AnaY*AnaY));
		//sendDebugString(buf);

		
		if (tg){
			pio_set(LED1);
  40321e:	4e0b      	ldr	r6, [pc, #44]	; (40324c <Task1+0x48>)
	for(;;){
		//sprintf(buf,"anaMag:%f, anaAngle:%f\n",sqrt(AnaX*AnaX + AnaY*AnaY));
		//sendDebugString(buf);

		
		if (tg){
  403220:	b12c      	cbz	r4, 40322e <Task1+0x2a>
			pio_set(LED1);
  403222:	4628      	mov	r0, r5
  403224:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403228:	47b0      	blx	r6
			tg = !tg;
  40322a:	2400      	movs	r4, #0
  40322c:	e004      	b.n	403238 <Task1+0x34>
			//sendDebugString("On\n");
		}
		else {
			pio_clear(LED1);
  40322e:	4628      	mov	r0, r5
  403230:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403234:	47b8      	blx	r7
			tg = !tg;
  403236:	2401      	movs	r4, #1
			//sendDebugString("Fresh\n");
		}
		vTaskDelay(500);
  403238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  40323c:	4b04      	ldr	r3, [pc, #16]	; (403250 <Task1+0x4c>)
  40323e:	4798      	blx	r3
		

	}
  403240:	e7ee      	b.n	403220 <Task1+0x1c>
  403242:	bf00      	nop
  403244:	400e1400 	.word	0x400e1400
  403248:	00402499 	.word	0x00402499
  40324c:	00402495 	.word	0x00402495
  403250:	004017f9 	.word	0x004017f9

00403254 <SendFrameTask>:
}
//done
void SendFrameTask (void* pvParameters){
  403254:	b508      	push	{r3, lr}
	
	for (;;){
		if (FRAMEsem !=NULL){
  403256:	4e0a      	ldr	r6, [pc, #40]	; (403280 <SendFrameTask+0x2c>)
			if(xSemaphoreTake(FRAMEsem,0xFFFF) == pdTRUE){
  403258:	4d0a      	ldr	r5, [pc, #40]	; (403284 <SendFrameTask+0x30>)
  40325a:	2400      	movs	r4, #0
}
//done
void SendFrameTask (void* pvParameters){
	
	for (;;){
		if (FRAMEsem !=NULL){
  40325c:	6830      	ldr	r0, [r6, #0]
  40325e:	2800      	cmp	r0, #0
  403260:	d0fd      	beq.n	40325e <SendFrameTask+0xa>
			if(xSemaphoreTake(FRAMEsem,0xFFFF) == pdTRUE){
  403262:	4621      	mov	r1, r4
  403264:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403268:	4623      	mov	r3, r4
  40326a:	47a8      	blx	r5
  40326c:	2801      	cmp	r0, #1
  40326e:	d1f5      	bne.n	40325c <SendFrameTask+0x8>
				cmdDWMsend(sendArr,sendlength+2);
  403270:	4b05      	ldr	r3, [pc, #20]	; (403288 <SendFrameTask+0x34>)
  403272:	6819      	ldr	r1, [r3, #0]
  403274:	4805      	ldr	r0, [pc, #20]	; (40328c <SendFrameTask+0x38>)
  403276:	3102      	adds	r1, #2
  403278:	4b05      	ldr	r3, [pc, #20]	; (403290 <SendFrameTask+0x3c>)
  40327a:	4798      	blx	r3
  40327c:	e7ed      	b.n	40325a <SendFrameTask+0x6>
  40327e:	bf00      	nop
  403280:	2040bf20 	.word	0x2040bf20
  403284:	0040100d 	.word	0x0040100d
  403288:	2040bf08 	.word	0x2040bf08
  40328c:	2040bff0 	.word	0x2040bff0
  403290:	004031a9 	.word	0x004031a9

00403294 <UpdateTask>:
		anaMag = sqrt(AnaX*AnaX + AnaY*AnaY);
		vTaskDelay(20);
	}
}
//done
void UpdateTask (void* pvParameters) {
  403294:	b580      	push	{r7, lr}
	PIOAsem = xSemaphoreCreateBinary();
  403296:	2001      	movs	r0, #1
  403298:	2100      	movs	r1, #0
  40329a:	2203      	movs	r2, #3
  40329c:	4b22      	ldr	r3, [pc, #136]	; (403328 <UpdateTask+0x94>)
  40329e:	4798      	blx	r3
  4032a0:	4b22      	ldr	r3, [pc, #136]	; (40332c <UpdateTask+0x98>)
  4032a2:	6018      	str	r0, [r3, #0]
	buttonState = PIOA->PIO_PDSR;
  4032a4:	4b22      	ldr	r3, [pc, #136]	; (403330 <UpdateTask+0x9c>)
  4032a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  4032a8:	4b22      	ldr	r3, [pc, #136]	; (403334 <UpdateTask+0xa0>)
  4032aa:	601a      	str	r2, [r3, #0]
	for(;;) {
		if( PIOAsem !=NULL){
  4032ac:	4e1f      	ldr	r6, [pc, #124]	; (40332c <UpdateTask+0x98>)
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){				
  4032ae:	4d22      	ldr	r5, [pc, #136]	; (403338 <UpdateTask+0xa4>)
				buttonState = PIOA->PIO_PDSR;
  4032b0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 403330 <UpdateTask+0x9c>
  4032b4:	461f      	mov	r7, r3
void UpdateTask (void* pvParameters) {
	PIOAsem = xSemaphoreCreateBinary();
	buttonState = PIOA->PIO_PDSR;
	for(;;) {
		if( PIOAsem !=NULL){
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){				
  4032b6:	2400      	movs	r4, #0
//done
void UpdateTask (void* pvParameters) {
	PIOAsem = xSemaphoreCreateBinary();
	buttonState = PIOA->PIO_PDSR;
	for(;;) {
		if( PIOAsem !=NULL){
  4032b8:	6830      	ldr	r0, [r6, #0]
  4032ba:	2800      	cmp	r0, #0
  4032bc:	d0fd      	beq.n	4032ba <UpdateTask+0x26>
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){				
  4032be:	4621      	mov	r1, r4
  4032c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4032c4:	4623      	mov	r3, r4
  4032c6:	47a8      	blx	r5
  4032c8:	2801      	cmp	r0, #1
  4032ca:	d1f5      	bne.n	4032b8 <UpdateTask+0x24>
				buttonState = PIOA->PIO_PDSR;
  4032cc:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
  4032d0:	603a      	str	r2, [r7, #0]
				if(ButtonStatus&SW4Up && !(buttonState&SW4Up)) {
  4032d2:	4b1a      	ldr	r3, [pc, #104]	; (40333c <UpdateTask+0xa8>)
  4032d4:	681b      	ldr	r3, [r3, #0]
  4032d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  4032da:	d009      	beq.n	4032f0 <UpdateTask+0x5c>
  4032dc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  4032e0:	d106      	bne.n	4032f0 <UpdateTask+0x5c>
					extraHgt+=5;
  4032e2:	4917      	ldr	r1, [pc, #92]	; (403340 <UpdateTask+0xac>)
  4032e4:	680a      	ldr	r2, [r1, #0]
  4032e6:	3205      	adds	r2, #5
  4032e8:	600a      	str	r2, [r1, #0]
					wasWalking = 1;
  4032ea:	2101      	movs	r1, #1
  4032ec:	4a15      	ldr	r2, [pc, #84]	; (403344 <UpdateTask+0xb0>)
  4032ee:	6011      	str	r1, [r2, #0]
				}
				if(ButtonStatus&SW4Down && !(buttonState&SW4Down)) {
  4032f0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4032f4:	d00a      	beq.n	40330c <UpdateTask+0x78>
  4032f6:	683b      	ldr	r3, [r7, #0]
  4032f8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  4032fc:	d106      	bne.n	40330c <UpdateTask+0x78>
					extraHgt-=5;
  4032fe:	4a10      	ldr	r2, [pc, #64]	; (403340 <UpdateTask+0xac>)
  403300:	6813      	ldr	r3, [r2, #0]
  403302:	3b05      	subs	r3, #5
  403304:	6013      	str	r3, [r2, #0]
					wasWalking = 1;
  403306:	2201      	movs	r2, #1
  403308:	4b0e      	ldr	r3, [pc, #56]	; (403344 <UpdateTask+0xb0>)
  40330a:	601a      	str	r2, [r3, #0]
				}
				if(extraHgt > EX_HGT_MAX) extraHgt = EX_HGT_MAX;
  40330c:	4b0c      	ldr	r3, [pc, #48]	; (403340 <UpdateTask+0xac>)
  40330e:	681b      	ldr	r3, [r3, #0]
  403310:	2b64      	cmp	r3, #100	; 0x64
  403312:	dd03      	ble.n	40331c <UpdateTask+0x88>
  403314:	2264      	movs	r2, #100	; 0x64
  403316:	4b0a      	ldr	r3, [pc, #40]	; (403340 <UpdateTask+0xac>)
  403318:	601a      	str	r2, [r3, #0]
  40331a:	e7cc      	b.n	4032b6 <UpdateTask+0x22>
				if(extraHgt < EX_HGT_MIN) extraHgt = EX_HGT_MIN;
  40331c:	2b00      	cmp	r3, #0
  40331e:	daca      	bge.n	4032b6 <UpdateTask+0x22>
  403320:	2200      	movs	r2, #0
  403322:	4b07      	ldr	r3, [pc, #28]	; (403340 <UpdateTask+0xac>)
  403324:	601a      	str	r2, [r3, #0]
  403326:	e7c6      	b.n	4032b6 <UpdateTask+0x22>
  403328:	00400bd5 	.word	0x00400bd5
  40332c:	2040bf10 	.word	0x2040bf10
  403330:	400e0e00 	.word	0x400e0e00
  403334:	2040bf14 	.word	0x2040bf14
  403338:	0040100d 	.word	0x0040100d
  40333c:	2040c018 	.word	0x2040c018
  403340:	2040bf04 	.word	0x2040bf04
  403344:	2040bf1c 	.word	0x2040bf1c

00403348 <SendSpecTask>:
			}
		}
	}
}
//done
void SendSpecTask (void* pvParameters) {
  403348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40334c:	b084      	sub	sp, #16
	CMDFRAMEsem = xSemaphoreCreateBinary();
  40334e:	2001      	movs	r0, #1
  403350:	2100      	movs	r1, #0
  403352:	2203      	movs	r2, #3
  403354:	4b24      	ldr	r3, [pc, #144]	; (4033e8 <SendSpecTask+0xa0>)
  403356:	4798      	blx	r3
  403358:	4b24      	ldr	r3, [pc, #144]	; (4033ec <SendSpecTask+0xa4>)
  40335a:	6018      	str	r0, [r3, #0]
	int standing = 0;
	int surp = 0;
  40335c:	f04f 0800 	mov.w	r8, #0
	}
}
//done
void SendSpecTask (void* pvParameters) {
	CMDFRAMEsem = xSemaphoreCreateBinary();
	int standing = 0;
  403360:	4647      	mov	r7, r8
	int surp = 0;
	char sendbuf[10];
	for(;;) {
		if( CMDFRAMEsem !=NULL){
  403362:	461e      	mov	r6, r3
			if( xSemaphoreTake(CMDFRAMEsem,0xFFFF) == pdTRUE){
  403364:	4d22      	ldr	r5, [pc, #136]	; (4033f0 <SendSpecTask+0xa8>)
  403366:	2400      	movs	r4, #0
	CMDFRAMEsem = xSemaphoreCreateBinary();
	int standing = 0;
	int surp = 0;
	char sendbuf[10];
	for(;;) {
		if( CMDFRAMEsem !=NULL){
  403368:	6830      	ldr	r0, [r6, #0]
  40336a:	2800      	cmp	r0, #0
  40336c:	d0fd      	beq.n	40336a <SendSpecTask+0x22>
			if( xSemaphoreTake(CMDFRAMEsem,0xFFFF) == pdTRUE){
  40336e:	4621      	mov	r1, r4
  403370:	f64f 72ff 	movw	r2, #65535	; 0xffff
  403374:	4623      	mov	r3, r4
  403376:	47a8      	blx	r5
  403378:	2801      	cmp	r0, #1
  40337a:	d1f5      	bne.n	403368 <SendSpecTask+0x20>
				sendDebugString("sendSpecialFrame\n");
  40337c:	481d      	ldr	r0, [pc, #116]	; (4033f4 <SendSpecTask+0xac>)
  40337e:	4b1e      	ldr	r3, [pc, #120]	; (4033f8 <SendSpecTask+0xb0>)
  403380:	4798      	blx	r3
				if(ButtonStatus&Push1) {
  403382:	4b1e      	ldr	r3, [pc, #120]	; (4033fc <SendSpecTask+0xb4>)
  403384:	681b      	ldr	r3, [r3, #0]
  403386:	f413 6f00 	tst.w	r3, #2048	; 0x800
  40338a:	d013      	beq.n	4033b4 <SendSpecTask+0x6c>
					sendbuf[0] = 4;
  40338c:	2304      	movs	r3, #4
  40338e:	f88d 3004 	strb.w	r3, [sp, #4]
					if(standing) {
  403392:	b13f      	cbz	r7, 4033a4 <SendSpecTask+0x5c>
						standing = 0;
						sendbuf[1] = 1;
  403394:	2301      	movs	r3, #1
  403396:	f88d 3005 	strb.w	r3, [sp, #5]
						sendDebugString("sitDown\n");
  40339a:	4819      	ldr	r0, [pc, #100]	; (403400 <SendSpecTask+0xb8>)
  40339c:	4b16      	ldr	r3, [pc, #88]	; (4033f8 <SendSpecTask+0xb0>)
  40339e:	4798      	blx	r3
			if( xSemaphoreTake(CMDFRAMEsem,0xFFFF) == pdTRUE){
				sendDebugString("sendSpecialFrame\n");
				if(ButtonStatus&Push1) {
					sendbuf[0] = 4;
					if(standing) {
						standing = 0;
  4033a0:	2700      	movs	r7, #0
  4033a2:	e01b      	b.n	4033dc <SendSpecTask+0x94>
						sendbuf[1] = 1;
						sendDebugString("sitDown\n");
					}
					else {
						standing = 1;
						sendDebugString("standUp\n");
  4033a4:	4817      	ldr	r0, [pc, #92]	; (403404 <SendSpecTask+0xbc>)
  4033a6:	4b14      	ldr	r3, [pc, #80]	; (4033f8 <SendSpecTask+0xb0>)
  4033a8:	4798      	blx	r3
						sendbuf[1] = 0;
  4033aa:	2300      	movs	r3, #0
  4033ac:	f88d 3005 	strb.w	r3, [sp, #5]
						standing = 0;
						sendbuf[1] = 1;
						sendDebugString("sitDown\n");
					}
					else {
						standing = 1;
  4033b0:	2701      	movs	r7, #1
  4033b2:	e013      	b.n	4033dc <SendSpecTask+0x94>
						sendDebugString("standUp\n");
						sendbuf[1] = 0;
					}
				}
				
				else if(ButtonStatus&Push2) {
  4033b4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  4033b8:	d010      	beq.n	4033dc <SendSpecTask+0x94>
					sendbuf[0] = 5;
  4033ba:	2305      	movs	r3, #5
  4033bc:	f88d 3004 	strb.w	r3, [sp, #4]
					if(surp) {
  4033c0:	f1b8 0f00 	cmp.w	r8, #0
  4033c4:	d005      	beq.n	4033d2 <SendSpecTask+0x8a>
						surp = 0;
						sendbuf[1] = 1;
  4033c6:	2301      	movs	r3, #1
  4033c8:	f88d 3005 	strb.w	r3, [sp, #5]
				}
				
				else if(ButtonStatus&Push2) {
					sendbuf[0] = 5;
					if(surp) {
						surp = 0;
  4033cc:	f04f 0800 	mov.w	r8, #0
  4033d0:	e004      	b.n	4033dc <SendSpecTask+0x94>
						sendbuf[1] = 1;
					}
					else {
						surp = 1;
						sendbuf[1] = 0;
  4033d2:	2300      	movs	r3, #0
  4033d4:	f88d 3005 	strb.w	r3, [sp, #5]
					if(surp) {
						surp = 0;
						sendbuf[1] = 1;
					}
					else {
						surp = 1;
  4033d8:	f04f 0801 	mov.w	r8, #1
						sendbuf[1] = 0;
					}
				}
				cmdDWMsend(sendbuf,4);
  4033dc:	a801      	add	r0, sp, #4
  4033de:	2104      	movs	r1, #4
  4033e0:	4b09      	ldr	r3, [pc, #36]	; (403408 <SendSpecTask+0xc0>)
  4033e2:	4798      	blx	r3
  4033e4:	e7bf      	b.n	403366 <SendSpecTask+0x1e>
  4033e6:	bf00      	nop
  4033e8:	00400bd5 	.word	0x00400bd5
  4033ec:	2040bf24 	.word	0x2040bf24
  4033f0:	0040100d 	.word	0x0040100d
  4033f4:	00406690 	.word	0x00406690
  4033f8:	00402ca9 	.word	0x00402ca9
  4033fc:	2040c018 	.word	0x2040c018
  403400:	004066a4 	.word	0x004066a4
  403404:	004066b0 	.word	0x004066b0
  403408:	004031a9 	.word	0x004031a9

0040340c <main>:





int main (void){
  40340c:	b570      	push	{r4, r5, r6, lr}
  40340e:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  403410:	4b2c      	ldr	r3, [pc, #176]	; (4034c4 <main+0xb8>)
  403412:	4798      	blx	r3
	//DW1000_toggleGPIO_MODE();
	xTaskCreate(Task1,"TASK1",600,NULL,2,NULL);
  403414:	2302      	movs	r3, #2
  403416:	9300      	str	r3, [sp, #0]
  403418:	2400      	movs	r4, #0
  40341a:	9401      	str	r4, [sp, #4]
  40341c:	9402      	str	r4, [sp, #8]
  40341e:	9403      	str	r4, [sp, #12]
  403420:	4829      	ldr	r0, [pc, #164]	; (4034c8 <main+0xbc>)
  403422:	492a      	ldr	r1, [pc, #168]	; (4034cc <main+0xc0>)
  403424:	f44f 7216 	mov.w	r2, #600	; 0x258
  403428:	4623      	mov	r3, r4
  40342a:	4d29      	ldr	r5, [pc, #164]	; (4034d0 <main+0xc4>)
  40342c:	47a8      	blx	r5
	xTaskCreate(AnalogTask,"SENDFRAMETASK",600,NULL,4,NULL);
  40342e:	4e29      	ldr	r6, [pc, #164]	; (4034d4 <main+0xc8>)
  403430:	2304      	movs	r3, #4
  403432:	9300      	str	r3, [sp, #0]
  403434:	9401      	str	r4, [sp, #4]
  403436:	9402      	str	r4, [sp, #8]
  403438:	9403      	str	r4, [sp, #12]
  40343a:	4827      	ldr	r0, [pc, #156]	; (4034d8 <main+0xcc>)
  40343c:	4631      	mov	r1, r6
  40343e:	f44f 7216 	mov.w	r2, #600	; 0x258
  403442:	4623      	mov	r3, r4
  403444:	47a8      	blx	r5
	xTaskCreate(BuildFrameTask,"BUILDFRAMETASK",600,NULL,5,NULL);
  403446:	2305      	movs	r3, #5
  403448:	9300      	str	r3, [sp, #0]
  40344a:	9401      	str	r4, [sp, #4]
  40344c:	9402      	str	r4, [sp, #8]
  40344e:	9403      	str	r4, [sp, #12]
  403450:	4822      	ldr	r0, [pc, #136]	; (4034dc <main+0xd0>)
  403452:	4923      	ldr	r1, [pc, #140]	; (4034e0 <main+0xd4>)
  403454:	f44f 7216 	mov.w	r2, #600	; 0x258
  403458:	4623      	mov	r3, r4
  40345a:	47a8      	blx	r5
	xTaskCreate(SendFrameTask,"SENDFRAMETASK",600,NULL,3,NULL);
  40345c:	2303      	movs	r3, #3
  40345e:	9300      	str	r3, [sp, #0]
  403460:	9401      	str	r4, [sp, #4]
  403462:	9402      	str	r4, [sp, #8]
  403464:	9403      	str	r4, [sp, #12]
  403466:	481f      	ldr	r0, [pc, #124]	; (4034e4 <main+0xd8>)
  403468:	4631      	mov	r1, r6
  40346a:	f44f 7216 	mov.w	r2, #600	; 0x258
  40346e:	4623      	mov	r3, r4
  403470:	47a8      	blx	r5
	xTaskCreate(UpdateTask,"UPDATETASK",600,NULL,6,NULL);
  403472:	2306      	movs	r3, #6
  403474:	9300      	str	r3, [sp, #0]
  403476:	9401      	str	r4, [sp, #4]
  403478:	9402      	str	r4, [sp, #8]
  40347a:	9403      	str	r4, [sp, #12]
  40347c:	481a      	ldr	r0, [pc, #104]	; (4034e8 <main+0xdc>)
  40347e:	491b      	ldr	r1, [pc, #108]	; (4034ec <main+0xe0>)
  403480:	f44f 7216 	mov.w	r2, #600	; 0x258
  403484:	4623      	mov	r3, r4
  403486:	47a8      	blx	r5
	xTaskCreate(SendSpecTask,"SENDSPECTASK",600,NULL,7,NULL);
  403488:	2307      	movs	r3, #7
  40348a:	9300      	str	r3, [sp, #0]
  40348c:	9401      	str	r4, [sp, #4]
  40348e:	9402      	str	r4, [sp, #8]
  403490:	9403      	str	r4, [sp, #12]
  403492:	4817      	ldr	r0, [pc, #92]	; (4034f0 <main+0xe4>)
  403494:	4917      	ldr	r1, [pc, #92]	; (4034f4 <main+0xe8>)
  403496:	f44f 7216 	mov.w	r2, #600	; 0x258
  40349a:	4623      	mov	r3, r4
  40349c:	47a8      	blx	r5
	
	pio_clear(LED1);
  40349e:	4e16      	ldr	r6, [pc, #88]	; (4034f8 <main+0xec>)
  4034a0:	4630      	mov	r0, r6
  4034a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4034a6:	4d15      	ldr	r5, [pc, #84]	; (4034fc <main+0xf0>)
  4034a8:	47a8      	blx	r5
	pio_clear(LED1);
  4034aa:	4630      	mov	r0, r6
  4034ac:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4034b0:	47a8      	blx	r5
	sendDebugString("Lights on\n Hi Shovel Lord\n");
  4034b2:	4813      	ldr	r0, [pc, #76]	; (403500 <main+0xf4>)
  4034b4:	4b13      	ldr	r3, [pc, #76]	; (403504 <main+0xf8>)
  4034b6:	4798      	blx	r3
	vTaskStartScheduler();
  4034b8:	4b13      	ldr	r3, [pc, #76]	; (403508 <main+0xfc>)
  4034ba:	4798      	blx	r3
	
	
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  4034bc:	4620      	mov	r0, r4
  4034be:	b004      	add	sp, #16
  4034c0:	bd70      	pop	{r4, r5, r6, pc}
  4034c2:	bf00      	nop
  4034c4:	004027b9 	.word	0x004027b9
  4034c8:	00403205 	.word	0x00403205
  4034cc:	004066bc 	.word	0x004066bc
  4034d0:	004012d9 	.word	0x004012d9
  4034d4:	004066c4 	.word	0x004066c4
  4034d8:	004038d9 	.word	0x004038d9
  4034dc:	00403631 	.word	0x00403631
  4034e0:	004066d4 	.word	0x004066d4
  4034e4:	00403255 	.word	0x00403255
  4034e8:	00403295 	.word	0x00403295
  4034ec:	004066e4 	.word	0x004066e4
  4034f0:	00403349 	.word	0x00403349
  4034f4:	004066f0 	.word	0x004066f0
  4034f8:	400e1400 	.word	0x400e1400
  4034fc:	00402499 	.word	0x00402499
  403500:	00406700 	.word	0x00406700
  403504:	00402ca9 	.word	0x00402ca9
  403508:	00401501 	.word	0x00401501

0040350c <PIOA_Handler>:
			}
		}
	}
}
//done
void PIOA_Handler (void) {
  40350c:	b538      	push	{r3, r4, r5, lr}
	ButtonStatus = pio_get_interrupt_status(PIOA);
  40350e:	4d0f      	ldr	r5, [pc, #60]	; (40354c <PIOA_Handler+0x40>)
  403510:	4628      	mov	r0, r5
  403512:	4b0f      	ldr	r3, [pc, #60]	; (403550 <PIOA_Handler+0x44>)
  403514:	4798      	blx	r3
  403516:	4c0f      	ldr	r4, [pc, #60]	; (403554 <PIOA_Handler+0x48>)
  403518:	6020      	str	r0, [r4, #0]
	ButtonStatus &= pio_get_interrupt_mask(PIOA);
  40351a:	4628      	mov	r0, r5
  40351c:	4b0e      	ldr	r3, [pc, #56]	; (403558 <PIOA_Handler+0x4c>)
  40351e:	4798      	blx	r3
  403520:	6823      	ldr	r3, [r4, #0]
  403522:	4018      	ands	r0, r3
  403524:	6020      	str	r0, [r4, #0]
	if(ButtonStatus&Push1 || ButtonStatus&Push2) xSemaphoreGiveFromISR(CMDFRAMEsem,NULL);
  403526:	f410 5fc0 	tst.w	r0, #6144	; 0x1800
  40352a:	d005      	beq.n	403538 <PIOA_Handler+0x2c>
  40352c:	4b0b      	ldr	r3, [pc, #44]	; (40355c <PIOA_Handler+0x50>)
  40352e:	6818      	ldr	r0, [r3, #0]
  403530:	2100      	movs	r1, #0
  403532:	4b0b      	ldr	r3, [pc, #44]	; (403560 <PIOA_Handler+0x54>)
  403534:	4798      	blx	r3
  403536:	bd38      	pop	{r3, r4, r5, pc}
	else {
		sendDebugString("UpdateSemCalled\n");
  403538:	480a      	ldr	r0, [pc, #40]	; (403564 <PIOA_Handler+0x58>)
  40353a:	4b0b      	ldr	r3, [pc, #44]	; (403568 <PIOA_Handler+0x5c>)
  40353c:	4798      	blx	r3
		 xSemaphoreGiveFromISR(PIOAsem,NULL);
  40353e:	4b0b      	ldr	r3, [pc, #44]	; (40356c <PIOA_Handler+0x60>)
  403540:	6818      	ldr	r0, [r3, #0]
  403542:	2100      	movs	r1, #0
  403544:	4b06      	ldr	r3, [pc, #24]	; (403560 <PIOA_Handler+0x54>)
  403546:	4798      	blx	r3
  403548:	bd38      	pop	{r3, r4, r5, pc}
  40354a:	bf00      	nop
  40354c:	400e0e00 	.word	0x400e0e00
  403550:	004025cd 	.word	0x004025cd
  403554:	2040c018 	.word	0x2040c018
  403558:	004025d1 	.word	0x004025d1
  40355c:	2040bf24 	.word	0x2040bf24
  403560:	00400f2d 	.word	0x00400f2d
  403564:	0040671c 	.word	0x0040671c
  403568:	00402ca9 	.word	0x00402ca9
  40356c:	2040bf10 	.word	0x2040bf10

00403570 <buildFrameExtd>:
		sprintf(buf,"byte %d: %x\n",i,sendArr[i]);
		sendDebugString(buf);
	}
	
}
void buildFrameExtd(float Turn,float Dir,int cycle,int max_i,Byte walkEN,int stance, int height, int pUp, int stride) {
  403570:	b5f0      	push	{r4, r5, r6, r7, lr}
  403572:	f8dd e018 	ldr.w	lr, [sp, #24]
  403576:	9f07      	ldr	r7, [sp, #28]
  403578:	9e08      	ldr	r6, [sp, #32]
  40357a:	9d09      	ldr	r5, [sp, #36]	; 0x24
	
	//************************
	//kill this later yo
	char buf[40];
	//************************
	sendlength = 35;
  40357c:	f04f 0c23 	mov.w	ip, #35	; 0x23
  403580:	4c28      	ldr	r4, [pc, #160]	; (403624 <buildFrameExtd+0xb4>)
  403582:	f8c4 c000 	str.w	ip, [r4]
	sendArr[0] = 2;
  403586:	4c28      	ldr	r4, [pc, #160]	; (403628 <buildFrameExtd+0xb8>)
  403588:	f04f 0c02 	mov.w	ip, #2
  40358c:	f884 c000 	strb.w	ip, [r4]
	
	floatchangeTurn = *((uint32_t*)&Turn);
	floatchangeDir = *((uint32_t*)&Dir);
	
	sendArr[1] = (Byte)(floatchangeTurn);
  403590:	7060      	strb	r0, [r4, #1]
	sendArr[2] = (Byte)(floatchangeTurn >> 8);
  403592:	ea4f 2c20 	mov.w	ip, r0, asr #8
  403596:	f884 c002 	strb.w	ip, [r4, #2]
	sendArr[3] = (Byte)(floatchangeTurn >> 16);
  40359a:	ea4f 4c20 	mov.w	ip, r0, asr #16
  40359e:	f884 c003 	strb.w	ip, [r4, #3]
	sendArr[4] = (Byte)(floatchangeTurn >> 24);
  4035a2:	1600      	asrs	r0, r0, #24
  4035a4:	7120      	strb	r0, [r4, #4]
	
	sendArr[5] = (Byte)(floatchangeDir);
  4035a6:	7161      	strb	r1, [r4, #5]
	sendArr[6] = (Byte)(floatchangeDir >> 8);
  4035a8:	1208      	asrs	r0, r1, #8
  4035aa:	71a0      	strb	r0, [r4, #6]
	sendArr[7] = (Byte)(floatchangeDir >> 16);
  4035ac:	1408      	asrs	r0, r1, #16
  4035ae:	71e0      	strb	r0, [r4, #7]
	sendArr[8] = (Byte)(floatchangeDir >> 24);
  4035b0:	1609      	asrs	r1, r1, #24
  4035b2:	7221      	strb	r1, [r4, #8]
	
	sendArr[9] = (Byte)cycle;
  4035b4:	7262      	strb	r2, [r4, #9]
	sendArr[10] = (Byte)(cycle >> 8);
  4035b6:	1211      	asrs	r1, r2, #8
  4035b8:	72a1      	strb	r1, [r4, #10]
	sendArr[11] = (Byte)(cycle >> 16);
  4035ba:	1411      	asrs	r1, r2, #16
  4035bc:	72e1      	strb	r1, [r4, #11]
	sendArr[12] = (Byte)(cycle >> 24);
  4035be:	1612      	asrs	r2, r2, #24
  4035c0:	7322      	strb	r2, [r4, #12]
	
	sendArr[13] = (Byte)max_i;
  4035c2:	7363      	strb	r3, [r4, #13]
	sendArr[14] = (Byte)(max_i >> 8);
  4035c4:	121a      	asrs	r2, r3, #8
  4035c6:	73a2      	strb	r2, [r4, #14]
	sendArr[15] = (Byte)(max_i >> 16);
  4035c8:	141a      	asrs	r2, r3, #16
  4035ca:	73e2      	strb	r2, [r4, #15]
	sendArr[16] = (Byte)(max_i >> 24);
  4035cc:	161b      	asrs	r3, r3, #24
  4035ce:	7423      	strb	r3, [r4, #16]
	
	sendArr[17] = walkEN;
  4035d0:	f89d 3014 	ldrb.w	r3, [sp, #20]
  4035d4:	7463      	strb	r3, [r4, #17]
	
	//stance
	sendArr[18] = (Byte)stance;
  4035d6:	f884 e012 	strb.w	lr, [r4, #18]
	sendArr[19] = (Byte)(stance >> 8);
  4035da:	ea4f 232e 	mov.w	r3, lr, asr #8
  4035de:	74e3      	strb	r3, [r4, #19]
	sendArr[20] = (Byte)(stance >> 16);
  4035e0:	ea4f 432e 	mov.w	r3, lr, asr #16
  4035e4:	7523      	strb	r3, [r4, #20]
	sendArr[21] = (Byte)(stance >> 24);
  4035e6:	ea4f 6e2e 	mov.w	lr, lr, asr #24
  4035ea:	f884 e015 	strb.w	lr, [r4, #21]
	
	//height
	sendArr[22] = (Byte)height;
  4035ee:	75a7      	strb	r7, [r4, #22]
	sendArr[23] = (Byte)(height >> 8);
  4035f0:	123b      	asrs	r3, r7, #8
  4035f2:	75e3      	strb	r3, [r4, #23]
	sendArr[24] = (Byte)(height >> 16);
  4035f4:	143b      	asrs	r3, r7, #16
  4035f6:	7623      	strb	r3, [r4, #24]
	sendArr[25] = (Byte)(height >> 24);
  4035f8:	163f      	asrs	r7, r7, #24
  4035fa:	7667      	strb	r7, [r4, #25]
	
	//pull up
	sendArr[26] = (Byte)pUp;
  4035fc:	76a6      	strb	r6, [r4, #26]
	sendArr[27] = (Byte)(pUp >> 8);
  4035fe:	1233      	asrs	r3, r6, #8
  403600:	76e3      	strb	r3, [r4, #27]
	sendArr[28] = (Byte)(pUp >> 16);
  403602:	1433      	asrs	r3, r6, #16
  403604:	7723      	strb	r3, [r4, #28]
	sendArr[29] = (Byte)(pUp >> 24);
  403606:	1636      	asrs	r6, r6, #24
  403608:	7766      	strb	r6, [r4, #29]
	
	//stride
	sendArr[30] = (Byte)stride;
  40360a:	77a5      	strb	r5, [r4, #30]
	sendArr[31] = (Byte)(stride >> 8);
  40360c:	122b      	asrs	r3, r5, #8
  40360e:	77e3      	strb	r3, [r4, #31]
	sendArr[32] = (Byte)(stride >> 16);
  403610:	142b      	asrs	r3, r5, #16
  403612:	f884 3020 	strb.w	r3, [r4, #32]
	sendArr[33] = (Byte)(stride >> 24);
  403616:	162d      	asrs	r5, r5, #24
  403618:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
	
	//retval
	sendArr[34] = 1;
  40361c:	2301      	movs	r3, #1
  40361e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  403622:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403624:	2040bf08 	.word	0x2040bf08
  403628:	2040bff0 	.word	0x2040bff0
  40362c:	00000000 	.word	0x00000000

00403630 <BuildFrameTask>:
			}
		}
	}
}

void BuildFrameTask(void* pvParameters){
  403630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403634:	ed2d 8b08 	vpush	{d8-d11}
  403638:	b087      	sub	sp, #28
	FRAMEsem = xSemaphoreCreateBinary();
  40363a:	2001      	movs	r0, #1
  40363c:	2100      	movs	r1, #0
  40363e:	2203      	movs	r2, #3
  403640:	4b79      	ldr	r3, [pc, #484]	; (403828 <BuildFrameTask+0x1f8>)
  403642:	4798      	blx	r3
  403644:	4b79      	ldr	r3, [pc, #484]	; (40382c <BuildFrameTask+0x1fc>)
  403646:	6018      	str	r0, [r3, #0]
	int max_i = 45;
	Byte walkEN = 0;
	int stance = 165;
	int height = 20;
	int pUp = 85;
	int stride = 65;
  403648:	2741      	movs	r7, #65	; 0x41
	int cycle = 60;
	int max_i = 45;
	Byte walkEN = 0;
	int stance = 165;
	int height = 20;
	int pUp = 85;
  40364a:	eddf 8a79 	vldr	s17, [pc, #484]	; 403830 <BuildFrameTask+0x200>

void BuildFrameTask(void* pvParameters){
	FRAMEsem = xSemaphoreCreateBinary();
	float moveTurn = 0.2;
	float movDir = 0;
	int cycle = 60;
  40364e:	253c      	movs	r5, #60	; 0x3c
	}
}

void BuildFrameTask(void* pvParameters){
	FRAMEsem = xSemaphoreCreateBinary();
	float moveTurn = 0.2;
  403650:	f8df 8234 	ldr.w	r8, [pc, #564]	; 403888 <BuildFrameTask+0x258>
	
	for(;;){
		
		//sprintf(buf,"buttonState: %8x : %8x\n",buttonState&SW5Left,buttonState&SW5Right);
		//sendDebugString(buf);
		if(anaMag > ANA_THRESH || !(buttonState&SW5Left) || !(buttonState&SW5Right)) {
  403654:	ed9f aa77 	vldr	s20, [pc, #476]	; 403834 <BuildFrameTask+0x204>
			if(!(buttonState&SW5Left)) moveTurn = -1;
			else if(!(buttonState&SW5Right)) moveTurn = 1;
			else moveTurn = 0.2;
  403658:	ee0a 8a90 	vmov	s21, r8
	
	for(;;){
		
		//sprintf(buf,"buttonState: %8x : %8x\n",buttonState&SW5Left,buttonState&SW5Right);
		//sendDebugString(buf);
		if(anaMag > ANA_THRESH || !(buttonState&SW5Left) || !(buttonState&SW5Right)) {
  40365c:	4b76      	ldr	r3, [pc, #472]	; (403838 <BuildFrameTask+0x208>)
  40365e:	ed93 ba00 	vldr	s22, [r3]
  403662:	eeb4 baca 	vcmpe.f32	s22, s20
  403666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40366a:	f300 80c6 	bgt.w	4037fa <BuildFrameTask+0x1ca>
  40366e:	4b73      	ldr	r3, [pc, #460]	; (40383c <BuildFrameTask+0x20c>)
  403670:	681b      	ldr	r3, [r3, #0]
  403672:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
  403676:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
  40367a:	f000 8098 	beq.w	4037ae <BuildFrameTask+0x17e>
			if(!(buttonState&SW5Left)) moveTurn = -1;
  40367e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  403682:	d00a      	beq.n	40369a <BuildFrameTask+0x6a>
			else if(!(buttonState&SW5Right)) moveTurn = 1;
  403684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
			else moveTurn = 0.2;
  403688:	2b00      	cmp	r3, #0
  40368a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x70
  40368e:	bf14      	ite	ne
  403690:	ee1a 8a90 	vmovne	r8, s21
  403694:	ee19 8a10 	vmoveq	r8, s18
  403698:	e001      	b.n	40369e <BuildFrameTask+0x6e>
	for(;;){
		
		//sprintf(buf,"buttonState: %8x : %8x\n",buttonState&SW5Left,buttonState&SW5Right);
		//sendDebugString(buf);
		if(anaMag > ANA_THRESH || !(buttonState&SW5Left) || !(buttonState&SW5Right)) {
			if(!(buttonState&SW5Left)) moveTurn = -1;
  40369a:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 40388c <BuildFrameTask+0x25c>
			else if(!(buttonState&SW5Right)) moveTurn = 1;
			else moveTurn = 0.2;
			
			if(!(anaMag > ANA_THRESH)) anaAng = 0;
  40369e:	eeb4 baca 	vcmpe.f32	s22, s20
  4036a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4036a6:	dc08      	bgt.n	4036ba <BuildFrameTask+0x8a>
  4036a8:	2200      	movs	r2, #0
  4036aa:	4b65      	ldr	r3, [pc, #404]	; (403840 <BuildFrameTask+0x210>)
  4036ac:	601a      	str	r2, [r3, #0]
  4036ae:	e004      	b.n	4036ba <BuildFrameTask+0x8a>
	for(;;){
		
		//sprintf(buf,"buttonState: %8x : %8x\n",buttonState&SW5Left,buttonState&SW5Right);
		//sendDebugString(buf);
		if(anaMag > ANA_THRESH || !(buttonState&SW5Left) || !(buttonState&SW5Right)) {
			if(!(buttonState&SW5Left)) moveTurn = -1;
  4036b0:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 40388c <BuildFrameTask+0x25c>
  4036b4:	e001      	b.n	4036ba <BuildFrameTask+0x8a>
			else if(!(buttonState&SW5Right)) moveTurn = 1;
  4036b6:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
			else moveTurn = 0.2;
			
			if(!(anaMag > ANA_THRESH)) anaAng = 0;
			
			wasWalking = 5;
  4036ba:	2205      	movs	r2, #5
  4036bc:	4b61      	ldr	r3, [pc, #388]	; (403844 <BuildFrameTask+0x214>)
  4036be:	601a      	str	r2, [r3, #0]
			max_i = 45;
			stance =  165;
			//default is 20; scale to 100 at sideways
			height = (20+extraHgt) + (80-extraHgt)*(fabsf(sin(anaAng)));
  4036c0:	4b61      	ldr	r3, [pc, #388]	; (403848 <BuildFrameTask+0x218>)
  4036c2:	681c      	ldr	r4, [r3, #0]
  4036c4:	4b5e      	ldr	r3, [pc, #376]	; (403840 <BuildFrameTask+0x210>)
  4036c6:	f8d3 b000 	ldr.w	fp, [r3]
  4036ca:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 403890 <BuildFrameTask+0x260>
  4036ce:	4658      	mov	r0, fp
  4036d0:	47c8      	blx	r9
  4036d2:	4b5e      	ldr	r3, [pc, #376]	; (40384c <BuildFrameTask+0x21c>)
  4036d4:	4798      	blx	r3
  4036d6:	4b5e      	ldr	r3, [pc, #376]	; (403850 <BuildFrameTask+0x220>)
  4036d8:	4798      	blx	r3
  4036da:	ee07 0a90 	vmov	s15, r0
  4036de:	eeb0 8ae7 	vabs.f32	s16, s15
			//default is 85; scale to 40 at sideways
			pUp    = 85 - 45*(fabsf(sin(anaAng)));
  4036e2:	eddf 8a5c 	vldr	s17, [pc, #368]	; 403854 <BuildFrameTask+0x224>
  4036e6:	ee68 8a28 	vmul.f32	s17, s16, s17
  4036ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 403858 <BuildFrameTask+0x228>
  4036ee:	ee77 8ae8 	vsub.f32	s17, s15, s17
  4036f2:	eefd 8ae8 	vcvt.s32.f32	s17, s17
			//default is 65; reduce to 40 at sideways
			stride = 65 - 35*(fabsf(sin(anaAng))) - 0.2*extraHgt;
  4036f6:	eddf 7a59 	vldr	s15, [pc, #356]	; 40385c <BuildFrameTask+0x22c>
  4036fa:	ee68 7a27 	vmul.f32	s15, s16, s15
  4036fe:	ed9f 7a58 	vldr	s14, [pc, #352]	; 403860 <BuildFrameTask+0x230>
  403702:	ee77 7a67 	vsub.f32	s15, s14, s15
  403706:	ee17 0a90 	vmov	r0, s15
  40370a:	47c8      	blx	r9
  40370c:	4606      	mov	r6, r0
  40370e:	460f      	mov	r7, r1
  403710:	4620      	mov	r0, r4
  403712:	4b54      	ldr	r3, [pc, #336]	; (403864 <BuildFrameTask+0x234>)
  403714:	4798      	blx	r3
  403716:	f8df a17c 	ldr.w	sl, [pc, #380]	; 403894 <BuildFrameTask+0x264>
  40371a:	a33f      	add	r3, pc, #252	; (adr r3, 403818 <BuildFrameTask+0x1e8>)
  40371c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403720:	47d0      	blx	sl
  403722:	4602      	mov	r2, r0
  403724:	460b      	mov	r3, r1
  403726:	4d50      	ldr	r5, [pc, #320]	; (403868 <BuildFrameTask+0x238>)
  403728:	4630      	mov	r0, r6
  40372a:	4639      	mov	r1, r7
  40372c:	47a8      	blx	r5
  40372e:	4e4f      	ldr	r6, [pc, #316]	; (40386c <BuildFrameTask+0x23c>)
  403730:	47b0      	blx	r6
  403732:	4607      	mov	r7, r0
			//start at 100 for 250; move to 30 at 2100
			cycle = 100 - (anaMag-250.00)*0.025;
  403734:	ee1b 0a10 	vmov	r0, s22
  403738:	47c8      	blx	r9
  40373a:	2200      	movs	r2, #0
  40373c:	4b4c      	ldr	r3, [pc, #304]	; (403870 <BuildFrameTask+0x240>)
  40373e:	47a8      	blx	r5
  403740:	a337      	add	r3, pc, #220	; (adr r3, 403820 <BuildFrameTask+0x1f0>)
  403742:	e9d3 2300 	ldrd	r2, r3, [r3]
  403746:	47d0      	blx	sl
  403748:	4602      	mov	r2, r0
  40374a:	460b      	mov	r3, r1
  40374c:	2000      	movs	r0, #0
  40374e:	4949      	ldr	r1, [pc, #292]	; (403874 <BuildFrameTask+0x244>)
  403750:	47a8      	blx	r5
  403752:	47b0      	blx	r6
  403754:	4605      	mov	r5, r0
			//walkEN
			walkEN = 1;
			buildFrameExtd(moveTurn,anaAng,cycle,max_i,walkEN,stance,height,pUp,stride);
  403756:	2301      	movs	r3, #1
  403758:	9300      	str	r3, [sp, #0]
  40375a:	23a5      	movs	r3, #165	; 0xa5
  40375c:	9301      	str	r3, [sp, #4]
			
			wasWalking = 5;
			max_i = 45;
			stance =  165;
			//default is 20; scale to 100 at sideways
			height = (20+extraHgt) + (80-extraHgt)*(fabsf(sin(anaAng)));
  40375e:	f104 0314 	add.w	r3, r4, #20
  403762:	ee07 3a90 	vmov	s15, r3
  403766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40376a:	f1c4 0450 	rsb	r4, r4, #80	; 0x50
  40376e:	ee07 4a10 	vmov	s14, r4
  403772:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  403776:	ee27 8a08 	vmul.f32	s16, s14, s16
  40377a:	ee37 8a88 	vadd.f32	s16, s15, s16
  40377e:	eebd 8ac8 	vcvt.s32.f32	s16, s16
			stride = 65 - 35*(fabsf(sin(anaAng))) - 0.2*extraHgt;
			//start at 100 for 250; move to 30 at 2100
			cycle = 100 - (anaMag-250.00)*0.025;
			//walkEN
			walkEN = 1;
			buildFrameExtd(moveTurn,anaAng,cycle,max_i,walkEN,stance,height,pUp,stride);
  403782:	ed8d 8a02 	vstr	s16, [sp, #8]
  403786:	edcd 8a03 	vstr	s17, [sp, #12]
  40378a:	9704      	str	r7, [sp, #16]
  40378c:	4640      	mov	r0, r8
  40378e:	4659      	mov	r1, fp
  403790:	462a      	mov	r2, r5
  403792:	232d      	movs	r3, #45	; 0x2d
  403794:	4c38      	ldr	r4, [pc, #224]	; (403878 <BuildFrameTask+0x248>)
  403796:	47a0      	blx	r4
			sendlength = 35;
  403798:	2223      	movs	r2, #35	; 0x23
  40379a:	4b38      	ldr	r3, [pc, #224]	; (40387c <BuildFrameTask+0x24c>)
  40379c:	601a      	str	r2, [r3, #0]
			xSemaphoreGive(FRAMEsem);
  40379e:	4b23      	ldr	r3, [pc, #140]	; (40382c <BuildFrameTask+0x1fc>)
  4037a0:	6818      	ldr	r0, [r3, #0]
  4037a2:	2100      	movs	r1, #0
  4037a4:	460a      	mov	r2, r1
  4037a6:	460b      	mov	r3, r1
  4037a8:	4c35      	ldr	r4, [pc, #212]	; (403880 <BuildFrameTask+0x250>)
  4037aa:	47a0      	blx	r4
  4037ac:	e021      	b.n	4037f2 <BuildFrameTask+0x1c2>
		}
		
		else {
			if(wasWalking != 0) {
  4037ae:	4b25      	ldr	r3, [pc, #148]	; (403844 <BuildFrameTask+0x214>)
  4037b0:	681b      	ldr	r3, [r3, #0]
  4037b2:	b1f3      	cbz	r3, 4037f2 <BuildFrameTask+0x1c2>
				wasWalking--;
  4037b4:	3b01      	subs	r3, #1
  4037b6:	4a23      	ldr	r2, [pc, #140]	; (403844 <BuildFrameTask+0x214>)
  4037b8:	6013      	str	r3, [r2, #0]
				max_i = 0;
				walkEN = 0;
				height = (20+extraHgt);
				buildFrameExtd(moveTurn,anaAng,cycle,max_i,walkEN,stance,height,pUp,stride);
  4037ba:	4b21      	ldr	r3, [pc, #132]	; (403840 <BuildFrameTask+0x210>)
  4037bc:	6819      	ldr	r1, [r3, #0]
  4037be:	2400      	movs	r4, #0
  4037c0:	9400      	str	r4, [sp, #0]
  4037c2:	23a5      	movs	r3, #165	; 0xa5
  4037c4:	9301      	str	r3, [sp, #4]
		else {
			if(wasWalking != 0) {
				wasWalking--;
				max_i = 0;
				walkEN = 0;
				height = (20+extraHgt);
  4037c6:	4b20      	ldr	r3, [pc, #128]	; (403848 <BuildFrameTask+0x218>)
  4037c8:	681b      	ldr	r3, [r3, #0]
  4037ca:	3314      	adds	r3, #20
				buildFrameExtd(moveTurn,anaAng,cycle,max_i,walkEN,stance,height,pUp,stride);
  4037cc:	9302      	str	r3, [sp, #8]
  4037ce:	edcd 8a03 	vstr	s17, [sp, #12]
  4037d2:	9704      	str	r7, [sp, #16]
  4037d4:	4640      	mov	r0, r8
  4037d6:	462a      	mov	r2, r5
  4037d8:	4623      	mov	r3, r4
  4037da:	4e27      	ldr	r6, [pc, #156]	; (403878 <BuildFrameTask+0x248>)
  4037dc:	47b0      	blx	r6
				sendlength = 35;
  4037de:	2223      	movs	r2, #35	; 0x23
  4037e0:	4b26      	ldr	r3, [pc, #152]	; (40387c <BuildFrameTask+0x24c>)
  4037e2:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(FRAMEsem);
  4037e4:	4b11      	ldr	r3, [pc, #68]	; (40382c <BuildFrameTask+0x1fc>)
  4037e6:	6818      	ldr	r0, [r3, #0]
  4037e8:	4621      	mov	r1, r4
  4037ea:	4622      	mov	r2, r4
  4037ec:	4623      	mov	r3, r4
  4037ee:	4c24      	ldr	r4, [pc, #144]	; (403880 <BuildFrameTask+0x250>)
  4037f0:	47a0      	blx	r4
			}
		}
		vTaskDelay(200);
  4037f2:	20c8      	movs	r0, #200	; 0xc8
  4037f4:	4b23      	ldr	r3, [pc, #140]	; (403884 <BuildFrameTask+0x254>)
  4037f6:	4798      	blx	r3
		

	}
  4037f8:	e730      	b.n	40365c <BuildFrameTask+0x2c>
	for(;;){
		
		//sprintf(buf,"buttonState: %8x : %8x\n",buttonState&SW5Left,buttonState&SW5Right);
		//sendDebugString(buf);
		if(anaMag > ANA_THRESH || !(buttonState&SW5Left) || !(buttonState&SW5Right)) {
			if(!(buttonState&SW5Left)) moveTurn = -1;
  4037fa:	4b10      	ldr	r3, [pc, #64]	; (40383c <BuildFrameTask+0x20c>)
  4037fc:	681b      	ldr	r3, [r3, #0]
  4037fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
  403802:	f43f af55 	beq.w	4036b0 <BuildFrameTask+0x80>
			else if(!(buttonState&SW5Right)) moveTurn = 1;
  403806:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40380a:	f43f af54 	beq.w	4036b6 <BuildFrameTask+0x86>
			else moveTurn = 0.2;
  40380e:	ee1a 8a90 	vmov	r8, s21
  403812:	e744      	b.n	40369e <BuildFrameTask+0x6e>
  403814:	f3af 8000 	nop.w
  403818:	9999999a 	.word	0x9999999a
  40381c:	3fc99999 	.word	0x3fc99999
  403820:	9999999a 	.word	0x9999999a
  403824:	3f999999 	.word	0x3f999999
  403828:	00400bd5 	.word	0x00400bd5
  40382c:	2040bf20 	.word	0x2040bf20
  403830:	00000055 	.word	0x00000055
  403834:	437a0000 	.word	0x437a0000
  403838:	2040bf0c 	.word	0x2040bf0c
  40383c:	2040bf14 	.word	0x2040bf14
  403840:	2040bf18 	.word	0x2040bf18
  403844:	2040bf1c 	.word	0x2040bf1c
  403848:	2040bf04 	.word	0x2040bf04
  40384c:	00403981 	.word	0x00403981
  403850:	00405ab9 	.word	0x00405ab9
  403854:	42340000 	.word	0x42340000
  403858:	42aa0000 	.word	0x42aa0000
  40385c:	420c0000 	.word	0x420c0000
  403860:	42820000 	.word	0x42820000
  403864:	00405469 	.word	0x00405469
  403868:	004051cd 	.word	0x004051cd
  40386c:	00405a69 	.word	0x00405a69
  403870:	406f4000 	.word	0x406f4000
  403874:	40590000 	.word	0x40590000
  403878:	00403571 	.word	0x00403571
  40387c:	2040bf08 	.word	0x2040bf08
  403880:	00400c59 	.word	0x00400c59
  403884:	004017f9 	.word	0x004017f9
  403888:	3e4ccccd 	.word	0x3e4ccccd
  40388c:	bf800000 	.word	0xbf800000
  403890:	0040548d 	.word	0x0040548d
  403894:	00405535 	.word	0x00405535

00403898 <getAnalog>:


uint32_t getAnalog(int channel) {
	uint32_t result;
	
	if (channel == 0){
  403898:	b970      	cbnz	r0, 4038b8 <getAnalog+0x20>
  40389a:	4b0e      	ldr	r3, [pc, #56]	; (4038d4 <getAnalog+0x3c>)
  40389c:	2201      	movs	r2, #1
  40389e:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  4038a0:	2202      	movs	r2, #2
  4038a2:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4038a4:	461a      	mov	r2, r3
  4038a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
		afec_channel_enable(AFEC0, AFEC_CHANNEL_0);
		afec_start_software_conversion(AFEC0);
		
		while (!(afec_get_interrupt_status(AFEC0) & (1 << AFEC_CHANNEL_0)));
  4038a8:	f013 0f01 	tst.w	r3, #1
  4038ac:	d0fb      	beq.n	4038a6 <getAnalog+0xe>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4038ae:	4b09      	ldr	r3, [pc, #36]	; (4038d4 <getAnalog+0x3c>)
  4038b0:	2200      	movs	r2, #0
  4038b2:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4038b4:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4038b6:	4770      	bx	lr
{
	if (afec_ch != AFEC_CHANNEL_ALL) {
		afec_ch_sanity_check(afec, afec_ch);
	}

	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4038b8:	4b06      	ldr	r3, [pc, #24]	; (4038d4 <getAnalog+0x3c>)
  4038ba:	2202      	movs	r2, #2
  4038bc:	615a      	str	r2, [r3, #20]
 *
 * \param afec  Base address of the AFEC.
 */
static inline void afec_start_software_conversion(Afec *const afec)
{
	afec->AFEC_CR = AFEC_CR_START;
  4038be:	601a      	str	r2, [r3, #0]
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  4038c0:	461a      	mov	r2, r3
  4038c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	}
	else{
		afec_channel_enable(AFEC0, AFEC_CHANNEL_1);
		afec_start_software_conversion(AFEC0);
		
		while (!(afec_get_interrupt_status(AFEC0) & (1 << AFEC_CHANNEL_1)));
  4038c4:	f013 0f02 	tst.w	r3, #2
  4038c8:	d0fb      	beq.n	4038c2 <getAnalog+0x2a>
static inline uint32_t afec_channel_get_value(Afec *const afec,
		enum afec_channel_num afec_ch)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  4038ca:	4b02      	ldr	r3, [pc, #8]	; (4038d4 <getAnalog+0x3c>)
  4038cc:	2201      	movs	r2, #1
  4038ce:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4038d0:	6e98      	ldr	r0, [r3, #104]	; 0x68
		result = afec_channel_get_value(AFEC0, AFEC_CHANNEL_1);
		//afec_channel_disable(AFEC0, AFEC_CHANNEL_1);
		
	}
	return result;
}
  4038d2:	4770      	bx	lr
  4038d4:	4003c000 	.word	0x4003c000

004038d8 <AnalogTask>:
		

	}
}
//done
void AnalogTask (void* pvParameters) {
  4038d8:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	int AnaX = 0;
	int AnaY = 0;
	
	for(;;) {
		AnaY = 2048-getAnalog(0);
  4038dc:	4f1e      	ldr	r7, [pc, #120]	; (403958 <AnalogTask+0x80>)
		AnaX = getAnalog(1)-2048;
		anaAng = atan2f(AnaY,AnaX) - (M_PI/2.00);
  4038de:	4e1f      	ldr	r6, [pc, #124]	; (40395c <AnalogTask+0x84>)
  4038e0:	f20f 0b6c 	addw	fp, pc, #108	; 0x6c
  4038e4:	e9db ab00 	ldrd	sl, fp, [fp]
void AnalogTask (void* pvParameters) {
	int AnaX = 0;
	int AnaY = 0;
	
	for(;;) {
		AnaY = 2048-getAnalog(0);
  4038e8:	2000      	movs	r0, #0
  4038ea:	47b8      	blx	r7
  4038ec:	f5c0 6500 	rsb	r5, r0, #2048	; 0x800
		AnaX = getAnalog(1)-2048;
  4038f0:	2001      	movs	r0, #1
  4038f2:	47b8      	blx	r7
  4038f4:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
		anaAng = atan2f(AnaY,AnaX) - (M_PI/2.00);
  4038f8:	ee07 5a90 	vmov	s15, r5
  4038fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403900:	ee17 0a90 	vmov	r0, s15
  403904:	ee07 4a90 	vmov	s15, r4
  403908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40390c:	ee17 1a90 	vmov	r1, s15
  403910:	47b0      	blx	r6
  403912:	4b13      	ldr	r3, [pc, #76]	; (403960 <AnalogTask+0x88>)
  403914:	4798      	blx	r3
  403916:	4652      	mov	r2, sl
  403918:	465b      	mov	r3, fp
  40391a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 403978 <AnalogTask+0xa0>
  40391e:	47e0      	blx	ip
  403920:	f8df 8058 	ldr.w	r8, [pc, #88]	; 40397c <AnalogTask+0xa4>
  403924:	47c0      	blx	r8
  403926:	4b0f      	ldr	r3, [pc, #60]	; (403964 <AnalogTask+0x8c>)
  403928:	6018      	str	r0, [r3, #0]
		anaMag = sqrt(AnaX*AnaX + AnaY*AnaY);
  40392a:	fb05 f505 	mul.w	r5, r5, r5
  40392e:	fb04 5404 	mla	r4, r4, r4, r5
  403932:	4d0d      	ldr	r5, [pc, #52]	; (403968 <AnalogTask+0x90>)
  403934:	4620      	mov	r0, r4
  403936:	47a8      	blx	r5
  403938:	4b0c      	ldr	r3, [pc, #48]	; (40396c <AnalogTask+0x94>)
  40393a:	4798      	blx	r3
  40393c:	47c0      	blx	r8
  40393e:	4b0c      	ldr	r3, [pc, #48]	; (403970 <AnalogTask+0x98>)
  403940:	6018      	str	r0, [r3, #0]
		vTaskDelay(20);
  403942:	2014      	movs	r0, #20
  403944:	4b0b      	ldr	r3, [pc, #44]	; (403974 <AnalogTask+0x9c>)
  403946:	4798      	blx	r3
	}
  403948:	e7ce      	b.n	4038e8 <AnalogTask+0x10>
  40394a:	bf00      	nop
  40394c:	f3af 8000 	nop.w
  403950:	54442d18 	.word	0x54442d18
  403954:	3ff921fb 	.word	0x3ff921fb
  403958:	00403899 	.word	0x00403899
  40395c:	00403ac9 	.word	0x00403ac9
  403960:	0040548d 	.word	0x0040548d
  403964:	2040bf18 	.word	0x2040bf18
  403968:	00405469 	.word	0x00405469
  40396c:	00403a15 	.word	0x00403a15
  403970:	2040bf0c 	.word	0x2040bf0c
  403974:	004017f9 	.word	0x004017f9
  403978:	004051cd 	.word	0x004051cd
  40397c:	00405ab9 	.word	0x00405ab9

00403980 <sin>:
  403980:	4a22      	ldr	r2, [pc, #136]	; (403a0c <sin+0x8c>)
  403982:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  403986:	4293      	cmp	r3, r2
  403988:	b530      	push	{r4, r5, lr}
  40398a:	b087      	sub	sp, #28
  40398c:	dd1b      	ble.n	4039c6 <sin+0x46>
  40398e:	4a20      	ldr	r2, [pc, #128]	; (403a10 <sin+0x90>)
  403990:	4293      	cmp	r3, r2
  403992:	dd05      	ble.n	4039a0 <sin+0x20>
  403994:	4602      	mov	r2, r0
  403996:	460b      	mov	r3, r1
  403998:	f001 fc18 	bl	4051cc <__aeabi_dsub>
  40399c:	b007      	add	sp, #28
  40399e:	bd30      	pop	{r4, r5, pc}
  4039a0:	aa02      	add	r2, sp, #8
  4039a2:	f000 f895 	bl	403ad0 <__ieee754_rem_pio2>
  4039a6:	f000 0003 	and.w	r0, r0, #3
  4039aa:	2801      	cmp	r0, #1
  4039ac:	d01e      	beq.n	4039ec <sin+0x6c>
  4039ae:	2802      	cmp	r0, #2
  4039b0:	d011      	beq.n	4039d6 <sin+0x56>
  4039b2:	b310      	cbz	r0, 4039fa <sin+0x7a>
  4039b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4039b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4039bc:	f000 fbe4 	bl	404188 <__kernel_cos>
  4039c0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4039c4:	e7ea      	b.n	40399c <sin+0x1c>
  4039c6:	2400      	movs	r4, #0
  4039c8:	2200      	movs	r2, #0
  4039ca:	2300      	movs	r3, #0
  4039cc:	9400      	str	r4, [sp, #0]
  4039ce:	f001 f8ff 	bl	404bd0 <__kernel_sin>
  4039d2:	b007      	add	sp, #28
  4039d4:	bd30      	pop	{r4, r5, pc}
  4039d6:	2401      	movs	r4, #1
  4039d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4039dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4039e0:	9400      	str	r4, [sp, #0]
  4039e2:	f001 f8f5 	bl	404bd0 <__kernel_sin>
  4039e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  4039ea:	e7d7      	b.n	40399c <sin+0x1c>
  4039ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  4039f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  4039f4:	f000 fbc8 	bl	404188 <__kernel_cos>
  4039f8:	e7d0      	b.n	40399c <sin+0x1c>
  4039fa:	2401      	movs	r4, #1
  4039fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
  403a04:	9400      	str	r4, [sp, #0]
  403a06:	f001 f8e3 	bl	404bd0 <__kernel_sin>
  403a0a:	e7c7      	b.n	40399c <sin+0x1c>
  403a0c:	3fe921fb 	.word	0x3fe921fb
  403a10:	7fefffff 	.word	0x7fefffff

00403a14 <sqrt>:
  403a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403a18:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 403ac4 <sqrt+0xb0>
  403a1c:	b08a      	sub	sp, #40	; 0x28
  403a1e:	4606      	mov	r6, r0
  403a20:	460f      	mov	r7, r1
  403a22:	f000 fa73 	bl	403f0c <__ieee754_sqrt>
  403a26:	f998 3000 	ldrsb.w	r3, [r8]
  403a2a:	4604      	mov	r4, r0
  403a2c:	460d      	mov	r5, r1
  403a2e:	3301      	adds	r3, #1
  403a30:	d02d      	beq.n	403a8e <sqrt+0x7a>
  403a32:	4630      	mov	r0, r6
  403a34:	4639      	mov	r1, r7
  403a36:	f001 fa0f 	bl	404e58 <__fpclassifyd>
  403a3a:	b340      	cbz	r0, 403a8e <sqrt+0x7a>
  403a3c:	2300      	movs	r3, #0
  403a3e:	4630      	mov	r0, r6
  403a40:	4639      	mov	r1, r7
  403a42:	2200      	movs	r2, #0
  403a44:	f001 ffe8 	bl	405a18 <__aeabi_dcmplt>
  403a48:	f04f 0301 	mov.w	r3, #1
  403a4c:	b900      	cbnz	r0, 403a50 <sqrt+0x3c>
  403a4e:	4603      	mov	r3, r0
  403a50:	f013 0fff 	tst.w	r3, #255	; 0xff
  403a54:	d01b      	beq.n	403a8e <sqrt+0x7a>
  403a56:	2101      	movs	r1, #1
  403a58:	4a19      	ldr	r2, [pc, #100]	; (403ac0 <sqrt+0xac>)
  403a5a:	2300      	movs	r3, #0
  403a5c:	f898 4000 	ldrb.w	r4, [r8]
  403a60:	e88d 0006 	stmia.w	sp, {r1, r2}
  403a64:	9308      	str	r3, [sp, #32]
  403a66:	e9cd 6704 	strd	r6, r7, [sp, #16]
  403a6a:	e9cd 6702 	strd	r6, r7, [sp, #8]
  403a6e:	b99c      	cbnz	r4, 403a98 <sqrt+0x84>
  403a70:	2200      	movs	r2, #0
  403a72:	2300      	movs	r3, #0
  403a74:	e9cd 2306 	strd	r2, r3, [sp, #24]
  403a78:	4668      	mov	r0, sp
  403a7a:	f001 fa0f 	bl	404e9c <matherr>
  403a7e:	b1a8      	cbz	r0, 403aac <sqrt+0x98>
  403a80:	9b08      	ldr	r3, [sp, #32]
  403a82:	b9c3      	cbnz	r3, 403ab6 <sqrt+0xa2>
  403a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403a88:	b00a      	add	sp, #40	; 0x28
  403a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a8e:	4620      	mov	r0, r4
  403a90:	4629      	mov	r1, r5
  403a92:	b00a      	add	sp, #40	; 0x28
  403a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403a98:	2000      	movs	r0, #0
  403a9a:	2100      	movs	r1, #0
  403a9c:	4602      	mov	r2, r0
  403a9e:	460b      	mov	r3, r1
  403aa0:	f001 fe72 	bl	405788 <__aeabi_ddiv>
  403aa4:	2c02      	cmp	r4, #2
  403aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403aaa:	d1e5      	bne.n	403a78 <sqrt+0x64>
  403aac:	f002 fb28 	bl	406100 <__errno>
  403ab0:	2321      	movs	r3, #33	; 0x21
  403ab2:	6003      	str	r3, [r0, #0]
  403ab4:	e7e4      	b.n	403a80 <sqrt+0x6c>
  403ab6:	f002 fb23 	bl	406100 <__errno>
  403aba:	9b08      	ldr	r3, [sp, #32]
  403abc:	6003      	str	r3, [r0, #0]
  403abe:	e7e1      	b.n	403a84 <sqrt+0x70>
  403ac0:	00406740 	.word	0x00406740
  403ac4:	20400018 	.word	0x20400018

00403ac8 <atan2f>:
  403ac8:	f000 bace 	b.w	404068 <__ieee754_atan2f>
  403acc:	0000      	movs	r0, r0
	...

00403ad0 <__ieee754_rem_pio2>:
  403ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403ad4:	4c96      	ldr	r4, [pc, #600]	; (403d30 <__ieee754_rem_pio2+0x260>)
  403ad6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  403ada:	b08f      	sub	sp, #60	; 0x3c
  403adc:	460b      	mov	r3, r1
  403ade:	42a7      	cmp	r7, r4
  403ae0:	460e      	mov	r6, r1
  403ae2:	f340 8082 	ble.w	403bea <__ieee754_rem_pio2+0x11a>
  403ae6:	4614      	mov	r4, r2
  403ae8:	4a92      	ldr	r2, [pc, #584]	; (403d34 <__ieee754_rem_pio2+0x264>)
  403aea:	4297      	cmp	r7, r2
  403aec:	dc28      	bgt.n	403b40 <__ieee754_rem_pio2+0x70>
  403aee:	2900      	cmp	r1, #0
  403af0:	a385      	add	r3, pc, #532	; (adr r3, 403d08 <__ieee754_rem_pio2+0x238>)
  403af2:	e9d3 2300 	ldrd	r2, r3, [r3]
  403af6:	f340 81a3 	ble.w	403e40 <__ieee754_rem_pio2+0x370>
  403afa:	f001 fb67 	bl	4051cc <__aeabi_dsub>
  403afe:	4b8e      	ldr	r3, [pc, #568]	; (403d38 <__ieee754_rem_pio2+0x268>)
  403b00:	4680      	mov	r8, r0
  403b02:	4689      	mov	r9, r1
  403b04:	429f      	cmp	r7, r3
  403b06:	f000 8087 	beq.w	403c18 <__ieee754_rem_pio2+0x148>
  403b0a:	2501      	movs	r5, #1
  403b0c:	a380      	add	r3, pc, #512	; (adr r3, 403d10 <__ieee754_rem_pio2+0x240>)
  403b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b12:	f001 fb5b 	bl	4051cc <__aeabi_dsub>
  403b16:	4606      	mov	r6, r0
  403b18:	460f      	mov	r7, r1
  403b1a:	4640      	mov	r0, r8
  403b1c:	4632      	mov	r2, r6
  403b1e:	4649      	mov	r1, r9
  403b20:	463b      	mov	r3, r7
  403b22:	e9c4 6700 	strd	r6, r7, [r4]
  403b26:	f001 fb51 	bl	4051cc <__aeabi_dsub>
  403b2a:	a379      	add	r3, pc, #484	; (adr r3, 403d10 <__ieee754_rem_pio2+0x240>)
  403b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b30:	f001 fb4c 	bl	4051cc <__aeabi_dsub>
  403b34:	e9c4 0102 	strd	r0, r1, [r4, #8]
  403b38:	4628      	mov	r0, r5
  403b3a:	b00f      	add	sp, #60	; 0x3c
  403b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403b40:	4a7e      	ldr	r2, [pc, #504]	; (403d3c <__ieee754_rem_pio2+0x26c>)
  403b42:	4297      	cmp	r7, r2
  403b44:	f340 8087 	ble.w	403c56 <__ieee754_rem_pio2+0x186>
  403b48:	4a7d      	ldr	r2, [pc, #500]	; (403d40 <__ieee754_rem_pio2+0x270>)
  403b4a:	4297      	cmp	r7, r2
  403b4c:	dc5a      	bgt.n	403c04 <__ieee754_rem_pio2+0x134>
  403b4e:	153a      	asrs	r2, r7, #20
  403b50:	4682      	mov	sl, r0
  403b52:	f2a2 4516 	subw	r5, r2, #1046	; 0x416
  403b56:	eba7 5105 	sub.w	r1, r7, r5, lsl #20
  403b5a:	468b      	mov	fp, r1
  403b5c:	f001 ff84 	bl	405a68 <__aeabi_d2iz>
  403b60:	f001 fc82 	bl	405468 <__aeabi_i2d>
  403b64:	4680      	mov	r8, r0
  403b66:	4689      	mov	r9, r1
  403b68:	4650      	mov	r0, sl
  403b6a:	4642      	mov	r2, r8
  403b6c:	4659      	mov	r1, fp
  403b6e:	464b      	mov	r3, r9
  403b70:	e9cd 8908 	strd	r8, r9, [sp, #32]
  403b74:	f001 fb2a 	bl	4051cc <__aeabi_dsub>
  403b78:	2200      	movs	r2, #0
  403b7a:	4b72      	ldr	r3, [pc, #456]	; (403d44 <__ieee754_rem_pio2+0x274>)
  403b7c:	f001 fcda 	bl	405534 <__aeabi_dmul>
  403b80:	468b      	mov	fp, r1
  403b82:	4682      	mov	sl, r0
  403b84:	f001 ff70 	bl	405a68 <__aeabi_d2iz>
  403b88:	f001 fc6e 	bl	405468 <__aeabi_i2d>
  403b8c:	4680      	mov	r8, r0
  403b8e:	4689      	mov	r9, r1
  403b90:	4650      	mov	r0, sl
  403b92:	4642      	mov	r2, r8
  403b94:	4659      	mov	r1, fp
  403b96:	464b      	mov	r3, r9
  403b98:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  403b9c:	f001 fb16 	bl	4051cc <__aeabi_dsub>
  403ba0:	2200      	movs	r2, #0
  403ba2:	4b68      	ldr	r3, [pc, #416]	; (403d44 <__ieee754_rem_pio2+0x274>)
  403ba4:	f001 fcc6 	bl	405534 <__aeabi_dmul>
  403ba8:	2200      	movs	r2, #0
  403baa:	2300      	movs	r3, #0
  403bac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  403bb0:	f001 ff28 	bl	405a04 <__aeabi_dcmpeq>
  403bb4:	2800      	cmp	r0, #0
  403bb6:	f000 816d 	beq.w	403e94 <__ieee754_rem_pio2+0x3c4>
  403bba:	2300      	movs	r3, #0
  403bbc:	4640      	mov	r0, r8
  403bbe:	4649      	mov	r1, r9
  403bc0:	2200      	movs	r2, #0
  403bc2:	f001 ff1f 	bl	405a04 <__aeabi_dcmpeq>
  403bc6:	2800      	cmp	r0, #0
  403bc8:	bf14      	ite	ne
  403bca:	2301      	movne	r3, #1
  403bcc:	2302      	moveq	r3, #2
  403bce:	2002      	movs	r0, #2
  403bd0:	495d      	ldr	r1, [pc, #372]	; (403d48 <__ieee754_rem_pio2+0x278>)
  403bd2:	462a      	mov	r2, r5
  403bd4:	9000      	str	r0, [sp, #0]
  403bd6:	a808      	add	r0, sp, #32
  403bd8:	9101      	str	r1, [sp, #4]
  403bda:	4621      	mov	r1, r4
  403bdc:	f000 fbf8 	bl	4043d0 <__kernel_rem_pio2>
  403be0:	2e00      	cmp	r6, #0
  403be2:	f2c0 814d 	blt.w	403e80 <__ieee754_rem_pio2+0x3b0>
  403be6:	4605      	mov	r5, r0
  403be8:	e008      	b.n	403bfc <__ieee754_rem_pio2+0x12c>
  403bea:	4606      	mov	r6, r0
  403bec:	2100      	movs	r1, #0
  403bee:	2000      	movs	r0, #0
  403bf0:	461f      	mov	r7, r3
  403bf2:	2500      	movs	r5, #0
  403bf4:	e9c2 0102 	strd	r0, r1, [r2, #8]
  403bf8:	e9c2 6700 	strd	r6, r7, [r2]
  403bfc:	4628      	mov	r0, r5
  403bfe:	b00f      	add	sp, #60	; 0x3c
  403c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c04:	4602      	mov	r2, r0
  403c06:	460b      	mov	r3, r1
  403c08:	f001 fae0 	bl	4051cc <__aeabi_dsub>
  403c0c:	2500      	movs	r5, #0
  403c0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
  403c12:	e9c4 0100 	strd	r0, r1, [r4]
  403c16:	e7f1      	b.n	403bfc <__ieee754_rem_pio2+0x12c>
  403c18:	a33f      	add	r3, pc, #252	; (adr r3, 403d18 <__ieee754_rem_pio2+0x248>)
  403c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c1e:	f001 fad5 	bl	4051cc <__aeabi_dsub>
  403c22:	4680      	mov	r8, r0
  403c24:	4689      	mov	r9, r1
  403c26:	2501      	movs	r5, #1
  403c28:	a33d      	add	r3, pc, #244	; (adr r3, 403d20 <__ieee754_rem_pio2+0x250>)
  403c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c2e:	f001 facd 	bl	4051cc <__aeabi_dsub>
  403c32:	4606      	mov	r6, r0
  403c34:	460f      	mov	r7, r1
  403c36:	4640      	mov	r0, r8
  403c38:	4632      	mov	r2, r6
  403c3a:	4649      	mov	r1, r9
  403c3c:	463b      	mov	r3, r7
  403c3e:	e9c4 6700 	strd	r6, r7, [r4]
  403c42:	f001 fac3 	bl	4051cc <__aeabi_dsub>
  403c46:	a336      	add	r3, pc, #216	; (adr r3, 403d20 <__ieee754_rem_pio2+0x250>)
  403c48:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c4c:	f001 fabe 	bl	4051cc <__aeabi_dsub>
  403c50:	e9c4 0102 	strd	r0, r1, [r4, #8]
  403c54:	e7d2      	b.n	403bfc <__ieee754_rem_pio2+0x12c>
  403c56:	f001 f871 	bl	404d3c <fabs>
  403c5a:	4680      	mov	r8, r0
  403c5c:	4689      	mov	r9, r1
  403c5e:	a332      	add	r3, pc, #200	; (adr r3, 403d28 <__ieee754_rem_pio2+0x258>)
  403c60:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c64:	f001 fc66 	bl	405534 <__aeabi_dmul>
  403c68:	2200      	movs	r2, #0
  403c6a:	4b38      	ldr	r3, [pc, #224]	; (403d4c <__ieee754_rem_pio2+0x27c>)
  403c6c:	f001 fab0 	bl	4051d0 <__adddf3>
  403c70:	f001 fefa 	bl	405a68 <__aeabi_d2iz>
  403c74:	4605      	mov	r5, r0
  403c76:	f001 fbf7 	bl	405468 <__aeabi_i2d>
  403c7a:	a323      	add	r3, pc, #140	; (adr r3, 403d08 <__ieee754_rem_pio2+0x238>)
  403c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c80:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403c84:	f001 fc56 	bl	405534 <__aeabi_dmul>
  403c88:	4602      	mov	r2, r0
  403c8a:	460b      	mov	r3, r1
  403c8c:	4640      	mov	r0, r8
  403c8e:	4649      	mov	r1, r9
  403c90:	f001 fa9c 	bl	4051cc <__aeabi_dsub>
  403c94:	4682      	mov	sl, r0
  403c96:	468b      	mov	fp, r1
  403c98:	a31d      	add	r3, pc, #116	; (adr r3, 403d10 <__ieee754_rem_pio2+0x240>)
  403c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403ca2:	f001 fc47 	bl	405534 <__aeabi_dmul>
  403ca6:	2d1f      	cmp	r5, #31
  403ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403cac:	4650      	mov	r0, sl
  403cae:	4659      	mov	r1, fp
  403cb0:	dc50      	bgt.n	403d54 <__ieee754_rem_pio2+0x284>
  403cb2:	4b27      	ldr	r3, [pc, #156]	; (403d50 <__ieee754_rem_pio2+0x280>)
  403cb4:	1e6a      	subs	r2, r5, #1
  403cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403cba:	42bb      	cmp	r3, r7
  403cbc:	d04a      	beq.n	403d54 <__ieee754_rem_pio2+0x284>
  403cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403cc2:	f001 fa83 	bl	4051cc <__aeabi_dsub>
  403cc6:	4602      	mov	r2, r0
  403cc8:	460b      	mov	r3, r1
  403cca:	4681      	mov	r9, r0
  403ccc:	4688      	mov	r8, r1
  403cce:	e9c4 2300 	strd	r2, r3, [r4]
  403cd2:	464a      	mov	r2, r9
  403cd4:	4643      	mov	r3, r8
  403cd6:	4650      	mov	r0, sl
  403cd8:	4659      	mov	r1, fp
  403cda:	f001 fa77 	bl	4051cc <__aeabi_dsub>
  403cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403ce2:	f001 fa73 	bl	4051cc <__aeabi_dsub>
  403ce6:	2e00      	cmp	r6, #0
  403ce8:	4602      	mov	r2, r0
  403cea:	460b      	mov	r3, r1
  403cec:	e9c4 2302 	strd	r2, r3, [r4, #8]
  403cf0:	da84      	bge.n	403bfc <__ieee754_rem_pio2+0x12c>
  403cf2:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
  403cf6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  403cfa:	60a0      	str	r0, [r4, #8]
  403cfc:	426d      	negs	r5, r5
  403cfe:	f8c4 9000 	str.w	r9, [r4]
  403d02:	6063      	str	r3, [r4, #4]
  403d04:	60e1      	str	r1, [r4, #12]
  403d06:	e779      	b.n	403bfc <__ieee754_rem_pio2+0x12c>
  403d08:	54400000 	.word	0x54400000
  403d0c:	3ff921fb 	.word	0x3ff921fb
  403d10:	1a626331 	.word	0x1a626331
  403d14:	3dd0b461 	.word	0x3dd0b461
  403d18:	1a600000 	.word	0x1a600000
  403d1c:	3dd0b461 	.word	0x3dd0b461
  403d20:	2e037073 	.word	0x2e037073
  403d24:	3ba3198a 	.word	0x3ba3198a
  403d28:	6dc9c883 	.word	0x6dc9c883
  403d2c:	3fe45f30 	.word	0x3fe45f30
  403d30:	3fe921fb 	.word	0x3fe921fb
  403d34:	4002d97b 	.word	0x4002d97b
  403d38:	3ff921fb 	.word	0x3ff921fb
  403d3c:	413921fb 	.word	0x413921fb
  403d40:	7fefffff 	.word	0x7fefffff
  403d44:	41700000 	.word	0x41700000
  403d48:	004067c8 	.word	0x004067c8
  403d4c:	3fe00000 	.word	0x3fe00000
  403d50:	00406748 	.word	0x00406748
  403d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403d58:	f001 fa38 	bl	4051cc <__aeabi_dsub>
  403d5c:	4688      	mov	r8, r1
  403d5e:	153f      	asrs	r7, r7, #20
  403d60:	4681      	mov	r9, r0
  403d62:	f3c8 530a 	ubfx	r3, r8, #20, #11
  403d66:	1afb      	subs	r3, r7, r3
  403d68:	2b10      	cmp	r3, #16
  403d6a:	e9c4 0100 	strd	r0, r1, [r4]
  403d6e:	ddb0      	ble.n	403cd2 <__ieee754_rem_pio2+0x202>
  403d70:	a35b      	add	r3, pc, #364	; (adr r3, 403ee0 <__ieee754_rem_pio2+0x410>)
  403d72:	e9d3 2300 	ldrd	r2, r3, [r3]
  403d76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403d7a:	f001 fbdb 	bl	405534 <__aeabi_dmul>
  403d7e:	4680      	mov	r8, r0
  403d80:	4689      	mov	r9, r1
  403d82:	4650      	mov	r0, sl
  403d84:	4642      	mov	r2, r8
  403d86:	4659      	mov	r1, fp
  403d88:	464b      	mov	r3, r9
  403d8a:	f001 fa1f 	bl	4051cc <__aeabi_dsub>
  403d8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403d92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
  403d96:	4650      	mov	r0, sl
  403d98:	4659      	mov	r1, fp
  403d9a:	f001 fa17 	bl	4051cc <__aeabi_dsub>
  403d9e:	4642      	mov	r2, r8
  403da0:	464b      	mov	r3, r9
  403da2:	f001 fa13 	bl	4051cc <__aeabi_dsub>
  403da6:	4680      	mov	r8, r0
  403da8:	4689      	mov	r9, r1
  403daa:	a34f      	add	r3, pc, #316	; (adr r3, 403ee8 <__ieee754_rem_pio2+0x418>)
  403dac:	e9d3 2300 	ldrd	r2, r3, [r3]
  403db0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403db4:	f001 fbbe 	bl	405534 <__aeabi_dmul>
  403db8:	4642      	mov	r2, r8
  403dba:	464b      	mov	r3, r9
  403dbc:	f001 fa06 	bl	4051cc <__aeabi_dsub>
  403dc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  403dc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403dcc:	f001 f9fe 	bl	4051cc <__aeabi_dsub>
  403dd0:	4688      	mov	r8, r1
  403dd2:	f3c1 510a 	ubfx	r1, r1, #20, #11
  403dd6:	4602      	mov	r2, r0
  403dd8:	4643      	mov	r3, r8
  403dda:	4681      	mov	r9, r0
  403ddc:	1a7f      	subs	r7, r7, r1
  403dde:	2f31      	cmp	r7, #49	; 0x31
  403de0:	e9c4 2300 	strd	r2, r3, [r4]
  403de4:	dd78      	ble.n	403ed8 <__ieee754_rem_pio2+0x408>
  403de6:	a342      	add	r3, pc, #264	; (adr r3, 403ef0 <__ieee754_rem_pio2+0x420>)
  403de8:	e9d3 2300 	ldrd	r2, r3, [r3]
  403dec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403df0:	f001 fba0 	bl	405534 <__aeabi_dmul>
  403df4:	4680      	mov	r8, r0
  403df6:	4689      	mov	r9, r1
  403df8:	4642      	mov	r2, r8
  403dfa:	464b      	mov	r3, r9
  403dfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403e00:	f001 f9e4 	bl	4051cc <__aeabi_dsub>
  403e04:	4682      	mov	sl, r0
  403e06:	468b      	mov	fp, r1
  403e08:	4652      	mov	r2, sl
  403e0a:	465b      	mov	r3, fp
  403e0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403e10:	f001 f9dc 	bl	4051cc <__aeabi_dsub>
  403e14:	4642      	mov	r2, r8
  403e16:	464b      	mov	r3, r9
  403e18:	f001 f9d8 	bl	4051cc <__aeabi_dsub>
  403e1c:	4680      	mov	r8, r0
  403e1e:	4689      	mov	r9, r1
  403e20:	a335      	add	r3, pc, #212	; (adr r3, 403ef8 <__ieee754_rem_pio2+0x428>)
  403e22:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403e2a:	f001 fb83 	bl	405534 <__aeabi_dmul>
  403e2e:	4642      	mov	r2, r8
  403e30:	464b      	mov	r3, r9
  403e32:	f001 f9cb 	bl	4051cc <__aeabi_dsub>
  403e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403e3a:	4650      	mov	r0, sl
  403e3c:	4659      	mov	r1, fp
  403e3e:	e73e      	b.n	403cbe <__ieee754_rem_pio2+0x1ee>
  403e40:	f001 f9c6 	bl	4051d0 <__adddf3>
  403e44:	4b30      	ldr	r3, [pc, #192]	; (403f08 <__ieee754_rem_pio2+0x438>)
  403e46:	4680      	mov	r8, r0
  403e48:	4689      	mov	r9, r1
  403e4a:	429f      	cmp	r7, r3
  403e4c:	d024      	beq.n	403e98 <__ieee754_rem_pio2+0x3c8>
  403e4e:	f04f 35ff 	mov.w	r5, #4294967295
  403e52:	a32b      	add	r3, pc, #172	; (adr r3, 403f00 <__ieee754_rem_pio2+0x430>)
  403e54:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e58:	f001 f9ba 	bl	4051d0 <__adddf3>
  403e5c:	4606      	mov	r6, r0
  403e5e:	460f      	mov	r7, r1
  403e60:	4640      	mov	r0, r8
  403e62:	4632      	mov	r2, r6
  403e64:	4649      	mov	r1, r9
  403e66:	463b      	mov	r3, r7
  403e68:	e9c4 6700 	strd	r6, r7, [r4]
  403e6c:	f001 f9ae 	bl	4051cc <__aeabi_dsub>
  403e70:	a323      	add	r3, pc, #140	; (adr r3, 403f00 <__ieee754_rem_pio2+0x430>)
  403e72:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e76:	f001 f9ab 	bl	4051d0 <__adddf3>
  403e7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
  403e7e:	e6bd      	b.n	403bfc <__ieee754_rem_pio2+0x12c>
  403e80:	6862      	ldr	r2, [r4, #4]
  403e82:	4245      	negs	r5, r0
  403e84:	68e3      	ldr	r3, [r4, #12]
  403e86:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  403e8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  403e8e:	6062      	str	r2, [r4, #4]
  403e90:	60e3      	str	r3, [r4, #12]
  403e92:	e6b3      	b.n	403bfc <__ieee754_rem_pio2+0x12c>
  403e94:	2303      	movs	r3, #3
  403e96:	e69a      	b.n	403bce <__ieee754_rem_pio2+0xfe>
  403e98:	a311      	add	r3, pc, #68	; (adr r3, 403ee0 <__ieee754_rem_pio2+0x410>)
  403e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
  403e9e:	f001 f997 	bl	4051d0 <__adddf3>
  403ea2:	4680      	mov	r8, r0
  403ea4:	4689      	mov	r9, r1
  403ea6:	f04f 35ff 	mov.w	r5, #4294967295
  403eaa:	a30f      	add	r3, pc, #60	; (adr r3, 403ee8 <__ieee754_rem_pio2+0x418>)
  403eac:	e9d3 2300 	ldrd	r2, r3, [r3]
  403eb0:	f001 f98e 	bl	4051d0 <__adddf3>
  403eb4:	4606      	mov	r6, r0
  403eb6:	460f      	mov	r7, r1
  403eb8:	4640      	mov	r0, r8
  403eba:	4632      	mov	r2, r6
  403ebc:	4649      	mov	r1, r9
  403ebe:	463b      	mov	r3, r7
  403ec0:	e9c4 6700 	strd	r6, r7, [r4]
  403ec4:	f001 f982 	bl	4051cc <__aeabi_dsub>
  403ec8:	a307      	add	r3, pc, #28	; (adr r3, 403ee8 <__ieee754_rem_pio2+0x418>)
  403eca:	e9d3 2300 	ldrd	r2, r3, [r3]
  403ece:	f001 f97f 	bl	4051d0 <__adddf3>
  403ed2:	e9c4 0102 	strd	r0, r1, [r4, #8]
  403ed6:	e691      	b.n	403bfc <__ieee754_rem_pio2+0x12c>
  403ed8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
  403edc:	e6f9      	b.n	403cd2 <__ieee754_rem_pio2+0x202>
  403ede:	bf00      	nop
  403ee0:	1a600000 	.word	0x1a600000
  403ee4:	3dd0b461 	.word	0x3dd0b461
  403ee8:	2e037073 	.word	0x2e037073
  403eec:	3ba3198a 	.word	0x3ba3198a
  403ef0:	2e000000 	.word	0x2e000000
  403ef4:	3ba3198a 	.word	0x3ba3198a
  403ef8:	252049c1 	.word	0x252049c1
  403efc:	397b839a 	.word	0x397b839a
  403f00:	1a626331 	.word	0x1a626331
  403f04:	3dd0b461 	.word	0x3dd0b461
  403f08:	3ff921fb 	.word	0x3ff921fb

00403f0c <__ieee754_sqrt>:
  403f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403f10:	4e53      	ldr	r6, [pc, #332]	; (404060 <__ieee754_sqrt+0x154>)
  403f12:	460c      	mov	r4, r1
  403f14:	4605      	mov	r5, r0
  403f16:	460b      	mov	r3, r1
  403f18:	46b6      	mov	lr, r6
  403f1a:	400e      	ands	r6, r1
  403f1c:	4576      	cmp	r6, lr
  403f1e:	f000 8085 	beq.w	40402c <__ieee754_sqrt+0x120>
  403f22:	2900      	cmp	r1, #0
  403f24:	4602      	mov	r2, r0
  403f26:	dd65      	ble.n	403ff4 <__ieee754_sqrt+0xe8>
  403f28:	150f      	asrs	r7, r1, #20
  403f2a:	d070      	beq.n	40400e <__ieee754_sqrt+0x102>
  403f2c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
  403f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
  403f34:	07f9      	lsls	r1, r7, #31
  403f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403f3a:	d453      	bmi.n	403fe4 <__ieee754_sqrt+0xd8>
  403f3c:	0fd1      	lsrs	r1, r2, #31
  403f3e:	2600      	movs	r6, #0
  403f40:	107f      	asrs	r7, r7, #1
  403f42:	2016      	movs	r0, #22
  403f44:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  403f48:	46b6      	mov	lr, r6
  403f4a:	0052      	lsls	r2, r2, #1
  403f4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
  403f50:	eb0e 0401 	add.w	r4, lr, r1
  403f54:	0fd5      	lsrs	r5, r2, #31
  403f56:	0052      	lsls	r2, r2, #1
  403f58:	429c      	cmp	r4, r3
  403f5a:	dc03      	bgt.n	403f64 <__ieee754_sqrt+0x58>
  403f5c:	1b1b      	subs	r3, r3, r4
  403f5e:	eb04 0e01 	add.w	lr, r4, r1
  403f62:	440e      	add	r6, r1
  403f64:	3801      	subs	r0, #1
  403f66:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  403f6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
  403f6e:	d1ef      	bne.n	403f50 <__ieee754_sqrt+0x44>
  403f70:	2520      	movs	r5, #32
  403f72:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403f76:	4684      	mov	ip, r0
  403f78:	4573      	cmp	r3, lr
  403f7a:	eb01 040c 	add.w	r4, r1, ip
  403f7e:	dc03      	bgt.n	403f88 <__ieee754_sqrt+0x7c>
  403f80:	4294      	cmp	r4, r2
  403f82:	d80e      	bhi.n	403fa2 <__ieee754_sqrt+0x96>
  403f84:	4573      	cmp	r3, lr
  403f86:	d10c      	bne.n	403fa2 <__ieee754_sqrt+0x96>
  403f88:	2c00      	cmp	r4, #0
  403f8a:	eb04 0c01 	add.w	ip, r4, r1
  403f8e:	db23      	blt.n	403fd8 <__ieee754_sqrt+0xcc>
  403f90:	46f0      	mov	r8, lr
  403f92:	4294      	cmp	r4, r2
  403f94:	ebce 0303 	rsb	r3, lr, r3
  403f98:	d900      	bls.n	403f9c <__ieee754_sqrt+0x90>
  403f9a:	3b01      	subs	r3, #1
  403f9c:	1b12      	subs	r2, r2, r4
  403f9e:	4408      	add	r0, r1
  403fa0:	46c6      	mov	lr, r8
  403fa2:	0fd4      	lsrs	r4, r2, #31
  403fa4:	3d01      	subs	r5, #1
  403fa6:	ea4f 0151 	mov.w	r1, r1, lsr #1
  403faa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
  403fae:	ea4f 0242 	mov.w	r2, r2, lsl #1
  403fb2:	d1e1      	bne.n	403f78 <__ieee754_sqrt+0x6c>
  403fb4:	4313      	orrs	r3, r2
  403fb6:	d004      	beq.n	403fc2 <__ieee754_sqrt+0xb6>
  403fb8:	1c42      	adds	r2, r0, #1
  403fba:	d041      	beq.n	404040 <__ieee754_sqrt+0x134>
  403fbc:	f000 0301 	and.w	r3, r0, #1
  403fc0:	4418      	add	r0, r3
  403fc2:	0840      	lsrs	r0, r0, #1
  403fc4:	1073      	asrs	r3, r6, #1
  403fc6:	4927      	ldr	r1, [pc, #156]	; (404064 <__ieee754_sqrt+0x158>)
  403fc8:	4419      	add	r1, r3
  403fca:	07f3      	lsls	r3, r6, #31
  403fcc:	d40f      	bmi.n	403fee <__ieee754_sqrt+0xe2>
  403fce:	eb01 5307 	add.w	r3, r1, r7, lsl #20
  403fd2:	4619      	mov	r1, r3
  403fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403fd8:	f1bc 0f00 	cmp.w	ip, #0
  403fdc:	dbd8      	blt.n	403f90 <__ieee754_sqrt+0x84>
  403fde:	f10e 0801 	add.w	r8, lr, #1
  403fe2:	e7d6      	b.n	403f92 <__ieee754_sqrt+0x86>
  403fe4:	0fd1      	lsrs	r1, r2, #31
  403fe6:	0052      	lsls	r2, r2, #1
  403fe8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
  403fec:	e7a6      	b.n	403f3c <__ieee754_sqrt+0x30>
  403fee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
  403ff2:	e7ec      	b.n	403fce <__ieee754_sqrt+0xc2>
  403ff4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  403ff8:	4306      	orrs	r6, r0
  403ffa:	d0eb      	beq.n	403fd4 <__ieee754_sqrt+0xc8>
  403ffc:	bb39      	cbnz	r1, 40404e <__ieee754_sqrt+0x142>
  403ffe:	460f      	mov	r7, r1
  404000:	0ad3      	lsrs	r3, r2, #11
  404002:	3f15      	subs	r7, #21
  404004:	0552      	lsls	r2, r2, #21
  404006:	2b00      	cmp	r3, #0
  404008:	d0fa      	beq.n	404000 <__ieee754_sqrt+0xf4>
  40400a:	02dc      	lsls	r4, r3, #11
  40400c:	d41b      	bmi.n	404046 <__ieee754_sqrt+0x13a>
  40400e:	2100      	movs	r1, #0
  404010:	005b      	lsls	r3, r3, #1
  404012:	3101      	adds	r1, #1
  404014:	02d8      	lsls	r0, r3, #11
  404016:	d5fb      	bpl.n	404010 <__ieee754_sqrt+0x104>
  404018:	f1c1 0401 	rsb	r4, r1, #1
  40401c:	f1c1 0020 	rsb	r0, r1, #32
  404020:	fa22 f000 	lsr.w	r0, r2, r0
  404024:	4427      	add	r7, r4
  404026:	408a      	lsls	r2, r1
  404028:	4303      	orrs	r3, r0
  40402a:	e77f      	b.n	403f2c <__ieee754_sqrt+0x20>
  40402c:	4602      	mov	r2, r0
  40402e:	460b      	mov	r3, r1
  404030:	f001 fa80 	bl	405534 <__aeabi_dmul>
  404034:	462a      	mov	r2, r5
  404036:	4623      	mov	r3, r4
  404038:	f001 f8ca 	bl	4051d0 <__adddf3>
  40403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404040:	3601      	adds	r6, #1
  404042:	4628      	mov	r0, r5
  404044:	e7be      	b.n	403fc4 <__ieee754_sqrt+0xb8>
  404046:	2020      	movs	r0, #32
  404048:	2401      	movs	r4, #1
  40404a:	2100      	movs	r1, #0
  40404c:	e7e8      	b.n	404020 <__ieee754_sqrt+0x114>
  40404e:	4602      	mov	r2, r0
  404050:	460b      	mov	r3, r1
  404052:	f001 f8bb 	bl	4051cc <__aeabi_dsub>
  404056:	4602      	mov	r2, r0
  404058:	460b      	mov	r3, r1
  40405a:	f001 fb95 	bl	405788 <__aeabi_ddiv>
  40405e:	e7b9      	b.n	403fd4 <__ieee754_sqrt+0xc8>
  404060:	7ff00000 	.word	0x7ff00000
  404064:	3fe00000 	.word	0x3fe00000

00404068 <__ieee754_atan2f>:
  404068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40406a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  40406e:	4603      	mov	r3, r0
  404070:	4606      	mov	r6, r0
  404072:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  404076:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  40407a:	dc2e      	bgt.n	4040da <__ieee754_atan2f+0x72>
  40407c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  404080:	dc2b      	bgt.n	4040da <__ieee754_atan2f+0x72>
  404082:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
  404086:	d030      	beq.n	4040ea <__ieee754_atan2f+0x82>
  404088:	178c      	asrs	r4, r1, #30
  40408a:	f004 0402 	and.w	r4, r4, #2
  40408e:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
  404092:	b92d      	cbnz	r5, 4040a0 <__ieee754_atan2f+0x38>
  404094:	2c02      	cmp	r4, #2
  404096:	d025      	beq.n	4040e4 <__ieee754_atan2f+0x7c>
  404098:	2c03      	cmp	r4, #3
  40409a:	d125      	bne.n	4040e8 <__ieee754_atan2f+0x80>
  40409c:	4831      	ldr	r0, [pc, #196]	; (404164 <__ieee754_atan2f+0xfc>)
  40409e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040a0:	b1bf      	cbz	r7, 4040d2 <__ieee754_atan2f+0x6a>
  4040a2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  4040a6:	d02c      	beq.n	404102 <__ieee754_atan2f+0x9a>
  4040a8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  4040ac:	d011      	beq.n	4040d2 <__ieee754_atan2f+0x6a>
  4040ae:	1bed      	subs	r5, r5, r7
  4040b0:	15ed      	asrs	r5, r5, #23
  4040b2:	2d3c      	cmp	r5, #60	; 0x3c
  4040b4:	dd1d      	ble.n	4040f2 <__ieee754_atan2f+0x8a>
  4040b6:	482c      	ldr	r0, [pc, #176]	; (404168 <__ieee754_atan2f+0x100>)
  4040b8:	2c01      	cmp	r4, #1
  4040ba:	d035      	beq.n	404128 <__ieee754_atan2f+0xc0>
  4040bc:	2c02      	cmp	r4, #2
  4040be:	d02b      	beq.n	404118 <__ieee754_atan2f+0xb0>
  4040c0:	2c00      	cmp	r4, #0
  4040c2:	d034      	beq.n	40412e <__ieee754_atan2f+0xc6>
  4040c4:	4929      	ldr	r1, [pc, #164]	; (40416c <__ieee754_atan2f+0x104>)
  4040c6:	f001 fd4d 	bl	405b64 <__addsf3>
  4040ca:	4929      	ldr	r1, [pc, #164]	; (404170 <__ieee754_atan2f+0x108>)
  4040cc:	f001 fd48 	bl	405b60 <__aeabi_fsub>
  4040d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040d2:	2e00      	cmp	r6, #0
  4040d4:	db13      	blt.n	4040fe <__ieee754_atan2f+0x96>
  4040d6:	4824      	ldr	r0, [pc, #144]	; (404168 <__ieee754_atan2f+0x100>)
  4040d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040da:	4608      	mov	r0, r1
  4040dc:	4619      	mov	r1, r3
  4040de:	f001 fd41 	bl	405b64 <__addsf3>
  4040e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040e4:	4822      	ldr	r0, [pc, #136]	; (404170 <__ieee754_atan2f+0x108>)
  4040e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4040ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  4040ee:	f000 bf57 	b.w	404fa0 <atanf>
  4040f2:	353c      	adds	r5, #60	; 0x3c
  4040f4:	da1c      	bge.n	404130 <__ieee754_atan2f+0xc8>
  4040f6:	2900      	cmp	r1, #0
  4040f8:	da1a      	bge.n	404130 <__ieee754_atan2f+0xc8>
  4040fa:	2000      	movs	r0, #0
  4040fc:	e7dc      	b.n	4040b8 <__ieee754_atan2f+0x50>
  4040fe:	481d      	ldr	r0, [pc, #116]	; (404174 <__ieee754_atan2f+0x10c>)
  404100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404102:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  404106:	d01b      	beq.n	404140 <__ieee754_atan2f+0xd8>
  404108:	2c02      	cmp	r4, #2
  40410a:	d0eb      	beq.n	4040e4 <__ieee754_atan2f+0x7c>
  40410c:	2c03      	cmp	r4, #3
  40410e:	d0c5      	beq.n	40409c <__ieee754_atan2f+0x34>
  404110:	2c01      	cmp	r4, #1
  404112:	d01d      	beq.n	404150 <__ieee754_atan2f+0xe8>
  404114:	2000      	movs	r0, #0
  404116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404118:	4914      	ldr	r1, [pc, #80]	; (40416c <__ieee754_atan2f+0x104>)
  40411a:	f001 fd23 	bl	405b64 <__addsf3>
  40411e:	4601      	mov	r1, r0
  404120:	4813      	ldr	r0, [pc, #76]	; (404170 <__ieee754_atan2f+0x108>)
  404122:	f001 fd1d 	bl	405b60 <__aeabi_fsub>
  404126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404128:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  40412c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40412e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404130:	4618      	mov	r0, r3
  404132:	f001 fed3 	bl	405edc <__aeabi_fdiv>
  404136:	f001 f839 	bl	4051ac <fabsf>
  40413a:	f000 ff31 	bl	404fa0 <atanf>
  40413e:	e7bb      	b.n	4040b8 <__ieee754_atan2f+0x50>
  404140:	2c02      	cmp	r4, #2
  404142:	d00c      	beq.n	40415e <__ieee754_atan2f+0xf6>
  404144:	2c03      	cmp	r4, #3
  404146:	d008      	beq.n	40415a <__ieee754_atan2f+0xf2>
  404148:	2c01      	cmp	r4, #1
  40414a:	d004      	beq.n	404156 <__ieee754_atan2f+0xee>
  40414c:	480a      	ldr	r0, [pc, #40]	; (404178 <__ieee754_atan2f+0x110>)
  40414e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404150:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  404154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404156:	4809      	ldr	r0, [pc, #36]	; (40417c <__ieee754_atan2f+0x114>)
  404158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40415a:	4809      	ldr	r0, [pc, #36]	; (404180 <__ieee754_atan2f+0x118>)
  40415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40415e:	4809      	ldr	r0, [pc, #36]	; (404184 <__ieee754_atan2f+0x11c>)
  404160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404162:	bf00      	nop
  404164:	c0490fdb 	.word	0xc0490fdb
  404168:	3fc90fdb 	.word	0x3fc90fdb
  40416c:	33bbbd2e 	.word	0x33bbbd2e
  404170:	40490fdb 	.word	0x40490fdb
  404174:	bfc90fdb 	.word	0xbfc90fdb
  404178:	3f490fdb 	.word	0x3f490fdb
  40417c:	bf490fdb 	.word	0xbf490fdb
  404180:	c016cbe4 	.word	0xc016cbe4
  404184:	4016cbe4 	.word	0x4016cbe4

00404188 <__kernel_cos>:
  404188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40418c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
  404190:	b085      	sub	sp, #20
  404192:	460c      	mov	r4, r1
  404194:	4692      	mov	sl, r2
  404196:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
  40419a:	469b      	mov	fp, r3
  40419c:	4605      	mov	r5, r0
  40419e:	da6b      	bge.n	404278 <__kernel_cos+0xf0>
  4041a0:	f001 fc62 	bl	405a68 <__aeabi_d2iz>
  4041a4:	2800      	cmp	r0, #0
  4041a6:	f000 80e7 	beq.w	404378 <__kernel_cos+0x1f0>
  4041aa:	462a      	mov	r2, r5
  4041ac:	4623      	mov	r3, r4
  4041ae:	4628      	mov	r0, r5
  4041b0:	4621      	mov	r1, r4
  4041b2:	f001 f9bf 	bl	405534 <__aeabi_dmul>
  4041b6:	4680      	mov	r8, r0
  4041b8:	4689      	mov	r9, r1
  4041ba:	a373      	add	r3, pc, #460	; (adr r3, 404388 <__kernel_cos+0x200>)
  4041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041c0:	f001 f9b8 	bl	405534 <__aeabi_dmul>
  4041c4:	a372      	add	r3, pc, #456	; (adr r3, 404390 <__kernel_cos+0x208>)
  4041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041ca:	f001 f801 	bl	4051d0 <__adddf3>
  4041ce:	4642      	mov	r2, r8
  4041d0:	464b      	mov	r3, r9
  4041d2:	f001 f9af 	bl	405534 <__aeabi_dmul>
  4041d6:	a370      	add	r3, pc, #448	; (adr r3, 404398 <__kernel_cos+0x210>)
  4041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041dc:	f000 fff6 	bl	4051cc <__aeabi_dsub>
  4041e0:	4642      	mov	r2, r8
  4041e2:	464b      	mov	r3, r9
  4041e4:	f001 f9a6 	bl	405534 <__aeabi_dmul>
  4041e8:	a36d      	add	r3, pc, #436	; (adr r3, 4043a0 <__kernel_cos+0x218>)
  4041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
  4041ee:	f000 ffef 	bl	4051d0 <__adddf3>
  4041f2:	4642      	mov	r2, r8
  4041f4:	464b      	mov	r3, r9
  4041f6:	f001 f99d 	bl	405534 <__aeabi_dmul>
  4041fa:	a36b      	add	r3, pc, #428	; (adr r3, 4043a8 <__kernel_cos+0x220>)
  4041fc:	e9d3 2300 	ldrd	r2, r3, [r3]
  404200:	f000 ffe4 	bl	4051cc <__aeabi_dsub>
  404204:	4642      	mov	r2, r8
  404206:	464b      	mov	r3, r9
  404208:	f001 f994 	bl	405534 <__aeabi_dmul>
  40420c:	a368      	add	r3, pc, #416	; (adr r3, 4043b0 <__kernel_cos+0x228>)
  40420e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404212:	f000 ffdd 	bl	4051d0 <__adddf3>
  404216:	4642      	mov	r2, r8
  404218:	464b      	mov	r3, r9
  40421a:	f001 f98b 	bl	405534 <__aeabi_dmul>
  40421e:	e9cd 0100 	strd	r0, r1, [sp]
  404222:	4640      	mov	r0, r8
  404224:	4649      	mov	r1, r9
  404226:	2200      	movs	r2, #0
  404228:	4b63      	ldr	r3, [pc, #396]	; (4043b8 <__kernel_cos+0x230>)
  40422a:	f001 f983 	bl	405534 <__aeabi_dmul>
  40422e:	4606      	mov	r6, r0
  404230:	460f      	mov	r7, r1
  404232:	4640      	mov	r0, r8
  404234:	4649      	mov	r1, r9
  404236:	e9dd 2300 	ldrd	r2, r3, [sp]
  40423a:	f001 f97b 	bl	405534 <__aeabi_dmul>
  40423e:	4680      	mov	r8, r0
  404240:	4689      	mov	r9, r1
  404242:	4652      	mov	r2, sl
  404244:	465b      	mov	r3, fp
  404246:	4628      	mov	r0, r5
  404248:	4621      	mov	r1, r4
  40424a:	f001 f973 	bl	405534 <__aeabi_dmul>
  40424e:	4602      	mov	r2, r0
  404250:	460b      	mov	r3, r1
  404252:	4640      	mov	r0, r8
  404254:	4649      	mov	r1, r9
  404256:	f000 ffb9 	bl	4051cc <__aeabi_dsub>
  40425a:	4602      	mov	r2, r0
  40425c:	460b      	mov	r3, r1
  40425e:	4630      	mov	r0, r6
  404260:	4639      	mov	r1, r7
  404262:	f000 ffb3 	bl	4051cc <__aeabi_dsub>
  404266:	4602      	mov	r2, r0
  404268:	460b      	mov	r3, r1
  40426a:	2000      	movs	r0, #0
  40426c:	4953      	ldr	r1, [pc, #332]	; (4043bc <__kernel_cos+0x234>)
  40426e:	f000 ffad 	bl	4051cc <__aeabi_dsub>
  404272:	b005      	add	sp, #20
  404274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404278:	4602      	mov	r2, r0
  40427a:	460b      	mov	r3, r1
  40427c:	f001 f95a 	bl	405534 <__aeabi_dmul>
  404280:	4680      	mov	r8, r0
  404282:	4689      	mov	r9, r1
  404284:	a340      	add	r3, pc, #256	; (adr r3, 404388 <__kernel_cos+0x200>)
  404286:	e9d3 2300 	ldrd	r2, r3, [r3]
  40428a:	f001 f953 	bl	405534 <__aeabi_dmul>
  40428e:	a340      	add	r3, pc, #256	; (adr r3, 404390 <__kernel_cos+0x208>)
  404290:	e9d3 2300 	ldrd	r2, r3, [r3]
  404294:	f000 ff9c 	bl	4051d0 <__adddf3>
  404298:	4642      	mov	r2, r8
  40429a:	464b      	mov	r3, r9
  40429c:	f001 f94a 	bl	405534 <__aeabi_dmul>
  4042a0:	a33d      	add	r3, pc, #244	; (adr r3, 404398 <__kernel_cos+0x210>)
  4042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042a6:	f000 ff91 	bl	4051cc <__aeabi_dsub>
  4042aa:	4642      	mov	r2, r8
  4042ac:	464b      	mov	r3, r9
  4042ae:	f001 f941 	bl	405534 <__aeabi_dmul>
  4042b2:	a33b      	add	r3, pc, #236	; (adr r3, 4043a0 <__kernel_cos+0x218>)
  4042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042b8:	f000 ff8a 	bl	4051d0 <__adddf3>
  4042bc:	4642      	mov	r2, r8
  4042be:	464b      	mov	r3, r9
  4042c0:	f001 f938 	bl	405534 <__aeabi_dmul>
  4042c4:	a338      	add	r3, pc, #224	; (adr r3, 4043a8 <__kernel_cos+0x220>)
  4042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042ca:	f000 ff7f 	bl	4051cc <__aeabi_dsub>
  4042ce:	4642      	mov	r2, r8
  4042d0:	464b      	mov	r3, r9
  4042d2:	f001 f92f 	bl	405534 <__aeabi_dmul>
  4042d6:	a336      	add	r3, pc, #216	; (adr r3, 4043b0 <__kernel_cos+0x228>)
  4042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4042dc:	f000 ff78 	bl	4051d0 <__adddf3>
  4042e0:	464b      	mov	r3, r9
  4042e2:	4642      	mov	r2, r8
  4042e4:	f001 f926 	bl	405534 <__aeabi_dmul>
  4042e8:	4b35      	ldr	r3, [pc, #212]	; (4043c0 <__kernel_cos+0x238>)
  4042ea:	429f      	cmp	r7, r3
  4042ec:	e9cd 0100 	strd	r0, r1, [sp]
  4042f0:	dd97      	ble.n	404222 <__kernel_cos+0x9a>
  4042f2:	4b34      	ldr	r3, [pc, #208]	; (4043c4 <__kernel_cos+0x23c>)
  4042f4:	2200      	movs	r2, #0
  4042f6:	429f      	cmp	r7, r3
  4042f8:	dc38      	bgt.n	40436c <__kernel_cos+0x1e4>
  4042fa:	f5a7 1300 	sub.w	r3, r7, #2097152	; 0x200000
  4042fe:	2000      	movs	r0, #0
  404300:	492e      	ldr	r1, [pc, #184]	; (4043bc <__kernel_cos+0x234>)
  404302:	4616      	mov	r6, r2
  404304:	461f      	mov	r7, r3
  404306:	f000 ff61 	bl	4051cc <__aeabi_dsub>
  40430a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40430e:	4640      	mov	r0, r8
  404310:	4649      	mov	r1, r9
  404312:	2200      	movs	r2, #0
  404314:	4b28      	ldr	r3, [pc, #160]	; (4043b8 <__kernel_cos+0x230>)
  404316:	f001 f90d 	bl	405534 <__aeabi_dmul>
  40431a:	4632      	mov	r2, r6
  40431c:	463b      	mov	r3, r7
  40431e:	f000 ff55 	bl	4051cc <__aeabi_dsub>
  404322:	4606      	mov	r6, r0
  404324:	460f      	mov	r7, r1
  404326:	4640      	mov	r0, r8
  404328:	4649      	mov	r1, r9
  40432a:	e9dd 2300 	ldrd	r2, r3, [sp]
  40432e:	f001 f901 	bl	405534 <__aeabi_dmul>
  404332:	4680      	mov	r8, r0
  404334:	4689      	mov	r9, r1
  404336:	4652      	mov	r2, sl
  404338:	465b      	mov	r3, fp
  40433a:	4628      	mov	r0, r5
  40433c:	4621      	mov	r1, r4
  40433e:	f001 f8f9 	bl	405534 <__aeabi_dmul>
  404342:	4602      	mov	r2, r0
  404344:	460b      	mov	r3, r1
  404346:	4640      	mov	r0, r8
  404348:	4649      	mov	r1, r9
  40434a:	f000 ff3f 	bl	4051cc <__aeabi_dsub>
  40434e:	4602      	mov	r2, r0
  404350:	460b      	mov	r3, r1
  404352:	4630      	mov	r0, r6
  404354:	4639      	mov	r1, r7
  404356:	f000 ff39 	bl	4051cc <__aeabi_dsub>
  40435a:	4602      	mov	r2, r0
  40435c:	460b      	mov	r3, r1
  40435e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404362:	f000 ff33 	bl	4051cc <__aeabi_dsub>
  404366:	b005      	add	sp, #20
  404368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40436c:	4b16      	ldr	r3, [pc, #88]	; (4043c8 <__kernel_cos+0x240>)
  40436e:	2600      	movs	r6, #0
  404370:	4f16      	ldr	r7, [pc, #88]	; (4043cc <__kernel_cos+0x244>)
  404372:	e9cd 2302 	strd	r2, r3, [sp, #8]
  404376:	e7ca      	b.n	40430e <__kernel_cos+0x186>
  404378:	2000      	movs	r0, #0
  40437a:	4910      	ldr	r1, [pc, #64]	; (4043bc <__kernel_cos+0x234>)
  40437c:	b005      	add	sp, #20
  40437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404382:	bf00      	nop
  404384:	f3af 8000 	nop.w
  404388:	be8838d4 	.word	0xbe8838d4
  40438c:	bda8fae9 	.word	0xbda8fae9
  404390:	bdb4b1c4 	.word	0xbdb4b1c4
  404394:	3e21ee9e 	.word	0x3e21ee9e
  404398:	809c52ad 	.word	0x809c52ad
  40439c:	3e927e4f 	.word	0x3e927e4f
  4043a0:	19cb1590 	.word	0x19cb1590
  4043a4:	3efa01a0 	.word	0x3efa01a0
  4043a8:	16c15177 	.word	0x16c15177
  4043ac:	3f56c16c 	.word	0x3f56c16c
  4043b0:	5555554c 	.word	0x5555554c
  4043b4:	3fa55555 	.word	0x3fa55555
  4043b8:	3fe00000 	.word	0x3fe00000
  4043bc:	3ff00000 	.word	0x3ff00000
  4043c0:	3fd33332 	.word	0x3fd33332
  4043c4:	3fe90000 	.word	0x3fe90000
  4043c8:	3fe70000 	.word	0x3fe70000
  4043cc:	3fd20000 	.word	0x3fd20000

004043d0 <__kernel_rem_pio2>:
  4043d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043d4:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  4043d8:	461e      	mov	r6, r3
  4043da:	4c84      	ldr	r4, [pc, #528]	; (4045ec <__kernel_rem_pio2+0x21c>)
  4043dc:	930c      	str	r3, [sp, #48]	; 0x30
  4043de:	1ed3      	subs	r3, r2, #3
  4043e0:	9004      	str	r0, [sp, #16]
  4043e2:	3e01      	subs	r6, #1
  4043e4:	fb84 0403 	smull	r0, r4, r4, r3
  4043e8:	17db      	asrs	r3, r3, #31
  4043ea:	4d81      	ldr	r5, [pc, #516]	; (4045f0 <__kernel_rem_pio2+0x220>)
  4043ec:	ebc3 03a4 	rsb	r3, r3, r4, asr #2
  4043f0:	98a6      	ldr	r0, [sp, #664]	; 0x298
  4043f2:	910a      	str	r1, [sp, #40]	; 0x28
  4043f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4043f8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  4043fc:	9603      	str	r6, [sp, #12]
  4043fe:	4619      	mov	r1, r3
  404400:	930d      	str	r3, [sp, #52]	; 0x34
  404402:	43db      	mvns	r3, r3
  404404:	1834      	adds	r4, r6, r0
  404406:	9009      	str	r0, [sp, #36]	; 0x24
  404408:	eba1 0506 	sub.w	r5, r1, r6
  40440c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  404410:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  404414:	9308      	str	r3, [sp, #32]
  404416:	d416      	bmi.n	404446 <__kernel_rem_pio2+0x76>
  404418:	442c      	add	r4, r5
  40441a:	ae22      	add	r6, sp, #136	; 0x88
  40441c:	9fa7      	ldr	r7, [sp, #668]	; 0x29c
  40441e:	3401      	adds	r4, #1
  404420:	e008      	b.n	404434 <__kernel_rem_pio2+0x64>
  404422:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
  404426:	3501      	adds	r5, #1
  404428:	f001 f81e 	bl	405468 <__aeabi_i2d>
  40442c:	42a5      	cmp	r5, r4
  40442e:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404432:	d008      	beq.n	404446 <__kernel_rem_pio2+0x76>
  404434:	2d00      	cmp	r5, #0
  404436:	daf4      	bge.n	404422 <__kernel_rem_pio2+0x52>
  404438:	3501      	adds	r5, #1
  40443a:	2000      	movs	r0, #0
  40443c:	2100      	movs	r1, #0
  40443e:	42a5      	cmp	r5, r4
  404440:	e9e6 0102 	strd	r0, r1, [r6, #8]!
  404444:	d1f6      	bne.n	404434 <__kernel_rem_pio2+0x64>
  404446:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404448:	2b00      	cmp	r3, #0
  40444a:	db31      	blt.n	4044b0 <__kernel_rem_pio2+0xe0>
  40444c:	a974      	add	r1, sp, #464	; 0x1d0
  40444e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404452:	f50d 79e4 	add.w	r9, sp, #456	; 0x1c8
  404456:	eb01 0bc2 	add.w	fp, r1, r2, lsl #3
  40445a:	a924      	add	r1, sp, #144	; 0x90
  40445c:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
  404460:	9a03      	ldr	r2, [sp, #12]
  404462:	00db      	lsls	r3, r3, #3
  404464:	eb01 08c2 	add.w	r8, r1, r2, lsl #3
  404468:	9300      	str	r3, [sp, #0]
  40446a:	9b03      	ldr	r3, [sp, #12]
  40446c:	2b00      	cmp	r3, #0
  40446e:	f2c0 8195 	blt.w	40479c <__kernel_rem_pio2+0x3cc>
  404472:	9b04      	ldr	r3, [sp, #16]
  404474:	4644      	mov	r4, r8
  404476:	2600      	movs	r6, #0
  404478:	2700      	movs	r7, #0
  40447a:	f1a3 0a08 	sub.w	sl, r3, #8
  40447e:	9b00      	ldr	r3, [sp, #0]
  404480:	eb08 0503 	add.w	r5, r8, r3
  404484:	e9fa 2302 	ldrd	r2, r3, [sl, #8]!
  404488:	e874 0102 	ldrd	r0, r1, [r4], #-8
  40448c:	f001 f852 	bl	405534 <__aeabi_dmul>
  404490:	4602      	mov	r2, r0
  404492:	460b      	mov	r3, r1
  404494:	4630      	mov	r0, r6
  404496:	4639      	mov	r1, r7
  404498:	f000 fe9a 	bl	4051d0 <__adddf3>
  40449c:	42ac      	cmp	r4, r5
  40449e:	4606      	mov	r6, r0
  4044a0:	460f      	mov	r7, r1
  4044a2:	d1ef      	bne.n	404484 <__kernel_rem_pio2+0xb4>
  4044a4:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  4044a8:	45d9      	cmp	r9, fp
  4044aa:	f108 0808 	add.w	r8, r8, #8
  4044ae:	d1dc      	bne.n	40446a <__kernel_rem_pio2+0x9a>
  4044b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4044b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
  4044b6:	a910      	add	r1, sp, #64	; 0x40
  4044b8:	4413      	add	r3, r2
  4044ba:	4693      	mov	fp, r2
  4044bc:	009b      	lsls	r3, r3, #2
  4044be:	1d1a      	adds	r2, r3, #4
  4044c0:	440b      	add	r3, r1
  4044c2:	930e      	str	r3, [sp, #56]	; 0x38
  4044c4:	460b      	mov	r3, r1
  4044c6:	4413      	add	r3, r2
  4044c8:	930f      	str	r3, [sp, #60]	; 0x3c
  4044ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
  4044ce:	a99c      	add	r1, sp, #624	; 0x270
  4044d0:	f1bb 0f00 	cmp.w	fp, #0
  4044d4:	461a      	mov	r2, r3
  4044d6:	9306      	str	r3, [sp, #24]
  4044d8:	440b      	add	r3, r1
  4044da:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
  4044de:	dd28      	ble.n	404532 <__kernel_rem_pio2+0x162>
  4044e0:	f50d 7ae8 	add.w	sl, sp, #464	; 0x1d0
  4044e4:	af0f      	add	r7, sp, #60	; 0x3c
  4044e6:	eb0a 0602 	add.w	r6, sl, r2
  4044ea:	2200      	movs	r2, #0
  4044ec:	4b41      	ldr	r3, [pc, #260]	; (4045f4 <__kernel_rem_pio2+0x224>)
  4044ee:	4620      	mov	r0, r4
  4044f0:	4629      	mov	r1, r5
  4044f2:	f001 f81f 	bl	405534 <__aeabi_dmul>
  4044f6:	f001 fab7 	bl	405a68 <__aeabi_d2iz>
  4044fa:	f000 ffb5 	bl	405468 <__aeabi_i2d>
  4044fe:	2200      	movs	r2, #0
  404500:	4b3d      	ldr	r3, [pc, #244]	; (4045f8 <__kernel_rem_pio2+0x228>)
  404502:	4680      	mov	r8, r0
  404504:	4689      	mov	r9, r1
  404506:	f001 f815 	bl	405534 <__aeabi_dmul>
  40450a:	4602      	mov	r2, r0
  40450c:	460b      	mov	r3, r1
  40450e:	4620      	mov	r0, r4
  404510:	4629      	mov	r1, r5
  404512:	f000 fe5b 	bl	4051cc <__aeabi_dsub>
  404516:	f001 faa7 	bl	405a68 <__aeabi_d2iz>
  40451a:	4649      	mov	r1, r9
  40451c:	f847 0f04 	str.w	r0, [r7, #4]!
  404520:	4640      	mov	r0, r8
  404522:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
  404526:	f000 fe53 	bl	4051d0 <__adddf3>
  40452a:	4604      	mov	r4, r0
  40452c:	4556      	cmp	r6, sl
  40452e:	460d      	mov	r5, r1
  404530:	d1db      	bne.n	4044ea <__kernel_rem_pio2+0x11a>
  404532:	f8dd 9020 	ldr.w	r9, [sp, #32]
  404536:	4620      	mov	r0, r4
  404538:	4629      	mov	r1, r5
  40453a:	464a      	mov	r2, r9
  40453c:	f000 fcb0 	bl	404ea0 <scalbn>
  404540:	2200      	movs	r2, #0
  404542:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
  404546:	4604      	mov	r4, r0
  404548:	460d      	mov	r5, r1
  40454a:	f000 fff3 	bl	405534 <__aeabi_dmul>
  40454e:	f000 fbfb 	bl	404d48 <floor>
  404552:	2200      	movs	r2, #0
  404554:	4b29      	ldr	r3, [pc, #164]	; (4045fc <__kernel_rem_pio2+0x22c>)
  404556:	f000 ffed 	bl	405534 <__aeabi_dmul>
  40455a:	4602      	mov	r2, r0
  40455c:	460b      	mov	r3, r1
  40455e:	4620      	mov	r0, r4
  404560:	4629      	mov	r1, r5
  404562:	f000 fe33 	bl	4051cc <__aeabi_dsub>
  404566:	460d      	mov	r5, r1
  404568:	4604      	mov	r4, r0
  40456a:	f001 fa7d 	bl	405a68 <__aeabi_d2iz>
  40456e:	4680      	mov	r8, r0
  404570:	f000 ff7a 	bl	405468 <__aeabi_i2d>
  404574:	460b      	mov	r3, r1
  404576:	4602      	mov	r2, r0
  404578:	4629      	mov	r1, r5
  40457a:	4620      	mov	r0, r4
  40457c:	f000 fe26 	bl	4051cc <__aeabi_dsub>
  404580:	464b      	mov	r3, r9
  404582:	4606      	mov	r6, r0
  404584:	460f      	mov	r7, r1
  404586:	2b00      	cmp	r3, #0
  404588:	f340 80f4 	ble.w	404774 <__kernel_rem_pio2+0x3a4>
  40458c:	f10b 30ff 	add.w	r0, fp, #4294967295
  404590:	ab10      	add	r3, sp, #64	; 0x40
  404592:	f1c9 0218 	rsb	r2, r9, #24
  404596:	f1c9 0117 	rsb	r1, r9, #23
  40459a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
  40459e:	fa43 f402 	asr.w	r4, r3, r2
  4045a2:	fa04 f502 	lsl.w	r5, r4, r2
  4045a6:	44a0      	add	r8, r4
  4045a8:	1b5d      	subs	r5, r3, r5
  4045aa:	ab10      	add	r3, sp, #64	; 0x40
  4045ac:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
  4045b0:	410d      	asrs	r5, r1
  4045b2:	2d00      	cmp	r5, #0
  4045b4:	dd2c      	ble.n	404610 <__kernel_rem_pio2+0x240>
  4045b6:	f1bb 0f00 	cmp.w	fp, #0
  4045ba:	f108 0801 	add.w	r8, r8, #1
  4045be:	f340 80ab 	ble.w	404718 <__kernel_rem_pio2+0x348>
  4045c2:	2300      	movs	r3, #0
  4045c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4045c6:	461c      	mov	r4, r3
  4045c8:	e008      	b.n	4045dc <__kernel_rem_pio2+0x20c>
  4045ca:	f1c0 7180 	rsb	r1, r0, #16777216	; 0x1000000
  4045ce:	b108      	cbz	r0, 4045d4 <__kernel_rem_pio2+0x204>
  4045d0:	2401      	movs	r4, #1
  4045d2:	6011      	str	r1, [r2, #0]
  4045d4:	3301      	adds	r3, #1
  4045d6:	459b      	cmp	fp, r3
  4045d8:	f340 809f 	ble.w	40471a <__kernel_rem_pio2+0x34a>
  4045dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
  4045e0:	f852 0f04 	ldr.w	r0, [r2, #4]!
  4045e4:	2c00      	cmp	r4, #0
  4045e6:	d0f0      	beq.n	4045ca <__kernel_rem_pio2+0x1fa>
  4045e8:	1a09      	subs	r1, r1, r0
  4045ea:	e7f1      	b.n	4045d0 <__kernel_rem_pio2+0x200>
  4045ec:	2aaaaaab 	.word	0x2aaaaaab
  4045f0:	004068d0 	.word	0x004068d0
  4045f4:	3e700000 	.word	0x3e700000
  4045f8:	41700000 	.word	0x41700000
  4045fc:	40200000 	.word	0x40200000
  404600:	2200      	movs	r2, #0
  404602:	4bb2      	ldr	r3, [pc, #712]	; (4048cc <__kernel_rem_pio2+0x4fc>)
  404604:	f001 fa1c 	bl	405a40 <__aeabi_dcmpge>
  404608:	2800      	cmp	r0, #0
  40460a:	f040 80d1 	bne.w	4047b0 <__kernel_rem_pio2+0x3e0>
  40460e:	4605      	mov	r5, r0
  404610:	4630      	mov	r0, r6
  404612:	4639      	mov	r1, r7
  404614:	2200      	movs	r2, #0
  404616:	2300      	movs	r3, #0
  404618:	f001 f9f4 	bl	405a04 <__aeabi_dcmpeq>
  40461c:	2800      	cmp	r0, #0
  40461e:	f000 80d9 	beq.w	4047d4 <__kernel_rem_pio2+0x404>
  404622:	f10b 3aff 	add.w	sl, fp, #4294967295
  404626:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404628:	4553      	cmp	r3, sl
  40462a:	dc0d      	bgt.n	404648 <__kernel_rem_pio2+0x278>
  40462c:	ab10      	add	r3, sp, #64	; 0x40
  40462e:	2200      	movs	r2, #0
  404630:	980f      	ldr	r0, [sp, #60]	; 0x3c
  404632:	eb03 038b 	add.w	r3, r3, fp, lsl #2
  404636:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  40463a:	4283      	cmp	r3, r0
  40463c:	ea42 0201 	orr.w	r2, r2, r1
  404640:	d1f9      	bne.n	404636 <__kernel_rem_pio2+0x266>
  404642:	2a00      	cmp	r2, #0
  404644:	f040 8229 	bne.w	404a9a <__kernel_rem_pio2+0x6ca>
  404648:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40464a:	aa10      	add	r2, sp, #64	; 0x40
  40464c:	3b01      	subs	r3, #1
  40464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404652:	2b00      	cmp	r3, #0
  404654:	f040 8239 	bne.w	404aca <__kernel_rem_pio2+0x6fa>
  404658:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40465a:	2301      	movs	r3, #1
  40465c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
  404660:	3301      	adds	r3, #1
  404662:	2900      	cmp	r1, #0
  404664:	d0fa      	beq.n	40465c <__kernel_rem_pio2+0x28c>
  404666:	445b      	add	r3, fp
  404668:	461a      	mov	r2, r3
  40466a:	930b      	str	r3, [sp, #44]	; 0x2c
  40466c:	f10b 0301 	add.w	r3, fp, #1
  404670:	4293      	cmp	r3, r2
  404672:	dc4b      	bgt.n	40470c <__kernel_rem_pio2+0x33c>
  404674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404676:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
  40467a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40467c:	f04f 0800 	mov.w	r8, #0
  404680:	4413      	add	r3, r2
  404682:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404684:	445a      	add	r2, fp
  404686:	4499      	add	r9, r3
  404688:	ebcb 0b01 	rsb	fp, fp, r1
  40468c:	00d3      	lsls	r3, r2, #3
  40468e:	9aa7      	ldr	r2, [sp, #668]	; 0x29c
  404690:	eb02 0289 	add.w	r2, r2, r9, lsl #2
  404694:	9307      	str	r3, [sp, #28]
  404696:	9200      	str	r2, [sp, #0]
  404698:	ea4f 02cb 	mov.w	r2, fp, lsl #3
  40469c:	9205      	str	r2, [sp, #20]
  40469e:	aa24      	add	r2, sp, #144	; 0x90
  4046a0:	eb02 0b03 	add.w	fp, r2, r3
  4046a4:	aa74      	add	r2, sp, #464	; 0x1d0
  4046a6:	9b06      	ldr	r3, [sp, #24]
  4046a8:	eb02 0a03 	add.w	sl, r2, r3
  4046ac:	9b00      	ldr	r3, [sp, #0]
  4046ae:	f853 0f04 	ldr.w	r0, [r3, #4]!
  4046b2:	9300      	str	r3, [sp, #0]
  4046b4:	f000 fed8 	bl	405468 <__aeabi_i2d>
  4046b8:	9b03      	ldr	r3, [sp, #12]
  4046ba:	2b00      	cmp	r3, #0
  4046bc:	e8eb 0102 	strd	r0, r1, [fp], #8
  4046c0:	db27      	blt.n	404712 <__kernel_rem_pio2+0x342>
  4046c2:	9b07      	ldr	r3, [sp, #28]
  4046c4:	2600      	movs	r6, #0
  4046c6:	2700      	movs	r7, #0
  4046c8:	eb03 0408 	add.w	r4, r3, r8
  4046cc:	9b06      	ldr	r3, [sp, #24]
  4046ce:	eb08 0503 	add.w	r5, r8, r3
  4046d2:	9b04      	ldr	r3, [sp, #16]
  4046d4:	f1a3 0908 	sub.w	r9, r3, #8
  4046d8:	ab24      	add	r3, sp, #144	; 0x90
  4046da:	441c      	add	r4, r3
  4046dc:	441d      	add	r5, r3
  4046de:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  4046e2:	e874 0102 	ldrd	r0, r1, [r4], #-8
  4046e6:	f000 ff25 	bl	405534 <__aeabi_dmul>
  4046ea:	4602      	mov	r2, r0
  4046ec:	460b      	mov	r3, r1
  4046ee:	4630      	mov	r0, r6
  4046f0:	4639      	mov	r1, r7
  4046f2:	f000 fd6d 	bl	4051d0 <__adddf3>
  4046f6:	42ac      	cmp	r4, r5
  4046f8:	4606      	mov	r6, r0
  4046fa:	460f      	mov	r7, r1
  4046fc:	d1ef      	bne.n	4046de <__kernel_rem_pio2+0x30e>
  4046fe:	f108 0808 	add.w	r8, r8, #8
  404702:	9b05      	ldr	r3, [sp, #20]
  404704:	4598      	cmp	r8, r3
  404706:	e9ea 6702 	strd	r6, r7, [sl, #8]!
  40470a:	d1cf      	bne.n	4046ac <__kernel_rem_pio2+0x2dc>
  40470c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404710:	e6db      	b.n	4044ca <__kernel_rem_pio2+0xfa>
  404712:	2600      	movs	r6, #0
  404714:	2700      	movs	r7, #0
  404716:	e7f2      	b.n	4046fe <__kernel_rem_pio2+0x32e>
  404718:	2400      	movs	r4, #0
  40471a:	9b08      	ldr	r3, [sp, #32]
  40471c:	2b00      	cmp	r3, #0
  40471e:	dd0d      	ble.n	40473c <__kernel_rem_pio2+0x36c>
  404720:	2b01      	cmp	r3, #1
  404722:	d030      	beq.n	404786 <__kernel_rem_pio2+0x3b6>
  404724:	2b02      	cmp	r3, #2
  404726:	d109      	bne.n	40473c <__kernel_rem_pio2+0x36c>
  404728:	f10b 32ff 	add.w	r2, fp, #4294967295
  40472c:	ab10      	add	r3, sp, #64	; 0x40
  40472e:	a910      	add	r1, sp, #64	; 0x40
  404730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404734:	f3c3 0315 	ubfx	r3, r3, #0, #22
  404738:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40473c:	2d02      	cmp	r5, #2
  40473e:	f47f af67 	bne.w	404610 <__kernel_rem_pio2+0x240>
  404742:	4632      	mov	r2, r6
  404744:	463b      	mov	r3, r7
  404746:	2000      	movs	r0, #0
  404748:	4961      	ldr	r1, [pc, #388]	; (4048d0 <__kernel_rem_pio2+0x500>)
  40474a:	f000 fd3f 	bl	4051cc <__aeabi_dsub>
  40474e:	4606      	mov	r6, r0
  404750:	460f      	mov	r7, r1
  404752:	2c00      	cmp	r4, #0
  404754:	f43f af5c 	beq.w	404610 <__kernel_rem_pio2+0x240>
  404758:	9a08      	ldr	r2, [sp, #32]
  40475a:	2000      	movs	r0, #0
  40475c:	495c      	ldr	r1, [pc, #368]	; (4048d0 <__kernel_rem_pio2+0x500>)
  40475e:	f000 fb9f 	bl	404ea0 <scalbn>
  404762:	4602      	mov	r2, r0
  404764:	460b      	mov	r3, r1
  404766:	4630      	mov	r0, r6
  404768:	4639      	mov	r1, r7
  40476a:	f000 fd2f 	bl	4051cc <__aeabi_dsub>
  40476e:	4606      	mov	r6, r0
  404770:	460f      	mov	r7, r1
  404772:	e74d      	b.n	404610 <__kernel_rem_pio2+0x240>
  404774:	f47f af44 	bne.w	404600 <__kernel_rem_pio2+0x230>
  404778:	f10b 33ff 	add.w	r3, fp, #4294967295
  40477c:	aa10      	add	r2, sp, #64	; 0x40
  40477e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  404782:	15ed      	asrs	r5, r5, #23
  404784:	e715      	b.n	4045b2 <__kernel_rem_pio2+0x1e2>
  404786:	f10b 32ff 	add.w	r2, fp, #4294967295
  40478a:	ab10      	add	r3, sp, #64	; 0x40
  40478c:	a910      	add	r1, sp, #64	; 0x40
  40478e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  404792:	f3c3 0316 	ubfx	r3, r3, #0, #23
  404796:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  40479a:	e7cf      	b.n	40473c <__kernel_rem_pio2+0x36c>
  40479c:	2600      	movs	r6, #0
  40479e:	2700      	movs	r7, #0
  4047a0:	f108 0808 	add.w	r8, r8, #8
  4047a4:	e9e9 6702 	strd	r6, r7, [r9, #8]!
  4047a8:	45d9      	cmp	r9, fp
  4047aa:	f47f ae5e 	bne.w	40446a <__kernel_rem_pio2+0x9a>
  4047ae:	e67f      	b.n	4044b0 <__kernel_rem_pio2+0xe0>
  4047b0:	f1bb 0f00 	cmp.w	fp, #0
  4047b4:	f108 0801 	add.w	r8, r8, #1
  4047b8:	bfc8      	it	gt
  4047ba:	2502      	movgt	r5, #2
  4047bc:	f73f af01 	bgt.w	4045c2 <__kernel_rem_pio2+0x1f2>
  4047c0:	4632      	mov	r2, r6
  4047c2:	463b      	mov	r3, r7
  4047c4:	2000      	movs	r0, #0
  4047c6:	4942      	ldr	r1, [pc, #264]	; (4048d0 <__kernel_rem_pio2+0x500>)
  4047c8:	f000 fd00 	bl	4051cc <__aeabi_dsub>
  4047cc:	2502      	movs	r5, #2
  4047ce:	4606      	mov	r6, r0
  4047d0:	460f      	mov	r7, r1
  4047d2:	e71d      	b.n	404610 <__kernel_rem_pio2+0x240>
  4047d4:	9b08      	ldr	r3, [sp, #32]
  4047d6:	4630      	mov	r0, r6
  4047d8:	4639      	mov	r1, r7
  4047da:	9503      	str	r5, [sp, #12]
  4047dc:	425a      	negs	r2, r3
  4047de:	f8cd 8014 	str.w	r8, [sp, #20]
  4047e2:	f000 fb5d 	bl	404ea0 <scalbn>
  4047e6:	2200      	movs	r2, #0
  4047e8:	4b3a      	ldr	r3, [pc, #232]	; (4048d4 <__kernel_rem_pio2+0x504>)
  4047ea:	4604      	mov	r4, r0
  4047ec:	460d      	mov	r5, r1
  4047ee:	f001 f927 	bl	405a40 <__aeabi_dcmpge>
  4047f2:	2800      	cmp	r0, #0
  4047f4:	f000 81e2 	beq.w	404bbc <__kernel_rem_pio2+0x7ec>
  4047f8:	2200      	movs	r2, #0
  4047fa:	4b37      	ldr	r3, [pc, #220]	; (4048d8 <__kernel_rem_pio2+0x508>)
  4047fc:	4620      	mov	r0, r4
  4047fe:	4629      	mov	r1, r5
  404800:	f000 fe98 	bl	405534 <__aeabi_dmul>
  404804:	9b08      	ldr	r3, [sp, #32]
  404806:	f10b 0a01 	add.w	sl, fp, #1
  40480a:	3318      	adds	r3, #24
  40480c:	9308      	str	r3, [sp, #32]
  40480e:	f001 f92b 	bl	405a68 <__aeabi_d2iz>
  404812:	4606      	mov	r6, r0
  404814:	f000 fe28 	bl	405468 <__aeabi_i2d>
  404818:	2200      	movs	r2, #0
  40481a:	4b2e      	ldr	r3, [pc, #184]	; (4048d4 <__kernel_rem_pio2+0x504>)
  40481c:	f000 fe8a 	bl	405534 <__aeabi_dmul>
  404820:	460b      	mov	r3, r1
  404822:	4602      	mov	r2, r0
  404824:	4629      	mov	r1, r5
  404826:	4620      	mov	r0, r4
  404828:	f000 fcd0 	bl	4051cc <__aeabi_dsub>
  40482c:	f001 f91c 	bl	405a68 <__aeabi_d2iz>
  404830:	ab10      	add	r3, sp, #64	; 0x40
  404832:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  404836:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
  40483a:	9a08      	ldr	r2, [sp, #32]
  40483c:	2000      	movs	r0, #0
  40483e:	4924      	ldr	r1, [pc, #144]	; (4048d0 <__kernel_rem_pio2+0x500>)
  404840:	f000 fb2e 	bl	404ea0 <scalbn>
  404844:	f1ba 0f00 	cmp.w	sl, #0
  404848:	4604      	mov	r4, r0
  40484a:	460d      	mov	r5, r1
  40484c:	f2c0 80d8 	blt.w	404a00 <__kernel_rem_pio2+0x630>
  404850:	f10a 0301 	add.w	r3, sl, #1
  404854:	af74      	add	r7, sp, #464	; 0x1d0
  404856:	aa10      	add	r2, sp, #64	; 0x40
  404858:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  40485c:	9300      	str	r3, [sp, #0]
  40485e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
  404862:	eb07 0608 	add.w	r6, r7, r8
  404866:	f859 0d04 	ldr.w	r0, [r9, #-4]!
  40486a:	f000 fdfd 	bl	405468 <__aeabi_i2d>
  40486e:	4622      	mov	r2, r4
  404870:	462b      	mov	r3, r5
  404872:	f000 fe5f 	bl	405534 <__aeabi_dmul>
  404876:	2200      	movs	r2, #0
  404878:	4b17      	ldr	r3, [pc, #92]	; (4048d8 <__kernel_rem_pio2+0x508>)
  40487a:	e966 0102 	strd	r0, r1, [r6, #-8]!
  40487e:	4620      	mov	r0, r4
  404880:	4629      	mov	r1, r5
  404882:	f000 fe57 	bl	405534 <__aeabi_dmul>
  404886:	42be      	cmp	r6, r7
  404888:	4604      	mov	r4, r0
  40488a:	460d      	mov	r5, r1
  40488c:	d1eb      	bne.n	404866 <__kernel_rem_pio2+0x496>
  40488e:	f1a8 0b08 	sub.w	fp, r8, #8
  404892:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  404896:	f8cd a018 	str.w	sl, [sp, #24]
  40489a:	f04f 0800 	mov.w	r8, #0
  40489e:	eb06 030b 	add.w	r3, r6, fp
  4048a2:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
  4048a6:	f8cd 9010 	str.w	r9, [sp, #16]
  4048aa:	469b      	mov	fp, r3
  4048ac:	f1ba 0f00 	cmp.w	sl, #0
  4048b0:	f2c0 80a3 	blt.w	4049fa <__kernel_rem_pio2+0x62a>
  4048b4:	f1b8 0f00 	cmp.w	r8, #0
  4048b8:	f2c0 809f 	blt.w	4049fa <__kernel_rem_pio2+0x62a>
  4048bc:	f8df 901c 	ldr.w	r9, [pc, #28]	; 4048dc <__kernel_rem_pio2+0x50c>
  4048c0:	465d      	mov	r5, fp
  4048c2:	2600      	movs	r6, #0
  4048c4:	2700      	movs	r7, #0
  4048c6:	2400      	movs	r4, #0
  4048c8:	e00c      	b.n	4048e4 <__kernel_rem_pio2+0x514>
  4048ca:	bf00      	nop
  4048cc:	3fe00000 	.word	0x3fe00000
  4048d0:	3ff00000 	.word	0x3ff00000
  4048d4:	41700000 	.word	0x41700000
  4048d8:	3e700000 	.word	0x3e700000
  4048dc:	004068d8 	.word	0x004068d8
  4048e0:	4544      	cmp	r4, r8
  4048e2:	dc10      	bgt.n	404906 <__kernel_rem_pio2+0x536>
  4048e4:	3401      	adds	r4, #1
  4048e6:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  4048ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
  4048ee:	f000 fe21 	bl	405534 <__aeabi_dmul>
  4048f2:	4602      	mov	r2, r0
  4048f4:	460b      	mov	r3, r1
  4048f6:	4630      	mov	r0, r6
  4048f8:	4639      	mov	r1, r7
  4048fa:	f000 fc69 	bl	4051d0 <__adddf3>
  4048fe:	45a2      	cmp	sl, r4
  404900:	4606      	mov	r6, r0
  404902:	460f      	mov	r7, r1
  404904:	daec      	bge.n	4048e0 <__kernel_rem_pio2+0x510>
  404906:	9b04      	ldr	r3, [sp, #16]
  404908:	f1ab 0b08 	sub.w	fp, fp, #8
  40490c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  404910:	f108 0801 	add.w	r8, r8, #1
  404914:	e9c3 6700 	strd	r6, r7, [r3]
  404918:	9b00      	ldr	r3, [sp, #0]
  40491a:	4598      	cmp	r8, r3
  40491c:	d1c6      	bne.n	4048ac <__kernel_rem_pio2+0x4dc>
  40491e:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  404920:	f8dd a018 	ldr.w	sl, [sp, #24]
  404924:	f8dd 9010 	ldr.w	r9, [sp, #16]
  404928:	2b03      	cmp	r3, #3
  40492a:	d83d      	bhi.n	4049a8 <__kernel_rem_pio2+0x5d8>
  40492c:	e8df f013 	tbh	[pc, r3, lsl #1]
  404930:	00040043 	.word	0x00040043
  404934:	00cf0004 	.word	0x00cf0004
  404938:	2400      	movs	r4, #0
  40493a:	9b00      	ldr	r3, [sp, #0]
  40493c:	4626      	mov	r6, r4
  40493e:	eb09 05c3 	add.w	r5, r9, r3, lsl #3
  404942:	4620      	mov	r0, r4
  404944:	4631      	mov	r1, r6
  404946:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
  40494a:	f000 fc41 	bl	4051d0 <__adddf3>
  40494e:	4604      	mov	r4, r0
  404950:	454d      	cmp	r5, r9
  404952:	460e      	mov	r6, r1
  404954:	d1f5      	bne.n	404942 <__kernel_rem_pio2+0x572>
  404956:	9b03      	ldr	r3, [sp, #12]
  404958:	2b00      	cmp	r3, #0
  40495a:	f000 8084 	beq.w	404a66 <__kernel_rem_pio2+0x696>
  40495e:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
  404962:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404964:	4622      	mov	r2, r4
  404966:	4633      	mov	r3, r6
  404968:	6069      	str	r1, [r5, #4]
  40496a:	602c      	str	r4, [r5, #0]
  40496c:	e9d9 0100 	ldrd	r0, r1, [r9]
  404970:	f000 fc2c 	bl	4051cc <__aeabi_dsub>
  404974:	f1ba 0f00 	cmp.w	sl, #0
  404978:	4602      	mov	r2, r0
  40497a:	460b      	mov	r3, r1
  40497c:	dd0d      	ble.n	40499a <__kernel_rem_pio2+0x5ca>
  40497e:	2401      	movs	r4, #1
  404980:	3401      	adds	r4, #1
  404982:	4610      	mov	r0, r2
  404984:	4619      	mov	r1, r3
  404986:	e9f9 2302 	ldrd	r2, r3, [r9, #8]!
  40498a:	f000 fc21 	bl	4051d0 <__adddf3>
  40498e:	45a2      	cmp	sl, r4
  404990:	4602      	mov	r2, r0
  404992:	460b      	mov	r3, r1
  404994:	daf4      	bge.n	404980 <__kernel_rem_pio2+0x5b0>
  404996:	9903      	ldr	r1, [sp, #12]
  404998:	b109      	cbz	r1, 40499e <__kernel_rem_pio2+0x5ce>
  40499a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  40499e:	4619      	mov	r1, r3
  4049a0:	4610      	mov	r0, r2
  4049a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
  4049a8:	9b05      	ldr	r3, [sp, #20]
  4049aa:	f003 0007 	and.w	r0, r3, #7
  4049ae:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049b6:	9b00      	ldr	r3, [sp, #0]
  4049b8:	2200      	movs	r2, #0
  4049ba:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
  4049be:	4613      	mov	r3, r2
  4049c0:	f10a 3aff 	add.w	sl, sl, #4294967295
  4049c4:	4610      	mov	r0, r2
  4049c6:	4619      	mov	r1, r3
  4049c8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
  4049cc:	f000 fc00 	bl	4051d0 <__adddf3>
  4049d0:	f1ba 3fff 	cmp.w	sl, #4294967295
  4049d4:	4602      	mov	r2, r0
  4049d6:	460b      	mov	r3, r1
  4049d8:	d1f2      	bne.n	4049c0 <__kernel_rem_pio2+0x5f0>
  4049da:	9903      	ldr	r1, [sp, #12]
  4049dc:	b109      	cbz	r1, 4049e2 <__kernel_rem_pio2+0x612>
  4049de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4049e2:	4610      	mov	r0, r2
  4049e4:	4619      	mov	r1, r3
  4049e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4049e8:	e9c3 0100 	strd	r0, r1, [r3]
  4049ec:	9b05      	ldr	r3, [sp, #20]
  4049ee:	f003 0007 	and.w	r0, r3, #7
  4049f2:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  4049f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4049fa:	2600      	movs	r6, #0
  4049fc:	2700      	movs	r7, #0
  4049fe:	e782      	b.n	404906 <__kernel_rem_pio2+0x536>
  404a00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
  404a02:	2b03      	cmp	r3, #3
  404a04:	d8d0      	bhi.n	4049a8 <__kernel_rem_pio2+0x5d8>
  404a06:	e8df f003 	tbb	[pc, r3]
  404a0a:	2645      	.short	0x2645
  404a0c:	0226      	.short	0x0226
  404a0e:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  404a12:	2300      	movs	r3, #0
  404a14:	9903      	ldr	r1, [sp, #12]
  404a16:	461a      	mov	r2, r3
  404a18:	2900      	cmp	r1, #0
  404a1a:	f000 80b9 	beq.w	404b90 <__kernel_rem_pio2+0x7c0>
  404a1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404a20:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404a24:	f8d9 0004 	ldr.w	r0, [r9, #4]
  404a28:	f8d9 100c 	ldr.w	r1, [r9, #12]
  404a2c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404a30:	613b      	str	r3, [r7, #16]
  404a32:	9b05      	ldr	r3, [sp, #20]
  404a34:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
  404a38:	f8d9 4000 	ldr.w	r4, [r9]
  404a3c:	f8d9 5008 	ldr.w	r5, [r9, #8]
  404a40:	6078      	str	r0, [r7, #4]
  404a42:	f003 0007 	and.w	r0, r3, #7
  404a46:	617a      	str	r2, [r7, #20]
  404a48:	60f9      	str	r1, [r7, #12]
  404a4a:	603c      	str	r4, [r7, #0]
  404a4c:	60bd      	str	r5, [r7, #8]
  404a4e:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  404a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404a56:	2400      	movs	r4, #0
  404a58:	9b03      	ldr	r3, [sp, #12]
  404a5a:	f50d 7998 	add.w	r9, sp, #304	; 0x130
  404a5e:	4626      	mov	r6, r4
  404a60:	2b00      	cmp	r3, #0
  404a62:	f47f af7c 	bne.w	40495e <__kernel_rem_pio2+0x58e>
  404a66:	4620      	mov	r0, r4
  404a68:	4622      	mov	r2, r4
  404a6a:	4631      	mov	r1, r6
  404a6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404a6e:	4633      	mov	r3, r6
  404a70:	e9c4 0100 	strd	r0, r1, [r4]
  404a74:	e9d9 0100 	ldrd	r0, r1, [r9]
  404a78:	f000 fba8 	bl	4051cc <__aeabi_dsub>
  404a7c:	f1ba 0f00 	cmp.w	sl, #0
  404a80:	4602      	mov	r2, r0
  404a82:	460b      	mov	r3, r1
  404a84:	f73f af7b 	bgt.w	40497e <__kernel_rem_pio2+0x5ae>
  404a88:	4619      	mov	r1, r3
  404a8a:	4610      	mov	r0, r2
  404a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a8e:	e9c3 0102 	strd	r0, r1, [r3, #8]
  404a92:	e789      	b.n	4049a8 <__kernel_rem_pio2+0x5d8>
  404a94:	2200      	movs	r2, #0
  404a96:	4613      	mov	r3, r2
  404a98:	e79f      	b.n	4049da <__kernel_rem_pio2+0x60a>
  404a9a:	9a08      	ldr	r2, [sp, #32]
  404a9c:	ab10      	add	r3, sp, #64	; 0x40
  404a9e:	9503      	str	r5, [sp, #12]
  404aa0:	3a18      	subs	r2, #24
  404aa2:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
  404aa6:	f8cd 8014 	str.w	r8, [sp, #20]
  404aaa:	9208      	str	r2, [sp, #32]
  404aac:	2b00      	cmp	r3, #0
  404aae:	f47f aec4 	bne.w	40483a <__kernel_rem_pio2+0x46a>
  404ab2:	ab10      	add	r3, sp, #64	; 0x40
  404ab4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404ab8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
  404abc:	f10a 3aff 	add.w	sl, sl, #4294967295
  404ac0:	3a18      	subs	r2, #24
  404ac2:	2900      	cmp	r1, #0
  404ac4:	d0f8      	beq.n	404ab8 <__kernel_rem_pio2+0x6e8>
  404ac6:	9208      	str	r2, [sp, #32]
  404ac8:	e6b7      	b.n	40483a <__kernel_rem_pio2+0x46a>
  404aca:	2301      	movs	r3, #1
  404acc:	e5cb      	b.n	404666 <__kernel_rem_pio2+0x296>
  404ace:	f1ba 0f00 	cmp.w	sl, #0
  404ad2:	dd9e      	ble.n	404a12 <__kernel_rem_pio2+0x642>
  404ad4:	ea4f 08ca 	mov.w	r8, sl, lsl #3
  404ad8:	eb09 0b08 	add.w	fp, r9, r8
  404adc:	e9db 6700 	ldrd	r6, r7, [fp]
  404ae0:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
  404ae4:	4630      	mov	r0, r6
  404ae6:	4639      	mov	r1, r7
  404ae8:	e9cd 2300 	strd	r2, r3, [sp]
  404aec:	f000 fb70 	bl	4051d0 <__adddf3>
  404af0:	4604      	mov	r4, r0
  404af2:	460d      	mov	r5, r1
  404af4:	4622      	mov	r2, r4
  404af6:	462b      	mov	r3, r5
  404af8:	e9dd 0100 	ldrd	r0, r1, [sp]
  404afc:	f000 fb66 	bl	4051cc <__aeabi_dsub>
  404b00:	4602      	mov	r2, r0
  404b02:	460b      	mov	r3, r1
  404b04:	4630      	mov	r0, r6
  404b06:	4639      	mov	r1, r7
  404b08:	4626      	mov	r6, r4
  404b0a:	f000 fb61 	bl	4051d0 <__adddf3>
  404b0e:	45cb      	cmp	fp, r9
  404b10:	462f      	mov	r7, r5
  404b12:	e9cb 0102 	strd	r0, r1, [fp, #8]
  404b16:	e9cb 4500 	strd	r4, r5, [fp]
  404b1a:	d1e1      	bne.n	404ae0 <__kernel_rem_pio2+0x710>
  404b1c:	f1ba 0f01 	cmp.w	sl, #1
  404b20:	f77f af77 	ble.w	404a12 <__kernel_rem_pio2+0x642>
  404b24:	eb09 0a08 	add.w	sl, r9, r8
  404b28:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
  404b2c:	e9da 6700 	ldrd	r6, r7, [sl]
  404b30:	e97a 0102 	ldrd	r0, r1, [sl, #-8]!
  404b34:	4632      	mov	r2, r6
  404b36:	463b      	mov	r3, r7
  404b38:	e9cd 0100 	strd	r0, r1, [sp]
  404b3c:	f000 fb48 	bl	4051d0 <__adddf3>
  404b40:	4604      	mov	r4, r0
  404b42:	460d      	mov	r5, r1
  404b44:	4622      	mov	r2, r4
  404b46:	462b      	mov	r3, r5
  404b48:	e9dd 0100 	ldrd	r0, r1, [sp]
  404b4c:	f000 fb3e 	bl	4051cc <__aeabi_dsub>
  404b50:	4632      	mov	r2, r6
  404b52:	463b      	mov	r3, r7
  404b54:	4626      	mov	r6, r4
  404b56:	f000 fb3b 	bl	4051d0 <__adddf3>
  404b5a:	45da      	cmp	sl, fp
  404b5c:	462f      	mov	r7, r5
  404b5e:	e9ca 0102 	strd	r0, r1, [sl, #8]
  404b62:	e9ca 4500 	strd	r4, r5, [sl]
  404b66:	d1e3      	bne.n	404b30 <__kernel_rem_pio2+0x760>
  404b68:	f108 0408 	add.w	r4, r8, #8
  404b6c:	2300      	movs	r3, #0
  404b6e:	ad50      	add	r5, sp, #320	; 0x140
  404b70:	444c      	add	r4, r9
  404b72:	461a      	mov	r2, r3
  404b74:	4618      	mov	r0, r3
  404b76:	4611      	mov	r1, r2
  404b78:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
  404b7c:	f000 fb28 	bl	4051d0 <__adddf3>
  404b80:	4603      	mov	r3, r0
  404b82:	42ac      	cmp	r4, r5
  404b84:	460a      	mov	r2, r1
  404b86:	d1f5      	bne.n	404b74 <__kernel_rem_pio2+0x7a4>
  404b88:	9903      	ldr	r1, [sp, #12]
  404b8a:	2900      	cmp	r1, #0
  404b8c:	f47f af47 	bne.w	404a1e <__kernel_rem_pio2+0x64e>
  404b90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404b92:	4618      	mov	r0, r3
  404b94:	4611      	mov	r1, r2
  404b96:	4604      	mov	r4, r0
  404b98:	460d      	mov	r5, r1
  404b9a:	e9d9 2300 	ldrd	r2, r3, [r9]
  404b9e:	e9d9 0102 	ldrd	r0, r1, [r9, #8]
  404ba2:	e9c7 2300 	strd	r2, r3, [r7]
  404ba6:	9b05      	ldr	r3, [sp, #20]
  404ba8:	e9c7 0102 	strd	r0, r1, [r7, #8]
  404bac:	f003 0007 	and.w	r0, r3, #7
  404bb0:	e9c7 4504 	strd	r4, r5, [r7, #16]
  404bb4:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
  404bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bbc:	4620      	mov	r0, r4
  404bbe:	4629      	mov	r1, r5
  404bc0:	f000 ff52 	bl	405a68 <__aeabi_d2iz>
  404bc4:	ab10      	add	r3, sp, #64	; 0x40
  404bc6:	46da      	mov	sl, fp
  404bc8:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
  404bcc:	e635      	b.n	40483a <__kernel_rem_pio2+0x46a>
  404bce:	bf00      	nop

00404bd0 <__kernel_sin>:
  404bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bd4:	4699      	mov	r9, r3
  404bd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  404bda:	b085      	sub	sp, #20
  404bdc:	460c      	mov	r4, r1
  404bde:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
  404be2:	4690      	mov	r8, r2
  404be4:	4605      	mov	r5, r0
  404be6:	da04      	bge.n	404bf2 <__kernel_sin+0x22>
  404be8:	f000 ff3e 	bl	405a68 <__aeabi_d2iz>
  404bec:	2800      	cmp	r0, #0
  404bee:	f000 8083 	beq.w	404cf8 <__kernel_sin+0x128>
  404bf2:	462a      	mov	r2, r5
  404bf4:	4623      	mov	r3, r4
  404bf6:	4628      	mov	r0, r5
  404bf8:	4621      	mov	r1, r4
  404bfa:	f000 fc9b 	bl	405534 <__aeabi_dmul>
  404bfe:	4606      	mov	r6, r0
  404c00:	460f      	mov	r7, r1
  404c02:	462a      	mov	r2, r5
  404c04:	4623      	mov	r3, r4
  404c06:	f000 fc95 	bl	405534 <__aeabi_dmul>
  404c0a:	4682      	mov	sl, r0
  404c0c:	468b      	mov	fp, r1
  404c0e:	4630      	mov	r0, r6
  404c10:	4639      	mov	r1, r7
  404c12:	a33d      	add	r3, pc, #244	; (adr r3, 404d08 <__kernel_sin+0x138>)
  404c14:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c18:	f000 fc8c 	bl	405534 <__aeabi_dmul>
  404c1c:	a33c      	add	r3, pc, #240	; (adr r3, 404d10 <__kernel_sin+0x140>)
  404c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c22:	f000 fad3 	bl	4051cc <__aeabi_dsub>
  404c26:	4632      	mov	r2, r6
  404c28:	463b      	mov	r3, r7
  404c2a:	f000 fc83 	bl	405534 <__aeabi_dmul>
  404c2e:	a33a      	add	r3, pc, #232	; (adr r3, 404d18 <__kernel_sin+0x148>)
  404c30:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c34:	f000 facc 	bl	4051d0 <__adddf3>
  404c38:	4632      	mov	r2, r6
  404c3a:	463b      	mov	r3, r7
  404c3c:	f000 fc7a 	bl	405534 <__aeabi_dmul>
  404c40:	a337      	add	r3, pc, #220	; (adr r3, 404d20 <__kernel_sin+0x150>)
  404c42:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c46:	f000 fac1 	bl	4051cc <__aeabi_dsub>
  404c4a:	4632      	mov	r2, r6
  404c4c:	463b      	mov	r3, r7
  404c4e:	f000 fc71 	bl	405534 <__aeabi_dmul>
  404c52:	a335      	add	r3, pc, #212	; (adr r3, 404d28 <__kernel_sin+0x158>)
  404c54:	e9d3 2300 	ldrd	r2, r3, [r3]
  404c58:	f000 faba 	bl	4051d0 <__adddf3>
  404c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404c5e:	e9cd 0100 	strd	r0, r1, [sp]
  404c62:	b39b      	cbz	r3, 404ccc <__kernel_sin+0xfc>
  404c64:	4640      	mov	r0, r8
  404c66:	4649      	mov	r1, r9
  404c68:	2200      	movs	r2, #0
  404c6a:	4b33      	ldr	r3, [pc, #204]	; (404d38 <__kernel_sin+0x168>)
  404c6c:	f000 fc62 	bl	405534 <__aeabi_dmul>
  404c70:	e9dd 2300 	ldrd	r2, r3, [sp]
  404c74:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404c78:	4650      	mov	r0, sl
  404c7a:	4659      	mov	r1, fp
  404c7c:	f000 fc5a 	bl	405534 <__aeabi_dmul>
  404c80:	4602      	mov	r2, r0
  404c82:	460b      	mov	r3, r1
  404c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404c88:	f000 faa0 	bl	4051cc <__aeabi_dsub>
  404c8c:	4632      	mov	r2, r6
  404c8e:	463b      	mov	r3, r7
  404c90:	f000 fc50 	bl	405534 <__aeabi_dmul>
  404c94:	4642      	mov	r2, r8
  404c96:	464b      	mov	r3, r9
  404c98:	f000 fa98 	bl	4051cc <__aeabi_dsub>
  404c9c:	4606      	mov	r6, r0
  404c9e:	460f      	mov	r7, r1
  404ca0:	4650      	mov	r0, sl
  404ca2:	4659      	mov	r1, fp
  404ca4:	a322      	add	r3, pc, #136	; (adr r3, 404d30 <__kernel_sin+0x160>)
  404ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404caa:	f000 fc43 	bl	405534 <__aeabi_dmul>
  404cae:	4602      	mov	r2, r0
  404cb0:	460b      	mov	r3, r1
  404cb2:	4630      	mov	r0, r6
  404cb4:	4639      	mov	r1, r7
  404cb6:	f000 fa8b 	bl	4051d0 <__adddf3>
  404cba:	4602      	mov	r2, r0
  404cbc:	460b      	mov	r3, r1
  404cbe:	4628      	mov	r0, r5
  404cc0:	4621      	mov	r1, r4
  404cc2:	f000 fa83 	bl	4051cc <__aeabi_dsub>
  404cc6:	b005      	add	sp, #20
  404cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ccc:	e9dd 2300 	ldrd	r2, r3, [sp]
  404cd0:	4630      	mov	r0, r6
  404cd2:	4639      	mov	r1, r7
  404cd4:	f000 fc2e 	bl	405534 <__aeabi_dmul>
  404cd8:	a315      	add	r3, pc, #84	; (adr r3, 404d30 <__kernel_sin+0x160>)
  404cda:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cde:	f000 fa75 	bl	4051cc <__aeabi_dsub>
  404ce2:	4652      	mov	r2, sl
  404ce4:	465b      	mov	r3, fp
  404ce6:	f000 fc25 	bl	405534 <__aeabi_dmul>
  404cea:	462a      	mov	r2, r5
  404cec:	4623      	mov	r3, r4
  404cee:	f000 fa6f 	bl	4051d0 <__adddf3>
  404cf2:	b005      	add	sp, #20
  404cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cf8:	4628      	mov	r0, r5
  404cfa:	4621      	mov	r1, r4
  404cfc:	b005      	add	sp, #20
  404cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d02:	bf00      	nop
  404d04:	f3af 8000 	nop.w
  404d08:	5acfd57c 	.word	0x5acfd57c
  404d0c:	3de5d93a 	.word	0x3de5d93a
  404d10:	8a2b9ceb 	.word	0x8a2b9ceb
  404d14:	3e5ae5e6 	.word	0x3e5ae5e6
  404d18:	57b1fe7d 	.word	0x57b1fe7d
  404d1c:	3ec71de3 	.word	0x3ec71de3
  404d20:	19c161d5 	.word	0x19c161d5
  404d24:	3f2a01a0 	.word	0x3f2a01a0
  404d28:	1110f8a6 	.word	0x1110f8a6
  404d2c:	3f811111 	.word	0x3f811111
  404d30:	55555549 	.word	0x55555549
  404d34:	3fc55555 	.word	0x3fc55555
  404d38:	3fe00000 	.word	0x3fe00000

00404d3c <fabs>:
  404d3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  404d40:	4770      	bx	lr
  404d42:	bf00      	nop
  404d44:	0000      	movs	r0, r0
	...

00404d48 <floor>:
  404d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d4c:	f3c1 580a 	ubfx	r8, r1, #20, #11
  404d50:	460b      	mov	r3, r1
  404d52:	4604      	mov	r4, r0
  404d54:	460d      	mov	r5, r1
  404d56:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
  404d5a:	4602      	mov	r2, r0
  404d5c:	4689      	mov	r9, r1
  404d5e:	4607      	mov	r7, r0
  404d60:	2e13      	cmp	r6, #19
  404d62:	dc1d      	bgt.n	404da0 <floor+0x58>
  404d64:	2e00      	cmp	r6, #0
  404d66:	db40      	blt.n	404dea <floor+0xa2>
  404d68:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 404e54 <floor+0x10c>
  404d6c:	fa48 f806 	asr.w	r8, r8, r6
  404d70:	ea08 0e01 	and.w	lr, r8, r1
  404d74:	ea5e 0202 	orrs.w	r2, lr, r2
  404d78:	d017      	beq.n	404daa <floor+0x62>
  404d7a:	a333      	add	r3, pc, #204	; (adr r3, 404e48 <floor+0x100>)
  404d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404d80:	f000 fa26 	bl	4051d0 <__adddf3>
  404d84:	2200      	movs	r2, #0
  404d86:	2300      	movs	r3, #0
  404d88:	f000 fe64 	bl	405a54 <__aeabi_dcmpgt>
  404d8c:	b120      	cbz	r0, 404d98 <floor+0x50>
  404d8e:	2d00      	cmp	r5, #0
  404d90:	db40      	blt.n	404e14 <floor+0xcc>
  404d92:	ea29 0508 	bic.w	r5, r9, r8
  404d96:	2700      	movs	r7, #0
  404d98:	4638      	mov	r0, r7
  404d9a:	4629      	mov	r1, r5
  404d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404da0:	2e33      	cmp	r6, #51	; 0x33
  404da2:	dd06      	ble.n	404db2 <floor+0x6a>
  404da4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
  404da8:	d02f      	beq.n	404e0a <floor+0xc2>
  404daa:	4620      	mov	r0, r4
  404dac:	4619      	mov	r1, r3
  404dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404db2:	f2a8 4213 	subw	r2, r8, #1043	; 0x413
  404db6:	f04f 3aff 	mov.w	sl, #4294967295
  404dba:	fa2a fa02 	lsr.w	sl, sl, r2
  404dbe:	ea1a 0f00 	tst.w	sl, r0
  404dc2:	d0f2      	beq.n	404daa <floor+0x62>
  404dc4:	a320      	add	r3, pc, #128	; (adr r3, 404e48 <floor+0x100>)
  404dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
  404dca:	f000 fa01 	bl	4051d0 <__adddf3>
  404dce:	2200      	movs	r2, #0
  404dd0:	2300      	movs	r3, #0
  404dd2:	f000 fe3f 	bl	405a54 <__aeabi_dcmpgt>
  404dd6:	2800      	cmp	r0, #0
  404dd8:	d0de      	beq.n	404d98 <floor+0x50>
  404dda:	2d00      	cmp	r5, #0
  404ddc:	db1f      	blt.n	404e1e <floor+0xd6>
  404dde:	464d      	mov	r5, r9
  404de0:	ea27 070a 	bic.w	r7, r7, sl
  404de4:	4629      	mov	r1, r5
  404de6:	4638      	mov	r0, r7
  404de8:	e7d8      	b.n	404d9c <floor+0x54>
  404dea:	a317      	add	r3, pc, #92	; (adr r3, 404e48 <floor+0x100>)
  404dec:	e9d3 2300 	ldrd	r2, r3, [r3]
  404df0:	f000 f9ee 	bl	4051d0 <__adddf3>
  404df4:	2200      	movs	r2, #0
  404df6:	2300      	movs	r3, #0
  404df8:	f000 fe2c 	bl	405a54 <__aeabi_dcmpgt>
  404dfc:	2800      	cmp	r0, #0
  404dfe:	d0cb      	beq.n	404d98 <floor+0x50>
  404e00:	2d00      	cmp	r5, #0
  404e02:	db19      	blt.n	404e38 <floor+0xf0>
  404e04:	2700      	movs	r7, #0
  404e06:	463d      	mov	r5, r7
  404e08:	e7c6      	b.n	404d98 <floor+0x50>
  404e0a:	4602      	mov	r2, r0
  404e0c:	460b      	mov	r3, r1
  404e0e:	f000 f9df 	bl	4051d0 <__adddf3>
  404e12:	e7cc      	b.n	404dae <floor+0x66>
  404e14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  404e18:	4133      	asrs	r3, r6
  404e1a:	4499      	add	r9, r3
  404e1c:	e7b9      	b.n	404d92 <floor+0x4a>
  404e1e:	2e14      	cmp	r6, #20
  404e20:	d007      	beq.n	404e32 <floor+0xea>
  404e22:	f240 4233 	movw	r2, #1075	; 0x433
  404e26:	2301      	movs	r3, #1
  404e28:	ebc8 0202 	rsb	r2, r8, r2
  404e2c:	4093      	lsls	r3, r2
  404e2e:	191f      	adds	r7, r3, r4
  404e30:	d3d5      	bcc.n	404dde <floor+0x96>
  404e32:	f109 0901 	add.w	r9, r9, #1
  404e36:	e7d2      	b.n	404dde <floor+0x96>
  404e38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
  404e3c:	ea53 0704 	orrs.w	r7, r3, r4
  404e40:	d0aa      	beq.n	404d98 <floor+0x50>
  404e42:	2700      	movs	r7, #0
  404e44:	4d02      	ldr	r5, [pc, #8]	; (404e50 <floor+0x108>)
  404e46:	e7a7      	b.n	404d98 <floor+0x50>
  404e48:	8800759c 	.word	0x8800759c
  404e4c:	7e37e43c 	.word	0x7e37e43c
  404e50:	bff00000 	.word	0xbff00000
  404e54:	000fffff 	.word	0x000fffff

00404e58 <__fpclassifyd>:
  404e58:	fab0 f080 	clz	r0, r0
  404e5c:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
  404e60:	ea4f 1050 	mov.w	r0, r0, lsr #5
  404e64:	d102      	bne.n	404e6c <__fpclassifyd+0x14>
  404e66:	b108      	cbz	r0, 404e6c <__fpclassifyd+0x14>
  404e68:	2002      	movs	r0, #2
  404e6a:	4770      	bx	lr
  404e6c:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
  404e70:	4b08      	ldr	r3, [pc, #32]	; (404e94 <__fpclassifyd+0x3c>)
  404e72:	429a      	cmp	r2, r3
  404e74:	d801      	bhi.n	404e7a <__fpclassifyd+0x22>
  404e76:	2004      	movs	r0, #4
  404e78:	4770      	bx	lr
  404e7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  404e7e:	d201      	bcs.n	404e84 <__fpclassifyd+0x2c>
  404e80:	2003      	movs	r0, #3
  404e82:	4770      	bx	lr
  404e84:	4b04      	ldr	r3, [pc, #16]	; (404e98 <__fpclassifyd+0x40>)
  404e86:	4299      	cmp	r1, r3
  404e88:	bf14      	ite	ne
  404e8a:	2000      	movne	r0, #0
  404e8c:	f000 0001 	andeq.w	r0, r0, #1
  404e90:	4770      	bx	lr
  404e92:	bf00      	nop
  404e94:	7fdfffff 	.word	0x7fdfffff
  404e98:	7ff00000 	.word	0x7ff00000

00404e9c <matherr>:
  404e9c:	2000      	movs	r0, #0
  404e9e:	4770      	bx	lr

00404ea0 <scalbn>:
  404ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404ea2:	f3c1 530a 	ubfx	r3, r1, #20, #11
  404ea6:	4604      	mov	r4, r0
  404ea8:	460d      	mov	r5, r1
  404eaa:	4617      	mov	r7, r2
  404eac:	460e      	mov	r6, r1
  404eae:	bb1b      	cbnz	r3, 404ef8 <scalbn+0x58>
  404eb0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
  404eb4:	ea56 0300 	orrs.w	r3, r6, r0
  404eb8:	d030      	beq.n	404f1c <scalbn+0x7c>
  404eba:	4b35      	ldr	r3, [pc, #212]	; (404f90 <scalbn+0xf0>)
  404ebc:	2200      	movs	r2, #0
  404ebe:	f000 fb39 	bl	405534 <__aeabi_dmul>
  404ec2:	4b34      	ldr	r3, [pc, #208]	; (404f94 <scalbn+0xf4>)
  404ec4:	4604      	mov	r4, r0
  404ec6:	460d      	mov	r5, r1
  404ec8:	429f      	cmp	r7, r3
  404eca:	460e      	mov	r6, r1
  404ecc:	db35      	blt.n	404f3a <scalbn+0x9a>
  404ece:	f3c1 530a 	ubfx	r3, r1, #20, #11
  404ed2:	f240 72fe 	movw	r2, #2046	; 0x7fe
  404ed6:	3b36      	subs	r3, #54	; 0x36
  404ed8:	443b      	add	r3, r7
  404eda:	4293      	cmp	r3, r2
  404edc:	dd15      	ble.n	404f0a <scalbn+0x6a>
  404ede:	4622      	mov	r2, r4
  404ee0:	462b      	mov	r3, r5
  404ee2:	a127      	add	r1, pc, #156	; (adr r1, 404f80 <scalbn+0xe0>)
  404ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
  404ee8:	f000 f964 	bl	4051b4 <copysign>
  404eec:	a324      	add	r3, pc, #144	; (adr r3, 404f80 <scalbn+0xe0>)
  404eee:	e9d3 2300 	ldrd	r2, r3, [r3]
  404ef2:	f000 fb1f 	bl	405534 <__aeabi_dmul>
  404ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404ef8:	f240 72ff 	movw	r2, #2047	; 0x7ff
  404efc:	4293      	cmp	r3, r2
  404efe:	d022      	beq.n	404f46 <scalbn+0xa6>
  404f00:	443b      	add	r3, r7
  404f02:	f240 72fe 	movw	r2, #2046	; 0x7fe
  404f06:	4293      	cmp	r3, r2
  404f08:	dce9      	bgt.n	404ede <scalbn+0x3e>
  404f0a:	2b00      	cmp	r3, #0
  404f0c:	dd07      	ble.n	404f1e <scalbn+0x7e>
  404f0e:	4a22      	ldr	r2, [pc, #136]	; (404f98 <scalbn+0xf8>)
  404f10:	4620      	mov	r0, r4
  404f12:	4032      	ands	r2, r6
  404f14:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
  404f18:	4629      	mov	r1, r5
  404f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f1e:	f113 0f35 	cmn.w	r3, #53	; 0x35
  404f22:	da15      	bge.n	404f50 <scalbn+0xb0>
  404f24:	f24c 3350 	movw	r3, #50000	; 0xc350
  404f28:	4622      	mov	r2, r4
  404f2a:	429f      	cmp	r7, r3
  404f2c:	462b      	mov	r3, r5
  404f2e:	dc1c      	bgt.n	404f6a <scalbn+0xca>
  404f30:	a115      	add	r1, pc, #84	; (adr r1, 404f88 <scalbn+0xe8>)
  404f32:	e9d1 0100 	ldrd	r0, r1, [r1]
  404f36:	f000 f93d 	bl	4051b4 <copysign>
  404f3a:	a313      	add	r3, pc, #76	; (adr r3, 404f88 <scalbn+0xe8>)
  404f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f40:	f000 faf8 	bl	405534 <__aeabi_dmul>
  404f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f46:	4602      	mov	r2, r0
  404f48:	460b      	mov	r3, r1
  404f4a:	f000 f941 	bl	4051d0 <__adddf3>
  404f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f50:	4811      	ldr	r0, [pc, #68]	; (404f98 <scalbn+0xf8>)
  404f52:	f103 0136 	add.w	r1, r3, #54	; 0x36
  404f56:	2200      	movs	r2, #0
  404f58:	4b10      	ldr	r3, [pc, #64]	; (404f9c <scalbn+0xfc>)
  404f5a:	4030      	ands	r0, r6
  404f5c:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
  404f60:	4620      	mov	r0, r4
  404f62:	4629      	mov	r1, r5
  404f64:	f000 fae6 	bl	405534 <__aeabi_dmul>
  404f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f6a:	a105      	add	r1, pc, #20	; (adr r1, 404f80 <scalbn+0xe0>)
  404f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
  404f70:	f000 f920 	bl	4051b4 <copysign>
  404f74:	a302      	add	r3, pc, #8	; (adr r3, 404f80 <scalbn+0xe0>)
  404f76:	e9d3 2300 	ldrd	r2, r3, [r3]
  404f7a:	f000 fadb 	bl	405534 <__aeabi_dmul>
  404f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404f80:	8800759c 	.word	0x8800759c
  404f84:	7e37e43c 	.word	0x7e37e43c
  404f88:	c2f8f359 	.word	0xc2f8f359
  404f8c:	01a56e1f 	.word	0x01a56e1f
  404f90:	43500000 	.word	0x43500000
  404f94:	ffff3cb0 	.word	0xffff3cb0
  404f98:	800fffff 	.word	0x800fffff
  404f9c:	3c900000 	.word	0x3c900000

00404fa0 <atanf>:
  404fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404fa4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  404fa8:	4604      	mov	r4, r0
  404faa:	4606      	mov	r6, r0
  404fac:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
  404fb0:	db08      	blt.n	404fc4 <atanf+0x24>
  404fb2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  404fb6:	dc6f      	bgt.n	405098 <atanf+0xf8>
  404fb8:	2800      	cmp	r0, #0
  404fba:	f340 8099 	ble.w	4050f0 <atanf+0x150>
  404fbe:	4867      	ldr	r0, [pc, #412]	; (40515c <atanf+0x1bc>)
  404fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404fc4:	4b66      	ldr	r3, [pc, #408]	; (405160 <atanf+0x1c0>)
  404fc6:	429d      	cmp	r5, r3
  404fc8:	dc77      	bgt.n	4050ba <atanf+0x11a>
  404fca:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
  404fce:	db68      	blt.n	4050a2 <atanf+0x102>
  404fd0:	f04f 37ff 	mov.w	r7, #4294967295
  404fd4:	4621      	mov	r1, r4
  404fd6:	4620      	mov	r0, r4
  404fd8:	f000 fecc 	bl	405d74 <__aeabi_fmul>
  404fdc:	4601      	mov	r1, r0
  404fde:	4680      	mov	r8, r0
  404fe0:	f000 fec8 	bl	405d74 <__aeabi_fmul>
  404fe4:	495f      	ldr	r1, [pc, #380]	; (405164 <atanf+0x1c4>)
  404fe6:	4605      	mov	r5, r0
  404fe8:	f000 fec4 	bl	405d74 <__aeabi_fmul>
  404fec:	495e      	ldr	r1, [pc, #376]	; (405168 <atanf+0x1c8>)
  404fee:	f000 fdb9 	bl	405b64 <__addsf3>
  404ff2:	4629      	mov	r1, r5
  404ff4:	f000 febe 	bl	405d74 <__aeabi_fmul>
  404ff8:	495c      	ldr	r1, [pc, #368]	; (40516c <atanf+0x1cc>)
  404ffa:	f000 fdb3 	bl	405b64 <__addsf3>
  404ffe:	4629      	mov	r1, r5
  405000:	f000 feb8 	bl	405d74 <__aeabi_fmul>
  405004:	495a      	ldr	r1, [pc, #360]	; (405170 <atanf+0x1d0>)
  405006:	f000 fdad 	bl	405b64 <__addsf3>
  40500a:	4629      	mov	r1, r5
  40500c:	f000 feb2 	bl	405d74 <__aeabi_fmul>
  405010:	4958      	ldr	r1, [pc, #352]	; (405174 <atanf+0x1d4>)
  405012:	f000 fda7 	bl	405b64 <__addsf3>
  405016:	4629      	mov	r1, r5
  405018:	f000 feac 	bl	405d74 <__aeabi_fmul>
  40501c:	4956      	ldr	r1, [pc, #344]	; (405178 <atanf+0x1d8>)
  40501e:	f000 fda1 	bl	405b64 <__addsf3>
  405022:	4641      	mov	r1, r8
  405024:	f000 fea6 	bl	405d74 <__aeabi_fmul>
  405028:	4954      	ldr	r1, [pc, #336]	; (40517c <atanf+0x1dc>)
  40502a:	4680      	mov	r8, r0
  40502c:	4628      	mov	r0, r5
  40502e:	f000 fea1 	bl	405d74 <__aeabi_fmul>
  405032:	4953      	ldr	r1, [pc, #332]	; (405180 <atanf+0x1e0>)
  405034:	f000 fd94 	bl	405b60 <__aeabi_fsub>
  405038:	4629      	mov	r1, r5
  40503a:	f000 fe9b 	bl	405d74 <__aeabi_fmul>
  40503e:	4951      	ldr	r1, [pc, #324]	; (405184 <atanf+0x1e4>)
  405040:	f000 fd8e 	bl	405b60 <__aeabi_fsub>
  405044:	4629      	mov	r1, r5
  405046:	f000 fe95 	bl	405d74 <__aeabi_fmul>
  40504a:	494f      	ldr	r1, [pc, #316]	; (405188 <atanf+0x1e8>)
  40504c:	f000 fd88 	bl	405b60 <__aeabi_fsub>
  405050:	4629      	mov	r1, r5
  405052:	f000 fe8f 	bl	405d74 <__aeabi_fmul>
  405056:	494d      	ldr	r1, [pc, #308]	; (40518c <atanf+0x1ec>)
  405058:	f000 fd82 	bl	405b60 <__aeabi_fsub>
  40505c:	4629      	mov	r1, r5
  40505e:	f000 fe89 	bl	405d74 <__aeabi_fmul>
  405062:	1c7b      	adds	r3, r7, #1
  405064:	4601      	mov	r1, r0
  405066:	4640      	mov	r0, r8
  405068:	d045      	beq.n	4050f6 <atanf+0x156>
  40506a:	f000 fd7b 	bl	405b64 <__addsf3>
  40506e:	4621      	mov	r1, r4
  405070:	f000 fe80 	bl	405d74 <__aeabi_fmul>
  405074:	4b46      	ldr	r3, [pc, #280]	; (405190 <atanf+0x1f0>)
  405076:	4d47      	ldr	r5, [pc, #284]	; (405194 <atanf+0x1f4>)
  405078:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
  40507c:	f000 fd70 	bl	405b60 <__aeabi_fsub>
  405080:	4621      	mov	r1, r4
  405082:	f000 fd6d 	bl	405b60 <__aeabi_fsub>
  405086:	4601      	mov	r1, r0
  405088:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
  40508c:	f000 fd68 	bl	405b60 <__aeabi_fsub>
  405090:	2e00      	cmp	r6, #0
  405092:	db29      	blt.n	4050e8 <atanf+0x148>
  405094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405098:	4601      	mov	r1, r0
  40509a:	f000 fd63 	bl	405b64 <__addsf3>
  40509e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050a2:	493d      	ldr	r1, [pc, #244]	; (405198 <atanf+0x1f8>)
  4050a4:	f000 fd5e 	bl	405b64 <__addsf3>
  4050a8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4050ac:	f001 f81e 	bl	4060ec <__aeabi_fcmpgt>
  4050b0:	2800      	cmp	r0, #0
  4050b2:	d08d      	beq.n	404fd0 <atanf+0x30>
  4050b4:	4620      	mov	r0, r4
  4050b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050ba:	f000 f877 	bl	4051ac <fabsf>
  4050be:	4b37      	ldr	r3, [pc, #220]	; (40519c <atanf+0x1fc>)
  4050c0:	4604      	mov	r4, r0
  4050c2:	429d      	cmp	r5, r3
  4050c4:	dc22      	bgt.n	40510c <atanf+0x16c>
  4050c6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  4050ca:	429d      	cmp	r5, r3
  4050cc:	dc3d      	bgt.n	40514a <atanf+0x1aa>
  4050ce:	4601      	mov	r1, r0
  4050d0:	2700      	movs	r7, #0
  4050d2:	f000 fd47 	bl	405b64 <__addsf3>
  4050d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4050da:	f000 fd41 	bl	405b60 <__aeabi_fsub>
  4050de:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4050e2:	4605      	mov	r5, r0
  4050e4:	4620      	mov	r0, r4
  4050e6:	e021      	b.n	40512c <atanf+0x18c>
  4050e8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4050ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050f0:	482b      	ldr	r0, [pc, #172]	; (4051a0 <atanf+0x200>)
  4050f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050f6:	f000 fd35 	bl	405b64 <__addsf3>
  4050fa:	4621      	mov	r1, r4
  4050fc:	f000 fe3a 	bl	405d74 <__aeabi_fmul>
  405100:	4601      	mov	r1, r0
  405102:	4620      	mov	r0, r4
  405104:	f000 fd2c 	bl	405b60 <__aeabi_fsub>
  405108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40510c:	4b25      	ldr	r3, [pc, #148]	; (4051a4 <atanf+0x204>)
  40510e:	429d      	cmp	r5, r3
  405110:	dc14      	bgt.n	40513c <atanf+0x19c>
  405112:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405116:	2702      	movs	r7, #2
  405118:	f000 fd22 	bl	405b60 <__aeabi_fsub>
  40511c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405120:	4605      	mov	r5, r0
  405122:	4620      	mov	r0, r4
  405124:	f000 fe26 	bl	405d74 <__aeabi_fmul>
  405128:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  40512c:	f000 fd1a 	bl	405b64 <__addsf3>
  405130:	4601      	mov	r1, r0
  405132:	4628      	mov	r0, r5
  405134:	f000 fed2 	bl	405edc <__aeabi_fdiv>
  405138:	4604      	mov	r4, r0
  40513a:	e74b      	b.n	404fd4 <atanf+0x34>
  40513c:	4601      	mov	r1, r0
  40513e:	481a      	ldr	r0, [pc, #104]	; (4051a8 <atanf+0x208>)
  405140:	f000 fecc 	bl	405edc <__aeabi_fdiv>
  405144:	2703      	movs	r7, #3
  405146:	4604      	mov	r4, r0
  405148:	e744      	b.n	404fd4 <atanf+0x34>
  40514a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  40514e:	2701      	movs	r7, #1
  405150:	f000 fd06 	bl	405b60 <__aeabi_fsub>
  405154:	4605      	mov	r5, r0
  405156:	4620      	mov	r0, r4
  405158:	e7e6      	b.n	405128 <atanf+0x188>
  40515a:	bf00      	nop
  40515c:	3fc90fdb 	.word	0x3fc90fdb
  405160:	3edfffff 	.word	0x3edfffff
  405164:	3c8569d7 	.word	0x3c8569d7
  405168:	3d4bda59 	.word	0x3d4bda59
  40516c:	3d886b35 	.word	0x3d886b35
  405170:	3dba2e6e 	.word	0x3dba2e6e
  405174:	3e124925 	.word	0x3e124925
  405178:	3eaaaaab 	.word	0x3eaaaaab
  40517c:	bd15a221 	.word	0xbd15a221
  405180:	3d6ef16b 	.word	0x3d6ef16b
  405184:	3d9d8795 	.word	0x3d9d8795
  405188:	3de38e38 	.word	0x3de38e38
  40518c:	3e4ccccd 	.word	0x3e4ccccd
  405190:	00406920 	.word	0x00406920
  405194:	00406930 	.word	0x00406930
  405198:	7149f2ca 	.word	0x7149f2ca
  40519c:	3f97ffff 	.word	0x3f97ffff
  4051a0:	bfc90fdb 	.word	0xbfc90fdb
  4051a4:	401bffff 	.word	0x401bffff
  4051a8:	bf800000 	.word	0xbf800000

004051ac <fabsf>:
  4051ac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  4051b0:	4770      	bx	lr
  4051b2:	bf00      	nop

004051b4 <copysign>:
  4051b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
  4051b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
  4051bc:	ea43 0102 	orr.w	r1, r3, r2
  4051c0:	4770      	bx	lr
  4051c2:	bf00      	nop

004051c4 <__aeabi_drsub>:
  4051c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4051c8:	e002      	b.n	4051d0 <__adddf3>
  4051ca:	bf00      	nop

004051cc <__aeabi_dsub>:
  4051cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004051d0 <__adddf3>:
  4051d0:	b530      	push	{r4, r5, lr}
  4051d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4051d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4051da:	ea94 0f05 	teq	r4, r5
  4051de:	bf08      	it	eq
  4051e0:	ea90 0f02 	teqeq	r0, r2
  4051e4:	bf1f      	itttt	ne
  4051e6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4051ea:	ea55 0c02 	orrsne.w	ip, r5, r2
  4051ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4051f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4051f6:	f000 80e2 	beq.w	4053be <__adddf3+0x1ee>
  4051fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4051fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405202:	bfb8      	it	lt
  405204:	426d      	neglt	r5, r5
  405206:	dd0c      	ble.n	405222 <__adddf3+0x52>
  405208:	442c      	add	r4, r5
  40520a:	ea80 0202 	eor.w	r2, r0, r2
  40520e:	ea81 0303 	eor.w	r3, r1, r3
  405212:	ea82 0000 	eor.w	r0, r2, r0
  405216:	ea83 0101 	eor.w	r1, r3, r1
  40521a:	ea80 0202 	eor.w	r2, r0, r2
  40521e:	ea81 0303 	eor.w	r3, r1, r3
  405222:	2d36      	cmp	r5, #54	; 0x36
  405224:	bf88      	it	hi
  405226:	bd30      	pophi	{r4, r5, pc}
  405228:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40522c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405230:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405234:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405238:	d002      	beq.n	405240 <__adddf3+0x70>
  40523a:	4240      	negs	r0, r0
  40523c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405240:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405244:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405248:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40524c:	d002      	beq.n	405254 <__adddf3+0x84>
  40524e:	4252      	negs	r2, r2
  405250:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405254:	ea94 0f05 	teq	r4, r5
  405258:	f000 80a7 	beq.w	4053aa <__adddf3+0x1da>
  40525c:	f1a4 0401 	sub.w	r4, r4, #1
  405260:	f1d5 0e20 	rsbs	lr, r5, #32
  405264:	db0d      	blt.n	405282 <__adddf3+0xb2>
  405266:	fa02 fc0e 	lsl.w	ip, r2, lr
  40526a:	fa22 f205 	lsr.w	r2, r2, r5
  40526e:	1880      	adds	r0, r0, r2
  405270:	f141 0100 	adc.w	r1, r1, #0
  405274:	fa03 f20e 	lsl.w	r2, r3, lr
  405278:	1880      	adds	r0, r0, r2
  40527a:	fa43 f305 	asr.w	r3, r3, r5
  40527e:	4159      	adcs	r1, r3
  405280:	e00e      	b.n	4052a0 <__adddf3+0xd0>
  405282:	f1a5 0520 	sub.w	r5, r5, #32
  405286:	f10e 0e20 	add.w	lr, lr, #32
  40528a:	2a01      	cmp	r2, #1
  40528c:	fa03 fc0e 	lsl.w	ip, r3, lr
  405290:	bf28      	it	cs
  405292:	f04c 0c02 	orrcs.w	ip, ip, #2
  405296:	fa43 f305 	asr.w	r3, r3, r5
  40529a:	18c0      	adds	r0, r0, r3
  40529c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4052a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4052a4:	d507      	bpl.n	4052b6 <__adddf3+0xe6>
  4052a6:	f04f 0e00 	mov.w	lr, #0
  4052aa:	f1dc 0c00 	rsbs	ip, ip, #0
  4052ae:	eb7e 0000 	sbcs.w	r0, lr, r0
  4052b2:	eb6e 0101 	sbc.w	r1, lr, r1
  4052b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4052ba:	d31b      	bcc.n	4052f4 <__adddf3+0x124>
  4052bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4052c0:	d30c      	bcc.n	4052dc <__adddf3+0x10c>
  4052c2:	0849      	lsrs	r1, r1, #1
  4052c4:	ea5f 0030 	movs.w	r0, r0, rrx
  4052c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4052cc:	f104 0401 	add.w	r4, r4, #1
  4052d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4052d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4052d8:	f080 809a 	bcs.w	405410 <__adddf3+0x240>
  4052dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4052e0:	bf08      	it	eq
  4052e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4052e6:	f150 0000 	adcs.w	r0, r0, #0
  4052ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4052ee:	ea41 0105 	orr.w	r1, r1, r5
  4052f2:	bd30      	pop	{r4, r5, pc}
  4052f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4052f8:	4140      	adcs	r0, r0
  4052fa:	eb41 0101 	adc.w	r1, r1, r1
  4052fe:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405302:	f1a4 0401 	sub.w	r4, r4, #1
  405306:	d1e9      	bne.n	4052dc <__adddf3+0x10c>
  405308:	f091 0f00 	teq	r1, #0
  40530c:	bf04      	itt	eq
  40530e:	4601      	moveq	r1, r0
  405310:	2000      	moveq	r0, #0
  405312:	fab1 f381 	clz	r3, r1
  405316:	bf08      	it	eq
  405318:	3320      	addeq	r3, #32
  40531a:	f1a3 030b 	sub.w	r3, r3, #11
  40531e:	f1b3 0220 	subs.w	r2, r3, #32
  405322:	da0c      	bge.n	40533e <__adddf3+0x16e>
  405324:	320c      	adds	r2, #12
  405326:	dd08      	ble.n	40533a <__adddf3+0x16a>
  405328:	f102 0c14 	add.w	ip, r2, #20
  40532c:	f1c2 020c 	rsb	r2, r2, #12
  405330:	fa01 f00c 	lsl.w	r0, r1, ip
  405334:	fa21 f102 	lsr.w	r1, r1, r2
  405338:	e00c      	b.n	405354 <__adddf3+0x184>
  40533a:	f102 0214 	add.w	r2, r2, #20
  40533e:	bfd8      	it	le
  405340:	f1c2 0c20 	rsble	ip, r2, #32
  405344:	fa01 f102 	lsl.w	r1, r1, r2
  405348:	fa20 fc0c 	lsr.w	ip, r0, ip
  40534c:	bfdc      	itt	le
  40534e:	ea41 010c 	orrle.w	r1, r1, ip
  405352:	4090      	lslle	r0, r2
  405354:	1ae4      	subs	r4, r4, r3
  405356:	bfa2      	ittt	ge
  405358:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40535c:	4329      	orrge	r1, r5
  40535e:	bd30      	popge	{r4, r5, pc}
  405360:	ea6f 0404 	mvn.w	r4, r4
  405364:	3c1f      	subs	r4, #31
  405366:	da1c      	bge.n	4053a2 <__adddf3+0x1d2>
  405368:	340c      	adds	r4, #12
  40536a:	dc0e      	bgt.n	40538a <__adddf3+0x1ba>
  40536c:	f104 0414 	add.w	r4, r4, #20
  405370:	f1c4 0220 	rsb	r2, r4, #32
  405374:	fa20 f004 	lsr.w	r0, r0, r4
  405378:	fa01 f302 	lsl.w	r3, r1, r2
  40537c:	ea40 0003 	orr.w	r0, r0, r3
  405380:	fa21 f304 	lsr.w	r3, r1, r4
  405384:	ea45 0103 	orr.w	r1, r5, r3
  405388:	bd30      	pop	{r4, r5, pc}
  40538a:	f1c4 040c 	rsb	r4, r4, #12
  40538e:	f1c4 0220 	rsb	r2, r4, #32
  405392:	fa20 f002 	lsr.w	r0, r0, r2
  405396:	fa01 f304 	lsl.w	r3, r1, r4
  40539a:	ea40 0003 	orr.w	r0, r0, r3
  40539e:	4629      	mov	r1, r5
  4053a0:	bd30      	pop	{r4, r5, pc}
  4053a2:	fa21 f004 	lsr.w	r0, r1, r4
  4053a6:	4629      	mov	r1, r5
  4053a8:	bd30      	pop	{r4, r5, pc}
  4053aa:	f094 0f00 	teq	r4, #0
  4053ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4053b2:	bf06      	itte	eq
  4053b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4053b8:	3401      	addeq	r4, #1
  4053ba:	3d01      	subne	r5, #1
  4053bc:	e74e      	b.n	40525c <__adddf3+0x8c>
  4053be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4053c2:	bf18      	it	ne
  4053c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4053c8:	d029      	beq.n	40541e <__adddf3+0x24e>
  4053ca:	ea94 0f05 	teq	r4, r5
  4053ce:	bf08      	it	eq
  4053d0:	ea90 0f02 	teqeq	r0, r2
  4053d4:	d005      	beq.n	4053e2 <__adddf3+0x212>
  4053d6:	ea54 0c00 	orrs.w	ip, r4, r0
  4053da:	bf04      	itt	eq
  4053dc:	4619      	moveq	r1, r3
  4053de:	4610      	moveq	r0, r2
  4053e0:	bd30      	pop	{r4, r5, pc}
  4053e2:	ea91 0f03 	teq	r1, r3
  4053e6:	bf1e      	ittt	ne
  4053e8:	2100      	movne	r1, #0
  4053ea:	2000      	movne	r0, #0
  4053ec:	bd30      	popne	{r4, r5, pc}
  4053ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4053f2:	d105      	bne.n	405400 <__adddf3+0x230>
  4053f4:	0040      	lsls	r0, r0, #1
  4053f6:	4149      	adcs	r1, r1
  4053f8:	bf28      	it	cs
  4053fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4053fe:	bd30      	pop	{r4, r5, pc}
  405400:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405404:	bf3c      	itt	cc
  405406:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40540a:	bd30      	popcc	{r4, r5, pc}
  40540c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405410:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405414:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405418:	f04f 0000 	mov.w	r0, #0
  40541c:	bd30      	pop	{r4, r5, pc}
  40541e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405422:	bf1a      	itte	ne
  405424:	4619      	movne	r1, r3
  405426:	4610      	movne	r0, r2
  405428:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40542c:	bf1c      	itt	ne
  40542e:	460b      	movne	r3, r1
  405430:	4602      	movne	r2, r0
  405432:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405436:	bf06      	itte	eq
  405438:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40543c:	ea91 0f03 	teqeq	r1, r3
  405440:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405444:	bd30      	pop	{r4, r5, pc}
  405446:	bf00      	nop

00405448 <__aeabi_ui2d>:
  405448:	f090 0f00 	teq	r0, #0
  40544c:	bf04      	itt	eq
  40544e:	2100      	moveq	r1, #0
  405450:	4770      	bxeq	lr
  405452:	b530      	push	{r4, r5, lr}
  405454:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405458:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40545c:	f04f 0500 	mov.w	r5, #0
  405460:	f04f 0100 	mov.w	r1, #0
  405464:	e750      	b.n	405308 <__adddf3+0x138>
  405466:	bf00      	nop

00405468 <__aeabi_i2d>:
  405468:	f090 0f00 	teq	r0, #0
  40546c:	bf04      	itt	eq
  40546e:	2100      	moveq	r1, #0
  405470:	4770      	bxeq	lr
  405472:	b530      	push	{r4, r5, lr}
  405474:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405478:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40547c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405480:	bf48      	it	mi
  405482:	4240      	negmi	r0, r0
  405484:	f04f 0100 	mov.w	r1, #0
  405488:	e73e      	b.n	405308 <__adddf3+0x138>
  40548a:	bf00      	nop

0040548c <__aeabi_f2d>:
  40548c:	0042      	lsls	r2, r0, #1
  40548e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405492:	ea4f 0131 	mov.w	r1, r1, rrx
  405496:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40549a:	bf1f      	itttt	ne
  40549c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4054a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4054a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4054a8:	4770      	bxne	lr
  4054aa:	f092 0f00 	teq	r2, #0
  4054ae:	bf14      	ite	ne
  4054b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4054b4:	4770      	bxeq	lr
  4054b6:	b530      	push	{r4, r5, lr}
  4054b8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4054bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4054c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4054c4:	e720      	b.n	405308 <__adddf3+0x138>
  4054c6:	bf00      	nop

004054c8 <__aeabi_ul2d>:
  4054c8:	ea50 0201 	orrs.w	r2, r0, r1
  4054cc:	bf08      	it	eq
  4054ce:	4770      	bxeq	lr
  4054d0:	b530      	push	{r4, r5, lr}
  4054d2:	f04f 0500 	mov.w	r5, #0
  4054d6:	e00a      	b.n	4054ee <__aeabi_l2d+0x16>

004054d8 <__aeabi_l2d>:
  4054d8:	ea50 0201 	orrs.w	r2, r0, r1
  4054dc:	bf08      	it	eq
  4054de:	4770      	bxeq	lr
  4054e0:	b530      	push	{r4, r5, lr}
  4054e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4054e6:	d502      	bpl.n	4054ee <__aeabi_l2d+0x16>
  4054e8:	4240      	negs	r0, r0
  4054ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4054ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4054f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4054f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4054fa:	f43f aedc 	beq.w	4052b6 <__adddf3+0xe6>
  4054fe:	f04f 0203 	mov.w	r2, #3
  405502:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405506:	bf18      	it	ne
  405508:	3203      	addne	r2, #3
  40550a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40550e:	bf18      	it	ne
  405510:	3203      	addne	r2, #3
  405512:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405516:	f1c2 0320 	rsb	r3, r2, #32
  40551a:	fa00 fc03 	lsl.w	ip, r0, r3
  40551e:	fa20 f002 	lsr.w	r0, r0, r2
  405522:	fa01 fe03 	lsl.w	lr, r1, r3
  405526:	ea40 000e 	orr.w	r0, r0, lr
  40552a:	fa21 f102 	lsr.w	r1, r1, r2
  40552e:	4414      	add	r4, r2
  405530:	e6c1      	b.n	4052b6 <__adddf3+0xe6>
  405532:	bf00      	nop

00405534 <__aeabi_dmul>:
  405534:	b570      	push	{r4, r5, r6, lr}
  405536:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40553a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40553e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405542:	bf1d      	ittte	ne
  405544:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405548:	ea94 0f0c 	teqne	r4, ip
  40554c:	ea95 0f0c 	teqne	r5, ip
  405550:	f000 f8de 	bleq	405710 <__aeabi_dmul+0x1dc>
  405554:	442c      	add	r4, r5
  405556:	ea81 0603 	eor.w	r6, r1, r3
  40555a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40555e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405562:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405566:	bf18      	it	ne
  405568:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40556c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405574:	d038      	beq.n	4055e8 <__aeabi_dmul+0xb4>
  405576:	fba0 ce02 	umull	ip, lr, r0, r2
  40557a:	f04f 0500 	mov.w	r5, #0
  40557e:	fbe1 e502 	umlal	lr, r5, r1, r2
  405582:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405586:	fbe0 e503 	umlal	lr, r5, r0, r3
  40558a:	f04f 0600 	mov.w	r6, #0
  40558e:	fbe1 5603 	umlal	r5, r6, r1, r3
  405592:	f09c 0f00 	teq	ip, #0
  405596:	bf18      	it	ne
  405598:	f04e 0e01 	orrne.w	lr, lr, #1
  40559c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4055a0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4055a4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4055a8:	d204      	bcs.n	4055b4 <__aeabi_dmul+0x80>
  4055aa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4055ae:	416d      	adcs	r5, r5
  4055b0:	eb46 0606 	adc.w	r6, r6, r6
  4055b4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4055b8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4055bc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4055c0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4055c4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4055c8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4055cc:	bf88      	it	hi
  4055ce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4055d2:	d81e      	bhi.n	405612 <__aeabi_dmul+0xde>
  4055d4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4055d8:	bf08      	it	eq
  4055da:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4055de:	f150 0000 	adcs.w	r0, r0, #0
  4055e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4055e6:	bd70      	pop	{r4, r5, r6, pc}
  4055e8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4055ec:	ea46 0101 	orr.w	r1, r6, r1
  4055f0:	ea40 0002 	orr.w	r0, r0, r2
  4055f4:	ea81 0103 	eor.w	r1, r1, r3
  4055f8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4055fc:	bfc2      	ittt	gt
  4055fe:	ebd4 050c 	rsbsgt	r5, r4, ip
  405602:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405606:	bd70      	popgt	{r4, r5, r6, pc}
  405608:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40560c:	f04f 0e00 	mov.w	lr, #0
  405610:	3c01      	subs	r4, #1
  405612:	f300 80ab 	bgt.w	40576c <__aeabi_dmul+0x238>
  405616:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40561a:	bfde      	ittt	le
  40561c:	2000      	movle	r0, #0
  40561e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405622:	bd70      	pople	{r4, r5, r6, pc}
  405624:	f1c4 0400 	rsb	r4, r4, #0
  405628:	3c20      	subs	r4, #32
  40562a:	da35      	bge.n	405698 <__aeabi_dmul+0x164>
  40562c:	340c      	adds	r4, #12
  40562e:	dc1b      	bgt.n	405668 <__aeabi_dmul+0x134>
  405630:	f104 0414 	add.w	r4, r4, #20
  405634:	f1c4 0520 	rsb	r5, r4, #32
  405638:	fa00 f305 	lsl.w	r3, r0, r5
  40563c:	fa20 f004 	lsr.w	r0, r0, r4
  405640:	fa01 f205 	lsl.w	r2, r1, r5
  405644:	ea40 0002 	orr.w	r0, r0, r2
  405648:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40564c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405654:	fa21 f604 	lsr.w	r6, r1, r4
  405658:	eb42 0106 	adc.w	r1, r2, r6
  40565c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405660:	bf08      	it	eq
  405662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405666:	bd70      	pop	{r4, r5, r6, pc}
  405668:	f1c4 040c 	rsb	r4, r4, #12
  40566c:	f1c4 0520 	rsb	r5, r4, #32
  405670:	fa00 f304 	lsl.w	r3, r0, r4
  405674:	fa20 f005 	lsr.w	r0, r0, r5
  405678:	fa01 f204 	lsl.w	r2, r1, r4
  40567c:	ea40 0002 	orr.w	r0, r0, r2
  405680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405688:	f141 0100 	adc.w	r1, r1, #0
  40568c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405690:	bf08      	it	eq
  405692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405696:	bd70      	pop	{r4, r5, r6, pc}
  405698:	f1c4 0520 	rsb	r5, r4, #32
  40569c:	fa00 f205 	lsl.w	r2, r0, r5
  4056a0:	ea4e 0e02 	orr.w	lr, lr, r2
  4056a4:	fa20 f304 	lsr.w	r3, r0, r4
  4056a8:	fa01 f205 	lsl.w	r2, r1, r5
  4056ac:	ea43 0302 	orr.w	r3, r3, r2
  4056b0:	fa21 f004 	lsr.w	r0, r1, r4
  4056b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4056b8:	fa21 f204 	lsr.w	r2, r1, r4
  4056bc:	ea20 0002 	bic.w	r0, r0, r2
  4056c0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4056c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4056c8:	bf08      	it	eq
  4056ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4056ce:	bd70      	pop	{r4, r5, r6, pc}
  4056d0:	f094 0f00 	teq	r4, #0
  4056d4:	d10f      	bne.n	4056f6 <__aeabi_dmul+0x1c2>
  4056d6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4056da:	0040      	lsls	r0, r0, #1
  4056dc:	eb41 0101 	adc.w	r1, r1, r1
  4056e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4056e4:	bf08      	it	eq
  4056e6:	3c01      	subeq	r4, #1
  4056e8:	d0f7      	beq.n	4056da <__aeabi_dmul+0x1a6>
  4056ea:	ea41 0106 	orr.w	r1, r1, r6
  4056ee:	f095 0f00 	teq	r5, #0
  4056f2:	bf18      	it	ne
  4056f4:	4770      	bxne	lr
  4056f6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4056fa:	0052      	lsls	r2, r2, #1
  4056fc:	eb43 0303 	adc.w	r3, r3, r3
  405700:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  405704:	bf08      	it	eq
  405706:	3d01      	subeq	r5, #1
  405708:	d0f7      	beq.n	4056fa <__aeabi_dmul+0x1c6>
  40570a:	ea43 0306 	orr.w	r3, r3, r6
  40570e:	4770      	bx	lr
  405710:	ea94 0f0c 	teq	r4, ip
  405714:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  405718:	bf18      	it	ne
  40571a:	ea95 0f0c 	teqne	r5, ip
  40571e:	d00c      	beq.n	40573a <__aeabi_dmul+0x206>
  405720:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  405724:	bf18      	it	ne
  405726:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40572a:	d1d1      	bne.n	4056d0 <__aeabi_dmul+0x19c>
  40572c:	ea81 0103 	eor.w	r1, r1, r3
  405730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405734:	f04f 0000 	mov.w	r0, #0
  405738:	bd70      	pop	{r4, r5, r6, pc}
  40573a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40573e:	bf06      	itte	eq
  405740:	4610      	moveq	r0, r2
  405742:	4619      	moveq	r1, r3
  405744:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405748:	d019      	beq.n	40577e <__aeabi_dmul+0x24a>
  40574a:	ea94 0f0c 	teq	r4, ip
  40574e:	d102      	bne.n	405756 <__aeabi_dmul+0x222>
  405750:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  405754:	d113      	bne.n	40577e <__aeabi_dmul+0x24a>
  405756:	ea95 0f0c 	teq	r5, ip
  40575a:	d105      	bne.n	405768 <__aeabi_dmul+0x234>
  40575c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  405760:	bf1c      	itt	ne
  405762:	4610      	movne	r0, r2
  405764:	4619      	movne	r1, r3
  405766:	d10a      	bne.n	40577e <__aeabi_dmul+0x24a>
  405768:	ea81 0103 	eor.w	r1, r1, r3
  40576c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405770:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405778:	f04f 0000 	mov.w	r0, #0
  40577c:	bd70      	pop	{r4, r5, r6, pc}
  40577e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  405782:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  405786:	bd70      	pop	{r4, r5, r6, pc}

00405788 <__aeabi_ddiv>:
  405788:	b570      	push	{r4, r5, r6, lr}
  40578a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40578e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405796:	bf1d      	ittte	ne
  405798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40579c:	ea94 0f0c 	teqne	r4, ip
  4057a0:	ea95 0f0c 	teqne	r5, ip
  4057a4:	f000 f8a7 	bleq	4058f6 <__aeabi_ddiv+0x16e>
  4057a8:	eba4 0405 	sub.w	r4, r4, r5
  4057ac:	ea81 0e03 	eor.w	lr, r1, r3
  4057b0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4057b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4057b8:	f000 8088 	beq.w	4058cc <__aeabi_ddiv+0x144>
  4057bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4057c0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4057c4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4057c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4057cc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4057d0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4057d4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4057d8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4057dc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4057e0:	429d      	cmp	r5, r3
  4057e2:	bf08      	it	eq
  4057e4:	4296      	cmpeq	r6, r2
  4057e6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4057ea:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4057ee:	d202      	bcs.n	4057f6 <__aeabi_ddiv+0x6e>
  4057f0:	085b      	lsrs	r3, r3, #1
  4057f2:	ea4f 0232 	mov.w	r2, r2, rrx
  4057f6:	1ab6      	subs	r6, r6, r2
  4057f8:	eb65 0503 	sbc.w	r5, r5, r3
  4057fc:	085b      	lsrs	r3, r3, #1
  4057fe:	ea4f 0232 	mov.w	r2, r2, rrx
  405802:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  405806:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40580a:	ebb6 0e02 	subs.w	lr, r6, r2
  40580e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405812:	bf22      	ittt	cs
  405814:	1ab6      	subcs	r6, r6, r2
  405816:	4675      	movcs	r5, lr
  405818:	ea40 000c 	orrcs.w	r0, r0, ip
  40581c:	085b      	lsrs	r3, r3, #1
  40581e:	ea4f 0232 	mov.w	r2, r2, rrx
  405822:	ebb6 0e02 	subs.w	lr, r6, r2
  405826:	eb75 0e03 	sbcs.w	lr, r5, r3
  40582a:	bf22      	ittt	cs
  40582c:	1ab6      	subcs	r6, r6, r2
  40582e:	4675      	movcs	r5, lr
  405830:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405834:	085b      	lsrs	r3, r3, #1
  405836:	ea4f 0232 	mov.w	r2, r2, rrx
  40583a:	ebb6 0e02 	subs.w	lr, r6, r2
  40583e:	eb75 0e03 	sbcs.w	lr, r5, r3
  405842:	bf22      	ittt	cs
  405844:	1ab6      	subcs	r6, r6, r2
  405846:	4675      	movcs	r5, lr
  405848:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40584c:	085b      	lsrs	r3, r3, #1
  40584e:	ea4f 0232 	mov.w	r2, r2, rrx
  405852:	ebb6 0e02 	subs.w	lr, r6, r2
  405856:	eb75 0e03 	sbcs.w	lr, r5, r3
  40585a:	bf22      	ittt	cs
  40585c:	1ab6      	subcs	r6, r6, r2
  40585e:	4675      	movcs	r5, lr
  405860:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405864:	ea55 0e06 	orrs.w	lr, r5, r6
  405868:	d018      	beq.n	40589c <__aeabi_ddiv+0x114>
  40586a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40586e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  405872:	ea4f 1606 	mov.w	r6, r6, lsl #4
  405876:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40587a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40587e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  405882:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  405886:	d1c0      	bne.n	40580a <__aeabi_ddiv+0x82>
  405888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40588c:	d10b      	bne.n	4058a6 <__aeabi_ddiv+0x11e>
  40588e:	ea41 0100 	orr.w	r1, r1, r0
  405892:	f04f 0000 	mov.w	r0, #0
  405896:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40589a:	e7b6      	b.n	40580a <__aeabi_ddiv+0x82>
  40589c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4058a0:	bf04      	itt	eq
  4058a2:	4301      	orreq	r1, r0
  4058a4:	2000      	moveq	r0, #0
  4058a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4058aa:	bf88      	it	hi
  4058ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4058b0:	f63f aeaf 	bhi.w	405612 <__aeabi_dmul+0xde>
  4058b4:	ebb5 0c03 	subs.w	ip, r5, r3
  4058b8:	bf04      	itt	eq
  4058ba:	ebb6 0c02 	subseq.w	ip, r6, r2
  4058be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4058c2:	f150 0000 	adcs.w	r0, r0, #0
  4058c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4058ca:	bd70      	pop	{r4, r5, r6, pc}
  4058cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4058d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4058d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4058d8:	bfc2      	ittt	gt
  4058da:	ebd4 050c 	rsbsgt	r5, r4, ip
  4058de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4058e2:	bd70      	popgt	{r4, r5, r6, pc}
  4058e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4058e8:	f04f 0e00 	mov.w	lr, #0
  4058ec:	3c01      	subs	r4, #1
  4058ee:	e690      	b.n	405612 <__aeabi_dmul+0xde>
  4058f0:	ea45 0e06 	orr.w	lr, r5, r6
  4058f4:	e68d      	b.n	405612 <__aeabi_dmul+0xde>
  4058f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4058fa:	ea94 0f0c 	teq	r4, ip
  4058fe:	bf08      	it	eq
  405900:	ea95 0f0c 	teqeq	r5, ip
  405904:	f43f af3b 	beq.w	40577e <__aeabi_dmul+0x24a>
  405908:	ea94 0f0c 	teq	r4, ip
  40590c:	d10a      	bne.n	405924 <__aeabi_ddiv+0x19c>
  40590e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405912:	f47f af34 	bne.w	40577e <__aeabi_dmul+0x24a>
  405916:	ea95 0f0c 	teq	r5, ip
  40591a:	f47f af25 	bne.w	405768 <__aeabi_dmul+0x234>
  40591e:	4610      	mov	r0, r2
  405920:	4619      	mov	r1, r3
  405922:	e72c      	b.n	40577e <__aeabi_dmul+0x24a>
  405924:	ea95 0f0c 	teq	r5, ip
  405928:	d106      	bne.n	405938 <__aeabi_ddiv+0x1b0>
  40592a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40592e:	f43f aefd 	beq.w	40572c <__aeabi_dmul+0x1f8>
  405932:	4610      	mov	r0, r2
  405934:	4619      	mov	r1, r3
  405936:	e722      	b.n	40577e <__aeabi_dmul+0x24a>
  405938:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40593c:	bf18      	it	ne
  40593e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  405942:	f47f aec5 	bne.w	4056d0 <__aeabi_dmul+0x19c>
  405946:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40594a:	f47f af0d 	bne.w	405768 <__aeabi_dmul+0x234>
  40594e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  405952:	f47f aeeb 	bne.w	40572c <__aeabi_dmul+0x1f8>
  405956:	e712      	b.n	40577e <__aeabi_dmul+0x24a>

00405958 <__gedf2>:
  405958:	f04f 3cff 	mov.w	ip, #4294967295
  40595c:	e006      	b.n	40596c <__cmpdf2+0x4>
  40595e:	bf00      	nop

00405960 <__ledf2>:
  405960:	f04f 0c01 	mov.w	ip, #1
  405964:	e002      	b.n	40596c <__cmpdf2+0x4>
  405966:	bf00      	nop

00405968 <__cmpdf2>:
  405968:	f04f 0c01 	mov.w	ip, #1
  40596c:	f84d cd04 	str.w	ip, [sp, #-4]!
  405970:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  405974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  405978:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40597c:	bf18      	it	ne
  40597e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  405982:	d01b      	beq.n	4059bc <__cmpdf2+0x54>
  405984:	b001      	add	sp, #4
  405986:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40598a:	bf0c      	ite	eq
  40598c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  405990:	ea91 0f03 	teqne	r1, r3
  405994:	bf02      	ittt	eq
  405996:	ea90 0f02 	teqeq	r0, r2
  40599a:	2000      	moveq	r0, #0
  40599c:	4770      	bxeq	lr
  40599e:	f110 0f00 	cmn.w	r0, #0
  4059a2:	ea91 0f03 	teq	r1, r3
  4059a6:	bf58      	it	pl
  4059a8:	4299      	cmppl	r1, r3
  4059aa:	bf08      	it	eq
  4059ac:	4290      	cmpeq	r0, r2
  4059ae:	bf2c      	ite	cs
  4059b0:	17d8      	asrcs	r0, r3, #31
  4059b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4059b6:	f040 0001 	orr.w	r0, r0, #1
  4059ba:	4770      	bx	lr
  4059bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4059c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4059c4:	d102      	bne.n	4059cc <__cmpdf2+0x64>
  4059c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4059ca:	d107      	bne.n	4059dc <__cmpdf2+0x74>
  4059cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4059d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4059d4:	d1d6      	bne.n	405984 <__cmpdf2+0x1c>
  4059d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4059da:	d0d3      	beq.n	405984 <__cmpdf2+0x1c>
  4059dc:	f85d 0b04 	ldr.w	r0, [sp], #4
  4059e0:	4770      	bx	lr
  4059e2:	bf00      	nop

004059e4 <__aeabi_cdrcmple>:
  4059e4:	4684      	mov	ip, r0
  4059e6:	4610      	mov	r0, r2
  4059e8:	4662      	mov	r2, ip
  4059ea:	468c      	mov	ip, r1
  4059ec:	4619      	mov	r1, r3
  4059ee:	4663      	mov	r3, ip
  4059f0:	e000      	b.n	4059f4 <__aeabi_cdcmpeq>
  4059f2:	bf00      	nop

004059f4 <__aeabi_cdcmpeq>:
  4059f4:	b501      	push	{r0, lr}
  4059f6:	f7ff ffb7 	bl	405968 <__cmpdf2>
  4059fa:	2800      	cmp	r0, #0
  4059fc:	bf48      	it	mi
  4059fe:	f110 0f00 	cmnmi.w	r0, #0
  405a02:	bd01      	pop	{r0, pc}

00405a04 <__aeabi_dcmpeq>:
  405a04:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a08:	f7ff fff4 	bl	4059f4 <__aeabi_cdcmpeq>
  405a0c:	bf0c      	ite	eq
  405a0e:	2001      	moveq	r0, #1
  405a10:	2000      	movne	r0, #0
  405a12:	f85d fb08 	ldr.w	pc, [sp], #8
  405a16:	bf00      	nop

00405a18 <__aeabi_dcmplt>:
  405a18:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a1c:	f7ff ffea 	bl	4059f4 <__aeabi_cdcmpeq>
  405a20:	bf34      	ite	cc
  405a22:	2001      	movcc	r0, #1
  405a24:	2000      	movcs	r0, #0
  405a26:	f85d fb08 	ldr.w	pc, [sp], #8
  405a2a:	bf00      	nop

00405a2c <__aeabi_dcmple>:
  405a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a30:	f7ff ffe0 	bl	4059f4 <__aeabi_cdcmpeq>
  405a34:	bf94      	ite	ls
  405a36:	2001      	movls	r0, #1
  405a38:	2000      	movhi	r0, #0
  405a3a:	f85d fb08 	ldr.w	pc, [sp], #8
  405a3e:	bf00      	nop

00405a40 <__aeabi_dcmpge>:
  405a40:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a44:	f7ff ffce 	bl	4059e4 <__aeabi_cdrcmple>
  405a48:	bf94      	ite	ls
  405a4a:	2001      	movls	r0, #1
  405a4c:	2000      	movhi	r0, #0
  405a4e:	f85d fb08 	ldr.w	pc, [sp], #8
  405a52:	bf00      	nop

00405a54 <__aeabi_dcmpgt>:
  405a54:	f84d ed08 	str.w	lr, [sp, #-8]!
  405a58:	f7ff ffc4 	bl	4059e4 <__aeabi_cdrcmple>
  405a5c:	bf34      	ite	cc
  405a5e:	2001      	movcc	r0, #1
  405a60:	2000      	movcs	r0, #0
  405a62:	f85d fb08 	ldr.w	pc, [sp], #8
  405a66:	bf00      	nop

00405a68 <__aeabi_d2iz>:
  405a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  405a70:	d215      	bcs.n	405a9e <__aeabi_d2iz+0x36>
  405a72:	d511      	bpl.n	405a98 <__aeabi_d2iz+0x30>
  405a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  405a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  405a7c:	d912      	bls.n	405aa4 <__aeabi_d2iz+0x3c>
  405a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  405a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405a8e:	fa23 f002 	lsr.w	r0, r3, r2
  405a92:	bf18      	it	ne
  405a94:	4240      	negne	r0, r0
  405a96:	4770      	bx	lr
  405a98:	f04f 0000 	mov.w	r0, #0
  405a9c:	4770      	bx	lr
  405a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  405aa2:	d105      	bne.n	405ab0 <__aeabi_d2iz+0x48>
  405aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  405aa8:	bf08      	it	eq
  405aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405aae:	4770      	bx	lr
  405ab0:	f04f 0000 	mov.w	r0, #0
  405ab4:	4770      	bx	lr
  405ab6:	bf00      	nop

00405ab8 <__aeabi_d2f>:
  405ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  405abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405ac0:	bf24      	itt	cs
  405ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  405ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  405aca:	d90d      	bls.n	405ae8 <__aeabi_d2f+0x30>
  405acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  405ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  405adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405ae0:	bf08      	it	eq
  405ae2:	f020 0001 	biceq.w	r0, r0, #1
  405ae6:	4770      	bx	lr
  405ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  405aec:	d121      	bne.n	405b32 <__aeabi_d2f+0x7a>
  405aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405af2:	bfbc      	itt	lt
  405af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405af8:	4770      	bxlt	lr
  405afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405b02:	f1c2 0218 	rsb	r2, r2, #24
  405b06:	f1c2 0c20 	rsb	ip, r2, #32
  405b0a:	fa10 f30c 	lsls.w	r3, r0, ip
  405b0e:	fa20 f002 	lsr.w	r0, r0, r2
  405b12:	bf18      	it	ne
  405b14:	f040 0001 	orrne.w	r0, r0, #1
  405b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  405b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405b20:	fa03 fc0c 	lsl.w	ip, r3, ip
  405b24:	ea40 000c 	orr.w	r0, r0, ip
  405b28:	fa23 f302 	lsr.w	r3, r3, r2
  405b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405b30:	e7cc      	b.n	405acc <__aeabi_d2f+0x14>
  405b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405b36:	d107      	bne.n	405b48 <__aeabi_d2f+0x90>
  405b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  405b3c:	bf1e      	ittt	ne
  405b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405b46:	4770      	bxne	lr
  405b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  405b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405b54:	4770      	bx	lr
  405b56:	bf00      	nop

00405b58 <__aeabi_frsub>:
  405b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  405b5c:	e002      	b.n	405b64 <__addsf3>
  405b5e:	bf00      	nop

00405b60 <__aeabi_fsub>:
  405b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00405b64 <__addsf3>:
  405b64:	0042      	lsls	r2, r0, #1
  405b66:	bf1f      	itttt	ne
  405b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  405b6c:	ea92 0f03 	teqne	r2, r3
  405b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  405b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405b78:	d06a      	beq.n	405c50 <__addsf3+0xec>
  405b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
  405b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  405b82:	bfc1      	itttt	gt
  405b84:	18d2      	addgt	r2, r2, r3
  405b86:	4041      	eorgt	r1, r0
  405b88:	4048      	eorgt	r0, r1
  405b8a:	4041      	eorgt	r1, r0
  405b8c:	bfb8      	it	lt
  405b8e:	425b      	neglt	r3, r3
  405b90:	2b19      	cmp	r3, #25
  405b92:	bf88      	it	hi
  405b94:	4770      	bxhi	lr
  405b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  405ba2:	bf18      	it	ne
  405ba4:	4240      	negne	r0, r0
  405ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  405bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  405bb2:	bf18      	it	ne
  405bb4:	4249      	negne	r1, r1
  405bb6:	ea92 0f03 	teq	r2, r3
  405bba:	d03f      	beq.n	405c3c <__addsf3+0xd8>
  405bbc:	f1a2 0201 	sub.w	r2, r2, #1
  405bc0:	fa41 fc03 	asr.w	ip, r1, r3
  405bc4:	eb10 000c 	adds.w	r0, r0, ip
  405bc8:	f1c3 0320 	rsb	r3, r3, #32
  405bcc:	fa01 f103 	lsl.w	r1, r1, r3
  405bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405bd4:	d502      	bpl.n	405bdc <__addsf3+0x78>
  405bd6:	4249      	negs	r1, r1
  405bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  405bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405be0:	d313      	bcc.n	405c0a <__addsf3+0xa6>
  405be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  405be6:	d306      	bcc.n	405bf6 <__addsf3+0x92>
  405be8:	0840      	lsrs	r0, r0, #1
  405bea:	ea4f 0131 	mov.w	r1, r1, rrx
  405bee:	f102 0201 	add.w	r2, r2, #1
  405bf2:	2afe      	cmp	r2, #254	; 0xfe
  405bf4:	d251      	bcs.n	405c9a <__addsf3+0x136>
  405bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  405bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405bfe:	bf08      	it	eq
  405c00:	f020 0001 	biceq.w	r0, r0, #1
  405c04:	ea40 0003 	orr.w	r0, r0, r3
  405c08:	4770      	bx	lr
  405c0a:	0049      	lsls	r1, r1, #1
  405c0c:	eb40 0000 	adc.w	r0, r0, r0
  405c10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405c14:	f1a2 0201 	sub.w	r2, r2, #1
  405c18:	d1ed      	bne.n	405bf6 <__addsf3+0x92>
  405c1a:	fab0 fc80 	clz	ip, r0
  405c1e:	f1ac 0c08 	sub.w	ip, ip, #8
  405c22:	ebb2 020c 	subs.w	r2, r2, ip
  405c26:	fa00 f00c 	lsl.w	r0, r0, ip
  405c2a:	bfaa      	itet	ge
  405c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405c30:	4252      	neglt	r2, r2
  405c32:	4318      	orrge	r0, r3
  405c34:	bfbc      	itt	lt
  405c36:	40d0      	lsrlt	r0, r2
  405c38:	4318      	orrlt	r0, r3
  405c3a:	4770      	bx	lr
  405c3c:	f092 0f00 	teq	r2, #0
  405c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405c44:	bf06      	itte	eq
  405c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  405c4a:	3201      	addeq	r2, #1
  405c4c:	3b01      	subne	r3, #1
  405c4e:	e7b5      	b.n	405bbc <__addsf3+0x58>
  405c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405c58:	bf18      	it	ne
  405c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405c5e:	d021      	beq.n	405ca4 <__addsf3+0x140>
  405c60:	ea92 0f03 	teq	r2, r3
  405c64:	d004      	beq.n	405c70 <__addsf3+0x10c>
  405c66:	f092 0f00 	teq	r2, #0
  405c6a:	bf08      	it	eq
  405c6c:	4608      	moveq	r0, r1
  405c6e:	4770      	bx	lr
  405c70:	ea90 0f01 	teq	r0, r1
  405c74:	bf1c      	itt	ne
  405c76:	2000      	movne	r0, #0
  405c78:	4770      	bxne	lr
  405c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  405c7e:	d104      	bne.n	405c8a <__addsf3+0x126>
  405c80:	0040      	lsls	r0, r0, #1
  405c82:	bf28      	it	cs
  405c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  405c88:	4770      	bx	lr
  405c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  405c8e:	bf3c      	itt	cc
  405c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  405c94:	4770      	bxcc	lr
  405c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  405c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405ca2:	4770      	bx	lr
  405ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
  405ca8:	bf16      	itet	ne
  405caa:	4608      	movne	r0, r1
  405cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  405cb0:	4601      	movne	r1, r0
  405cb2:	0242      	lsls	r2, r0, #9
  405cb4:	bf06      	itte	eq
  405cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  405cba:	ea90 0f01 	teqeq	r0, r1
  405cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405cc2:	4770      	bx	lr

00405cc4 <__aeabi_ui2f>:
  405cc4:	f04f 0300 	mov.w	r3, #0
  405cc8:	e004      	b.n	405cd4 <__aeabi_i2f+0x8>
  405cca:	bf00      	nop

00405ccc <__aeabi_i2f>:
  405ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405cd0:	bf48      	it	mi
  405cd2:	4240      	negmi	r0, r0
  405cd4:	ea5f 0c00 	movs.w	ip, r0
  405cd8:	bf08      	it	eq
  405cda:	4770      	bxeq	lr
  405cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405ce0:	4601      	mov	r1, r0
  405ce2:	f04f 0000 	mov.w	r0, #0
  405ce6:	e01c      	b.n	405d22 <__aeabi_l2f+0x2a>

00405ce8 <__aeabi_ul2f>:
  405ce8:	ea50 0201 	orrs.w	r2, r0, r1
  405cec:	bf08      	it	eq
  405cee:	4770      	bxeq	lr
  405cf0:	f04f 0300 	mov.w	r3, #0
  405cf4:	e00a      	b.n	405d0c <__aeabi_l2f+0x14>
  405cf6:	bf00      	nop

00405cf8 <__aeabi_l2f>:
  405cf8:	ea50 0201 	orrs.w	r2, r0, r1
  405cfc:	bf08      	it	eq
  405cfe:	4770      	bxeq	lr
  405d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405d04:	d502      	bpl.n	405d0c <__aeabi_l2f+0x14>
  405d06:	4240      	negs	r0, r0
  405d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405d0c:	ea5f 0c01 	movs.w	ip, r1
  405d10:	bf02      	ittt	eq
  405d12:	4684      	moveq	ip, r0
  405d14:	4601      	moveq	r1, r0
  405d16:	2000      	moveq	r0, #0
  405d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  405d1c:	bf08      	it	eq
  405d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  405d26:	fabc f28c 	clz	r2, ip
  405d2a:	3a08      	subs	r2, #8
  405d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405d30:	db10      	blt.n	405d54 <__aeabi_l2f+0x5c>
  405d32:	fa01 fc02 	lsl.w	ip, r1, r2
  405d36:	4463      	add	r3, ip
  405d38:	fa00 fc02 	lsl.w	ip, r0, r2
  405d3c:	f1c2 0220 	rsb	r2, r2, #32
  405d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405d44:	fa20 f202 	lsr.w	r2, r0, r2
  405d48:	eb43 0002 	adc.w	r0, r3, r2
  405d4c:	bf08      	it	eq
  405d4e:	f020 0001 	biceq.w	r0, r0, #1
  405d52:	4770      	bx	lr
  405d54:	f102 0220 	add.w	r2, r2, #32
  405d58:	fa01 fc02 	lsl.w	ip, r1, r2
  405d5c:	f1c2 0220 	rsb	r2, r2, #32
  405d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  405d64:	fa21 f202 	lsr.w	r2, r1, r2
  405d68:	eb43 0002 	adc.w	r0, r3, r2
  405d6c:	bf08      	it	eq
  405d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405d72:	4770      	bx	lr

00405d74 <__aeabi_fmul>:
  405d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405d7c:	bf1e      	ittt	ne
  405d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405d82:	ea92 0f0c 	teqne	r2, ip
  405d86:	ea93 0f0c 	teqne	r3, ip
  405d8a:	d06f      	beq.n	405e6c <__aeabi_fmul+0xf8>
  405d8c:	441a      	add	r2, r3
  405d8e:	ea80 0c01 	eor.w	ip, r0, r1
  405d92:	0240      	lsls	r0, r0, #9
  405d94:	bf18      	it	ne
  405d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  405d9a:	d01e      	beq.n	405dda <__aeabi_fmul+0x66>
  405d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  405da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  405da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  405da8:	fba0 3101 	umull	r3, r1, r0, r1
  405dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  405db4:	bf3e      	ittt	cc
  405db6:	0049      	lslcc	r1, r1, #1
  405db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  405dbc:	005b      	lslcc	r3, r3, #1
  405dbe:	ea40 0001 	orr.w	r0, r0, r1
  405dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  405dc6:	2afd      	cmp	r2, #253	; 0xfd
  405dc8:	d81d      	bhi.n	405e06 <__aeabi_fmul+0x92>
  405dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405dd2:	bf08      	it	eq
  405dd4:	f020 0001 	biceq.w	r0, r0, #1
  405dd8:	4770      	bx	lr
  405dda:	f090 0f00 	teq	r0, #0
  405dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405de2:	bf08      	it	eq
  405de4:	0249      	lsleq	r1, r1, #9
  405de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405dee:	3a7f      	subs	r2, #127	; 0x7f
  405df0:	bfc2      	ittt	gt
  405df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405dfa:	4770      	bxgt	lr
  405dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405e00:	f04f 0300 	mov.w	r3, #0
  405e04:	3a01      	subs	r2, #1
  405e06:	dc5d      	bgt.n	405ec4 <__aeabi_fmul+0x150>
  405e08:	f112 0f19 	cmn.w	r2, #25
  405e0c:	bfdc      	itt	le
  405e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405e12:	4770      	bxle	lr
  405e14:	f1c2 0200 	rsb	r2, r2, #0
  405e18:	0041      	lsls	r1, r0, #1
  405e1a:	fa21 f102 	lsr.w	r1, r1, r2
  405e1e:	f1c2 0220 	rsb	r2, r2, #32
  405e22:	fa00 fc02 	lsl.w	ip, r0, r2
  405e26:	ea5f 0031 	movs.w	r0, r1, rrx
  405e2a:	f140 0000 	adc.w	r0, r0, #0
  405e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405e32:	bf08      	it	eq
  405e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405e38:	4770      	bx	lr
  405e3a:	f092 0f00 	teq	r2, #0
  405e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405e42:	bf02      	ittt	eq
  405e44:	0040      	lsleq	r0, r0, #1
  405e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405e4a:	3a01      	subeq	r2, #1
  405e4c:	d0f9      	beq.n	405e42 <__aeabi_fmul+0xce>
  405e4e:	ea40 000c 	orr.w	r0, r0, ip
  405e52:	f093 0f00 	teq	r3, #0
  405e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405e5a:	bf02      	ittt	eq
  405e5c:	0049      	lsleq	r1, r1, #1
  405e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405e62:	3b01      	subeq	r3, #1
  405e64:	d0f9      	beq.n	405e5a <__aeabi_fmul+0xe6>
  405e66:	ea41 010c 	orr.w	r1, r1, ip
  405e6a:	e78f      	b.n	405d8c <__aeabi_fmul+0x18>
  405e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405e70:	ea92 0f0c 	teq	r2, ip
  405e74:	bf18      	it	ne
  405e76:	ea93 0f0c 	teqne	r3, ip
  405e7a:	d00a      	beq.n	405e92 <__aeabi_fmul+0x11e>
  405e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405e80:	bf18      	it	ne
  405e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405e86:	d1d8      	bne.n	405e3a <__aeabi_fmul+0xc6>
  405e88:	ea80 0001 	eor.w	r0, r0, r1
  405e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405e90:	4770      	bx	lr
  405e92:	f090 0f00 	teq	r0, #0
  405e96:	bf17      	itett	ne
  405e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405e9c:	4608      	moveq	r0, r1
  405e9e:	f091 0f00 	teqne	r1, #0
  405ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405ea6:	d014      	beq.n	405ed2 <__aeabi_fmul+0x15e>
  405ea8:	ea92 0f0c 	teq	r2, ip
  405eac:	d101      	bne.n	405eb2 <__aeabi_fmul+0x13e>
  405eae:	0242      	lsls	r2, r0, #9
  405eb0:	d10f      	bne.n	405ed2 <__aeabi_fmul+0x15e>
  405eb2:	ea93 0f0c 	teq	r3, ip
  405eb6:	d103      	bne.n	405ec0 <__aeabi_fmul+0x14c>
  405eb8:	024b      	lsls	r3, r1, #9
  405eba:	bf18      	it	ne
  405ebc:	4608      	movne	r0, r1
  405ebe:	d108      	bne.n	405ed2 <__aeabi_fmul+0x15e>
  405ec0:	ea80 0001 	eor.w	r0, r0, r1
  405ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405ed0:	4770      	bx	lr
  405ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405eda:	4770      	bx	lr

00405edc <__aeabi_fdiv>:
  405edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405ee4:	bf1e      	ittt	ne
  405ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405eea:	ea92 0f0c 	teqne	r2, ip
  405eee:	ea93 0f0c 	teqne	r3, ip
  405ef2:	d069      	beq.n	405fc8 <__aeabi_fdiv+0xec>
  405ef4:	eba2 0203 	sub.w	r2, r2, r3
  405ef8:	ea80 0c01 	eor.w	ip, r0, r1
  405efc:	0249      	lsls	r1, r1, #9
  405efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405f02:	d037      	beq.n	405f74 <__aeabi_fdiv+0x98>
  405f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405f14:	428b      	cmp	r3, r1
  405f16:	bf38      	it	cc
  405f18:	005b      	lslcc	r3, r3, #1
  405f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405f22:	428b      	cmp	r3, r1
  405f24:	bf24      	itt	cs
  405f26:	1a5b      	subcs	r3, r3, r1
  405f28:	ea40 000c 	orrcs.w	r0, r0, ip
  405f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405f30:	bf24      	itt	cs
  405f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405f3e:	bf24      	itt	cs
  405f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405f4c:	bf24      	itt	cs
  405f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405f56:	011b      	lsls	r3, r3, #4
  405f58:	bf18      	it	ne
  405f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405f5e:	d1e0      	bne.n	405f22 <__aeabi_fdiv+0x46>
  405f60:	2afd      	cmp	r2, #253	; 0xfd
  405f62:	f63f af50 	bhi.w	405e06 <__aeabi_fmul+0x92>
  405f66:	428b      	cmp	r3, r1
  405f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405f6c:	bf08      	it	eq
  405f6e:	f020 0001 	biceq.w	r0, r0, #1
  405f72:	4770      	bx	lr
  405f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405f7c:	327f      	adds	r2, #127	; 0x7f
  405f7e:	bfc2      	ittt	gt
  405f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405f88:	4770      	bxgt	lr
  405f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405f8e:	f04f 0300 	mov.w	r3, #0
  405f92:	3a01      	subs	r2, #1
  405f94:	e737      	b.n	405e06 <__aeabi_fmul+0x92>
  405f96:	f092 0f00 	teq	r2, #0
  405f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405f9e:	bf02      	ittt	eq
  405fa0:	0040      	lsleq	r0, r0, #1
  405fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405fa6:	3a01      	subeq	r2, #1
  405fa8:	d0f9      	beq.n	405f9e <__aeabi_fdiv+0xc2>
  405faa:	ea40 000c 	orr.w	r0, r0, ip
  405fae:	f093 0f00 	teq	r3, #0
  405fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405fb6:	bf02      	ittt	eq
  405fb8:	0049      	lsleq	r1, r1, #1
  405fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405fbe:	3b01      	subeq	r3, #1
  405fc0:	d0f9      	beq.n	405fb6 <__aeabi_fdiv+0xda>
  405fc2:	ea41 010c 	orr.w	r1, r1, ip
  405fc6:	e795      	b.n	405ef4 <__aeabi_fdiv+0x18>
  405fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405fcc:	ea92 0f0c 	teq	r2, ip
  405fd0:	d108      	bne.n	405fe4 <__aeabi_fdiv+0x108>
  405fd2:	0242      	lsls	r2, r0, #9
  405fd4:	f47f af7d 	bne.w	405ed2 <__aeabi_fmul+0x15e>
  405fd8:	ea93 0f0c 	teq	r3, ip
  405fdc:	f47f af70 	bne.w	405ec0 <__aeabi_fmul+0x14c>
  405fe0:	4608      	mov	r0, r1
  405fe2:	e776      	b.n	405ed2 <__aeabi_fmul+0x15e>
  405fe4:	ea93 0f0c 	teq	r3, ip
  405fe8:	d104      	bne.n	405ff4 <__aeabi_fdiv+0x118>
  405fea:	024b      	lsls	r3, r1, #9
  405fec:	f43f af4c 	beq.w	405e88 <__aeabi_fmul+0x114>
  405ff0:	4608      	mov	r0, r1
  405ff2:	e76e      	b.n	405ed2 <__aeabi_fmul+0x15e>
  405ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405ff8:	bf18      	it	ne
  405ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405ffe:	d1ca      	bne.n	405f96 <__aeabi_fdiv+0xba>
  406000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  406004:	f47f af5c 	bne.w	405ec0 <__aeabi_fmul+0x14c>
  406008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  40600c:	f47f af3c 	bne.w	405e88 <__aeabi_fmul+0x114>
  406010:	e75f      	b.n	405ed2 <__aeabi_fmul+0x15e>
  406012:	bf00      	nop

00406014 <__gesf2>:
  406014:	f04f 3cff 	mov.w	ip, #4294967295
  406018:	e006      	b.n	406028 <__cmpsf2+0x4>
  40601a:	bf00      	nop

0040601c <__lesf2>:
  40601c:	f04f 0c01 	mov.w	ip, #1
  406020:	e002      	b.n	406028 <__cmpsf2+0x4>
  406022:	bf00      	nop

00406024 <__cmpsf2>:
  406024:	f04f 0c01 	mov.w	ip, #1
  406028:	f84d cd04 	str.w	ip, [sp, #-4]!
  40602c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  406030:	ea4f 0341 	mov.w	r3, r1, lsl #1
  406034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406038:	bf18      	it	ne
  40603a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40603e:	d011      	beq.n	406064 <__cmpsf2+0x40>
  406040:	b001      	add	sp, #4
  406042:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  406046:	bf18      	it	ne
  406048:	ea90 0f01 	teqne	r0, r1
  40604c:	bf58      	it	pl
  40604e:	ebb2 0003 	subspl.w	r0, r2, r3
  406052:	bf88      	it	hi
  406054:	17c8      	asrhi	r0, r1, #31
  406056:	bf38      	it	cc
  406058:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  40605c:	bf18      	it	ne
  40605e:	f040 0001 	orrne.w	r0, r0, #1
  406062:	4770      	bx	lr
  406064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  406068:	d102      	bne.n	406070 <__cmpsf2+0x4c>
  40606a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  40606e:	d105      	bne.n	40607c <__cmpsf2+0x58>
  406070:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  406074:	d1e4      	bne.n	406040 <__cmpsf2+0x1c>
  406076:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  40607a:	d0e1      	beq.n	406040 <__cmpsf2+0x1c>
  40607c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406080:	4770      	bx	lr
  406082:	bf00      	nop

00406084 <__aeabi_cfrcmple>:
  406084:	4684      	mov	ip, r0
  406086:	4608      	mov	r0, r1
  406088:	4661      	mov	r1, ip
  40608a:	e7ff      	b.n	40608c <__aeabi_cfcmpeq>

0040608c <__aeabi_cfcmpeq>:
  40608c:	b50f      	push	{r0, r1, r2, r3, lr}
  40608e:	f7ff ffc9 	bl	406024 <__cmpsf2>
  406092:	2800      	cmp	r0, #0
  406094:	bf48      	it	mi
  406096:	f110 0f00 	cmnmi.w	r0, #0
  40609a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0040609c <__aeabi_fcmpeq>:
  40609c:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060a0:	f7ff fff4 	bl	40608c <__aeabi_cfcmpeq>
  4060a4:	bf0c      	ite	eq
  4060a6:	2001      	moveq	r0, #1
  4060a8:	2000      	movne	r0, #0
  4060aa:	f85d fb08 	ldr.w	pc, [sp], #8
  4060ae:	bf00      	nop

004060b0 <__aeabi_fcmplt>:
  4060b0:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060b4:	f7ff ffea 	bl	40608c <__aeabi_cfcmpeq>
  4060b8:	bf34      	ite	cc
  4060ba:	2001      	movcc	r0, #1
  4060bc:	2000      	movcs	r0, #0
  4060be:	f85d fb08 	ldr.w	pc, [sp], #8
  4060c2:	bf00      	nop

004060c4 <__aeabi_fcmple>:
  4060c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060c8:	f7ff ffe0 	bl	40608c <__aeabi_cfcmpeq>
  4060cc:	bf94      	ite	ls
  4060ce:	2001      	movls	r0, #1
  4060d0:	2000      	movhi	r0, #0
  4060d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4060d6:	bf00      	nop

004060d8 <__aeabi_fcmpge>:
  4060d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060dc:	f7ff ffd2 	bl	406084 <__aeabi_cfrcmple>
  4060e0:	bf94      	ite	ls
  4060e2:	2001      	movls	r0, #1
  4060e4:	2000      	movhi	r0, #0
  4060e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4060ea:	bf00      	nop

004060ec <__aeabi_fcmpgt>:
  4060ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4060f0:	f7ff ffc8 	bl	406084 <__aeabi_cfrcmple>
  4060f4:	bf34      	ite	cc
  4060f6:	2001      	movcc	r0, #1
  4060f8:	2000      	movcs	r0, #0
  4060fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4060fe:	bf00      	nop

00406100 <__errno>:
  406100:	4b01      	ldr	r3, [pc, #4]	; (406108 <__errno+0x8>)
  406102:	6818      	ldr	r0, [r3, #0]
  406104:	4770      	bx	lr
  406106:	bf00      	nop
  406108:	20400448 	.word	0x20400448

0040610c <__libc_init_array>:
  40610c:	b570      	push	{r4, r5, r6, lr}
  40610e:	4e0f      	ldr	r6, [pc, #60]	; (40614c <__libc_init_array+0x40>)
  406110:	4d0f      	ldr	r5, [pc, #60]	; (406150 <__libc_init_array+0x44>)
  406112:	1b76      	subs	r6, r6, r5
  406114:	10b6      	asrs	r6, r6, #2
  406116:	bf18      	it	ne
  406118:	2400      	movne	r4, #0
  40611a:	d005      	beq.n	406128 <__libc_init_array+0x1c>
  40611c:	3401      	adds	r4, #1
  40611e:	f855 3b04 	ldr.w	r3, [r5], #4
  406122:	4798      	blx	r3
  406124:	42a6      	cmp	r6, r4
  406126:	d1f9      	bne.n	40611c <__libc_init_array+0x10>
  406128:	4e0a      	ldr	r6, [pc, #40]	; (406154 <__libc_init_array+0x48>)
  40612a:	f000 fc0d 	bl	406948 <_init>
  40612e:	4d0a      	ldr	r5, [pc, #40]	; (406158 <__libc_init_array+0x4c>)
  406130:	1b76      	subs	r6, r6, r5
  406132:	10b6      	asrs	r6, r6, #2
  406134:	bf18      	it	ne
  406136:	2400      	movne	r4, #0
  406138:	d006      	beq.n	406148 <__libc_init_array+0x3c>
  40613a:	3401      	adds	r4, #1
  40613c:	f855 3b04 	ldr.w	r3, [r5], #4
  406140:	4798      	blx	r3
  406142:	42a6      	cmp	r6, r4
  406144:	d1f9      	bne.n	40613a <__libc_init_array+0x2e>
  406146:	bd70      	pop	{r4, r5, r6, pc}
  406148:	bd70      	pop	{r4, r5, r6, pc}
  40614a:	bf00      	nop
  40614c:	00406954 	.word	0x00406954
  406150:	00406954 	.word	0x00406954
  406154:	0040695c 	.word	0x0040695c
  406158:	00406954 	.word	0x00406954

0040615c <memcpy>:
  40615c:	4684      	mov	ip, r0
  40615e:	ea41 0300 	orr.w	r3, r1, r0
  406162:	f013 0303 	ands.w	r3, r3, #3
  406166:	d16d      	bne.n	406244 <memcpy+0xe8>
  406168:	3a40      	subs	r2, #64	; 0x40
  40616a:	d341      	bcc.n	4061f0 <memcpy+0x94>
  40616c:	f851 3b04 	ldr.w	r3, [r1], #4
  406170:	f840 3b04 	str.w	r3, [r0], #4
  406174:	f851 3b04 	ldr.w	r3, [r1], #4
  406178:	f840 3b04 	str.w	r3, [r0], #4
  40617c:	f851 3b04 	ldr.w	r3, [r1], #4
  406180:	f840 3b04 	str.w	r3, [r0], #4
  406184:	f851 3b04 	ldr.w	r3, [r1], #4
  406188:	f840 3b04 	str.w	r3, [r0], #4
  40618c:	f851 3b04 	ldr.w	r3, [r1], #4
  406190:	f840 3b04 	str.w	r3, [r0], #4
  406194:	f851 3b04 	ldr.w	r3, [r1], #4
  406198:	f840 3b04 	str.w	r3, [r0], #4
  40619c:	f851 3b04 	ldr.w	r3, [r1], #4
  4061a0:	f840 3b04 	str.w	r3, [r0], #4
  4061a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4061a8:	f840 3b04 	str.w	r3, [r0], #4
  4061ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4061b0:	f840 3b04 	str.w	r3, [r0], #4
  4061b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4061b8:	f840 3b04 	str.w	r3, [r0], #4
  4061bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4061c0:	f840 3b04 	str.w	r3, [r0], #4
  4061c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4061c8:	f840 3b04 	str.w	r3, [r0], #4
  4061cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4061d0:	f840 3b04 	str.w	r3, [r0], #4
  4061d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4061d8:	f840 3b04 	str.w	r3, [r0], #4
  4061dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4061e0:	f840 3b04 	str.w	r3, [r0], #4
  4061e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4061e8:	f840 3b04 	str.w	r3, [r0], #4
  4061ec:	3a40      	subs	r2, #64	; 0x40
  4061ee:	d2bd      	bcs.n	40616c <memcpy+0x10>
  4061f0:	3230      	adds	r2, #48	; 0x30
  4061f2:	d311      	bcc.n	406218 <memcpy+0xbc>
  4061f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4061f8:	f840 3b04 	str.w	r3, [r0], #4
  4061fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406200:	f840 3b04 	str.w	r3, [r0], #4
  406204:	f851 3b04 	ldr.w	r3, [r1], #4
  406208:	f840 3b04 	str.w	r3, [r0], #4
  40620c:	f851 3b04 	ldr.w	r3, [r1], #4
  406210:	f840 3b04 	str.w	r3, [r0], #4
  406214:	3a10      	subs	r2, #16
  406216:	d2ed      	bcs.n	4061f4 <memcpy+0x98>
  406218:	320c      	adds	r2, #12
  40621a:	d305      	bcc.n	406228 <memcpy+0xcc>
  40621c:	f851 3b04 	ldr.w	r3, [r1], #4
  406220:	f840 3b04 	str.w	r3, [r0], #4
  406224:	3a04      	subs	r2, #4
  406226:	d2f9      	bcs.n	40621c <memcpy+0xc0>
  406228:	3204      	adds	r2, #4
  40622a:	d008      	beq.n	40623e <memcpy+0xe2>
  40622c:	07d2      	lsls	r2, r2, #31
  40622e:	bf1c      	itt	ne
  406230:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406234:	f800 3b01 	strbne.w	r3, [r0], #1
  406238:	d301      	bcc.n	40623e <memcpy+0xe2>
  40623a:	880b      	ldrh	r3, [r1, #0]
  40623c:	8003      	strh	r3, [r0, #0]
  40623e:	4660      	mov	r0, ip
  406240:	4770      	bx	lr
  406242:	bf00      	nop
  406244:	2a08      	cmp	r2, #8
  406246:	d313      	bcc.n	406270 <memcpy+0x114>
  406248:	078b      	lsls	r3, r1, #30
  40624a:	d08d      	beq.n	406168 <memcpy+0xc>
  40624c:	f010 0303 	ands.w	r3, r0, #3
  406250:	d08a      	beq.n	406168 <memcpy+0xc>
  406252:	f1c3 0304 	rsb	r3, r3, #4
  406256:	1ad2      	subs	r2, r2, r3
  406258:	07db      	lsls	r3, r3, #31
  40625a:	bf1c      	itt	ne
  40625c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406260:	f800 3b01 	strbne.w	r3, [r0], #1
  406264:	d380      	bcc.n	406168 <memcpy+0xc>
  406266:	f831 3b02 	ldrh.w	r3, [r1], #2
  40626a:	f820 3b02 	strh.w	r3, [r0], #2
  40626e:	e77b      	b.n	406168 <memcpy+0xc>
  406270:	3a04      	subs	r2, #4
  406272:	d3d9      	bcc.n	406228 <memcpy+0xcc>
  406274:	3a01      	subs	r2, #1
  406276:	f811 3b01 	ldrb.w	r3, [r1], #1
  40627a:	f800 3b01 	strb.w	r3, [r0], #1
  40627e:	d2f9      	bcs.n	406274 <memcpy+0x118>
  406280:	780b      	ldrb	r3, [r1, #0]
  406282:	7003      	strb	r3, [r0, #0]
  406284:	784b      	ldrb	r3, [r1, #1]
  406286:	7043      	strb	r3, [r0, #1]
  406288:	788b      	ldrb	r3, [r1, #2]
  40628a:	7083      	strb	r3, [r0, #2]
  40628c:	4660      	mov	r0, ip
  40628e:	4770      	bx	lr

00406290 <memset>:
  406290:	0783      	lsls	r3, r0, #30
  406292:	b470      	push	{r4, r5, r6}
  406294:	d049      	beq.n	40632a <memset+0x9a>
  406296:	1e54      	subs	r4, r2, #1
  406298:	2a00      	cmp	r2, #0
  40629a:	d044      	beq.n	406326 <memset+0x96>
  40629c:	b2cd      	uxtb	r5, r1
  40629e:	4603      	mov	r3, r0
  4062a0:	e002      	b.n	4062a8 <memset+0x18>
  4062a2:	2c00      	cmp	r4, #0
  4062a4:	d03f      	beq.n	406326 <memset+0x96>
  4062a6:	4614      	mov	r4, r2
  4062a8:	f803 5b01 	strb.w	r5, [r3], #1
  4062ac:	f013 0f03 	tst.w	r3, #3
  4062b0:	f104 32ff 	add.w	r2, r4, #4294967295
  4062b4:	d1f5      	bne.n	4062a2 <memset+0x12>
  4062b6:	2c03      	cmp	r4, #3
  4062b8:	d92e      	bls.n	406318 <memset+0x88>
  4062ba:	b2cd      	uxtb	r5, r1
  4062bc:	2c0f      	cmp	r4, #15
  4062be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4062c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4062c6:	d919      	bls.n	4062fc <memset+0x6c>
  4062c8:	f103 0210 	add.w	r2, r3, #16
  4062cc:	4626      	mov	r6, r4
  4062ce:	3e10      	subs	r6, #16
  4062d0:	f842 5c10 	str.w	r5, [r2, #-16]
  4062d4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4062d8:	3210      	adds	r2, #16
  4062da:	2e0f      	cmp	r6, #15
  4062dc:	f842 5c18 	str.w	r5, [r2, #-24]
  4062e0:	f842 5c14 	str.w	r5, [r2, #-20]
  4062e4:	d8f3      	bhi.n	4062ce <memset+0x3e>
  4062e6:	f1a4 0210 	sub.w	r2, r4, #16
  4062ea:	f004 040f 	and.w	r4, r4, #15
  4062ee:	f022 020f 	bic.w	r2, r2, #15
  4062f2:	2c03      	cmp	r4, #3
  4062f4:	f102 0210 	add.w	r2, r2, #16
  4062f8:	4413      	add	r3, r2
  4062fa:	d90d      	bls.n	406318 <memset+0x88>
  4062fc:	461e      	mov	r6, r3
  4062fe:	4622      	mov	r2, r4
  406300:	3a04      	subs	r2, #4
  406302:	f846 5b04 	str.w	r5, [r6], #4
  406306:	2a03      	cmp	r2, #3
  406308:	d8fa      	bhi.n	406300 <memset+0x70>
  40630a:	1f22      	subs	r2, r4, #4
  40630c:	f004 0403 	and.w	r4, r4, #3
  406310:	f022 0203 	bic.w	r2, r2, #3
  406314:	3204      	adds	r2, #4
  406316:	4413      	add	r3, r2
  406318:	b12c      	cbz	r4, 406326 <memset+0x96>
  40631a:	b2c9      	uxtb	r1, r1
  40631c:	441c      	add	r4, r3
  40631e:	f803 1b01 	strb.w	r1, [r3], #1
  406322:	42a3      	cmp	r3, r4
  406324:	d1fb      	bne.n	40631e <memset+0x8e>
  406326:	bc70      	pop	{r4, r5, r6}
  406328:	4770      	bx	lr
  40632a:	4614      	mov	r4, r2
  40632c:	4603      	mov	r3, r0
  40632e:	e7c2      	b.n	4062b6 <memset+0x26>

00406330 <strlen>:
  406330:	f020 0103 	bic.w	r1, r0, #3
  406334:	f010 0003 	ands.w	r0, r0, #3
  406338:	f1c0 0000 	rsb	r0, r0, #0
  40633c:	f851 3b04 	ldr.w	r3, [r1], #4
  406340:	f100 0c04 	add.w	ip, r0, #4
  406344:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  406348:	f06f 0200 	mvn.w	r2, #0
  40634c:	bf1c      	itt	ne
  40634e:	fa22 f20c 	lsrne.w	r2, r2, ip
  406352:	4313      	orrne	r3, r2
  406354:	f04f 0c01 	mov.w	ip, #1
  406358:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
  40635c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
  406360:	eba3 020c 	sub.w	r2, r3, ip
  406364:	ea22 0203 	bic.w	r2, r2, r3
  406368:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
  40636c:	bf04      	itt	eq
  40636e:	f851 3b04 	ldreq.w	r3, [r1], #4
  406372:	3004      	addeq	r0, #4
  406374:	d0f4      	beq.n	406360 <strlen+0x30>
  406376:	f1c2 0100 	rsb	r1, r2, #0
  40637a:	ea02 0201 	and.w	r2, r2, r1
  40637e:	fab2 f282 	clz	r2, r2
  406382:	f1c2 021f 	rsb	r2, r2, #31
  406386:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40638a:	4770      	bx	lr

0040638c <register_fini>:
  40638c:	4b02      	ldr	r3, [pc, #8]	; (406398 <register_fini+0xc>)
  40638e:	b113      	cbz	r3, 406396 <register_fini+0xa>
  406390:	4802      	ldr	r0, [pc, #8]	; (40639c <register_fini+0x10>)
  406392:	f000 b805 	b.w	4063a0 <atexit>
  406396:	4770      	bx	lr
  406398:	00000000 	.word	0x00000000
  40639c:	004063ad 	.word	0x004063ad

004063a0 <atexit>:
  4063a0:	4601      	mov	r1, r0
  4063a2:	2000      	movs	r0, #0
  4063a4:	4602      	mov	r2, r0
  4063a6:	4603      	mov	r3, r0
  4063a8:	f000 b816 	b.w	4063d8 <__register_exitproc>

004063ac <__libc_fini_array>:
  4063ac:	b538      	push	{r3, r4, r5, lr}
  4063ae:	4b08      	ldr	r3, [pc, #32]	; (4063d0 <__libc_fini_array+0x24>)
  4063b0:	4d08      	ldr	r5, [pc, #32]	; (4063d4 <__libc_fini_array+0x28>)
  4063b2:	1aed      	subs	r5, r5, r3
  4063b4:	10ac      	asrs	r4, r5, #2
  4063b6:	bf18      	it	ne
  4063b8:	18ed      	addne	r5, r5, r3
  4063ba:	d005      	beq.n	4063c8 <__libc_fini_array+0x1c>
  4063bc:	3c01      	subs	r4, #1
  4063be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4063c2:	4798      	blx	r3
  4063c4:	2c00      	cmp	r4, #0
  4063c6:	d1f9      	bne.n	4063bc <__libc_fini_array+0x10>
  4063c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4063cc:	f000 bac6 	b.w	40695c <_fini>
  4063d0:	00406968 	.word	0x00406968
  4063d4:	0040696c 	.word	0x0040696c

004063d8 <__register_exitproc>:
  4063d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4063dc:	4c26      	ldr	r4, [pc, #152]	; (406478 <__register_exitproc+0xa0>)
  4063de:	4606      	mov	r6, r0
  4063e0:	4688      	mov	r8, r1
  4063e2:	4691      	mov	r9, r2
  4063e4:	6825      	ldr	r5, [r4, #0]
  4063e6:	469a      	mov	sl, r3
  4063e8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  4063ec:	2c00      	cmp	r4, #0
  4063ee:	d03a      	beq.n	406466 <__register_exitproc+0x8e>
  4063f0:	6860      	ldr	r0, [r4, #4]
  4063f2:	281f      	cmp	r0, #31
  4063f4:	dc19      	bgt.n	40642a <__register_exitproc+0x52>
  4063f6:	1c41      	adds	r1, r0, #1
  4063f8:	b186      	cbz	r6, 40641c <__register_exitproc+0x44>
  4063fa:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  4063fe:	2201      	movs	r2, #1
  406400:	2e02      	cmp	r6, #2
  406402:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
  406406:	fa02 f200 	lsl.w	r2, r2, r0
  40640a:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
  40640e:	ea43 0302 	orr.w	r3, r3, r2
  406412:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
  406416:	f8c5 a108 	str.w	sl, [r5, #264]	; 0x108
  40641a:	d01e      	beq.n	40645a <__register_exitproc+0x82>
  40641c:	1c83      	adds	r3, r0, #2
  40641e:	6061      	str	r1, [r4, #4]
  406420:	2000      	movs	r0, #0
  406422:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
  406426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40642a:	4b14      	ldr	r3, [pc, #80]	; (40647c <__register_exitproc+0xa4>)
  40642c:	b303      	cbz	r3, 406470 <__register_exitproc+0x98>
  40642e:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406432:	f3af 8000 	nop.w
  406436:	4604      	mov	r4, r0
  406438:	b1d0      	cbz	r0, 406470 <__register_exitproc+0x98>
  40643a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40643e:	2700      	movs	r7, #0
  406440:	2101      	movs	r1, #1
  406442:	6003      	str	r3, [r0, #0]
  406444:	4638      	mov	r0, r7
  406446:	6067      	str	r7, [r4, #4]
  406448:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40644c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  406450:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  406454:	2e00      	cmp	r6, #0
  406456:	d0e1      	beq.n	40641c <__register_exitproc+0x44>
  406458:	e7cf      	b.n	4063fa <__register_exitproc+0x22>
  40645a:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  40645e:	431a      	orrs	r2, r3
  406460:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  406464:	e7da      	b.n	40641c <__register_exitproc+0x44>
  406466:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  40646a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  40646e:	e7bf      	b.n	4063f0 <__register_exitproc+0x18>
  406470:	f04f 30ff 	mov.w	r0, #4294967295
  406474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406478:	00406944 	.word	0x00406944
  40647c:	00000000 	.word	0x00000000
  406480:	454c4449 	.word	0x454c4449
  406484:	00000000 	.word	0x00000000
  406488:	09632509 	.word	0x09632509
  40648c:	25097525 	.word	0x25097525
  406490:	75250975 	.word	0x75250975
  406494:	00000a0d 	.word	0x00000a0d
  406498:	51726d54 	.word	0x51726d54
  40649c:	00000000 	.word	0x00000000
  4064a0:	20726d54 	.word	0x20726d54
  4064a4:	00637653 	.word	0x00637653
  4064a8:	00002580 	.word	0x00002580
  4064ac:	000000c0 	.word	0x000000c0
  4064b0:	00000800 	.word	0x00000800
  4064b4:	4c4c454d 	.word	0x4c4c454d
  4064b8:	4f525441 	.word	0x4f525441
  4064bc:	3030394e 	.word	0x3030394e
  4064c0:	4f422030 	.word	0x4f422030
  4064c4:	5320544f 	.word	0x5320544f
  4064c8:	45555145 	.word	0x45555145
  4064cc:	0a45434e 	.word	0x0a45434e
  4064d0:	54524155 	.word	0x54524155
  4064d4:	4e4f4320 	.word	0x4e4f4320
  4064d8:	454c4f53 	.word	0x454c4f53
  4064dc:	41545320 	.word	0x41545320
  4064e0:	44455452 	.word	0x44455452
  4064e4:	204e4f20 	.word	0x204e4f20
  4064e8:	54524155 	.word	0x54524155
  4064ec:	61420a34 	.word	0x61420a34
  4064f0:	61526475 	.word	0x61526475
  4064f4:	203a6574 	.word	0x203a6574
  4064f8:	32353131 	.word	0x32353131
  4064fc:	420a3030 	.word	0x420a3030
  406500:	3a737469 	.word	0x3a737469
  406504:	4e0a3820 	.word	0x4e0a3820
  406508:	7473206f 	.word	0x7473206f
  40650c:	6220706f 	.word	0x6220706f
  406510:	20737469 	.word	0x20737469
  406514:	0000000a 	.word	0x0000000a
  406518:	20495053 	.word	0x20495053
  40651c:	54494e49 	.word	0x54494e49
  406520:	494c4149 	.word	0x494c4149
  406524:	4954415a 	.word	0x4954415a
  406528:	2d204e4f 	.word	0x2d204e4f
  40652c:	41545320 	.word	0x41545320
  406530:	44455452 	.word	0x44455452
  406534:	0000000a 	.word	0x0000000a
  406538:	20495053 	.word	0x20495053
  40653c:	54494e49 	.word	0x54494e49
  406540:	494c4149 	.word	0x494c4149
  406544:	4954415a 	.word	0x4954415a
  406548:	2d204e4f 	.word	0x2d204e4f
  40654c:	4e494620 	.word	0x4e494620
  406550:	45485349 	.word	0x45485349
  406554:	00000a44 	.word	0x00000a44
  406558:	314d5744 	.word	0x314d5744
  40655c:	20303030 	.word	0x20303030
  406560:	54494e49 	.word	0x54494e49
  406564:	494c4149 	.word	0x494c4149
  406568:	4954415a 	.word	0x4954415a
  40656c:	2d204e4f 	.word	0x2d204e4f
  406570:	41545320 	.word	0x41545320
  406574:	44455452 	.word	0x44455452
  406578:	0000000a 	.word	0x0000000a
  40657c:	314d5744 	.word	0x314d5744
  406580:	20303030 	.word	0x20303030
  406584:	54494e49 	.word	0x54494e49
  406588:	494c4149 	.word	0x494c4149
  40658c:	4954415a 	.word	0x4954415a
  406590:	2d204e4f 	.word	0x2d204e4f
  406594:	4e494620 	.word	0x4e494620
  406598:	45485349 	.word	0x45485349
  40659c:	00000a44 	.word	0x00000a44
  4065a0:	43544157 	.word	0x43544157
  4065a4:	474f4448 	.word	0x474f4448
  4065a8:	494e4920 	.word	0x494e4920
  4065ac:	4c414954 	.word	0x4c414954
  4065b0:	54415a49 	.word	0x54415a49
  4065b4:	204e4f49 	.word	0x204e4f49
  4065b8:	5453202d 	.word	0x5453202d
  4065bc:	45545241 	.word	0x45545241
  4065c0:	00000a44 	.word	0x00000a44
  4065c4:	43544157 	.word	0x43544157
  4065c8:	474f4448 	.word	0x474f4448
  4065cc:	494e4920 	.word	0x494e4920
  4065d0:	4c414954 	.word	0x4c414954
  4065d4:	54415a49 	.word	0x54415a49
  4065d8:	204e4f49 	.word	0x204e4f49
  4065dc:	4946202d 	.word	0x4946202d
  4065e0:	4853494e 	.word	0x4853494e
  4065e4:	000a4445 	.word	0x000a4445
  4065e8:	424f4c47 	.word	0x424f4c47
  4065ec:	49204c41 	.word	0x49204c41
  4065f0:	49205152 	.word	0x49205152
  4065f4:	4954494e 	.word	0x4954494e
  4065f8:	5a494c41 	.word	0x5a494c41
  4065fc:	4f495441 	.word	0x4f495441
  406600:	202d204e 	.word	0x202d204e
  406604:	52415453 	.word	0x52415453
  406608:	0a444554 	.word	0x0a444554
  40660c:	00000000 	.word	0x00000000
  406610:	424f4c47 	.word	0x424f4c47
  406614:	49204c41 	.word	0x49204c41
  406618:	49205152 	.word	0x49205152
  40661c:	4954494e 	.word	0x4954494e
  406620:	5a494c41 	.word	0x5a494c41
  406624:	4f495441 	.word	0x4f495441
  406628:	202d204e 	.word	0x202d204e
  40662c:	494e4946 	.word	0x494e4946
  406630:	44454853 	.word	0x44454853
  406634:	0000000a 	.word	0x0000000a
  406638:	49524550 	.word	0x49524550
  40663c:	52454850 	.word	0x52454850
  406640:	49204c41 	.word	0x49204c41
  406644:	49205152 	.word	0x49205152
  406648:	4954494e 	.word	0x4954494e
  40664c:	5a494c41 	.word	0x5a494c41
  406650:	4f495441 	.word	0x4f495441
  406654:	202d204e 	.word	0x202d204e
  406658:	52415453 	.word	0x52415453
  40665c:	0a444554 	.word	0x0a444554
  406660:	00000000 	.word	0x00000000
  406664:	49524550 	.word	0x49524550
  406668:	52454850 	.word	0x52454850
  40666c:	49204c41 	.word	0x49204c41
  406670:	49205152 	.word	0x49205152
  406674:	4954494e 	.word	0x4954494e
  406678:	5a494c41 	.word	0x5a494c41
  40667c:	4f495441 	.word	0x4f495441
  406680:	202d204e 	.word	0x202d204e
  406684:	494e4946 	.word	0x494e4946
  406688:	44454853 	.word	0x44454853
  40668c:	0000000a 	.word	0x0000000a
  406690:	646e6573 	.word	0x646e6573
  406694:	63657053 	.word	0x63657053
  406698:	466c6169 	.word	0x466c6169
  40669c:	656d6172 	.word	0x656d6172
  4066a0:	0000000a 	.word	0x0000000a
  4066a4:	44746973 	.word	0x44746973
  4066a8:	0a6e776f 	.word	0x0a6e776f
  4066ac:	00000000 	.word	0x00000000
  4066b0:	6e617473 	.word	0x6e617473
  4066b4:	0a705564 	.word	0x0a705564
  4066b8:	00000000 	.word	0x00000000
  4066bc:	4b534154 	.word	0x4b534154
  4066c0:	00000031 	.word	0x00000031
  4066c4:	444e4553 	.word	0x444e4553
  4066c8:	4d415246 	.word	0x4d415246
  4066cc:	53415445 	.word	0x53415445
  4066d0:	0000004b 	.word	0x0000004b
  4066d4:	4c495542 	.word	0x4c495542
  4066d8:	41524644 	.word	0x41524644
  4066dc:	4154454d 	.word	0x4154454d
  4066e0:	00004b53 	.word	0x00004b53
  4066e4:	41445055 	.word	0x41445055
  4066e8:	41544554 	.word	0x41544554
  4066ec:	00004b53 	.word	0x00004b53
  4066f0:	444e4553 	.word	0x444e4553
  4066f4:	43455053 	.word	0x43455053
  4066f8:	4b534154 	.word	0x4b534154
  4066fc:	00000000 	.word	0x00000000
  406700:	6867694c 	.word	0x6867694c
  406704:	6f207374 	.word	0x6f207374
  406708:	48200a6e 	.word	0x48200a6e
  40670c:	68532069 	.word	0x68532069
  406710:	6c65766f 	.word	0x6c65766f
  406714:	726f4c20 	.word	0x726f4c20
  406718:	00000a64 	.word	0x00000a64
  40671c:	61647055 	.word	0x61647055
  406720:	65536574 	.word	0x65536574
  406724:	6c61436d 	.word	0x6c61436d
  406728:	0a64656c 	.word	0x0a64656c
  40672c:	00000000 	.word	0x00000000
  406730:	65747962 	.word	0x65747962
  406734:	3a642520 	.word	0x3a642520
  406738:	0a782520 	.word	0x0a782520
  40673c:	00000000 	.word	0x00000000
  406740:	74727173 	.word	0x74727173
  406744:	00000000 	.word	0x00000000

00406748 <npio2_hw>:
  406748:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
  406758:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
  406768:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
  406778:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
  406788:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
  406798:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
  4067a8:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
  4067b8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

004067c8 <two_over_pi>:
  4067c8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
  4067d8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
  4067e8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
  4067f8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
  406808:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
  406818:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
  406828:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
  406838:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
  406848:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
  406858:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
  406868:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
  406878:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
  406888:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
  406898:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
  4068a8:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
  4068b8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
  4068c8:	0060e27b 00c08c6b                       {.`.k...

004068d0 <init_jk>:
  4068d0:	00000002 00000003 00000004 00000006     ................

004068e0 <PIo2>:
  4068e0:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
  4068f0:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
  406900:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
  406910:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

00406920 <atanlo>:
  406920:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

00406930 <atanhi>:
  406930:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?
  406940:	00000043                                C...

00406944 <_global_impure_ptr>:
  406944:	20400020                                 .@ 

00406948 <_init>:
  406948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40694a:	bf00      	nop
  40694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40694e:	bc08      	pop	{r3}
  406950:	469e      	mov	lr, r3
  406952:	4770      	bx	lr

00406954 <__init_array_start>:
  406954:	0040638d 	.word	0x0040638d

00406958 <__frame_dummy_init_array_entry>:
  406958:	00400165                                e.@.

0040695c <_fini>:
  40695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40695e:	bf00      	nop
  406960:	bcf8      	pop	{r3, r4, r5, r6, r7}
  406962:	bc08      	pop	{r3}
  406964:	469e      	mov	lr, r3
  406966:	4770      	bx	lr

00406968 <__fini_array_start>:
  406968:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <__fdlib_version>:
20400018:	0001 0000 0000 0000                         ........

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
20400054:	6940 0040 0000 0000 0000 0000 0000 0000     @i@.............
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <_impure_ptr>:
20400448:	0020 2040                                    .@ 
