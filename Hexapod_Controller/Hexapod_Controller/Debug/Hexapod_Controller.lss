
Hexapod_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000083b8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004083b8  004083b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000088c  20400000  004083c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000bbdc  2040088c  00408c4c  0002088c  2**2
                  ALLOC
  4 .stack        00002000  2040c468  00414828  0002088c  2**0
                  ALLOC
  5 .heap         00000200  2040e468  00416828  0002088c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002088c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000208ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   000142da  00000000  00000000  00020913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003591  00000000  00000000  00034bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a564  00000000  00000000  0003817e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f50  00000000  00000000  000426e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fe0  00000000  00000000  00043632  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c8e4  00000000  00000000  00044612  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000132ea  00000000  00000000  00050ef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000823b5  00000000  00000000  000641e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002d78  00000000  00000000  000e6598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	2040e468 	.word	0x2040e468
  400004:	00402899 	.word	0x00402899
  400008:	00402895 	.word	0x00402895
  40000c:	00402895 	.word	0x00402895
  400010:	00402895 	.word	0x00402895
  400014:	00402895 	.word	0x00402895
  400018:	00402895 	.word	0x00402895
	...
  40002c:	004005e1 	.word	0x004005e1
  400030:	00402895 	.word	0x00402895
  400034:	00000000 	.word	0x00000000
  400038:	00400681 	.word	0x00400681
  40003c:	004006e9 	.word	0x004006e9
  400040:	00402895 	.word	0x00402895
  400044:	00402895 	.word	0x00402895
  400048:	00402895 	.word	0x00402895
  40004c:	00402895 	.word	0x00402895
  400050:	00402895 	.word	0x00402895
  400054:	00402895 	.word	0x00402895
  400058:	00402895 	.word	0x00402895
  40005c:	00402895 	.word	0x00402895
  400060:	00402895 	.word	0x00402895
  400064:	00000000 	.word	0x00000000
  400068:	0040332d 	.word	0x0040332d
  40006c:	00400399 	.word	0x00400399
  400070:	00000000 	.word	0x00000000
  400074:	00402895 	.word	0x00402895
  400078:	00402895 	.word	0x00402895
  40007c:	00402895 	.word	0x00402895
  400080:	004003ad 	.word	0x004003ad
  400084:	00000000 	.word	0x00000000
  400088:	00402895 	.word	0x00402895
  40008c:	00402895 	.word	0x00402895
  400090:	00402895 	.word	0x00402895
  400094:	00402895 	.word	0x00402895
  400098:	00402895 	.word	0x00402895
  40009c:	00402895 	.word	0x00402895
  4000a0:	00402895 	.word	0x00402895
  4000a4:	00402895 	.word	0x00402895
	...
  4000b4:	004022d9 	.word	0x004022d9
  4000b8:	00000000 	.word	0x00000000
  4000bc:	00402895 	.word	0x00402895
  4000c0:	00402895 	.word	0x00402895
  4000c4:	00402895 	.word	0x00402895
  4000c8:	00402895 	.word	0x00402895
	...
  4000e0:	004022ed 	.word	0x004022ed
  4000e4:	00402895 	.word	0x00402895
  4000e8:	00402895 	.word	0x00402895
  4000ec:	00402895 	.word	0x00402895
  4000f0:	00402895 	.word	0x00402895
  4000f4:	00402895 	.word	0x00402895
  4000f8:	00402895 	.word	0x00402895
	...
  400108:	00402895 	.word	0x00402895
  40010c:	00402895 	.word	0x00402895
  400110:	00402895 	.word	0x00402895
	...
  400120:	00402895 	.word	0x00402895
  400124:	00402895 	.word	0x00402895
  400128:	00402895 	.word	0x00402895
  40012c:	00402895 	.word	0x00402895
  400130:	00402895 	.word	0x00402895
	...
  40013c:	00402895 	.word	0x00402895

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040088c 	.word	0x2040088c
  40015c:	00000000 	.word	0x00000000
  400160:	004083c0 	.word	0x004083c0

00400164 <frame_dummy>:
  400164:	4b08      	ldr	r3, [pc, #32]	; (400188 <frame_dummy+0x24>)
  400166:	b510      	push	{r4, lr}
  400168:	b11b      	cbz	r3, 400172 <frame_dummy+0xe>
  40016a:	4908      	ldr	r1, [pc, #32]	; (40018c <frame_dummy+0x28>)
  40016c:	4808      	ldr	r0, [pc, #32]	; (400190 <frame_dummy+0x2c>)
  40016e:	f3af 8000 	nop.w
  400172:	4808      	ldr	r0, [pc, #32]	; (400194 <frame_dummy+0x30>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b903      	cbnz	r3, 40017a <frame_dummy+0x16>
  400178:	bd10      	pop	{r4, pc}
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <frame_dummy+0x34>)
  40017c:	2b00      	cmp	r3, #0
  40017e:	d0fb      	beq.n	400178 <frame_dummy+0x14>
  400180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400184:	4718      	bx	r3
  400186:	bf00      	nop
  400188:	00000000 	.word	0x00000000
  40018c:	20400890 	.word	0x20400890
  400190:	004083c0 	.word	0x004083c0
  400194:	004083c0 	.word	0x004083c0
  400198:	00000000 	.word	0x00000000

0040019c <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  40019c:	b510      	push	{r4, lr}
  40019e:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4001a0:	4b10      	ldr	r3, [pc, #64]	; (4001e4 <spi_master_init+0x48>)
  4001a2:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4001a4:	2380      	movs	r3, #128	; 0x80
  4001a6:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4001a8:	6863      	ldr	r3, [r4, #4]
  4001aa:	f043 0301 	orr.w	r3, r3, #1
  4001ae:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4001b0:	6863      	ldr	r3, [r4, #4]
  4001b2:	f043 0310 	orr.w	r3, r3, #16
  4001b6:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4001b8:	6863      	ldr	r3, [r4, #4]
  4001ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4001be:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4001c0:	2100      	movs	r1, #0
  4001c2:	4620      	mov	r0, r4
  4001c4:	4b08      	ldr	r3, [pc, #32]	; (4001e8 <spi_master_init+0x4c>)
  4001c6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4001c8:	6863      	ldr	r3, [r4, #4]
  4001ca:	f023 0302 	bic.w	r3, r3, #2
  4001ce:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4001d0:	6863      	ldr	r3, [r4, #4]
  4001d2:	f023 0304 	bic.w	r3, r3, #4
  4001d6:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4001d8:	2100      	movs	r1, #0
  4001da:	4620      	mov	r0, r4
  4001dc:	4b03      	ldr	r3, [pc, #12]	; (4001ec <spi_master_init+0x50>)
  4001de:	4798      	blx	r3
  4001e0:	bd10      	pop	{r4, pc}
  4001e2:	bf00      	nop
  4001e4:	004003c1 	.word	0x004003c1
  4001e8:	004003ed 	.word	0x004003ed
  4001ec:	00400405 	.word	0x00400405

004001f0 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  4001f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4001f4:	4604      	mov	r4, r0
  4001f6:	460d      	mov	r5, r1
  4001f8:	4616      	mov	r6, r2
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  4001fa:	4915      	ldr	r1, [pc, #84]	; (400250 <spi_master_setup_device+0x60>)
  4001fc:	4618      	mov	r0, r3
  4001fe:	4b15      	ldr	r3, [pc, #84]	; (400254 <spi_master_setup_device+0x64>)
  400200:	4798      	blx	r3
  400202:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400204:	2300      	movs	r3, #0
  400206:	461a      	mov	r2, r3
  400208:	6829      	ldr	r1, [r5, #0]
  40020a:	4620      	mov	r0, r4
  40020c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 40026c <spi_master_setup_device+0x7c>
  400210:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400212:	2208      	movs	r2, #8
  400214:	6829      	ldr	r1, [r5, #0]
  400216:	4620      	mov	r0, r4
  400218:	4b0f      	ldr	r3, [pc, #60]	; (400258 <spi_master_setup_device+0x68>)
  40021a:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  40021c:	b2fa      	uxtb	r2, r7
  40021e:	6829      	ldr	r1, [r5, #0]
  400220:	4620      	mov	r0, r4
  400222:	4b0e      	ldr	r3, [pc, #56]	; (40025c <spi_master_setup_device+0x6c>)
  400224:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400226:	2208      	movs	r2, #8
  400228:	6829      	ldr	r1, [r5, #0]
  40022a:	4620      	mov	r0, r4
  40022c:	4b0c      	ldr	r3, [pc, #48]	; (400260 <spi_master_setup_device+0x70>)
  40022e:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400230:	0872      	lsrs	r2, r6, #1
  400232:	6829      	ldr	r1, [r5, #0]
  400234:	4620      	mov	r0, r4
  400236:	4b0b      	ldr	r3, [pc, #44]	; (400264 <spi_master_setup_device+0x74>)
  400238:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  40023a:	f086 0201 	eor.w	r2, r6, #1
  40023e:	f002 0201 	and.w	r2, r2, #1
  400242:	6829      	ldr	r1, [r5, #0]
  400244:	4620      	mov	r0, r4
  400246:	4b08      	ldr	r3, [pc, #32]	; (400268 <spi_master_setup_device+0x78>)
  400248:	4798      	blx	r3
  40024a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40024e:	bf00      	nop
  400250:	11e1a300 	.word	0x11e1a300
  400254:	004004b1 	.word	0x004004b1
  400258:	0040049d 	.word	0x0040049d
  40025c:	004004c9 	.word	0x004004c9
  400260:	00400459 	.word	0x00400459
  400264:	00400419 	.word	0x00400419
  400268:	00400439 	.word	0x00400439
  40026c:	004004f5 	.word	0x004004f5

00400270 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400270:	b508      	push	{r3, lr}
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400272:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400274:	f013 0f04 	tst.w	r3, #4
  400278:	d005      	beq.n	400286 <spi_select_device+0x16>
		if (device->id < MAX_NUM_WITH_DECODER) {
  40027a:	6809      	ldr	r1, [r1, #0]
  40027c:	290f      	cmp	r1, #15
  40027e:	d80a      	bhi.n	400296 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400280:	4b05      	ldr	r3, [pc, #20]	; (400298 <spi_select_device+0x28>)
  400282:	4798      	blx	r3
  400284:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400286:	680b      	ldr	r3, [r1, #0]
  400288:	2b03      	cmp	r3, #3
  40028a:	d804      	bhi.n	400296 <spi_select_device+0x26>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  40028c:	2101      	movs	r1, #1
  40028e:	4099      	lsls	r1, r3
  400290:	43c9      	mvns	r1, r1
  400292:	4b01      	ldr	r3, [pc, #4]	; (400298 <spi_select_device+0x28>)
  400294:	4798      	blx	r3
  400296:	bd08      	pop	{r3, pc}
  400298:	004003ed 	.word	0x004003ed

0040029c <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  40029c:	b510      	push	{r4, lr}
  40029e:	4604      	mov	r4, r0
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4002a0:	6923      	ldr	r3, [r4, #16]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  4002a2:	f413 7f00 	tst.w	r3, #512	; 0x200
  4002a6:	d0fb      	beq.n	4002a0 <spi_deselect_device+0x4>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  4002a8:	210f      	movs	r1, #15
  4002aa:	4620      	mov	r0, r4
  4002ac:	4b02      	ldr	r3, [pc, #8]	; (4002b8 <spi_deselect_device+0x1c>)
  4002ae:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  4002b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4002b4:	6023      	str	r3, [r4, #0]
  4002b6:	bd10      	pop	{r4, pc}
  4002b8:	004003ed 	.word	0x004003ed

004002bc <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4002bc:	b922      	cbnz	r2, 4002c8 <spi_write_packet+0xc>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4002be:	2000      	movs	r0, #0
}
  4002c0:	4770      	bx	lr
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  4002c2:	3b01      	subs	r3, #1
  4002c4:	d105      	bne.n	4002d2 <spi_write_packet+0x16>
  4002c6:	e00f      	b.n	4002e8 <spi_write_packet+0x2c>
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_write_packet(Spi *p_spi, const uint8_t *data,
		size_t len)
{
  4002c8:	b410      	push	{r4}
  4002ca:	4614      	mov	r4, r2
  4002cc:	3901      	subs	r1, #1
  4002ce:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4002d2:	6902      	ldr	r2, [r0, #16]
	uint32_t i = 0;
	uint8_t val;

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  4002d4:	f012 0f02 	tst.w	r2, #2
  4002d8:	d0f3      	beq.n	4002c2 <spi_write_packet+0x6>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4002da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
  4002de:	60c3      	str	r3, [r0, #12]
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4002e0:	3c01      	subs	r4, #1
  4002e2:	d1f4      	bne.n	4002ce <spi_write_packet+0x12>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4002e4:	2000      	movs	r0, #0
  4002e6:	e001      	b.n	4002ec <spi_write_packet+0x30>

	while (len) {
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  4002e8:	f06f 0002 	mvn.w	r0, #2
		i++;
		len--;
	}

	return STATUS_OK;
}
  4002ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002f0:	4770      	bx	lr
  4002f2:	bf00      	nop

004002f4 <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4002f4:	b922      	cbnz	r2, 400300 <spi_read_packet+0xc>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  4002f6:	2000      	movs	r0, #0
}
  4002f8:	4770      	bx	lr

	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
  4002fa:	3b01      	subs	r3, #1
  4002fc:	d108      	bne.n	400310 <spi_read_packet+0x1c>
  4002fe:	e01c      	b.n	40033a <spi_read_packet+0x46>
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  400300:	b470      	push	{r4, r5, r6}
  400302:	4615      	mov	r5, r2
  400304:	3901      	subs	r1, #1
  400306:	26ff      	movs	r6, #255	; 0xff
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  400308:	f240 2401 	movw	r4, #513	; 0x201
 * \param len       Length of data to be read.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
status_code_t spi_read_packet(Spi *p_spi, uint8_t *data, size_t len)
{
  40030c:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400310:	6902      	ldr	r2, [r0, #16]
	uint32_t i = 0;

	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
  400312:	f012 0f02 	tst.w	r2, #2
  400316:	d0f0      	beq.n	4002fa <spi_read_packet+0x6>
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400318:	60c6      	str	r6, [r0, #12]
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  40031a:	f643 2399 	movw	r3, #15001	; 0x3a99
  40031e:	e001      	b.n	400324 <spi_read_packet+0x30>
			if (!timeout--) {
  400320:	3b01      	subs	r3, #1
  400322:	d00d      	beq.n	400340 <spi_read_packet+0x4c>
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400324:	6902      	ldr	r2, [r0, #16]
			}
		}
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
  400326:	ea34 0202 	bics.w	r2, r4, r2
  40032a:	d1f9      	bne.n	400320 <spi_read_packet+0x2c>
 * \return The data byte
 *
 */
static inline uint16_t spi_get(Spi *p_spi)
{
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  40032c:	6883      	ldr	r3, [r0, #8]
				return ERR_TIMEOUT;
			}
		}
		spi_read_single(p_spi, &val);

		data[i] = val;
  40032e:	f801 3f01 	strb.w	r3, [r1, #1]!
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  400332:	3d01      	subs	r5, #1
  400334:	d1ea      	bne.n	40030c <spi_read_packet+0x18>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  400336:	2000      	movs	r0, #0
  400338:	e004      	b.n	400344 <spi_read_packet+0x50>
	while (len) {
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_tx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  40033a:	f06f 0002 	mvn.w	r0, #2
  40033e:	e001      	b.n	400344 <spi_read_packet+0x50>
		spi_write_single(p_spi, CONFIG_SPI_MASTER_DUMMY);
		
		timeout = SPI_TIMEOUT;
		while (!spi_is_rx_ready(p_spi)) {
			if (!timeout--) {
				return ERR_TIMEOUT;
  400340:	f06f 0002 	mvn.w	r0, #2
		i++;
		len--;
	}

	return STATUS_OK;
}
  400344:	bc70      	pop	{r4, r5, r6}
  400346:	4770      	bx	lr

00400348 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40034c:	4604      	mov	r4, r0
  40034e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400350:	4b0e      	ldr	r3, [pc, #56]	; (40038c <pio_handler_process+0x44>)
  400352:	4798      	blx	r3
  400354:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400356:	4620      	mov	r0, r4
  400358:	4b0d      	ldr	r3, [pc, #52]	; (400390 <pio_handler_process+0x48>)
  40035a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40035c:	4005      	ands	r5, r0
  40035e:	d013      	beq.n	400388 <pio_handler_process+0x40>
  400360:	4c0c      	ldr	r4, [pc, #48]	; (400394 <pio_handler_process+0x4c>)
  400362:	f104 07e0 	add.w	r7, r4, #224	; 0xe0
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400366:	6823      	ldr	r3, [r4, #0]
  400368:	4543      	cmp	r3, r8
  40036a:	d108      	bne.n	40037e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40036c:	6861      	ldr	r1, [r4, #4]
  40036e:	4229      	tst	r1, r5
  400370:	d005      	beq.n	40037e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400372:	68e3      	ldr	r3, [r4, #12]
  400374:	4640      	mov	r0, r8
  400376:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400378:	6863      	ldr	r3, [r4, #4]
  40037a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40037e:	42bc      	cmp	r4, r7
  400380:	d002      	beq.n	400388 <pio_handler_process+0x40>
  400382:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400384:	2d00      	cmp	r5, #0
  400386:	d1ee      	bne.n	400366 <pio_handler_process+0x1e>
  400388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40038c:	00402455 	.word	0x00402455
  400390:	00402459 	.word	0x00402459
  400394:	204008a8 	.word	0x204008a8

00400398 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400398:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40039a:	210b      	movs	r1, #11
  40039c:	4801      	ldr	r0, [pc, #4]	; (4003a4 <PIOB_Handler+0xc>)
  40039e:	4b02      	ldr	r3, [pc, #8]	; (4003a8 <PIOB_Handler+0x10>)
  4003a0:	4798      	blx	r3
  4003a2:	bd08      	pop	{r3, pc}
  4003a4:	400e1000 	.word	0x400e1000
  4003a8:	00400349 	.word	0x00400349

004003ac <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4003ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4003ae:	2110      	movs	r1, #16
  4003b0:	4801      	ldr	r0, [pc, #4]	; (4003b8 <PIOD_Handler+0xc>)
  4003b2:	4b02      	ldr	r3, [pc, #8]	; (4003bc <PIOD_Handler+0x10>)
  4003b4:	4798      	blx	r3
  4003b6:	bd08      	pop	{r3, pc}
  4003b8:	400e1400 	.word	0x400e1400
  4003bc:	00400349 	.word	0x00400349

004003c0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4003c0:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4003c2:	4b07      	ldr	r3, [pc, #28]	; (4003e0 <spi_enable_clock+0x20>)
  4003c4:	4298      	cmp	r0, r3
  4003c6:	d103      	bne.n	4003d0 <spi_enable_clock+0x10>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4003c8:	2015      	movs	r0, #21
  4003ca:	4b06      	ldr	r3, [pc, #24]	; (4003e4 <spi_enable_clock+0x24>)
  4003cc:	4798      	blx	r3
  4003ce:	bd08      	pop	{r3, pc}
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4003d0:	4b05      	ldr	r3, [pc, #20]	; (4003e8 <spi_enable_clock+0x28>)
  4003d2:	4298      	cmp	r0, r3
  4003d4:	d102      	bne.n	4003dc <spi_enable_clock+0x1c>
  4003d6:	202a      	movs	r0, #42	; 0x2a
  4003d8:	4b02      	ldr	r3, [pc, #8]	; (4003e4 <spi_enable_clock+0x24>)
  4003da:	4798      	blx	r3
  4003dc:	bd08      	pop	{r3, pc}
  4003de:	bf00      	nop
  4003e0:	40008000 	.word	0x40008000
  4003e4:	00402585 	.word	0x00402585
  4003e8:	40058000 	.word	0x40058000

004003ec <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4003ec:	6843      	ldr	r3, [r0, #4]
  4003ee:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4003f2:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4003f4:	6843      	ldr	r3, [r0, #4]
  4003f6:	0409      	lsls	r1, r1, #16
  4003f8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4003fc:	430b      	orrs	r3, r1
  4003fe:	6043      	str	r3, [r0, #4]
  400400:	4770      	bx	lr
  400402:	bf00      	nop

00400404 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  400404:	6843      	ldr	r3, [r0, #4]
  400406:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  40040a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40040c:	6843      	ldr	r3, [r0, #4]
  40040e:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  400412:	6041      	str	r1, [r0, #4]
  400414:	4770      	bx	lr
  400416:	bf00      	nop

00400418 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400418:	b132      	cbz	r2, 400428 <spi_set_clock_polarity+0x10>
  40041a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40041e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400420:	f043 0301 	orr.w	r3, r3, #1
  400424:	6303      	str	r3, [r0, #48]	; 0x30
  400426:	4770      	bx	lr
  400428:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40042c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40042e:	f023 0301 	bic.w	r3, r3, #1
  400432:	6303      	str	r3, [r0, #48]	; 0x30
  400434:	4770      	bx	lr
  400436:	bf00      	nop

00400438 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400438:	b132      	cbz	r2, 400448 <spi_set_clock_phase+0x10>
  40043a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40043e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400440:	f043 0302 	orr.w	r3, r3, #2
  400444:	6303      	str	r3, [r0, #48]	; 0x30
  400446:	4770      	bx	lr
  400448:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40044c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40044e:	f023 0302 	bic.w	r3, r3, #2
  400452:	6303      	str	r3, [r0, #48]	; 0x30
  400454:	4770      	bx	lr
  400456:	bf00      	nop

00400458 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  400458:	2a04      	cmp	r2, #4
  40045a:	d10a      	bne.n	400472 <spi_configure_cs_behavior+0x1a>
  40045c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400460:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400462:	f023 0308 	bic.w	r3, r3, #8
  400466:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400468:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40046a:	f043 0304 	orr.w	r3, r3, #4
  40046e:	6303      	str	r3, [r0, #48]	; 0x30
  400470:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400472:	b952      	cbnz	r2, 40048a <spi_configure_cs_behavior+0x32>
  400474:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400478:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40047a:	f023 0308 	bic.w	r3, r3, #8
  40047e:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400480:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400482:	f023 0304 	bic.w	r3, r3, #4
  400486:	6303      	str	r3, [r0, #48]	; 0x30
  400488:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40048a:	2a08      	cmp	r2, #8
  40048c:	d105      	bne.n	40049a <spi_configure_cs_behavior+0x42>
  40048e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400492:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400494:	f043 0308 	orr.w	r3, r3, #8
  400498:	6303      	str	r3, [r0, #48]	; 0x30
  40049a:	4770      	bx	lr

0040049c <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  40049c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4004a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4004a6:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4004a8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004aa:	431a      	orrs	r2, r3
  4004ac:	630a      	str	r2, [r1, #48]	; 0x30
  4004ae:	4770      	bx	lr

004004b0 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4004b0:	1e43      	subs	r3, r0, #1
  4004b2:	4419      	add	r1, r3
  4004b4:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4004b8:	1e43      	subs	r3, r0, #1
  4004ba:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4004bc:	bf94      	ite	ls
  4004be:	b200      	sxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
  4004c0:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	return baud_div;
}
  4004c4:	4770      	bx	lr
  4004c6:	bf00      	nop

004004c8 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4004c8:	b16a      	cbz	r2, 4004e6 <spi_set_baudrate_div+0x1e>
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4004ca:	b410      	push	{r4}
  4004cc:	4614      	mov	r4, r2
  4004ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4004d2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4004d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4004d8:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4004da:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4004dc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4004e0:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4004e2:	2000      	movs	r0, #0
  4004e4:	e002      	b.n	4004ec <spi_set_baudrate_div+0x24>
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
        return -1;
  4004e6:	f04f 30ff 	mov.w	r0, #4294967295
  4004ea:	4770      	bx	lr

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
    return 0;
}
  4004ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004f0:	4770      	bx	lr
  4004f2:	bf00      	nop

004004f4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  4004f4:	b410      	push	{r4}
  4004f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  4004fa:	6b08      	ldr	r0, [r1, #48]	; 0x30
  4004fc:	b280      	uxth	r0, r0
  4004fe:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  400500:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  400502:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  400506:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  40050a:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  40050c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400510:	4770      	bx	lr
  400512:	bf00      	nop

00400514 <supc_switch_sclk_to_32kxtal>:
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void supc_switch_sclk_to_32kxtal(Supc *p_supc, uint32_t ul_bypass)
{
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  400514:	2901      	cmp	r1, #1
  400516:	d104      	bne.n	400522 <supc_switch_sclk_to_32kxtal+0xe>
		p_supc->SUPC_MR |= SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS;
  400518:	6882      	ldr	r2, [r0, #8]
  40051a:	4b06      	ldr	r3, [pc, #24]	; (400534 <supc_switch_sclk_to_32kxtal+0x20>)
  40051c:	4313      	orrs	r3, r2
  40051e:	6083      	str	r3, [r0, #8]
  400520:	e003      	b.n	40052a <supc_switch_sclk_to_32kxtal+0x16>
	} else {
		p_supc->SUPC_MR &= ~(SUPC_MR_KEY_PASSWD | SUPC_MR_OSCBYPASS);
  400522:	6882      	ldr	r2, [r0, #8]
  400524:	4b04      	ldr	r3, [pc, #16]	; (400538 <supc_switch_sclk_to_32kxtal+0x24>)
  400526:	4013      	ands	r3, r2
  400528:	6083      	str	r3, [r0, #8]
	}

	p_supc->SUPC_CR |= SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40052a:	6802      	ldr	r2, [r0, #0]
  40052c:	4b03      	ldr	r3, [pc, #12]	; (40053c <supc_switch_sclk_to_32kxtal+0x28>)
  40052e:	4313      	orrs	r3, r2
  400530:	6003      	str	r3, [r0, #0]
  400532:	4770      	bx	lr
  400534:	a5100000 	.word	0xa5100000
  400538:	5aefffff 	.word	0x5aefffff
  40053c:	a5000008 	.word	0xa5000008

00400540 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  400540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400544:	6043      	str	r3, [r0, #4]
  400546:	4770      	bx	lr

00400548 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400548:	4b0d      	ldr	r3, [pc, #52]	; (400580 <prvTaskExitError+0x38>)
  40054a:	681b      	ldr	r3, [r3, #0]
  40054c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400550:	d00a      	beq.n	400568 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400552:	f04f 0380 	mov.w	r3, #128	; 0x80
  400556:	b672      	cpsid	i
  400558:	f383 8811 	msr	BASEPRI, r3
  40055c:	f3bf 8f6f 	isb	sy
  400560:	f3bf 8f4f 	dsb	sy
  400564:	b662      	cpsie	i
  400566:	e7fe      	b.n	400566 <prvTaskExitError+0x1e>
  400568:	f04f 0380 	mov.w	r3, #128	; 0x80
  40056c:	b672      	cpsid	i
  40056e:	f383 8811 	msr	BASEPRI, r3
  400572:	f3bf 8f6f 	isb	sy
  400576:	f3bf 8f4f 	dsb	sy
  40057a:	b662      	cpsie	i
  40057c:	e7fe      	b.n	40057c <prvTaskExitError+0x34>
  40057e:	bf00      	nop
  400580:	2040000c 	.word	0x2040000c

00400584 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400584:	4806      	ldr	r0, [pc, #24]	; (4005a0 <prvPortStartFirstTask+0x1c>)
  400586:	6800      	ldr	r0, [r0, #0]
  400588:	6800      	ldr	r0, [r0, #0]
  40058a:	f380 8808 	msr	MSP, r0
  40058e:	b662      	cpsie	i
  400590:	b661      	cpsie	f
  400592:	f3bf 8f4f 	dsb	sy
  400596:	f3bf 8f6f 	isb	sy
  40059a:	df00      	svc	0
  40059c:	bf00      	nop
  40059e:	0000      	.short	0x0000
  4005a0:	e000ed08 	.word	0xe000ed08

004005a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4005a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4005b4 <vPortEnableVFP+0x10>
  4005a8:	6801      	ldr	r1, [r0, #0]
  4005aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4005ae:	6001      	str	r1, [r0, #0]
  4005b0:	4770      	bx	lr
  4005b2:	0000      	.short	0x0000
  4005b4:	e000ed88 	.word	0xe000ed88

004005b8 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4005b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4005bc:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4005c0:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4005c4:	4b05      	ldr	r3, [pc, #20]	; (4005dc <pxPortInitialiseStack+0x24>)
  4005c6:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4005ca:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4005ce:	f06f 0302 	mvn.w	r3, #2
  4005d2:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
  4005d6:	3844      	subs	r0, #68	; 0x44
  4005d8:	4770      	bx	lr
  4005da:	bf00      	nop
  4005dc:	00400549 	.word	0x00400549

004005e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  4005e0:	4b06      	ldr	r3, [pc, #24]	; (4005fc <pxCurrentTCBConst2>)
  4005e2:	6819      	ldr	r1, [r3, #0]
  4005e4:	6808      	ldr	r0, [r1, #0]
  4005e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4005ea:	f380 8809 	msr	PSP, r0
  4005ee:	f3bf 8f6f 	isb	sy
  4005f2:	f04f 0000 	mov.w	r0, #0
  4005f6:	f380 8811 	msr	BASEPRI, r0
  4005fa:	4770      	bx	lr

004005fc <pxCurrentTCBConst2>:
  4005fc:	2040c2b0 	.word	0x2040c2b0
  400600:	4770      	bx	lr
  400602:	bf00      	nop

00400604 <vPortEnterCritical>:
  400604:	f04f 0380 	mov.w	r3, #128	; 0x80
  400608:	b672      	cpsid	i
  40060a:	f383 8811 	msr	BASEPRI, r3
  40060e:	f3bf 8f6f 	isb	sy
  400612:	f3bf 8f4f 	dsb	sy
  400616:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  400618:	4a0b      	ldr	r2, [pc, #44]	; (400648 <vPortEnterCritical+0x44>)
  40061a:	6813      	ldr	r3, [r2, #0]
  40061c:	3301      	adds	r3, #1
  40061e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
  400620:	2b01      	cmp	r3, #1
  400622:	d10f      	bne.n	400644 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400624:	4b09      	ldr	r3, [pc, #36]	; (40064c <vPortEnterCritical+0x48>)
  400626:	681b      	ldr	r3, [r3, #0]
  400628:	f013 0fff 	tst.w	r3, #255	; 0xff
  40062c:	d00a      	beq.n	400644 <vPortEnterCritical+0x40>
  40062e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400632:	b672      	cpsid	i
  400634:	f383 8811 	msr	BASEPRI, r3
  400638:	f3bf 8f6f 	isb	sy
  40063c:	f3bf 8f4f 	dsb	sy
  400640:	b662      	cpsie	i
  400642:	e7fe      	b.n	400642 <vPortEnterCritical+0x3e>
  400644:	4770      	bx	lr
  400646:	bf00      	nop
  400648:	2040000c 	.word	0x2040000c
  40064c:	e000ed04 	.word	0xe000ed04

00400650 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
  400650:	4b0a      	ldr	r3, [pc, #40]	; (40067c <vPortExitCritical+0x2c>)
  400652:	681b      	ldr	r3, [r3, #0]
  400654:	b953      	cbnz	r3, 40066c <vPortExitCritical+0x1c>
  400656:	f04f 0380 	mov.w	r3, #128	; 0x80
  40065a:	b672      	cpsid	i
  40065c:	f383 8811 	msr	BASEPRI, r3
  400660:	f3bf 8f6f 	isb	sy
  400664:	f3bf 8f4f 	dsb	sy
  400668:	b662      	cpsie	i
  40066a:	e7fe      	b.n	40066a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40066c:	3b01      	subs	r3, #1
  40066e:	4a03      	ldr	r2, [pc, #12]	; (40067c <vPortExitCritical+0x2c>)
  400670:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400672:	b90b      	cbnz	r3, 400678 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400674:	f383 8811 	msr	BASEPRI, r3
  400678:	4770      	bx	lr
  40067a:	bf00      	nop
  40067c:	2040000c 	.word	0x2040000c

00400680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  400680:	f3ef 8009 	mrs	r0, PSP
  400684:	f3bf 8f6f 	isb	sy
  400688:	4b15      	ldr	r3, [pc, #84]	; (4006e0 <pxCurrentTCBConst>)
  40068a:	681a      	ldr	r2, [r3, #0]
  40068c:	f01e 0f10 	tst.w	lr, #16
  400690:	bf08      	it	eq
  400692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40069a:	6010      	str	r0, [r2, #0]
  40069c:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4006a0:	f04f 0080 	mov.w	r0, #128	; 0x80
  4006a4:	b672      	cpsid	i
  4006a6:	f380 8811 	msr	BASEPRI, r0
  4006aa:	f3bf 8f4f 	dsb	sy
  4006ae:	f3bf 8f6f 	isb	sy
  4006b2:	b662      	cpsie	i
  4006b4:	f001 f92e 	bl	401914 <vTaskSwitchContext>
  4006b8:	f04f 0000 	mov.w	r0, #0
  4006bc:	f380 8811 	msr	BASEPRI, r0
  4006c0:	bc08      	pop	{r3}
  4006c2:	6819      	ldr	r1, [r3, #0]
  4006c4:	6808      	ldr	r0, [r1, #0]
  4006c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4006ca:	f01e 0f10 	tst.w	lr, #16
  4006ce:	bf08      	it	eq
  4006d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4006d4:	f380 8809 	msr	PSP, r0
  4006d8:	f3bf 8f6f 	isb	sy
  4006dc:	4770      	bx	lr
  4006de:	bf00      	nop

004006e0 <pxCurrentTCBConst>:
  4006e0:	2040c2b0 	.word	0x2040c2b0
  4006e4:	4770      	bx	lr
  4006e6:	bf00      	nop

004006e8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  4006e8:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  4006ea:	f3ef 8311 	mrs	r3, BASEPRI
  4006ee:	f04f 0280 	mov.w	r2, #128	; 0x80
  4006f2:	b672      	cpsid	i
  4006f4:	f382 8811 	msr	BASEPRI, r2
  4006f8:	f3bf 8f6f 	isb	sy
  4006fc:	f3bf 8f4f 	dsb	sy
  400700:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  400702:	4b05      	ldr	r3, [pc, #20]	; (400718 <SysTick_Handler+0x30>)
  400704:	4798      	blx	r3
  400706:	b118      	cbz	r0, 400710 <SysTick_Handler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40070c:	4b03      	ldr	r3, [pc, #12]	; (40071c <SysTick_Handler+0x34>)
  40070e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400710:	2300      	movs	r3, #0
  400712:	f383 8811 	msr	BASEPRI, r3
  400716:	bd08      	pop	{r3, pc}
  400718:	004015a9 	.word	0x004015a9
  40071c:	e000ed04 	.word	0xe000ed04

00400720 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400720:	4a03      	ldr	r2, [pc, #12]	; (400730 <vPortSetupTimerInterrupt+0x10>)
  400722:	4b04      	ldr	r3, [pc, #16]	; (400734 <vPortSetupTimerInterrupt+0x14>)
  400724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400726:	2207      	movs	r2, #7
  400728:	3b04      	subs	r3, #4
  40072a:	601a      	str	r2, [r3, #0]
  40072c:	4770      	bx	lr
  40072e:	bf00      	nop
  400730:	000493df 	.word	0x000493df
  400734:	e000e014 	.word	0xe000e014

00400738 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  400738:	b500      	push	{lr}
  40073a:	b083      	sub	sp, #12
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  40073c:	4b25      	ldr	r3, [pc, #148]	; (4007d4 <xPortStartScheduler+0x9c>)
  40073e:	781a      	ldrb	r2, [r3, #0]
  400740:	b2d2      	uxtb	r2, r2
  400742:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400744:	22ff      	movs	r2, #255	; 0xff
  400746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  400748:	781b      	ldrb	r3, [r3, #0]
  40074a:	b2db      	uxtb	r3, r3
  40074c:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  400750:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400754:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400758:	4a1f      	ldr	r2, [pc, #124]	; (4007d8 <xPortStartScheduler+0xa0>)
  40075a:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  40075c:	2207      	movs	r2, #7
  40075e:	4b1f      	ldr	r3, [pc, #124]	; (4007dc <xPortStartScheduler+0xa4>)
  400760:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  400762:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400766:	f013 0f80 	tst.w	r3, #128	; 0x80
  40076a:	d010      	beq.n	40078e <xPortStartScheduler+0x56>
  40076c:	2206      	movs	r2, #6
  40076e:	e000      	b.n	400772 <xPortStartScheduler+0x3a>
  400770:	460a      	mov	r2, r1
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  400772:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400776:	005b      	lsls	r3, r3, #1
  400778:	b2db      	uxtb	r3, r3
  40077a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40077e:	f89d 3003 	ldrb.w	r3, [sp, #3]
  400782:	1e51      	subs	r1, r2, #1
  400784:	f013 0f80 	tst.w	r3, #128	; 0x80
  400788:	d1f2      	bne.n	400770 <xPortStartScheduler+0x38>
  40078a:	4b14      	ldr	r3, [pc, #80]	; (4007dc <xPortStartScheduler+0xa4>)
  40078c:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  40078e:	4a13      	ldr	r2, [pc, #76]	; (4007dc <xPortStartScheduler+0xa4>)
  400790:	6813      	ldr	r3, [r2, #0]
  400792:	021b      	lsls	r3, r3, #8
  400794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400798:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40079a:	9b01      	ldr	r3, [sp, #4]
  40079c:	b2db      	uxtb	r3, r3
  40079e:	4a0d      	ldr	r2, [pc, #52]	; (4007d4 <xPortStartScheduler+0x9c>)
  4007a0:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4007a2:	4b0f      	ldr	r3, [pc, #60]	; (4007e0 <xPortStartScheduler+0xa8>)
  4007a4:	681a      	ldr	r2, [r3, #0]
  4007a6:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4007aa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4007ac:	681a      	ldr	r2, [r3, #0]
  4007ae:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4007b2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4007b4:	4b0b      	ldr	r3, [pc, #44]	; (4007e4 <xPortStartScheduler+0xac>)
  4007b6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4007b8:	2200      	movs	r2, #0
  4007ba:	4b0b      	ldr	r3, [pc, #44]	; (4007e8 <xPortStartScheduler+0xb0>)
  4007bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
  4007be:	4b0b      	ldr	r3, [pc, #44]	; (4007ec <xPortStartScheduler+0xb4>)
  4007c0:	4798      	blx	r3

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4007c2:	4a0b      	ldr	r2, [pc, #44]	; (4007f0 <xPortStartScheduler+0xb8>)
  4007c4:	6813      	ldr	r3, [r2, #0]
  4007c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4007ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4007cc:	4b09      	ldr	r3, [pc, #36]	; (4007f4 <xPortStartScheduler+0xbc>)
  4007ce:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
  4007d0:	4b09      	ldr	r3, [pc, #36]	; (4007f8 <xPortStartScheduler+0xc0>)
  4007d2:	4798      	blx	r3
  4007d4:	e000e400 	.word	0xe000e400
  4007d8:	20400998 	.word	0x20400998
  4007dc:	2040099c 	.word	0x2040099c
  4007e0:	e000ed20 	.word	0xe000ed20
  4007e4:	00400721 	.word	0x00400721
  4007e8:	2040000c 	.word	0x2040000c
  4007ec:	004005a5 	.word	0x004005a5
  4007f0:	e000ef34 	.word	0xe000ef34
  4007f4:	00400585 	.word	0x00400585
  4007f8:	00400549 	.word	0x00400549

004007fc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  4007fc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  400800:	2b0f      	cmp	r3, #15
  400802:	d911      	bls.n	400828 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  400804:	4a12      	ldr	r2, [pc, #72]	; (400850 <vPortValidateInterruptPriority+0x54>)
  400806:	5c9b      	ldrb	r3, [r3, r2]
  400808:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40080a:	4a12      	ldr	r2, [pc, #72]	; (400854 <vPortValidateInterruptPriority+0x58>)
  40080c:	7812      	ldrb	r2, [r2, #0]
  40080e:	429a      	cmp	r2, r3
  400810:	d90a      	bls.n	400828 <vPortValidateInterruptPriority+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400812:	f04f 0380 	mov.w	r3, #128	; 0x80
  400816:	b672      	cpsid	i
  400818:	f383 8811 	msr	BASEPRI, r3
  40081c:	f3bf 8f6f 	isb	sy
  400820:	f3bf 8f4f 	dsb	sy
  400824:	b662      	cpsie	i
  400826:	e7fe      	b.n	400826 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  400828:	4b0b      	ldr	r3, [pc, #44]	; (400858 <vPortValidateInterruptPriority+0x5c>)
  40082a:	681b      	ldr	r3, [r3, #0]
  40082c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  400830:	4a0a      	ldr	r2, [pc, #40]	; (40085c <vPortValidateInterruptPriority+0x60>)
  400832:	6812      	ldr	r2, [r2, #0]
  400834:	4293      	cmp	r3, r2
  400836:	d90a      	bls.n	40084e <vPortValidateInterruptPriority+0x52>
  400838:	f04f 0380 	mov.w	r3, #128	; 0x80
  40083c:	b672      	cpsid	i
  40083e:	f383 8811 	msr	BASEPRI, r3
  400842:	f3bf 8f6f 	isb	sy
  400846:	f3bf 8f4f 	dsb	sy
  40084a:	b662      	cpsie	i
  40084c:	e7fe      	b.n	40084c <vPortValidateInterruptPriority+0x50>
  40084e:	4770      	bx	lr
  400850:	e000e3f0 	.word	0xe000e3f0
  400854:	20400998 	.word	0x20400998
  400858:	e000ed0c 	.word	0xe000ed0c
  40085c:	2040099c 	.word	0x2040099c

00400860 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  400860:	b538      	push	{r3, r4, r5, lr}
  400862:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  400864:	f010 0f07 	tst.w	r0, #7
  400868:	d002      	beq.n	400870 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40086a:	f020 0407 	bic.w	r4, r0, #7
  40086e:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  400870:	4b0e      	ldr	r3, [pc, #56]	; (4008ac <pvPortMalloc+0x4c>)
  400872:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  400874:	4b0e      	ldr	r3, [pc, #56]	; (4008b0 <pvPortMalloc+0x50>)
  400876:	681b      	ldr	r3, [r3, #0]
  400878:	b923      	cbnz	r3, 400884 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  40087a:	4b0e      	ldr	r3, [pc, #56]	; (4008b4 <pvPortMalloc+0x54>)
  40087c:	f023 0307 	bic.w	r3, r3, #7
  400880:	4a0b      	ldr	r2, [pc, #44]	; (4008b0 <pvPortMalloc+0x50>)
  400882:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  400884:	4b0c      	ldr	r3, [pc, #48]	; (4008b8 <pvPortMalloc+0x58>)
  400886:	681b      	ldr	r3, [r3, #0]
  400888:	441c      	add	r4, r3
  40088a:	42a3      	cmp	r3, r4
  40088c:	d209      	bcs.n	4008a2 <pvPortMalloc+0x42>
  40088e:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  400892:	4294      	cmp	r4, r2
  400894:	d805      	bhi.n	4008a2 <pvPortMalloc+0x42>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  400896:	4a06      	ldr	r2, [pc, #24]	; (4008b0 <pvPortMalloc+0x50>)
  400898:	6815      	ldr	r5, [r2, #0]
  40089a:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  40089c:	4b06      	ldr	r3, [pc, #24]	; (4008b8 <pvPortMalloc+0x58>)
  40089e:	601c      	str	r4, [r3, #0]
  4008a0:	e000      	b.n	4008a4 <pvPortMalloc+0x44>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
  4008a2:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4008a4:	4b05      	ldr	r3, [pc, #20]	; (4008bc <pvPortMalloc+0x5c>)
  4008a6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
  4008a8:	4628      	mov	r0, r5
  4008aa:	bd38      	pop	{r3, r4, r5, pc}
  4008ac:	0040158d 	.word	0x0040158d
  4008b0:	2040c1a4 	.word	0x2040c1a4
  4008b4:	204009ac 	.word	0x204009ac
  4008b8:	204009a0 	.word	0x204009a0
  4008bc:	004016dd 	.word	0x004016dd

004008c0 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4008c0:	b150      	cbz	r0, 4008d8 <vPortFree+0x18>
  4008c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4008c6:	b672      	cpsid	i
  4008c8:	f383 8811 	msr	BASEPRI, r3
  4008cc:	f3bf 8f6f 	isb	sy
  4008d0:	f3bf 8f4f 	dsb	sy
  4008d4:	b662      	cpsie	i
  4008d6:	e7fe      	b.n	4008d6 <vPortFree+0x16>
  4008d8:	4770      	bx	lr
  4008da:	bf00      	nop

004008dc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008dc:	f100 0308 	add.w	r3, r0, #8
  4008e0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  4008e2:	f04f 32ff 	mov.w	r2, #4294967295
  4008e6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008e8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  4008ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4008ec:	2300      	movs	r3, #0
  4008ee:	6003      	str	r3, [r0, #0]
  4008f0:	4770      	bx	lr
  4008f2:	bf00      	nop

004008f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4008f4:	2300      	movs	r3, #0
  4008f6:	6103      	str	r3, [r0, #16]
  4008f8:	4770      	bx	lr
  4008fa:	bf00      	nop

004008fc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  4008fc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4008fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400900:	689a      	ldr	r2, [r3, #8]
  400902:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400904:	689a      	ldr	r2, [r3, #8]
  400906:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400908:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40090a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40090c:	6803      	ldr	r3, [r0, #0]
  40090e:	3301      	adds	r3, #1
  400910:	6003      	str	r3, [r0, #0]
  400912:	4770      	bx	lr

00400914 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400914:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400916:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400918:	f1b5 3fff 	cmp.w	r5, #4294967295
  40091c:	d101      	bne.n	400922 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  40091e:	6902      	ldr	r2, [r0, #16]
  400920:	e007      	b.n	400932 <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400922:	f100 0208 	add.w	r2, r0, #8
  400926:	e000      	b.n	40092a <vListInsert+0x16>
  400928:	461a      	mov	r2, r3
  40092a:	6853      	ldr	r3, [r2, #4]
  40092c:	681c      	ldr	r4, [r3, #0]
  40092e:	42a5      	cmp	r5, r4
  400930:	d2fa      	bcs.n	400928 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400932:	6853      	ldr	r3, [r2, #4]
  400934:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400936:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400938:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40093a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40093c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40093e:	6803      	ldr	r3, [r0, #0]
  400940:	3301      	adds	r3, #1
  400942:	6003      	str	r3, [r0, #0]
}
  400944:	bc30      	pop	{r4, r5}
  400946:	4770      	bx	lr

00400948 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400948:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40094a:	6842      	ldr	r2, [r0, #4]
  40094c:	6881      	ldr	r1, [r0, #8]
  40094e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400950:	6882      	ldr	r2, [r0, #8]
  400952:	6841      	ldr	r1, [r0, #4]
  400954:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400956:	685a      	ldr	r2, [r3, #4]
  400958:	4290      	cmp	r0, r2
  40095a:	d101      	bne.n	400960 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  40095c:	6882      	ldr	r2, [r0, #8]
  40095e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400960:	2200      	movs	r2, #0
  400962:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400964:	6818      	ldr	r0, [r3, #0]
  400966:	3801      	subs	r0, #1
  400968:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  40096a:	4770      	bx	lr

0040096c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40096c:	b538      	push	{r3, r4, r5, lr}
  40096e:	4604      	mov	r4, r0
  400970:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  400972:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400974:	b942      	cbnz	r2, 400988 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  400976:	6803      	ldr	r3, [r0, #0]
  400978:	2b00      	cmp	r3, #0
  40097a:	d12b      	bne.n	4009d4 <prvCopyDataToQueue+0x68>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40097c:	6840      	ldr	r0, [r0, #4]
  40097e:	4b1b      	ldr	r3, [pc, #108]	; (4009ec <prvCopyDataToQueue+0x80>)
  400980:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  400982:	2300      	movs	r3, #0
  400984:	6063      	str	r3, [r4, #4]
  400986:	e02c      	b.n	4009e2 <prvCopyDataToQueue+0x76>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  400988:	b96d      	cbnz	r5, 4009a6 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  40098a:	6880      	ldr	r0, [r0, #8]
  40098c:	4b18      	ldr	r3, [pc, #96]	; (4009f0 <prvCopyDataToQueue+0x84>)
  40098e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  400990:	68a2      	ldr	r2, [r4, #8]
  400992:	6c23      	ldr	r3, [r4, #64]	; 0x40
  400994:	4413      	add	r3, r2
  400996:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  400998:	6862      	ldr	r2, [r4, #4]
  40099a:	4293      	cmp	r3, r2
  40099c:	d31c      	bcc.n	4009d8 <prvCopyDataToQueue+0x6c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  40099e:	6823      	ldr	r3, [r4, #0]
  4009a0:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4009a2:	2000      	movs	r0, #0
  4009a4:	e01d      	b.n	4009e2 <prvCopyDataToQueue+0x76>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4009a6:	68c0      	ldr	r0, [r0, #12]
  4009a8:	4b11      	ldr	r3, [pc, #68]	; (4009f0 <prvCopyDataToQueue+0x84>)
  4009aa:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4009ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4009ae:	425b      	negs	r3, r3
  4009b0:	68e2      	ldr	r2, [r4, #12]
  4009b2:	441a      	add	r2, r3
  4009b4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4009b6:	6821      	ldr	r1, [r4, #0]
  4009b8:	428a      	cmp	r2, r1
  4009ba:	d202      	bcs.n	4009c2 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4009bc:	6862      	ldr	r2, [r4, #4]
  4009be:	4413      	add	r3, r2
  4009c0:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  4009c2:	2d02      	cmp	r5, #2
  4009c4:	d10a      	bne.n	4009dc <prvCopyDataToQueue+0x70>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4009c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009c8:	b153      	cbz	r3, 4009e0 <prvCopyDataToQueue+0x74>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
  4009ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009cc:	3b01      	subs	r3, #1
  4009ce:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
  4009d0:	2000      	movs	r0, #0
  4009d2:	e006      	b.n	4009e2 <prvCopyDataToQueue+0x76>
  4009d4:	2000      	movs	r0, #0
  4009d6:	e004      	b.n	4009e2 <prvCopyDataToQueue+0x76>
  4009d8:	2000      	movs	r0, #0
  4009da:	e002      	b.n	4009e2 <prvCopyDataToQueue+0x76>
  4009dc:	2000      	movs	r0, #0
  4009de:	e000      	b.n	4009e2 <prvCopyDataToQueue+0x76>
  4009e0:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4009e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4009e4:	3301      	adds	r3, #1
  4009e6:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4009e8:	bd38      	pop	{r3, r4, r5, pc}
  4009ea:	bf00      	nop
  4009ec:	00401ce1 	.word	0x00401ce1
  4009f0:	00403cdd 	.word	0x00403cdd

004009f4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4009f4:	b530      	push	{r4, r5, lr}
  4009f6:	b083      	sub	sp, #12
  4009f8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4009fa:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4009fc:	b954      	cbnz	r4, 400a14 <prvNotifyQueueSetContainer+0x20>
  4009fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a02:	b672      	cpsid	i
  400a04:	f383 8811 	msr	BASEPRI, r3
  400a08:	f3bf 8f6f 	isb	sy
  400a0c:	f3bf 8f4f 	dsb	sy
  400a10:	b662      	cpsie	i
  400a12:	e7fe      	b.n	400a12 <prvNotifyQueueSetContainer+0x1e>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  400a14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400a16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400a18:	429a      	cmp	r2, r3
  400a1a:	d30a      	bcc.n	400a32 <prvNotifyQueueSetContainer+0x3e>
  400a1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400a20:	b672      	cpsid	i
  400a22:	f383 8811 	msr	BASEPRI, r3
  400a26:	f3bf 8f6f 	isb	sy
  400a2a:	f3bf 8f4f 	dsb	sy
  400a2e:	b662      	cpsie	i
  400a30:	e7fe      	b.n	400a30 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  400a32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400a34:	4293      	cmp	r3, r2
  400a36:	d917      	bls.n	400a68 <prvNotifyQueueSetContainer+0x74>
  400a38:	460a      	mov	r2, r1
		{
			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  400a3a:	a901      	add	r1, sp, #4
  400a3c:	4620      	mov	r0, r4
  400a3e:	4b0c      	ldr	r3, [pc, #48]	; (400a70 <prvNotifyQueueSetContainer+0x7c>)
  400a40:	4798      	blx	r3
  400a42:	4605      	mov	r5, r0

			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  400a44:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a46:	f1b3 3fff 	cmp.w	r3, #4294967295
  400a4a:	d109      	bne.n	400a60 <prvNotifyQueueSetContainer+0x6c>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  400a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400a4e:	b163      	cbz	r3, 400a6a <prvNotifyQueueSetContainer+0x76>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  400a50:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400a54:	4b07      	ldr	r3, [pc, #28]	; (400a74 <prvNotifyQueueSetContainer+0x80>)
  400a56:	4798      	blx	r3
  400a58:	2800      	cmp	r0, #0
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
  400a5a:	bf18      	it	ne
  400a5c:	2501      	movne	r5, #1
  400a5e:	e004      	b.n	400a6a <prvNotifyQueueSetContainer+0x76>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				( pxQueueSetContainer->xTxLock )++;
  400a60:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400a62:	3301      	adds	r3, #1
  400a64:	64a3      	str	r3, [r4, #72]	; 0x48
  400a66:	e000      	b.n	400a6a <prvNotifyQueueSetContainer+0x76>
#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
	BaseType_t xReturn = pdFALSE;
  400a68:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  400a6a:	4628      	mov	r0, r5
  400a6c:	b003      	add	sp, #12
  400a6e:	bd30      	pop	{r4, r5, pc}
  400a70:	0040096d 	.word	0x0040096d
  400a74:	00401ab1 	.word	0x00401ab1

00400a78 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  400a78:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a7a:	b172      	cbz	r2, 400a9a <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
  400a7c:	b510      	push	{r4, lr}
  400a7e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  400a80:	68c4      	ldr	r4, [r0, #12]
  400a82:	4414      	add	r4, r2
  400a84:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  400a86:	6840      	ldr	r0, [r0, #4]
  400a88:	4284      	cmp	r4, r0
  400a8a:	d301      	bcc.n	400a90 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  400a8c:	6818      	ldr	r0, [r3, #0]
  400a8e:	60d8      	str	r0, [r3, #12]
  400a90:	4608      	mov	r0, r1
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  400a92:	68d9      	ldr	r1, [r3, #12]
  400a94:	4b01      	ldr	r3, [pc, #4]	; (400a9c <prvCopyDataFromQueue+0x24>)
  400a96:	4798      	blx	r3
  400a98:	bd10      	pop	{r4, pc}
  400a9a:	4770      	bx	lr
  400a9c:	00403cdd 	.word	0x00403cdd

00400aa0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  400aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400aa2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  400aa4:	4b20      	ldr	r3, [pc, #128]	; (400b28 <prvUnlockQueue+0x88>)
  400aa6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400aa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400aaa:	2b00      	cmp	r3, #0
  400aac:	dd18      	ble.n	400ae0 <prvUnlockQueue+0x40>
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400aae:	4d1f      	ldr	r5, [pc, #124]	; (400b2c <prvUnlockQueue+0x8c>)
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400ab0:	4f1f      	ldr	r7, [pc, #124]	; (400b30 <prvUnlockQueue+0x90>)
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ab2:	4e20      	ldr	r6, [pc, #128]	; (400b34 <prvUnlockQueue+0x94>)
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
  400ab4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400ab6:	b133      	cbz	r3, 400ac6 <prvUnlockQueue+0x26>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400ab8:	2100      	movs	r1, #0
  400aba:	4620      	mov	r0, r4
  400abc:	47a8      	blx	r5
  400abe:	2801      	cmp	r0, #1
  400ac0:	d108      	bne.n	400ad4 <prvUnlockQueue+0x34>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
  400ac2:	47b8      	blx	r7
  400ac4:	e006      	b.n	400ad4 <prvUnlockQueue+0x34>
				}
				else
				{
					/* Tasks that are removed from the event list will get added to
					the pending ready list as the scheduler is still suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ac8:	b153      	cbz	r3, 400ae0 <prvUnlockQueue+0x40>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400aca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ace:	47b0      	blx	r6
  400ad0:	b100      	cbz	r0, 400ad4 <prvUnlockQueue+0x34>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
  400ad2:	47b8      	blx	r7
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
  400ad4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ad6:	3b01      	subs	r3, #1
  400ad8:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  400ada:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400adc:	2b00      	cmp	r3, #0
  400ade:	dce9      	bgt.n	400ab4 <prvUnlockQueue+0x14>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
  400ae0:	f04f 33ff 	mov.w	r3, #4294967295
  400ae4:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
  400ae6:	4b14      	ldr	r3, [pc, #80]	; (400b38 <prvUnlockQueue+0x98>)
  400ae8:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  400aea:	4b0f      	ldr	r3, [pc, #60]	; (400b28 <prvUnlockQueue+0x88>)
  400aec:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400aee:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400af0:	2b00      	cmp	r3, #0
  400af2:	dd13      	ble.n	400b1c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400af4:	6923      	ldr	r3, [r4, #16]
  400af6:	b91b      	cbnz	r3, 400b00 <prvUnlockQueue+0x60>
  400af8:	e010      	b.n	400b1c <prvUnlockQueue+0x7c>
  400afa:	6923      	ldr	r3, [r4, #16]
  400afc:	b923      	cbnz	r3, 400b08 <prvUnlockQueue+0x68>
  400afe:	e00d      	b.n	400b1c <prvUnlockQueue+0x7c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b00:	f104 0610 	add.w	r6, r4, #16
  400b04:	4d0b      	ldr	r5, [pc, #44]	; (400b34 <prvUnlockQueue+0x94>)
				{
					vTaskMissedYield();
  400b06:	4f0a      	ldr	r7, [pc, #40]	; (400b30 <prvUnlockQueue+0x90>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  400b08:	4630      	mov	r0, r6
  400b0a:	47a8      	blx	r5
  400b0c:	b100      	cbz	r0, 400b10 <prvUnlockQueue+0x70>
				{
					vTaskMissedYield();
  400b0e:	47b8      	blx	r7
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
  400b10:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b12:	3b01      	subs	r3, #1
  400b14:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  400b16:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400b18:	2b00      	cmp	r3, #0
  400b1a:	dcee      	bgt.n	400afa <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
  400b1c:	f04f 33ff 	mov.w	r3, #4294967295
  400b20:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  400b22:	4b05      	ldr	r3, [pc, #20]	; (400b38 <prvUnlockQueue+0x98>)
  400b24:	4798      	blx	r3
  400b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400b28:	00400605 	.word	0x00400605
  400b2c:	004009f5 	.word	0x004009f5
  400b30:	00401c0d 	.word	0x00401c0d
  400b34:	00401ab1 	.word	0x00401ab1
  400b38:	00400651 	.word	0x00400651

00400b3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  400b3c:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400b3e:	b950      	cbnz	r0, 400b56 <xQueueGenericReset+0x1a>
  400b40:	f04f 0380 	mov.w	r3, #128	; 0x80
  400b44:	b672      	cpsid	i
  400b46:	f383 8811 	msr	BASEPRI, r3
  400b4a:	f3bf 8f6f 	isb	sy
  400b4e:	f3bf 8f4f 	dsb	sy
  400b52:	b662      	cpsie	i
  400b54:	e7fe      	b.n	400b54 <xQueueGenericReset+0x18>
  400b56:	4604      	mov	r4, r0
  400b58:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  400b5a:	4b18      	ldr	r3, [pc, #96]	; (400bbc <xQueueGenericReset+0x80>)
  400b5c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  400b5e:	6822      	ldr	r2, [r4, #0]
  400b60:	6c21      	ldr	r1, [r4, #64]	; 0x40
  400b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400b64:	fb03 f301 	mul.w	r3, r3, r1
  400b68:	18d0      	adds	r0, r2, r3
  400b6a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  400b6c:	2000      	movs	r0, #0
  400b6e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  400b70:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  400b72:	1a5b      	subs	r3, r3, r1
  400b74:	4413      	add	r3, r2
  400b76:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  400b78:	f04f 33ff 	mov.w	r3, #4294967295
  400b7c:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  400b7e:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
  400b80:	b985      	cbnz	r5, 400ba4 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  400b82:	6923      	ldr	r3, [r4, #16]
  400b84:	b1ab      	cbz	r3, 400bb2 <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  400b86:	f104 0010 	add.w	r0, r4, #16
  400b8a:	4b0d      	ldr	r3, [pc, #52]	; (400bc0 <xQueueGenericReset+0x84>)
  400b8c:	4798      	blx	r3
  400b8e:	2801      	cmp	r0, #1
  400b90:	d10f      	bne.n	400bb2 <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
  400b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400b96:	4b0b      	ldr	r3, [pc, #44]	; (400bc4 <xQueueGenericReset+0x88>)
  400b98:	601a      	str	r2, [r3, #0]
  400b9a:	f3bf 8f4f 	dsb	sy
  400b9e:	f3bf 8f6f 	isb	sy
  400ba2:	e006      	b.n	400bb2 <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  400ba4:	f104 0010 	add.w	r0, r4, #16
  400ba8:	4d07      	ldr	r5, [pc, #28]	; (400bc8 <xQueueGenericReset+0x8c>)
  400baa:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  400bac:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400bb0:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
  400bb2:	4b06      	ldr	r3, [pc, #24]	; (400bcc <xQueueGenericReset+0x90>)
  400bb4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
  400bb6:	2001      	movs	r0, #1
  400bb8:	bd38      	pop	{r3, r4, r5, pc}
  400bba:	bf00      	nop
  400bbc:	00400605 	.word	0x00400605
  400bc0:	00401ab1 	.word	0x00401ab1
  400bc4:	e000ed04 	.word	0xe000ed04
  400bc8:	004008dd 	.word	0x004008dd
  400bcc:	00400651 	.word	0x00400651

00400bd0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
  400bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  400bd2:	b950      	cbnz	r0, 400bea <xQueueGenericCreate+0x1a>
  400bd4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400bd8:	b672      	cpsid	i
  400bda:	f383 8811 	msr	BASEPRI, r3
  400bde:	f3bf 8f6f 	isb	sy
  400be2:	f3bf 8f4f 	dsb	sy
  400be6:	b662      	cpsie	i
  400be8:	e7fe      	b.n	400be8 <xQueueGenericCreate+0x18>
  400bea:	4606      	mov	r6, r0
  400bec:	4617      	mov	r7, r2
  400bee:	460d      	mov	r5, r1

	if( uxItemSize == ( UBaseType_t ) 0 )
  400bf0:	b1c1      	cbz	r1, 400c24 <xQueueGenericCreate+0x54>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400bf2:	fb01 f000 	mul.w	r0, r1, r0
  400bf6:	3059      	adds	r0, #89	; 0x59
  400bf8:	4b14      	ldr	r3, [pc, #80]	; (400c4c <xQueueGenericCreate+0x7c>)
  400bfa:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400bfc:	4604      	mov	r4, r0
  400bfe:	b910      	cbnz	r0, 400c06 <xQueueGenericCreate+0x36>
  400c00:	e005      	b.n	400c0e <xQueueGenericCreate+0x3e>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  400c02:	6024      	str	r4, [r4, #0]
  400c04:	e015      	b.n	400c32 <xQueueGenericCreate+0x62>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  400c06:	f100 0358 	add.w	r3, r0, #88	; 0x58
  400c0a:	6003      	str	r3, [r0, #0]
  400c0c:	e011      	b.n	400c32 <xQueueGenericCreate+0x62>
  400c0e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c12:	b672      	cpsid	i
  400c14:	f383 8811 	msr	BASEPRI, r3
  400c18:	f3bf 8f6f 	isb	sy
  400c1c:	f3bf 8f4f 	dsb	sy
  400c20:	b662      	cpsie	i
  400c22:	e7fe      	b.n	400c22 <xQueueGenericCreate+0x52>
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  400c24:	2058      	movs	r0, #88	; 0x58
  400c26:	4b09      	ldr	r3, [pc, #36]	; (400c4c <xQueueGenericCreate+0x7c>)
  400c28:	4798      	blx	r3

	if( pxNewQueue != NULL )
  400c2a:	4604      	mov	r4, r0
  400c2c:	2800      	cmp	r0, #0
  400c2e:	d1e8      	bne.n	400c02 <xQueueGenericCreate+0x32>
  400c30:	e7ed      	b.n	400c0e <xQueueGenericCreate+0x3e>
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
  400c32:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  400c34:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  400c36:	2101      	movs	r1, #1
  400c38:	4620      	mov	r0, r4
  400c3a:	4b05      	ldr	r3, [pc, #20]	; (400c50 <xQueueGenericCreate+0x80>)
  400c3c:	4798      	blx	r3

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
  400c3e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		}
		#endif /* configUSE_TRACE_FACILITY */

		#if( configUSE_QUEUE_SETS == 1 )
		{
			pxNewQueue->pxQueueSetContainer = NULL;
  400c42:	2300      	movs	r3, #0
  400c44:	6563      	str	r3, [r4, #84]	; 0x54
	}

	configASSERT( xReturn );

	return xReturn;
}
  400c46:	4620      	mov	r0, r4
  400c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c4a:	bf00      	nop
  400c4c:	00400861 	.word	0x00400861
  400c50:	00400b3d 	.word	0x00400b3d

00400c54 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  400c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400c58:	b085      	sub	sp, #20
  400c5a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400c5c:	b950      	cbnz	r0, 400c74 <xQueueGenericSend+0x20>
  400c5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c62:	b672      	cpsid	i
  400c64:	f383 8811 	msr	BASEPRI, r3
  400c68:	f3bf 8f6f 	isb	sy
  400c6c:	f3bf 8f4f 	dsb	sy
  400c70:	b662      	cpsie	i
  400c72:	e7fe      	b.n	400c72 <xQueueGenericSend+0x1e>
  400c74:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400c76:	b961      	cbnz	r1, 400c92 <xQueueGenericSend+0x3e>
  400c78:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400c7a:	b152      	cbz	r2, 400c92 <xQueueGenericSend+0x3e>
  400c7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400c80:	b672      	cpsid	i
  400c82:	f383 8811 	msr	BASEPRI, r3
  400c86:	f3bf 8f6f 	isb	sy
  400c8a:	f3bf 8f4f 	dsb	sy
  400c8e:	b662      	cpsie	i
  400c90:	e7fe      	b.n	400c90 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400c92:	2b02      	cmp	r3, #2
  400c94:	d10d      	bne.n	400cb2 <xQueueGenericSend+0x5e>
  400c96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  400c98:	2a01      	cmp	r2, #1
  400c9a:	d00a      	beq.n	400cb2 <xQueueGenericSend+0x5e>
  400c9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ca0:	b672      	cpsid	i
  400ca2:	f383 8811 	msr	BASEPRI, r3
  400ca6:	f3bf 8f6f 	isb	sy
  400caa:	f3bf 8f4f 	dsb	sy
  400cae:	b662      	cpsie	i
  400cb0:	e7fe      	b.n	400cb0 <xQueueGenericSend+0x5c>
  400cb2:	461d      	mov	r5, r3
  400cb4:	9100      	str	r1, [sp, #0]
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  400cb6:	4b51      	ldr	r3, [pc, #324]	; (400dfc <xQueueGenericSend+0x1a8>)
  400cb8:	4798      	blx	r3
  400cba:	b960      	cbnz	r0, 400cd6 <xQueueGenericSend+0x82>
  400cbc:	9b01      	ldr	r3, [sp, #4]
  400cbe:	b163      	cbz	r3, 400cda <xQueueGenericSend+0x86>
  400cc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400cc4:	b672      	cpsid	i
  400cc6:	f383 8811 	msr	BASEPRI, r3
  400cca:	f3bf 8f6f 	isb	sy
  400cce:	f3bf 8f4f 	dsb	sy
  400cd2:	b662      	cpsie	i
  400cd4:	e7fe      	b.n	400cd4 <xQueueGenericSend+0x80>
  400cd6:	2700      	movs	r7, #0
  400cd8:	e000      	b.n	400cdc <xQueueGenericSend+0x88>
  400cda:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400cdc:	4e48      	ldr	r6, [pc, #288]	; (400e00 <xQueueGenericSend+0x1ac>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400cde:	f8df 914c 	ldr.w	r9, [pc, #332]	; 400e2c <xQueueGenericSend+0x1d8>
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  400ce2:	f8df 8128 	ldr.w	r8, [pc, #296]	; 400e0c <xQueueGenericSend+0x1b8>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  400ce6:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400ce8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400cea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400cec:	429a      	cmp	r2, r3
  400cee:	d301      	bcc.n	400cf4 <xQueueGenericSend+0xa0>
  400cf0:	2d02      	cmp	r5, #2
  400cf2:	d133      	bne.n	400d5c <xQueueGenericSend+0x108>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400cf4:	462a      	mov	r2, r5
  400cf6:	9900      	ldr	r1, [sp, #0]
  400cf8:	4620      	mov	r0, r4
  400cfa:	4b42      	ldr	r3, [pc, #264]	; (400e04 <xQueueGenericSend+0x1b0>)
  400cfc:	4798      	blx	r3

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400cfe:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400d00:	b173      	cbz	r3, 400d20 <xQueueGenericSend+0xcc>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400d02:	4629      	mov	r1, r5
  400d04:	4620      	mov	r0, r4
  400d06:	4b40      	ldr	r3, [pc, #256]	; (400e08 <xQueueGenericSend+0x1b4>)
  400d08:	4798      	blx	r3
  400d0a:	2801      	cmp	r0, #1
  400d0c:	d122      	bne.n	400d54 <xQueueGenericSend+0x100>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
  400d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d12:	4b3e      	ldr	r3, [pc, #248]	; (400e0c <xQueueGenericSend+0x1b8>)
  400d14:	601a      	str	r2, [r3, #0]
  400d16:	f3bf 8f4f 	dsb	sy
  400d1a:	f3bf 8f6f 	isb	sy
  400d1e:	e019      	b.n	400d54 <xQueueGenericSend+0x100>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400d22:	b173      	cbz	r3, 400d42 <xQueueGenericSend+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  400d24:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400d28:	4b39      	ldr	r3, [pc, #228]	; (400e10 <xQueueGenericSend+0x1bc>)
  400d2a:	4798      	blx	r3
  400d2c:	2801      	cmp	r0, #1
  400d2e:	d111      	bne.n	400d54 <xQueueGenericSend+0x100>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
  400d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d34:	4b35      	ldr	r3, [pc, #212]	; (400e0c <xQueueGenericSend+0x1b8>)
  400d36:	601a      	str	r2, [r3, #0]
  400d38:	f3bf 8f4f 	dsb	sy
  400d3c:	f3bf 8f6f 	isb	sy
  400d40:	e008      	b.n	400d54 <xQueueGenericSend+0x100>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
  400d42:	b138      	cbz	r0, 400d54 <xQueueGenericSend+0x100>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
  400d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400d48:	4b30      	ldr	r3, [pc, #192]	; (400e0c <xQueueGenericSend+0x1b8>)
  400d4a:	601a      	str	r2, [r3, #0]
  400d4c:	f3bf 8f4f 	dsb	sy
  400d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  400d54:	4b2f      	ldr	r3, [pc, #188]	; (400e14 <xQueueGenericSend+0x1c0>)
  400d56:	4798      	blx	r3
				return pdPASS;
  400d58:	2001      	movs	r0, #1
  400d5a:	e04b      	b.n	400df4 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  400d5c:	9b01      	ldr	r3, [sp, #4]
  400d5e:	b91b      	cbnz	r3, 400d68 <xQueueGenericSend+0x114>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  400d60:	4b2c      	ldr	r3, [pc, #176]	; (400e14 <xQueueGenericSend+0x1c0>)
  400d62:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  400d64:	2000      	movs	r0, #0
  400d66:	e045      	b.n	400df4 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
  400d68:	b917      	cbnz	r7, 400d70 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  400d6a:	a802      	add	r0, sp, #8
  400d6c:	47c8      	blx	r9
					xEntryTimeSet = pdTRUE;
  400d6e:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  400d70:	4b28      	ldr	r3, [pc, #160]	; (400e14 <xQueueGenericSend+0x1c0>)
  400d72:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  400d74:	4b28      	ldr	r3, [pc, #160]	; (400e18 <xQueueGenericSend+0x1c4>)
  400d76:	4798      	blx	r3
		prvLockQueue( pxQueue );
  400d78:	47b0      	blx	r6
  400d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  400d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d80:	d101      	bne.n	400d86 <xQueueGenericSend+0x132>
  400d82:	2300      	movs	r3, #0
  400d84:	6463      	str	r3, [r4, #68]	; 0x44
  400d86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400d88:	f1b3 3fff 	cmp.w	r3, #4294967295
  400d8c:	d101      	bne.n	400d92 <xQueueGenericSend+0x13e>
  400d8e:	2300      	movs	r3, #0
  400d90:	64a3      	str	r3, [r4, #72]	; 0x48
  400d92:	4b20      	ldr	r3, [pc, #128]	; (400e14 <xQueueGenericSend+0x1c0>)
  400d94:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  400d96:	a901      	add	r1, sp, #4
  400d98:	a802      	add	r0, sp, #8
  400d9a:	4b20      	ldr	r3, [pc, #128]	; (400e1c <xQueueGenericSend+0x1c8>)
  400d9c:	4798      	blx	r3
  400d9e:	bb18      	cbnz	r0, 400de8 <xQueueGenericSend+0x194>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  400da0:	47b0      	blx	r6
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  400da2:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  400da6:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  400daa:	4b1a      	ldr	r3, [pc, #104]	; (400e14 <xQueueGenericSend+0x1c0>)
  400dac:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  400dae:	45d3      	cmp	fp, sl
  400db0:	d114      	bne.n	400ddc <xQueueGenericSend+0x188>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  400db2:	9901      	ldr	r1, [sp, #4]
  400db4:	f104 0010 	add.w	r0, r4, #16
  400db8:	4b19      	ldr	r3, [pc, #100]	; (400e20 <xQueueGenericSend+0x1cc>)
  400dba:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  400dbc:	4620      	mov	r0, r4
  400dbe:	4b19      	ldr	r3, [pc, #100]	; (400e24 <xQueueGenericSend+0x1d0>)
  400dc0:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  400dc2:	4b19      	ldr	r3, [pc, #100]	; (400e28 <xQueueGenericSend+0x1d4>)
  400dc4:	4798      	blx	r3
  400dc6:	2800      	cmp	r0, #0
  400dc8:	d18d      	bne.n	400ce6 <xQueueGenericSend+0x92>
				{
					portYIELD_WITHIN_API();
  400dca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  400dce:	f8c8 3000 	str.w	r3, [r8]
  400dd2:	f3bf 8f4f 	dsb	sy
  400dd6:	f3bf 8f6f 	isb	sy
  400dda:	e784      	b.n	400ce6 <xQueueGenericSend+0x92>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  400ddc:	4620      	mov	r0, r4
  400dde:	4b11      	ldr	r3, [pc, #68]	; (400e24 <xQueueGenericSend+0x1d0>)
  400de0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  400de2:	4b11      	ldr	r3, [pc, #68]	; (400e28 <xQueueGenericSend+0x1d4>)
  400de4:	4798      	blx	r3
  400de6:	e77e      	b.n	400ce6 <xQueueGenericSend+0x92>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  400de8:	4620      	mov	r0, r4
  400dea:	4b0e      	ldr	r3, [pc, #56]	; (400e24 <xQueueGenericSend+0x1d0>)
  400dec:	4798      	blx	r3
			( void ) xTaskResumeAll();
  400dee:	4b0e      	ldr	r3, [pc, #56]	; (400e28 <xQueueGenericSend+0x1d4>)
  400df0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  400df2:	2000      	movs	r0, #0
		}
	}
}
  400df4:	b005      	add	sp, #20
  400df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400dfa:	bf00      	nop
  400dfc:	00401c19 	.word	0x00401c19
  400e00:	00400605 	.word	0x00400605
  400e04:	0040096d 	.word	0x0040096d
  400e08:	004009f5 	.word	0x004009f5
  400e0c:	e000ed04 	.word	0xe000ed04
  400e10:	00401ab1 	.word	0x00401ab1
  400e14:	00400651 	.word	0x00400651
  400e18:	0040158d 	.word	0x0040158d
  400e1c:	00401b79 	.word	0x00401b79
  400e20:	004019ad 	.word	0x004019ad
  400e24:	00400aa1 	.word	0x00400aa1
  400e28:	004016dd 	.word	0x004016dd
  400e2c:	00401b49 	.word	0x00401b49

00400e30 <xQueueGenericSendFromISR>:
{
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  400e30:	b950      	cbnz	r0, 400e48 <xQueueGenericSendFromISR+0x18>
  400e32:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e36:	b672      	cpsid	i
  400e38:	f383 8811 	msr	BASEPRI, r3
  400e3c:	f3bf 8f6f 	isb	sy
  400e40:	f3bf 8f4f 	dsb	sy
  400e44:	b662      	cpsie	i
  400e46:	e7fe      	b.n	400e46 <xQueueGenericSendFromISR+0x16>

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
  400e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400e4c:	4604      	mov	r4, r0
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  400e4e:	b961      	cbnz	r1, 400e6a <xQueueGenericSendFromISR+0x3a>
  400e50:	6c00      	ldr	r0, [r0, #64]	; 0x40
  400e52:	b150      	cbz	r0, 400e6a <xQueueGenericSendFromISR+0x3a>
  400e54:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e58:	b672      	cpsid	i
  400e5a:	f383 8811 	msr	BASEPRI, r3
  400e5e:	f3bf 8f6f 	isb	sy
  400e62:	f3bf 8f4f 	dsb	sy
  400e66:	b662      	cpsie	i
  400e68:	e7fe      	b.n	400e68 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  400e6a:	2b02      	cmp	r3, #2
  400e6c:	d10d      	bne.n	400e8a <xQueueGenericSendFromISR+0x5a>
  400e6e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  400e70:	2801      	cmp	r0, #1
  400e72:	d00a      	beq.n	400e8a <xQueueGenericSendFromISR+0x5a>
  400e74:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e78:	b672      	cpsid	i
  400e7a:	f383 8811 	msr	BASEPRI, r3
  400e7e:	f3bf 8f6f 	isb	sy
  400e82:	f3bf 8f4f 	dsb	sy
  400e86:	b662      	cpsie	i
  400e88:	e7fe      	b.n	400e88 <xQueueGenericSendFromISR+0x58>
  400e8a:	461e      	mov	r6, r3
  400e8c:	4615      	mov	r5, r2
  400e8e:	4688      	mov	r8, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400e90:	4b21      	ldr	r3, [pc, #132]	; (400f18 <xQueueGenericSendFromISR+0xe8>)
  400e92:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400e94:	f3ef 8711 	mrs	r7, BASEPRI
  400e98:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e9c:	b672      	cpsid	i
  400e9e:	f383 8811 	msr	BASEPRI, r3
  400ea2:	f3bf 8f6f 	isb	sy
  400ea6:	f3bf 8f4f 	dsb	sy
  400eaa:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  400eac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400eae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400eb0:	429a      	cmp	r2, r3
  400eb2:	d301      	bcc.n	400eb8 <xQueueGenericSendFromISR+0x88>
  400eb4:	2e02      	cmp	r6, #2
  400eb6:	d123      	bne.n	400f00 <xQueueGenericSendFromISR+0xd0>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  400eb8:	4632      	mov	r2, r6
  400eba:	4641      	mov	r1, r8
  400ebc:	4620      	mov	r0, r4
  400ebe:	4b17      	ldr	r3, [pc, #92]	; (400f1c <xQueueGenericSendFromISR+0xec>)
  400ec0:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400ec2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400ec8:	d115      	bne.n	400ef6 <xQueueGenericSendFromISR+0xc6>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400eca:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400ecc:	b143      	cbz	r3, 400ee0 <xQueueGenericSendFromISR+0xb0>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  400ece:	4631      	mov	r1, r6
  400ed0:	4620      	mov	r0, r4
  400ed2:	4b13      	ldr	r3, [pc, #76]	; (400f20 <xQueueGenericSendFromISR+0xf0>)
  400ed4:	4798      	blx	r3
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  400ed6:	b1ad      	cbz	r5, 400f04 <xQueueGenericSendFromISR+0xd4>
  400ed8:	2801      	cmp	r0, #1
  400eda:	d113      	bne.n	400f04 <xQueueGenericSendFromISR+0xd4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  400edc:	6028      	str	r0, [r5, #0]
  400ede:	e016      	b.n	400f0e <xQueueGenericSendFromISR+0xde>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400ee2:	b18b      	cbz	r3, 400f08 <xQueueGenericSendFromISR+0xd8>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400ee4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400ee8:	4b0e      	ldr	r3, [pc, #56]	; (400f24 <xQueueGenericSendFromISR+0xf4>)
  400eea:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  400eec:	b175      	cbz	r5, 400f0c <xQueueGenericSendFromISR+0xdc>
  400eee:	b168      	cbz	r0, 400f0c <xQueueGenericSendFromISR+0xdc>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  400ef0:	2001      	movs	r0, #1
  400ef2:	6028      	str	r0, [r5, #0]
  400ef4:	e00b      	b.n	400f0e <xQueueGenericSendFromISR+0xde>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400ef6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400ef8:	3301      	adds	r3, #1
  400efa:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400efc:	2001      	movs	r0, #1
  400efe:	e006      	b.n	400f0e <xQueueGenericSendFromISR+0xde>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400f00:	2000      	movs	r0, #0
  400f02:	e004      	b.n	400f0e <xQueueGenericSendFromISR+0xde>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400f04:	2001      	movs	r0, #1
  400f06:	e002      	b.n	400f0e <xQueueGenericSendFromISR+0xde>
  400f08:	2001      	movs	r0, #1
  400f0a:	e000      	b.n	400f0e <xQueueGenericSendFromISR+0xde>
  400f0c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400f0e:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  400f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400f16:	bf00      	nop
  400f18:	004007fd 	.word	0x004007fd
  400f1c:	0040096d 	.word	0x0040096d
  400f20:	004009f5 	.word	0x004009f5
  400f24:	00401ab1 	.word	0x00401ab1

00400f28 <xQueueGiveFromISR>:
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
  400f28:	b950      	cbnz	r0, 400f40 <xQueueGiveFromISR+0x18>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400f2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f2e:	b672      	cpsid	i
  400f30:	f383 8811 	msr	BASEPRI, r3
  400f34:	f3bf 8f6f 	isb	sy
  400f38:	f3bf 8f4f 	dsb	sy
  400f3c:	b662      	cpsie	i
  400f3e:	e7fe      	b.n	400f3e <xQueueGiveFromISR+0x16>
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  400f40:	b570      	push	{r4, r5, r6, lr}
  400f42:	4604      	mov	r4, r0

	configASSERT( pxQueue );

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
  400f44:	6c03      	ldr	r3, [r0, #64]	; 0x40
  400f46:	b153      	cbz	r3, 400f5e <xQueueGiveFromISR+0x36>
  400f48:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f4c:	b672      	cpsid	i
  400f4e:	f383 8811 	msr	BASEPRI, r3
  400f52:	f3bf 8f6f 	isb	sy
  400f56:	f3bf 8f4f 	dsb	sy
  400f5a:	b662      	cpsie	i
  400f5c:	e7fe      	b.n	400f5c <xQueueGiveFromISR+0x34>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  400f5e:	6803      	ldr	r3, [r0, #0]
  400f60:	b963      	cbnz	r3, 400f7c <xQueueGiveFromISR+0x54>
  400f62:	6843      	ldr	r3, [r0, #4]
  400f64:	b153      	cbz	r3, 400f7c <xQueueGiveFromISR+0x54>
  400f66:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f6a:	b672      	cpsid	i
  400f6c:	f383 8811 	msr	BASEPRI, r3
  400f70:	f3bf 8f6f 	isb	sy
  400f74:	f3bf 8f4f 	dsb	sy
  400f78:	b662      	cpsie	i
  400f7a:	e7fe      	b.n	400f7a <xQueueGiveFromISR+0x52>
  400f7c:	460d      	mov	r5, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  400f7e:	4b1f      	ldr	r3, [pc, #124]	; (400ffc <xQueueGiveFromISR+0xd4>)
  400f80:	4798      	blx	r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
  400f82:	f3ef 8611 	mrs	r6, BASEPRI
  400f86:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f8a:	b672      	cpsid	i
  400f8c:	f383 8811 	msr	BASEPRI, r3
  400f90:	f3bf 8f6f 	isb	sy
  400f94:	f3bf 8f4f 	dsb	sy
  400f98:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  400f9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  400f9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  400f9e:	429a      	cmp	r2, r3
  400fa0:	d221      	bcs.n	400fe6 <xQueueGiveFromISR+0xbe>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
  400fa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  400fa4:	3301      	adds	r3, #1
  400fa6:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
  400fa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400faa:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fae:	d115      	bne.n	400fdc <xQueueGiveFromISR+0xb4>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
  400fb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400fb2:	b143      	cbz	r3, 400fc6 <xQueueGiveFromISR+0x9e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  400fb4:	2100      	movs	r1, #0
  400fb6:	4620      	mov	r0, r4
  400fb8:	4b11      	ldr	r3, [pc, #68]	; (401000 <xQueueGiveFromISR+0xd8>)
  400fba:	4798      	blx	r3
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  400fbc:	b1ad      	cbz	r5, 400fea <xQueueGiveFromISR+0xc2>
  400fbe:	2801      	cmp	r0, #1
  400fc0:	d113      	bne.n	400fea <xQueueGiveFromISR+0xc2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  400fc2:	6028      	str	r0, [r5, #0]
  400fc4:	e016      	b.n	400ff4 <xQueueGiveFromISR+0xcc>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  400fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  400fc8:	b18b      	cbz	r3, 400fee <xQueueGiveFromISR+0xc6>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  400fca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  400fce:	4b0d      	ldr	r3, [pc, #52]	; (401004 <xQueueGiveFromISR+0xdc>)
  400fd0:	4798      	blx	r3
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
  400fd2:	b175      	cbz	r5, 400ff2 <xQueueGiveFromISR+0xca>
  400fd4:	b168      	cbz	r0, 400ff2 <xQueueGiveFromISR+0xca>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
  400fd6:	2001      	movs	r0, #1
  400fd8:	6028      	str	r0, [r5, #0]
  400fda:	e00b      	b.n	400ff4 <xQueueGiveFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
  400fdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  400fde:	3301      	adds	r3, #1
  400fe0:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
  400fe2:	2001      	movs	r0, #1
  400fe4:	e006      	b.n	400ff4 <xQueueGiveFromISR+0xcc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  400fe6:	2000      	movs	r0, #0
  400fe8:	e004      	b.n	400ff4 <xQueueGiveFromISR+0xcc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
  400fea:	2001      	movs	r0, #1
  400fec:	e002      	b.n	400ff4 <xQueueGiveFromISR+0xcc>
  400fee:	2001      	movs	r0, #1
  400ff0:	e000      	b.n	400ff4 <xQueueGiveFromISR+0xcc>
  400ff2:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400ff4:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
  400ff8:	bd70      	pop	{r4, r5, r6, pc}
  400ffa:	bf00      	nop
  400ffc:	004007fd 	.word	0x004007fd
  401000:	004009f5 	.word	0x004009f5
  401004:	00401ab1 	.word	0x00401ab1

00401008 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
  401008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40100c:	b085      	sub	sp, #20
  40100e:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
  401010:	b950      	cbnz	r0, 401028 <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401012:	f04f 0380 	mov.w	r3, #128	; 0x80
  401016:	b672      	cpsid	i
  401018:	f383 8811 	msr	BASEPRI, r3
  40101c:	f3bf 8f6f 	isb	sy
  401020:	f3bf 8f4f 	dsb	sy
  401024:	b662      	cpsie	i
  401026:	e7fe      	b.n	401026 <xQueueGenericReceive+0x1e>
  401028:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40102a:	b961      	cbnz	r1, 401046 <xQueueGenericReceive+0x3e>
  40102c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40102e:	b152      	cbz	r2, 401046 <xQueueGenericReceive+0x3e>
  401030:	f04f 0380 	mov.w	r3, #128	; 0x80
  401034:	b672      	cpsid	i
  401036:	f383 8811 	msr	BASEPRI, r3
  40103a:	f3bf 8f6f 	isb	sy
  40103e:	f3bf 8f4f 	dsb	sy
  401042:	b662      	cpsie	i
  401044:	e7fe      	b.n	401044 <xQueueGenericReceive+0x3c>
  401046:	4698      	mov	r8, r3
  401048:	468b      	mov	fp, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40104a:	4b52      	ldr	r3, [pc, #328]	; (401194 <xQueueGenericReceive+0x18c>)
  40104c:	4798      	blx	r3
  40104e:	b960      	cbnz	r0, 40106a <xQueueGenericReceive+0x62>
  401050:	9b01      	ldr	r3, [sp, #4]
  401052:	b163      	cbz	r3, 40106e <xQueueGenericReceive+0x66>
  401054:	f04f 0380 	mov.w	r3, #128	; 0x80
  401058:	b672      	cpsid	i
  40105a:	f383 8811 	msr	BASEPRI, r3
  40105e:	f3bf 8f6f 	isb	sy
  401062:	f3bf 8f4f 	dsb	sy
  401066:	b662      	cpsie	i
  401068:	e7fe      	b.n	401068 <xQueueGenericReceive+0x60>
  40106a:	2600      	movs	r6, #0
  40106c:	e000      	b.n	401070 <xQueueGenericReceive+0x68>
  40106e:	2600      	movs	r6, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  401070:	4d49      	ldr	r5, [pc, #292]	; (401198 <xQueueGenericReceive+0x190>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  401072:	f8df a154 	ldr.w	sl, [pc, #340]	; 4011c8 <xQueueGenericReceive+0x1c0>

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
  401076:	f8df 9130 	ldr.w	r9, [pc, #304]	; 4011a8 <xQueueGenericReceive+0x1a0>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  40107a:	47a8      	blx	r5
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40107c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40107e:	2b00      	cmp	r3, #0
  401080:	d034      	beq.n	4010ec <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401082:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401084:	4659      	mov	r1, fp
  401086:	4620      	mov	r0, r4
  401088:	4b44      	ldr	r3, [pc, #272]	; (40119c <xQueueGenericReceive+0x194>)
  40108a:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
  40108c:	f1b8 0f00 	cmp.w	r8, #0
  401090:	d118      	bne.n	4010c4 <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
  401092:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401094:	3b01      	subs	r3, #1
  401096:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401098:	6823      	ldr	r3, [r4, #0]
  40109a:	b913      	cbnz	r3, 4010a2 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40109c:	4b40      	ldr	r3, [pc, #256]	; (4011a0 <xQueueGenericReceive+0x198>)
  40109e:	4798      	blx	r3
  4010a0:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4010a2:	6923      	ldr	r3, [r4, #16]
  4010a4:	b1f3      	cbz	r3, 4010e4 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4010a6:	f104 0010 	add.w	r0, r4, #16
  4010aa:	4b3e      	ldr	r3, [pc, #248]	; (4011a4 <xQueueGenericReceive+0x19c>)
  4010ac:	4798      	blx	r3
  4010ae:	2801      	cmp	r0, #1
  4010b0:	d118      	bne.n	4010e4 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
  4010b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010b6:	4b3c      	ldr	r3, [pc, #240]	; (4011a8 <xQueueGenericReceive+0x1a0>)
  4010b8:	601a      	str	r2, [r3, #0]
  4010ba:	f3bf 8f4f 	dsb	sy
  4010be:	f3bf 8f6f 	isb	sy
  4010c2:	e00f      	b.n	4010e4 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  4010c4:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4010c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4010c8:	b163      	cbz	r3, 4010e4 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4010ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4010ce:	4b35      	ldr	r3, [pc, #212]	; (4011a4 <xQueueGenericReceive+0x19c>)
  4010d0:	4798      	blx	r3
  4010d2:	b138      	cbz	r0, 4010e4 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
  4010d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4010d8:	4b33      	ldr	r3, [pc, #204]	; (4011a8 <xQueueGenericReceive+0x1a0>)
  4010da:	601a      	str	r2, [r3, #0]
  4010dc:	f3bf 8f4f 	dsb	sy
  4010e0:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
  4010e4:	4b31      	ldr	r3, [pc, #196]	; (4011ac <xQueueGenericReceive+0x1a4>)
  4010e6:	4798      	blx	r3
				return pdPASS;
  4010e8:	2001      	movs	r0, #1
  4010ea:	e04f      	b.n	40118c <xQueueGenericReceive+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  4010ec:	9b01      	ldr	r3, [sp, #4]
  4010ee:	b91b      	cbnz	r3, 4010f8 <xQueueGenericReceive+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  4010f0:	4b2e      	ldr	r3, [pc, #184]	; (4011ac <xQueueGenericReceive+0x1a4>)
  4010f2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  4010f4:	2000      	movs	r0, #0
  4010f6:	e049      	b.n	40118c <xQueueGenericReceive+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
  4010f8:	b916      	cbnz	r6, 401100 <xQueueGenericReceive+0xf8>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
  4010fa:	a802      	add	r0, sp, #8
  4010fc:	47d0      	blx	sl
					xEntryTimeSet = pdTRUE;
  4010fe:	2601      	movs	r6, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  401100:	4b2a      	ldr	r3, [pc, #168]	; (4011ac <xQueueGenericReceive+0x1a4>)
  401102:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  401104:	4b2a      	ldr	r3, [pc, #168]	; (4011b0 <xQueueGenericReceive+0x1a8>)
  401106:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401108:	47a8      	blx	r5
  40110a:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40110c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401110:	d101      	bne.n	401116 <xQueueGenericReceive+0x10e>
  401112:	2300      	movs	r3, #0
  401114:	6463      	str	r3, [r4, #68]	; 0x44
  401116:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401118:	f1b3 3fff 	cmp.w	r3, #4294967295
  40111c:	d101      	bne.n	401122 <xQueueGenericReceive+0x11a>
  40111e:	2300      	movs	r3, #0
  401120:	64a3      	str	r3, [r4, #72]	; 0x48
  401122:	4b22      	ldr	r3, [pc, #136]	; (4011ac <xQueueGenericReceive+0x1a4>)
  401124:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401126:	a901      	add	r1, sp, #4
  401128:	a802      	add	r0, sp, #8
  40112a:	4b22      	ldr	r3, [pc, #136]	; (4011b4 <xQueueGenericReceive+0x1ac>)
  40112c:	4798      	blx	r3
  40112e:	bb38      	cbnz	r0, 401180 <xQueueGenericReceive+0x178>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401130:	47a8      	blx	r5
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401132:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401134:	4b1d      	ldr	r3, [pc, #116]	; (4011ac <xQueueGenericReceive+0x1a4>)
  401136:	4798      	blx	r3
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401138:	b9e7      	cbnz	r7, 401174 <xQueueGenericReceive+0x16c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40113a:	6823      	ldr	r3, [r4, #0]
  40113c:	b92b      	cbnz	r3, 40114a <xQueueGenericReceive+0x142>
					{
						taskENTER_CRITICAL();
  40113e:	47a8      	blx	r5
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401140:	6860      	ldr	r0, [r4, #4]
  401142:	4b1d      	ldr	r3, [pc, #116]	; (4011b8 <xQueueGenericReceive+0x1b0>)
  401144:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
  401146:	4b19      	ldr	r3, [pc, #100]	; (4011ac <xQueueGenericReceive+0x1a4>)
  401148:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40114a:	9901      	ldr	r1, [sp, #4]
  40114c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401150:	4b1a      	ldr	r3, [pc, #104]	; (4011bc <xQueueGenericReceive+0x1b4>)
  401152:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401154:	4620      	mov	r0, r4
  401156:	4b1a      	ldr	r3, [pc, #104]	; (4011c0 <xQueueGenericReceive+0x1b8>)
  401158:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40115a:	4b1a      	ldr	r3, [pc, #104]	; (4011c4 <xQueueGenericReceive+0x1bc>)
  40115c:	4798      	blx	r3
  40115e:	2800      	cmp	r0, #0
  401160:	d18b      	bne.n	40107a <xQueueGenericReceive+0x72>
				{
					portYIELD_WITHIN_API();
  401162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401166:	f8c9 3000 	str.w	r3, [r9]
  40116a:	f3bf 8f4f 	dsb	sy
  40116e:	f3bf 8f6f 	isb	sy
  401172:	e782      	b.n	40107a <xQueueGenericReceive+0x72>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  401174:	4620      	mov	r0, r4
  401176:	4b12      	ldr	r3, [pc, #72]	; (4011c0 <xQueueGenericReceive+0x1b8>)
  401178:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40117a:	4b12      	ldr	r3, [pc, #72]	; (4011c4 <xQueueGenericReceive+0x1bc>)
  40117c:	4798      	blx	r3
  40117e:	e77c      	b.n	40107a <xQueueGenericReceive+0x72>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
  401180:	4620      	mov	r0, r4
  401182:	4b0f      	ldr	r3, [pc, #60]	; (4011c0 <xQueueGenericReceive+0x1b8>)
  401184:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401186:	4b0f      	ldr	r3, [pc, #60]	; (4011c4 <xQueueGenericReceive+0x1bc>)
  401188:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
  40118a:	2000      	movs	r0, #0
		}
	}
}
  40118c:	b005      	add	sp, #20
  40118e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401192:	bf00      	nop
  401194:	00401c19 	.word	0x00401c19
  401198:	00400605 	.word	0x00400605
  40119c:	00400a79 	.word	0x00400a79
  4011a0:	00401da1 	.word	0x00401da1
  4011a4:	00401ab1 	.word	0x00401ab1
  4011a8:	e000ed04 	.word	0xe000ed04
  4011ac:	00400651 	.word	0x00400651
  4011b0:	0040158d 	.word	0x0040158d
  4011b4:	00401b79 	.word	0x00401b79
  4011b8:	00401c39 	.word	0x00401c39
  4011bc:	004019ad 	.word	0x004019ad
  4011c0:	00400aa1 	.word	0x00400aa1
  4011c4:	004016dd 	.word	0x004016dd
  4011c8:	00401b49 	.word	0x00401b49

004011cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
  4011cc:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4011ce:	4b0b      	ldr	r3, [pc, #44]	; (4011fc <vQueueAddToRegistry+0x30>)
  4011d0:	681b      	ldr	r3, [r3, #0]
  4011d2:	b12b      	cbz	r3, 4011e0 <vQueueAddToRegistry+0x14>
  4011d4:	2301      	movs	r3, #1
  4011d6:	4c09      	ldr	r4, [pc, #36]	; (4011fc <vQueueAddToRegistry+0x30>)
  4011d8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4011dc:	b942      	cbnz	r2, 4011f0 <vQueueAddToRegistry+0x24>
  4011de:	e000      	b.n	4011e2 <vQueueAddToRegistry+0x16>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4011e0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4011e2:	4a06      	ldr	r2, [pc, #24]	; (4011fc <vQueueAddToRegistry+0x30>)
  4011e4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4011e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4011ec:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
  4011ee:	e002      	b.n	4011f6 <vQueueAddToRegistry+0x2a>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4011f0:	3301      	adds	r3, #1
  4011f2:	2b08      	cmp	r3, #8
  4011f4:	d1f0      	bne.n	4011d8 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
  4011f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011fa:	4770      	bx	lr
  4011fc:	2040c380 	.word	0x2040c380

00401200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401200:	b570      	push	{r4, r5, r6, lr}
  401202:	4604      	mov	r4, r0
  401204:	460d      	mov	r5, r1
  401206:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
  401208:	4b0d      	ldr	r3, [pc, #52]	; (401240 <vQueueWaitForMessageRestricted+0x40>)
  40120a:	4798      	blx	r3
  40120c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40120e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401212:	d101      	bne.n	401218 <vQueueWaitForMessageRestricted+0x18>
  401214:	2300      	movs	r3, #0
  401216:	6463      	str	r3, [r4, #68]	; 0x44
  401218:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40121a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40121e:	d101      	bne.n	401224 <vQueueWaitForMessageRestricted+0x24>
  401220:	2300      	movs	r3, #0
  401222:	64a3      	str	r3, [r4, #72]	; 0x48
  401224:	4b07      	ldr	r3, [pc, #28]	; (401244 <vQueueWaitForMessageRestricted+0x44>)
  401226:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40122a:	b92b      	cbnz	r3, 401238 <vQueueWaitForMessageRestricted+0x38>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  40122c:	4632      	mov	r2, r6
  40122e:	4629      	mov	r1, r5
  401230:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401234:	4b04      	ldr	r3, [pc, #16]	; (401248 <vQueueWaitForMessageRestricted+0x48>)
  401236:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
  401238:	4620      	mov	r0, r4
  40123a:	4b04      	ldr	r3, [pc, #16]	; (40124c <vQueueWaitForMessageRestricted+0x4c>)
  40123c:	4798      	blx	r3
  40123e:	bd70      	pop	{r4, r5, r6, pc}
  401240:	00400605 	.word	0x00400605
  401244:	00400651 	.word	0x00400651
  401248:	00401a31 	.word	0x00401a31
  40124c:	00400aa1 	.word	0x00400aa1

00401250 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401250:	4b08      	ldr	r3, [pc, #32]	; (401274 <prvResetNextTaskUnblockTime+0x24>)
  401252:	681b      	ldr	r3, [r3, #0]
  401254:	681b      	ldr	r3, [r3, #0]
  401256:	b923      	cbnz	r3, 401262 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  401258:	f04f 32ff 	mov.w	r2, #4294967295
  40125c:	4b06      	ldr	r3, [pc, #24]	; (401278 <prvResetNextTaskUnblockTime+0x28>)
  40125e:	601a      	str	r2, [r3, #0]
  401260:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401262:	4b04      	ldr	r3, [pc, #16]	; (401274 <prvResetNextTaskUnblockTime+0x24>)
  401264:	681b      	ldr	r3, [r3, #0]
  401266:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401268:	68db      	ldr	r3, [r3, #12]
  40126a:	685a      	ldr	r2, [r3, #4]
  40126c:	4b02      	ldr	r3, [pc, #8]	; (401278 <prvResetNextTaskUnblockTime+0x28>)
  40126e:	601a      	str	r2, [r3, #0]
  401270:	4770      	bx	lr
  401272:	bf00      	nop
  401274:	2040c1ac 	.word	0x2040c1ac
  401278:	2040c2d0 	.word	0x2040c2d0

0040127c <prvAddCurrentTaskToDelayedList>:
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
  40127c:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  40127e:	4b0f      	ldr	r3, [pc, #60]	; (4012bc <prvAddCurrentTaskToDelayedList+0x40>)
  401280:	681b      	ldr	r3, [r3, #0]
  401282:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
  401284:	4b0e      	ldr	r3, [pc, #56]	; (4012c0 <prvAddCurrentTaskToDelayedList+0x44>)
  401286:	681b      	ldr	r3, [r3, #0]
  401288:	4298      	cmp	r0, r3
  40128a:	d207      	bcs.n	40129c <prvAddCurrentTaskToDelayedList+0x20>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40128c:	4b0d      	ldr	r3, [pc, #52]	; (4012c4 <prvAddCurrentTaskToDelayedList+0x48>)
  40128e:	6818      	ldr	r0, [r3, #0]
  401290:	4b0a      	ldr	r3, [pc, #40]	; (4012bc <prvAddCurrentTaskToDelayedList+0x40>)
  401292:	6819      	ldr	r1, [r3, #0]
  401294:	3104      	adds	r1, #4
  401296:	4b0c      	ldr	r3, [pc, #48]	; (4012c8 <prvAddCurrentTaskToDelayedList+0x4c>)
  401298:	4798      	blx	r3
  40129a:	bd10      	pop	{r4, pc}
  40129c:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40129e:	4b0b      	ldr	r3, [pc, #44]	; (4012cc <prvAddCurrentTaskToDelayedList+0x50>)
  4012a0:	6818      	ldr	r0, [r3, #0]
  4012a2:	4b06      	ldr	r3, [pc, #24]	; (4012bc <prvAddCurrentTaskToDelayedList+0x40>)
  4012a4:	6819      	ldr	r1, [r3, #0]
  4012a6:	3104      	adds	r1, #4
  4012a8:	4b07      	ldr	r3, [pc, #28]	; (4012c8 <prvAddCurrentTaskToDelayedList+0x4c>)
  4012aa:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
  4012ac:	4b08      	ldr	r3, [pc, #32]	; (4012d0 <prvAddCurrentTaskToDelayedList+0x54>)
  4012ae:	681b      	ldr	r3, [r3, #0]
  4012b0:	429c      	cmp	r4, r3
  4012b2:	d201      	bcs.n	4012b8 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			xNextTaskUnblockTime = xTimeToWake;
  4012b4:	4b06      	ldr	r3, [pc, #24]	; (4012d0 <prvAddCurrentTaskToDelayedList+0x54>)
  4012b6:	601c      	str	r4, [r3, #0]
  4012b8:	bd10      	pop	{r4, pc}
  4012ba:	bf00      	nop
  4012bc:	2040c2b0 	.word	0x2040c2b0
  4012c0:	2040c2cc 	.word	0x2040c2cc
  4012c4:	2040c1cc 	.word	0x2040c1cc
  4012c8:	00400915 	.word	0x00400915
  4012cc:	2040c1ac 	.word	0x2040c1ac
  4012d0:	2040c2d0 	.word	0x2040c2d0

004012d4 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
  4012d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4012d8:	b083      	sub	sp, #12
  4012da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4012dc:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  4012e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
  4012e2:	b950      	cbnz	r0, 4012fa <xTaskGenericCreate+0x26>
  4012e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012e8:	b672      	cpsid	i
  4012ea:	f383 8811 	msr	BASEPRI, r3
  4012ee:	f3bf 8f6f 	isb	sy
  4012f2:	f3bf 8f4f 	dsb	sy
  4012f6:	b662      	cpsie	i
  4012f8:	e7fe      	b.n	4012f8 <xTaskGenericCreate+0x24>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  4012fa:	2f09      	cmp	r7, #9
  4012fc:	d90a      	bls.n	401314 <xTaskGenericCreate+0x40>
  4012fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401302:	b672      	cpsid	i
  401304:	f383 8811 	msr	BASEPRI, r3
  401308:	f3bf 8f6f 	isb	sy
  40130c:	f3bf 8f4f 	dsb	sy
  401310:	b662      	cpsie	i
  401312:	e7fe      	b.n	401312 <xTaskGenericCreate+0x3e>
  401314:	9001      	str	r0, [sp, #4]
  401316:	9300      	str	r3, [sp, #0]
  401318:	4690      	mov	r8, r2
  40131a:	460e      	mov	r6, r1
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40131c:	b935      	cbnz	r5, 40132c <xTaskGenericCreate+0x58>
  40131e:	0090      	lsls	r0, r2, #2
  401320:	4b5f      	ldr	r3, [pc, #380]	; (4014a0 <xTaskGenericCreate+0x1cc>)
  401322:	4798      	blx	r3

		if( pxStack != NULL )
  401324:	4605      	mov	r5, r0
  401326:	2800      	cmp	r0, #0
  401328:	f000 80b4 	beq.w	401494 <xTaskGenericCreate+0x1c0>
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40132c:	2058      	movs	r0, #88	; 0x58
  40132e:	4b5c      	ldr	r3, [pc, #368]	; (4014a0 <xTaskGenericCreate+0x1cc>)
  401330:	4798      	blx	r3

			if( pxNewTCB != NULL )
  401332:	4604      	mov	r4, r0
  401334:	b1a0      	cbz	r0, 401360 <xTaskGenericCreate+0x8c>
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
  401336:	6305      	str	r5, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401338:	ea4f 0288 	mov.w	r2, r8, lsl #2
  40133c:	21a5      	movs	r1, #165	; 0xa5
  40133e:	4628      	mov	r0, r5
  401340:	4b58      	ldr	r3, [pc, #352]	; (4014a4 <xTaskGenericCreate+0x1d0>)
  401342:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401344:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  401348:	4445      	add	r5, r8
  40134a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40134c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  401350:	f023 0507 	bic.w	r5, r3, #7
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401354:	7833      	ldrb	r3, [r6, #0]
  401356:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  40135a:	7833      	ldrb	r3, [r6, #0]
  40135c:	b923      	cbnz	r3, 401368 <xTaskGenericCreate+0x94>
  40135e:	e00f      	b.n	401380 <xTaskGenericCreate+0xac>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
  401360:	4628      	mov	r0, r5
  401362:	4b51      	ldr	r3, [pc, #324]	; (4014a8 <xTaskGenericCreate+0x1d4>)
  401364:	4798      	blx	r3
  401366:	e095      	b.n	401494 <xTaskGenericCreate+0x1c0>
  401368:	4633      	mov	r3, r6
  40136a:	f104 0234 	add.w	r2, r4, #52	; 0x34
  40136e:	3609      	adds	r6, #9
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401370:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401374:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  401378:	7819      	ldrb	r1, [r3, #0]
  40137a:	b109      	cbz	r1, 401380 <xTaskGenericCreate+0xac>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40137c:	429e      	cmp	r6, r3
  40137e:	d1f7      	bne.n	401370 <xTaskGenericCreate+0x9c>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401380:	f04f 0800 	mov.w	r8, #0
  401384:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
  401388:	463e      	mov	r6, r7
  40138a:	2f09      	cmp	r7, #9
  40138c:	bf28      	it	cs
  40138e:	2609      	movcs	r6, #9
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
  401390:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
  401392:	64a6      	str	r6, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401394:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401398:	f104 0904 	add.w	r9, r4, #4
  40139c:	4648      	mov	r0, r9
  40139e:	f8df b154 	ldr.w	fp, [pc, #340]	; 4014f4 <xTaskGenericCreate+0x220>
  4013a2:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  4013a4:	f104 0018 	add.w	r0, r4, #24
  4013a8:	47d8      	blx	fp

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  4013aa:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4013ac:	f1c6 060a 	rsb	r6, r6, #10
  4013b0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  4013b2:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
  4013b4:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  4013b8:	f884 8054 	strb.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4013bc:	9a00      	ldr	r2, [sp, #0]
  4013be:	9901      	ldr	r1, [sp, #4]
  4013c0:	4628      	mov	r0, r5
  4013c2:	4b3a      	ldr	r3, [pc, #232]	; (4014ac <xTaskGenericCreate+0x1d8>)
  4013c4:	4798      	blx	r3
  4013c6:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
  4013c8:	f1ba 0f00 	cmp.w	sl, #0
  4013cc:	d001      	beq.n	4013d2 <xTaskGenericCreate+0xfe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4013ce:	f8ca 4000 	str.w	r4, [sl]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
  4013d2:	4b37      	ldr	r3, [pc, #220]	; (4014b0 <xTaskGenericCreate+0x1dc>)
  4013d4:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
  4013d6:	4a37      	ldr	r2, [pc, #220]	; (4014b4 <xTaskGenericCreate+0x1e0>)
  4013d8:	6813      	ldr	r3, [r2, #0]
  4013da:	3301      	adds	r3, #1
  4013dc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4013de:	4b36      	ldr	r3, [pc, #216]	; (4014b8 <xTaskGenericCreate+0x1e4>)
  4013e0:	681b      	ldr	r3, [r3, #0]
  4013e2:	bb0b      	cbnz	r3, 401428 <xTaskGenericCreate+0x154>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
  4013e4:	4b34      	ldr	r3, [pc, #208]	; (4014b8 <xTaskGenericCreate+0x1e4>)
  4013e6:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4013e8:	6813      	ldr	r3, [r2, #0]
  4013ea:	2b01      	cmp	r3, #1
  4013ec:	d126      	bne.n	40143c <xTaskGenericCreate+0x168>
  4013ee:	4d33      	ldr	r5, [pc, #204]	; (4014bc <xTaskGenericCreate+0x1e8>)
  4013f0:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4013f4:	4e32      	ldr	r6, [pc, #200]	; (4014c0 <xTaskGenericCreate+0x1ec>)
  4013f6:	4628      	mov	r0, r5
  4013f8:	47b0      	blx	r6
  4013fa:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4013fc:	4545      	cmp	r5, r8
  4013fe:	d1fa      	bne.n	4013f6 <xTaskGenericCreate+0x122>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
  401400:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 4014f8 <xTaskGenericCreate+0x224>
  401404:	4640      	mov	r0, r8
  401406:	4d2e      	ldr	r5, [pc, #184]	; (4014c0 <xTaskGenericCreate+0x1ec>)
  401408:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40140a:	4e2e      	ldr	r6, [pc, #184]	; (4014c4 <xTaskGenericCreate+0x1f0>)
  40140c:	4630      	mov	r0, r6
  40140e:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401410:	482d      	ldr	r0, [pc, #180]	; (4014c8 <xTaskGenericCreate+0x1f4>)
  401412:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
  401414:	482d      	ldr	r0, [pc, #180]	; (4014cc <xTaskGenericCreate+0x1f8>)
  401416:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  401418:	482d      	ldr	r0, [pc, #180]	; (4014d0 <xTaskGenericCreate+0x1fc>)
  40141a:	47a8      	blx	r5
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  40141c:	4b2d      	ldr	r3, [pc, #180]	; (4014d4 <xTaskGenericCreate+0x200>)
  40141e:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401422:	4b2d      	ldr	r3, [pc, #180]	; (4014d8 <xTaskGenericCreate+0x204>)
  401424:	601e      	str	r6, [r3, #0]
  401426:	e009      	b.n	40143c <xTaskGenericCreate+0x168>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
  401428:	4b2c      	ldr	r3, [pc, #176]	; (4014dc <xTaskGenericCreate+0x208>)
  40142a:	681b      	ldr	r3, [r3, #0]
  40142c:	b933      	cbnz	r3, 40143c <xTaskGenericCreate+0x168>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
  40142e:	4b22      	ldr	r3, [pc, #136]	; (4014b8 <xTaskGenericCreate+0x1e4>)
  401430:	681b      	ldr	r3, [r3, #0]
  401432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401434:	429f      	cmp	r7, r3
  401436:	d301      	bcc.n	40143c <xTaskGenericCreate+0x168>
					{
						pxCurrentTCB = pxNewTCB;
  401438:	4b1f      	ldr	r3, [pc, #124]	; (4014b8 <xTaskGenericCreate+0x1e4>)
  40143a:	601c      	str	r4, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
  40143c:	4a28      	ldr	r2, [pc, #160]	; (4014e0 <xTaskGenericCreate+0x20c>)
  40143e:	6813      	ldr	r3, [r2, #0]
  401440:	3301      	adds	r3, #1
  401442:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401444:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
  401446:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401448:	4926      	ldr	r1, [pc, #152]	; (4014e4 <xTaskGenericCreate+0x210>)
  40144a:	680b      	ldr	r3, [r1, #0]
  40144c:	2201      	movs	r2, #1
  40144e:	4082      	lsls	r2, r0
  401450:	4313      	orrs	r3, r2
  401452:	600b      	str	r3, [r1, #0]
  401454:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401458:	4649      	mov	r1, r9
  40145a:	4b18      	ldr	r3, [pc, #96]	; (4014bc <xTaskGenericCreate+0x1e8>)
  40145c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401460:	4b21      	ldr	r3, [pc, #132]	; (4014e8 <xTaskGenericCreate+0x214>)
  401462:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
  401464:	4b21      	ldr	r3, [pc, #132]	; (4014ec <xTaskGenericCreate+0x218>)
  401466:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
  401468:	4b1c      	ldr	r3, [pc, #112]	; (4014dc <xTaskGenericCreate+0x208>)
  40146a:	681b      	ldr	r3, [r3, #0]
  40146c:	b173      	cbz	r3, 40148c <xTaskGenericCreate+0x1b8>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
  40146e:	4b12      	ldr	r3, [pc, #72]	; (4014b8 <xTaskGenericCreate+0x1e4>)
  401470:	681b      	ldr	r3, [r3, #0]
  401472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401474:	429f      	cmp	r7, r3
  401476:	d90b      	bls.n	401490 <xTaskGenericCreate+0x1bc>
			{
				taskYIELD_IF_USING_PREEMPTION();
  401478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40147c:	4b1c      	ldr	r3, [pc, #112]	; (4014f0 <xTaskGenericCreate+0x21c>)
  40147e:	601a      	str	r2, [r3, #0]
  401480:	f3bf 8f4f 	dsb	sy
  401484:	f3bf 8f6f 	isb	sy
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );

			xReturn = pdPASS;
  401488:	2001      	movs	r0, #1
  40148a:	e005      	b.n	401498 <xTaskGenericCreate+0x1c4>
  40148c:	2001      	movs	r0, #1
  40148e:	e003      	b.n	401498 <xTaskGenericCreate+0x1c4>
  401490:	2001      	movs	r0, #1
  401492:	e001      	b.n	401498 <xTaskGenericCreate+0x1c4>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401494:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
  401498:	b003      	add	sp, #12
  40149a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40149e:	bf00      	nop
  4014a0:	00400861 	.word	0x00400861
  4014a4:	00403e11 	.word	0x00403e11
  4014a8:	004008c1 	.word	0x004008c1
  4014ac:	004005b9 	.word	0x004005b9
  4014b0:	00400605 	.word	0x00400605
  4014b4:	2040c2d8 	.word	0x2040c2d8
  4014b8:	2040c2b0 	.word	0x2040c2b0
  4014bc:	2040c1d4 	.word	0x2040c1d4
  4014c0:	004008dd 	.word	0x004008dd
  4014c4:	2040c2dc 	.word	0x2040c2dc
  4014c8:	2040c2b4 	.word	0x2040c2b4
  4014cc:	2040c29c 	.word	0x2040c29c
  4014d0:	2040c2f0 	.word	0x2040c2f0
  4014d4:	2040c1ac 	.word	0x2040c1ac
  4014d8:	2040c1cc 	.word	0x2040c1cc
  4014dc:	2040c1b0 	.word	0x2040c1b0
  4014e0:	2040c2d4 	.word	0x2040c2d4
  4014e4:	2040c304 	.word	0x2040c304
  4014e8:	004008fd 	.word	0x004008fd
  4014ec:	00400651 	.word	0x00400651
  4014f0:	e000ed04 	.word	0xe000ed04
  4014f4:	004008f5 	.word	0x004008f5
  4014f8:	2040c1b8 	.word	0x2040c1b8

004014fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  4014fc:	b510      	push	{r4, lr}
  4014fe:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401500:	2300      	movs	r3, #0
  401502:	9303      	str	r3, [sp, #12]
  401504:	9302      	str	r3, [sp, #8]
  401506:	9301      	str	r3, [sp, #4]
  401508:	9300      	str	r3, [sp, #0]
  40150a:	2282      	movs	r2, #130	; 0x82
  40150c:	4917      	ldr	r1, [pc, #92]	; (40156c <vTaskStartScheduler+0x70>)
  40150e:	4818      	ldr	r0, [pc, #96]	; (401570 <vTaskStartScheduler+0x74>)
  401510:	4c18      	ldr	r4, [pc, #96]	; (401574 <vTaskStartScheduler+0x78>)
  401512:	47a0      	blx	r4
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
  401514:	2801      	cmp	r0, #1
  401516:	d11a      	bne.n	40154e <vTaskStartScheduler+0x52>
		{
			xReturn = xTimerCreateTimerTask();
  401518:	4b17      	ldr	r3, [pc, #92]	; (401578 <vTaskStartScheduler+0x7c>)
  40151a:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  40151c:	2801      	cmp	r0, #1
  40151e:	d116      	bne.n	40154e <vTaskStartScheduler+0x52>
  401520:	f04f 0380 	mov.w	r3, #128	; 0x80
  401524:	b672      	cpsid	i
  401526:	f383 8811 	msr	BASEPRI, r3
  40152a:	f3bf 8f6f 	isb	sy
  40152e:	f3bf 8f4f 	dsb	sy
  401532:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  401534:	f04f 32ff 	mov.w	r2, #4294967295
  401538:	4b10      	ldr	r3, [pc, #64]	; (40157c <vTaskStartScheduler+0x80>)
  40153a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40153c:	2201      	movs	r2, #1
  40153e:	4b10      	ldr	r3, [pc, #64]	; (401580 <vTaskStartScheduler+0x84>)
  401540:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401542:	2200      	movs	r2, #0
  401544:	4b0f      	ldr	r3, [pc, #60]	; (401584 <vTaskStartScheduler+0x88>)
  401546:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  401548:	4b0f      	ldr	r3, [pc, #60]	; (401588 <vTaskStartScheduler+0x8c>)
  40154a:	4798      	blx	r3
  40154c:	e00b      	b.n	401566 <vTaskStartScheduler+0x6a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
  40154e:	b950      	cbnz	r0, 401566 <vTaskStartScheduler+0x6a>
  401550:	f04f 0380 	mov.w	r3, #128	; 0x80
  401554:	b672      	cpsid	i
  401556:	f383 8811 	msr	BASEPRI, r3
  40155a:	f3bf 8f6f 	isb	sy
  40155e:	f3bf 8f4f 	dsb	sy
  401562:	b662      	cpsie	i
  401564:	e7fe      	b.n	401564 <vTaskStartScheduler+0x68>
	}
}
  401566:	b004      	add	sp, #16
  401568:	bd10      	pop	{r4, pc}
  40156a:	bf00      	nop
  40156c:	00407edc 	.word	0x00407edc
  401570:	00401885 	.word	0x00401885
  401574:	004012d5 	.word	0x004012d5
  401578:	00401e89 	.word	0x00401e89
  40157c:	2040c2d0 	.word	0x2040c2d0
  401580:	2040c1b0 	.word	0x2040c1b0
  401584:	2040c2cc 	.word	0x2040c2cc
  401588:	00400739 	.word	0x00400739

0040158c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  40158c:	4a02      	ldr	r2, [pc, #8]	; (401598 <vTaskSuspendAll+0xc>)
  40158e:	6813      	ldr	r3, [r2, #0]
  401590:	3301      	adds	r3, #1
  401592:	6013      	str	r3, [r2, #0]
  401594:	4770      	bx	lr
  401596:	bf00      	nop
  401598:	2040c2c8 	.word	0x2040c2c8

0040159c <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
  40159c:	4b01      	ldr	r3, [pc, #4]	; (4015a4 <xTaskGetTickCount+0x8>)
  40159e:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
  4015a0:	4770      	bx	lr
  4015a2:	bf00      	nop
  4015a4:	2040c2cc 	.word	0x2040c2cc

004015a8 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  4015a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4015ac:	4b3d      	ldr	r3, [pc, #244]	; (4016a4 <xTaskIncrementTick+0xfc>)
  4015ae:	681b      	ldr	r3, [r3, #0]
  4015b0:	2b00      	cmp	r3, #0
  4015b2:	d16a      	bne.n	40168a <xTaskIncrementTick+0xe2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
  4015b4:	4b3c      	ldr	r3, [pc, #240]	; (4016a8 <xTaskIncrementTick+0x100>)
  4015b6:	681a      	ldr	r2, [r3, #0]
  4015b8:	3201      	adds	r2, #1
  4015ba:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
  4015bc:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
  4015be:	b9d6      	cbnz	r6, 4015f6 <xTaskIncrementTick+0x4e>
			{
				taskSWITCH_DELAYED_LISTS();
  4015c0:	4b3a      	ldr	r3, [pc, #232]	; (4016ac <xTaskIncrementTick+0x104>)
  4015c2:	681b      	ldr	r3, [r3, #0]
  4015c4:	681b      	ldr	r3, [r3, #0]
  4015c6:	b153      	cbz	r3, 4015de <xTaskIncrementTick+0x36>
  4015c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015cc:	b672      	cpsid	i
  4015ce:	f383 8811 	msr	BASEPRI, r3
  4015d2:	f3bf 8f6f 	isb	sy
  4015d6:	f3bf 8f4f 	dsb	sy
  4015da:	b662      	cpsie	i
  4015dc:	e7fe      	b.n	4015dc <xTaskIncrementTick+0x34>
  4015de:	4a33      	ldr	r2, [pc, #204]	; (4016ac <xTaskIncrementTick+0x104>)
  4015e0:	6811      	ldr	r1, [r2, #0]
  4015e2:	4b33      	ldr	r3, [pc, #204]	; (4016b0 <xTaskIncrementTick+0x108>)
  4015e4:	6818      	ldr	r0, [r3, #0]
  4015e6:	6010      	str	r0, [r2, #0]
  4015e8:	6019      	str	r1, [r3, #0]
  4015ea:	4a32      	ldr	r2, [pc, #200]	; (4016b4 <xTaskIncrementTick+0x10c>)
  4015ec:	6813      	ldr	r3, [r2, #0]
  4015ee:	3301      	adds	r3, #1
  4015f0:	6013      	str	r3, [r2, #0]
  4015f2:	4b31      	ldr	r3, [pc, #196]	; (4016b8 <xTaskIncrementTick+0x110>)
  4015f4:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
  4015f6:	4b31      	ldr	r3, [pc, #196]	; (4016bc <xTaskIncrementTick+0x114>)
  4015f8:	681b      	ldr	r3, [r3, #0]
  4015fa:	429e      	cmp	r6, r3
  4015fc:	d201      	bcs.n	401602 <xTaskIncrementTick+0x5a>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4015fe:	2400      	movs	r4, #0
  401600:	e037      	b.n	401672 <xTaskIncrementTick+0xca>
  401602:	2400      	movs	r4, #0
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401604:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4016ac <xTaskIncrementTick+0x104>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401608:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4016d8 <xTaskIncrementTick+0x130>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  40160c:	4f2c      	ldr	r7, [pc, #176]	; (4016c0 <xTaskIncrementTick+0x118>)
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40160e:	f8d9 3000 	ldr.w	r3, [r9]
  401612:	681b      	ldr	r3, [r3, #0]
  401614:	b923      	cbnz	r3, 401620 <xTaskIncrementTick+0x78>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
  401616:	f04f 32ff 	mov.w	r2, #4294967295
  40161a:	4b28      	ldr	r3, [pc, #160]	; (4016bc <xTaskIncrementTick+0x114>)
  40161c:	601a      	str	r2, [r3, #0]
						break;
  40161e:	e028      	b.n	401672 <xTaskIncrementTick+0xca>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401620:	f8d9 3000 	ldr.w	r3, [r9]
  401624:	68db      	ldr	r3, [r3, #12]
  401626:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401628:	686b      	ldr	r3, [r5, #4]

						if( xConstTickCount < xItemValue )
  40162a:	429e      	cmp	r6, r3
  40162c:	d202      	bcs.n	401634 <xTaskIncrementTick+0x8c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
  40162e:	4a23      	ldr	r2, [pc, #140]	; (4016bc <xTaskIncrementTick+0x114>)
  401630:	6013      	str	r3, [r2, #0]
							break;
  401632:	e01e      	b.n	401672 <xTaskIncrementTick+0xca>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401634:	f105 0a04 	add.w	sl, r5, #4
  401638:	4650      	mov	r0, sl
  40163a:	47c0      	blx	r8

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40163c:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40163e:	b113      	cbz	r3, 401646 <xTaskIncrementTick+0x9e>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401640:	f105 0018 	add.w	r0, r5, #24
  401644:	47c0      	blx	r8
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
  401646:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401648:	683b      	ldr	r3, [r7, #0]
  40164a:	2201      	movs	r2, #1
  40164c:	4082      	lsls	r2, r0
  40164e:	4313      	orrs	r3, r2
  401650:	603b      	str	r3, [r7, #0]
  401652:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401656:	4651      	mov	r1, sl
  401658:	4b1a      	ldr	r3, [pc, #104]	; (4016c4 <xTaskIncrementTick+0x11c>)
  40165a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40165e:	4b1a      	ldr	r3, [pc, #104]	; (4016c8 <xTaskIncrementTick+0x120>)
  401660:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401662:	4b1a      	ldr	r3, [pc, #104]	; (4016cc <xTaskIncrementTick+0x124>)
  401664:	681b      	ldr	r3, [r3, #0]
  401666:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
  40166a:	429a      	cmp	r2, r3
  40166c:	bf28      	it	cs
  40166e:	2401      	movcs	r4, #1
  401670:	e7cd      	b.n	40160e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401672:	4b16      	ldr	r3, [pc, #88]	; (4016cc <xTaskIncrementTick+0x124>)
  401674:	681b      	ldr	r3, [r3, #0]
  401676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401678:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40167c:	4a11      	ldr	r2, [pc, #68]	; (4016c4 <xTaskIncrementTick+0x11c>)
  40167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
  401682:	2b02      	cmp	r3, #2
  401684:	bf28      	it	cs
  401686:	2401      	movcs	r4, #1
  401688:	e004      	b.n	401694 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  40168a:	4a11      	ldr	r2, [pc, #68]	; (4016d0 <xTaskIncrementTick+0x128>)
  40168c:	6813      	ldr	r3, [r2, #0]
  40168e:	3301      	adds	r3, #1
  401690:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  401692:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  401694:	4b0f      	ldr	r3, [pc, #60]	; (4016d4 <xTaskIncrementTick+0x12c>)
  401696:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
  401698:	2b00      	cmp	r3, #0
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
  40169a:	bf0c      	ite	eq
  40169c:	4620      	moveq	r0, r4
  40169e:	2001      	movne	r0, #1
  4016a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4016a4:	2040c2c8 	.word	0x2040c2c8
  4016a8:	2040c2cc 	.word	0x2040c2cc
  4016ac:	2040c1ac 	.word	0x2040c1ac
  4016b0:	2040c1cc 	.word	0x2040c1cc
  4016b4:	2040c1a8 	.word	0x2040c1a8
  4016b8:	00401251 	.word	0x00401251
  4016bc:	2040c2d0 	.word	0x2040c2d0
  4016c0:	2040c304 	.word	0x2040c304
  4016c4:	2040c1d4 	.word	0x2040c1d4
  4016c8:	004008fd 	.word	0x004008fd
  4016cc:	2040c2b0 	.word	0x2040c2b0
  4016d0:	2040c1d0 	.word	0x2040c1d0
  4016d4:	2040c308 	.word	0x2040c308
  4016d8:	00400949 	.word	0x00400949

004016dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  4016dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
  4016e0:	4b36      	ldr	r3, [pc, #216]	; (4017bc <xTaskResumeAll+0xe0>)
  4016e2:	681b      	ldr	r3, [r3, #0]
  4016e4:	b953      	cbnz	r3, 4016fc <xTaskResumeAll+0x20>
  4016e6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ea:	b672      	cpsid	i
  4016ec:	f383 8811 	msr	BASEPRI, r3
  4016f0:	f3bf 8f6f 	isb	sy
  4016f4:	f3bf 8f4f 	dsb	sy
  4016f8:	b662      	cpsie	i
  4016fa:	e7fe      	b.n	4016fa <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4016fc:	4b30      	ldr	r3, [pc, #192]	; (4017c0 <xTaskResumeAll+0xe4>)
  4016fe:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  401700:	4b2e      	ldr	r3, [pc, #184]	; (4017bc <xTaskResumeAll+0xe0>)
  401702:	681a      	ldr	r2, [r3, #0]
  401704:	3a01      	subs	r2, #1
  401706:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401708:	681b      	ldr	r3, [r3, #0]
  40170a:	2b00      	cmp	r3, #0
  40170c:	d14d      	bne.n	4017aa <xTaskResumeAll+0xce>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  40170e:	4b2d      	ldr	r3, [pc, #180]	; (4017c4 <xTaskResumeAll+0xe8>)
  401710:	681b      	ldr	r3, [r3, #0]
  401712:	bb0b      	cbnz	r3, 401758 <xTaskResumeAll+0x7c>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  401714:	2400      	movs	r4, #0
  401716:	e04b      	b.n	4017b0 <xTaskResumeAll+0xd4>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401718:	68fb      	ldr	r3, [r7, #12]
  40171a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40171c:	f104 0018 	add.w	r0, r4, #24
  401720:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401722:	f104 0804 	add.w	r8, r4, #4
  401726:	4640      	mov	r0, r8
  401728:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40172a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40172c:	682b      	ldr	r3, [r5, #0]
  40172e:	2201      	movs	r2, #1
  401730:	4082      	lsls	r2, r0
  401732:	4313      	orrs	r3, r2
  401734:	602b      	str	r3, [r5, #0]
  401736:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40173a:	4641      	mov	r1, r8
  40173c:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  401740:	4b21      	ldr	r3, [pc, #132]	; (4017c8 <xTaskResumeAll+0xec>)
  401742:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401744:	4b21      	ldr	r3, [pc, #132]	; (4017cc <xTaskResumeAll+0xf0>)
  401746:	681b      	ldr	r3, [r3, #0]
  401748:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40174c:	429a      	cmp	r2, r3
  40174e:	d308      	bcc.n	401762 <xTaskResumeAll+0x86>
					{
						xYieldPending = pdTRUE;
  401750:	2201      	movs	r2, #1
  401752:	4b1f      	ldr	r3, [pc, #124]	; (4017d0 <xTaskResumeAll+0xf4>)
  401754:	601a      	str	r2, [r3, #0]
  401756:	e004      	b.n	401762 <xTaskResumeAll+0x86>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401758:	4f1e      	ldr	r7, [pc, #120]	; (4017d4 <xTaskResumeAll+0xf8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40175a:	4e1f      	ldr	r6, [pc, #124]	; (4017d8 <xTaskResumeAll+0xfc>)
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
  40175c:	4d1f      	ldr	r5, [pc, #124]	; (4017dc <xTaskResumeAll+0x100>)
  40175e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 4017f0 <xTaskResumeAll+0x114>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401762:	683b      	ldr	r3, [r7, #0]
  401764:	2b00      	cmp	r3, #0
  401766:	d1d7      	bne.n	401718 <xTaskResumeAll+0x3c>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  401768:	4b1d      	ldr	r3, [pc, #116]	; (4017e0 <xTaskResumeAll+0x104>)
  40176a:	681b      	ldr	r3, [r3, #0]
  40176c:	b17b      	cbz	r3, 40178e <xTaskResumeAll+0xb2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40176e:	4b1c      	ldr	r3, [pc, #112]	; (4017e0 <xTaskResumeAll+0x104>)
  401770:	681b      	ldr	r3, [r3, #0]
  401772:	b163      	cbz	r3, 40178e <xTaskResumeAll+0xb2>
					{
						if( xTaskIncrementTick() != pdFALSE )
  401774:	4e1b      	ldr	r6, [pc, #108]	; (4017e4 <xTaskResumeAll+0x108>)
						{
							xYieldPending = pdTRUE;
  401776:	4d16      	ldr	r5, [pc, #88]	; (4017d0 <xTaskResumeAll+0xf4>)
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401778:	4c19      	ldr	r4, [pc, #100]	; (4017e0 <xTaskResumeAll+0x104>)
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
  40177a:	47b0      	blx	r6
  40177c:	b108      	cbz	r0, 401782 <xTaskResumeAll+0xa6>
						{
							xYieldPending = pdTRUE;
  40177e:	2301      	movs	r3, #1
  401780:	602b      	str	r3, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
  401782:	6823      	ldr	r3, [r4, #0]
  401784:	3b01      	subs	r3, #1
  401786:	6023      	str	r3, [r4, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  401788:	6823      	ldr	r3, [r4, #0]
  40178a:	2b00      	cmp	r3, #0
  40178c:	d1f5      	bne.n	40177a <xTaskResumeAll+0x9e>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
  40178e:	4b10      	ldr	r3, [pc, #64]	; (4017d0 <xTaskResumeAll+0xf4>)
  401790:	681b      	ldr	r3, [r3, #0]
  401792:	2b01      	cmp	r3, #1
  401794:	d10b      	bne.n	4017ae <xTaskResumeAll+0xd2>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  401796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40179a:	4b13      	ldr	r3, [pc, #76]	; (4017e8 <xTaskResumeAll+0x10c>)
  40179c:	601a      	str	r2, [r3, #0]
  40179e:	f3bf 8f4f 	dsb	sy
  4017a2:	f3bf 8f6f 	isb	sy

				if( xYieldPending == pdTRUE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  4017a6:	2401      	movs	r4, #1
  4017a8:	e002      	b.n	4017b0 <xTaskResumeAll+0xd4>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
  4017aa:	2400      	movs	r4, #0
  4017ac:	e000      	b.n	4017b0 <xTaskResumeAll+0xd4>
  4017ae:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4017b0:	4b0e      	ldr	r3, [pc, #56]	; (4017ec <xTaskResumeAll+0x110>)
  4017b2:	4798      	blx	r3

	return xAlreadyYielded;
}
  4017b4:	4620      	mov	r0, r4
  4017b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4017ba:	bf00      	nop
  4017bc:	2040c2c8 	.word	0x2040c2c8
  4017c0:	00400605 	.word	0x00400605
  4017c4:	2040c2d8 	.word	0x2040c2d8
  4017c8:	004008fd 	.word	0x004008fd
  4017cc:	2040c2b0 	.word	0x2040c2b0
  4017d0:	2040c308 	.word	0x2040c308
  4017d4:	2040c2b4 	.word	0x2040c2b4
  4017d8:	00400949 	.word	0x00400949
  4017dc:	2040c304 	.word	0x2040c304
  4017e0:	2040c1d0 	.word	0x2040c1d0
  4017e4:	004015a9 	.word	0x004015a9
  4017e8:	e000ed04 	.word	0xe000ed04
  4017ec:	00400651 	.word	0x00400651
  4017f0:	2040c1d4 	.word	0x2040c1d4

004017f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
  4017f4:	b510      	push	{r4, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
  4017f6:	2800      	cmp	r0, #0
  4017f8:	d029      	beq.n	40184e <vTaskDelay+0x5a>
  4017fa:	4604      	mov	r4, r0
		{
			configASSERT( uxSchedulerSuspended == 0 );
  4017fc:	4b18      	ldr	r3, [pc, #96]	; (401860 <vTaskDelay+0x6c>)
  4017fe:	681b      	ldr	r3, [r3, #0]
  401800:	b153      	cbz	r3, 401818 <vTaskDelay+0x24>
  401802:	f04f 0380 	mov.w	r3, #128	; 0x80
  401806:	b672      	cpsid	i
  401808:	f383 8811 	msr	BASEPRI, r3
  40180c:	f3bf 8f6f 	isb	sy
  401810:	f3bf 8f4f 	dsb	sy
  401814:	b662      	cpsie	i
  401816:	e7fe      	b.n	401816 <vTaskDelay+0x22>
			vTaskSuspendAll();
  401818:	4b12      	ldr	r3, [pc, #72]	; (401864 <vTaskDelay+0x70>)
  40181a:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
  40181c:	4b12      	ldr	r3, [pc, #72]	; (401868 <vTaskDelay+0x74>)
  40181e:	681b      	ldr	r3, [r3, #0]
  401820:	441c      	add	r4, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401822:	4b12      	ldr	r3, [pc, #72]	; (40186c <vTaskDelay+0x78>)
  401824:	6818      	ldr	r0, [r3, #0]
  401826:	3004      	adds	r0, #4
  401828:	4b11      	ldr	r3, [pc, #68]	; (401870 <vTaskDelay+0x7c>)
  40182a:	4798      	blx	r3
  40182c:	b948      	cbnz	r0, 401842 <vTaskDelay+0x4e>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  40182e:	4b0f      	ldr	r3, [pc, #60]	; (40186c <vTaskDelay+0x78>)
  401830:	681a      	ldr	r2, [r3, #0]
  401832:	4910      	ldr	r1, [pc, #64]	; (401874 <vTaskDelay+0x80>)
  401834:	680b      	ldr	r3, [r1, #0]
  401836:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401838:	2201      	movs	r2, #1
  40183a:	4082      	lsls	r2, r0
  40183c:	ea23 0302 	bic.w	r3, r3, r2
  401840:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401842:	4620      	mov	r0, r4
  401844:	4b0c      	ldr	r3, [pc, #48]	; (401878 <vTaskDelay+0x84>)
  401846:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
  401848:	4b0c      	ldr	r3, [pc, #48]	; (40187c <vTaskDelay+0x88>)
  40184a:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
  40184c:	b938      	cbnz	r0, 40185e <vTaskDelay+0x6a>
		{
			portYIELD_WITHIN_API();
  40184e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401852:	4b0b      	ldr	r3, [pc, #44]	; (401880 <vTaskDelay+0x8c>)
  401854:	601a      	str	r2, [r3, #0]
  401856:	f3bf 8f4f 	dsb	sy
  40185a:	f3bf 8f6f 	isb	sy
  40185e:	bd10      	pop	{r4, pc}
  401860:	2040c2c8 	.word	0x2040c2c8
  401864:	0040158d 	.word	0x0040158d
  401868:	2040c2cc 	.word	0x2040c2cc
  40186c:	2040c2b0 	.word	0x2040c2b0
  401870:	00400949 	.word	0x00400949
  401874:	2040c304 	.word	0x2040c304
  401878:	0040127d 	.word	0x0040127d
  40187c:	004016dd 	.word	0x004016dd
  401880:	e000ed04 	.word	0xe000ed04

00401884 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  401884:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  401886:	4d18      	ldr	r5, [pc, #96]	; (4018e8 <prvIdleTask+0x64>)
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401888:	4f18      	ldr	r7, [pc, #96]	; (4018ec <prvIdleTask+0x68>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  40188a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 40190c <prvIdleTask+0x88>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			}
			( void ) xTaskResumeAll();
  40188e:	4e18      	ldr	r6, [pc, #96]	; (4018f0 <prvIdleTask+0x6c>)
  401890:	e019      	b.n	4018c6 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
  401892:	47c0      	blx	r8
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  401894:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
  401896:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
  401898:	b1ac      	cbz	r4, 4018c6 <prvIdleTask+0x42>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
  40189a:	4b16      	ldr	r3, [pc, #88]	; (4018f4 <prvIdleTask+0x70>)
  40189c:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40189e:	68fb      	ldr	r3, [r7, #12]
  4018a0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4018a2:	1d20      	adds	r0, r4, #4
  4018a4:	4b14      	ldr	r3, [pc, #80]	; (4018f8 <prvIdleTask+0x74>)
  4018a6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4018a8:	4a14      	ldr	r2, [pc, #80]	; (4018fc <prvIdleTask+0x78>)
  4018aa:	6813      	ldr	r3, [r2, #0]
  4018ac:	3b01      	subs	r3, #1
  4018ae:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4018b0:	682b      	ldr	r3, [r5, #0]
  4018b2:	3b01      	subs	r3, #1
  4018b4:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
  4018b6:	4b12      	ldr	r3, [pc, #72]	; (401900 <prvIdleTask+0x7c>)
  4018b8:	4798      	blx	r3
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
  4018ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4018bc:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401910 <prvIdleTask+0x8c>
  4018c0:	47c8      	blx	r9
		}
		#endif

		vPortFree( pxTCB );
  4018c2:	4620      	mov	r0, r4
  4018c4:	47c8      	blx	r9
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4018c6:	682b      	ldr	r3, [r5, #0]
  4018c8:	2b00      	cmp	r3, #0
  4018ca:	d1e2      	bne.n	401892 <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4018cc:	4b0d      	ldr	r3, [pc, #52]	; (401904 <prvIdleTask+0x80>)
  4018ce:	681b      	ldr	r3, [r3, #0]
  4018d0:	2b01      	cmp	r3, #1
  4018d2:	d9dc      	bls.n	40188e <prvIdleTask+0xa>
			{
				taskYIELD();
  4018d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018d8:	4b0b      	ldr	r3, [pc, #44]	; (401908 <prvIdleTask+0x84>)
  4018da:	601a      	str	r2, [r3, #0]
  4018dc:	f3bf 8f4f 	dsb	sy
  4018e0:	f3bf 8f6f 	isb	sy
  4018e4:	e7d1      	b.n	40188a <prvIdleTask+0x6>
  4018e6:	bf00      	nop
  4018e8:	2040c1b4 	.word	0x2040c1b4
  4018ec:	2040c29c 	.word	0x2040c29c
  4018f0:	004016dd 	.word	0x004016dd
  4018f4:	00400605 	.word	0x00400605
  4018f8:	00400949 	.word	0x00400949
  4018fc:	2040c2d8 	.word	0x2040c2d8
  401900:	00400651 	.word	0x00400651
  401904:	2040c1d4 	.word	0x2040c1d4
  401908:	e000ed04 	.word	0xe000ed04
  40190c:	0040158d 	.word	0x0040158d
  401910:	004008c1 	.word	0x004008c1

00401914 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  401914:	4b20      	ldr	r3, [pc, #128]	; (401998 <vTaskSwitchContext+0x84>)
  401916:	681b      	ldr	r3, [r3, #0]
  401918:	b11b      	cbz	r3, 401922 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  40191a:	2201      	movs	r2, #1
  40191c:	4b1f      	ldr	r3, [pc, #124]	; (40199c <vTaskSwitchContext+0x88>)
  40191e:	601a      	str	r2, [r3, #0]
  401920:	4770      	bx	lr
	}
	else
	{
		xYieldPending = pdFALSE;
  401922:	2200      	movs	r2, #0
  401924:	4b1d      	ldr	r3, [pc, #116]	; (40199c <vTaskSwitchContext+0x88>)
  401926:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  401928:	4b1d      	ldr	r3, [pc, #116]	; (4019a0 <vTaskSwitchContext+0x8c>)
  40192a:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  40192c:	fab3 f383 	clz	r3, r3
  401930:	b2db      	uxtb	r3, r3
  401932:	f1c3 031f 	rsb	r3, r3, #31
  401936:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40193a:	4a1a      	ldr	r2, [pc, #104]	; (4019a4 <vTaskSwitchContext+0x90>)
  40193c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401940:	b952      	cbnz	r2, 401958 <vTaskSwitchContext+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401942:	f04f 0380 	mov.w	r3, #128	; 0x80
  401946:	b672      	cpsid	i
  401948:	f383 8811 	msr	BASEPRI, r3
  40194c:	f3bf 8f6f 	isb	sy
  401950:	f3bf 8f4f 	dsb	sy
  401954:	b662      	cpsie	i
  401956:	e7fe      	b.n	401956 <vTaskSwitchContext+0x42>

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  401958:	b410      	push	{r4}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40195a:	4a12      	ldr	r2, [pc, #72]	; (4019a4 <vTaskSwitchContext+0x90>)
  40195c:	0099      	lsls	r1, r3, #2
  40195e:	18c8      	adds	r0, r1, r3
  401960:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  401964:	6844      	ldr	r4, [r0, #4]
  401966:	6864      	ldr	r4, [r4, #4]
  401968:	6044      	str	r4, [r0, #4]
  40196a:	4602      	mov	r2, r0
  40196c:	3208      	adds	r2, #8
  40196e:	4294      	cmp	r4, r2
  401970:	d106      	bne.n	401980 <vTaskSwitchContext+0x6c>
  401972:	6860      	ldr	r0, [r4, #4]
  401974:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401978:	4a0a      	ldr	r2, [pc, #40]	; (4019a4 <vTaskSwitchContext+0x90>)
  40197a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40197e:	6050      	str	r0, [r2, #4]
  401980:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401984:	4a07      	ldr	r2, [pc, #28]	; (4019a4 <vTaskSwitchContext+0x90>)
  401986:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40198a:	685b      	ldr	r3, [r3, #4]
  40198c:	68da      	ldr	r2, [r3, #12]
  40198e:	4b06      	ldr	r3, [pc, #24]	; (4019a8 <vTaskSwitchContext+0x94>)
  401990:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  401992:	f85d 4b04 	ldr.w	r4, [sp], #4
  401996:	4770      	bx	lr
  401998:	2040c2c8 	.word	0x2040c2c8
  40199c:	2040c308 	.word	0x2040c308
  4019a0:	2040c304 	.word	0x2040c304
  4019a4:	2040c1d4 	.word	0x2040c1d4
  4019a8:	2040c2b0 	.word	0x2040c2b0

004019ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  4019ac:	b538      	push	{r3, r4, r5, lr}
TickType_t xTimeToWake;

	configASSERT( pxEventList );
  4019ae:	b950      	cbnz	r0, 4019c6 <vTaskPlaceOnEventList+0x1a>
  4019b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019b4:	b672      	cpsid	i
  4019b6:	f383 8811 	msr	BASEPRI, r3
  4019ba:	f3bf 8f6f 	isb	sy
  4019be:	f3bf 8f4f 	dsb	sy
  4019c2:	b662      	cpsie	i
  4019c4:	e7fe      	b.n	4019c4 <vTaskPlaceOnEventList+0x18>
  4019c6:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4019c8:	4d11      	ldr	r5, [pc, #68]	; (401a10 <vTaskPlaceOnEventList+0x64>)
  4019ca:	6829      	ldr	r1, [r5, #0]
  4019cc:	3118      	adds	r1, #24
  4019ce:	4b11      	ldr	r3, [pc, #68]	; (401a14 <vTaskPlaceOnEventList+0x68>)
  4019d0:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4019d2:	6828      	ldr	r0, [r5, #0]
  4019d4:	3004      	adds	r0, #4
  4019d6:	4b10      	ldr	r3, [pc, #64]	; (401a18 <vTaskPlaceOnEventList+0x6c>)
  4019d8:	4798      	blx	r3
  4019da:	b940      	cbnz	r0, 4019ee <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4019dc:	682a      	ldr	r2, [r5, #0]
  4019de:	490f      	ldr	r1, [pc, #60]	; (401a1c <vTaskPlaceOnEventList+0x70>)
  4019e0:	680b      	ldr	r3, [r1, #0]
  4019e2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4019e4:	2201      	movs	r2, #1
  4019e6:	4082      	lsls	r2, r0
  4019e8:	ea23 0302 	bic.w	r3, r3, r2
  4019ec:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
  4019ee:	f1b4 3fff 	cmp.w	r4, #4294967295
  4019f2:	d106      	bne.n	401a02 <vTaskPlaceOnEventList+0x56>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4019f4:	4b06      	ldr	r3, [pc, #24]	; (401a10 <vTaskPlaceOnEventList+0x64>)
  4019f6:	6819      	ldr	r1, [r3, #0]
  4019f8:	3104      	adds	r1, #4
  4019fa:	4809      	ldr	r0, [pc, #36]	; (401a20 <vTaskPlaceOnEventList+0x74>)
  4019fc:	4b09      	ldr	r3, [pc, #36]	; (401a24 <vTaskPlaceOnEventList+0x78>)
  4019fe:	4798      	blx	r3
  401a00:	bd38      	pop	{r3, r4, r5, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
  401a02:	4b09      	ldr	r3, [pc, #36]	; (401a28 <vTaskPlaceOnEventList+0x7c>)
  401a04:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a06:	4420      	add	r0, r4
  401a08:	4b08      	ldr	r3, [pc, #32]	; (401a2c <vTaskPlaceOnEventList+0x80>)
  401a0a:	4798      	blx	r3
  401a0c:	bd38      	pop	{r3, r4, r5, pc}
  401a0e:	bf00      	nop
  401a10:	2040c2b0 	.word	0x2040c2b0
  401a14:	00400915 	.word	0x00400915
  401a18:	00400949 	.word	0x00400949
  401a1c:	2040c304 	.word	0x2040c304
  401a20:	2040c2f0 	.word	0x2040c2f0
  401a24:	004008fd 	.word	0x004008fd
  401a28:	2040c2cc 	.word	0x2040c2cc
  401a2c:	0040127d 	.word	0x0040127d

00401a30 <vTaskPlaceOnEventListRestricted>:

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
  401a30:	b950      	cbnz	r0, 401a48 <vTaskPlaceOnEventListRestricted+0x18>
  401a32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a36:	b672      	cpsid	i
  401a38:	f383 8811 	msr	BASEPRI, r3
  401a3c:	f3bf 8f6f 	isb	sy
  401a40:	f3bf 8f4f 	dsb	sy
  401a44:	b662      	cpsie	i
  401a46:	e7fe      	b.n	401a46 <vTaskPlaceOnEventListRestricted+0x16>
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
  401a48:	b570      	push	{r4, r5, r6, lr}
  401a4a:	4615      	mov	r5, r2
  401a4c:	460c      	mov	r4, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  401a4e:	4e11      	ldr	r6, [pc, #68]	; (401a94 <vTaskPlaceOnEventListRestricted+0x64>)
  401a50:	6831      	ldr	r1, [r6, #0]
  401a52:	3118      	adds	r1, #24
  401a54:	4b10      	ldr	r3, [pc, #64]	; (401a98 <vTaskPlaceOnEventListRestricted+0x68>)
  401a56:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called with the scheduler locked so interrupts will not
		access the lists at the same time. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401a58:	6830      	ldr	r0, [r6, #0]
  401a5a:	3004      	adds	r0, #4
  401a5c:	4b0f      	ldr	r3, [pc, #60]	; (401a9c <vTaskPlaceOnEventListRestricted+0x6c>)
  401a5e:	4798      	blx	r3
  401a60:	b940      	cbnz	r0, 401a74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401a62:	6832      	ldr	r2, [r6, #0]
  401a64:	490e      	ldr	r1, [pc, #56]	; (401aa0 <vTaskPlaceOnEventListRestricted+0x70>)
  401a66:	680b      	ldr	r3, [r1, #0]
  401a68:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401a6a:	2201      	movs	r2, #1
  401a6c:	4082      	lsls	r2, r0
  401a6e:	ea23 0302 	bic.w	r3, r3, r2
  401a72:	600b      	str	r3, [r1, #0]
		Ready state when the event it is waiting indefinitely for occurs).
		Blocking indefinitely is useful when using tickless idle mode as when
		all tasks are blocked indefinitely all timers can be turned off. */
		#if( INCLUDE_vTaskSuspend == 1 )
		{
			if( xWaitIndefinitely == pdTRUE )
  401a74:	2d01      	cmp	r5, #1
  401a76:	d106      	bne.n	401a86 <vTaskPlaceOnEventListRestricted+0x56>
			{
				/* Add the task to the suspended task list instead of a delayed
				task list to ensure the task is not woken by a timing event.  It
				will block indefinitely. */
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401a78:	4b06      	ldr	r3, [pc, #24]	; (401a94 <vTaskPlaceOnEventListRestricted+0x64>)
  401a7a:	6819      	ldr	r1, [r3, #0]
  401a7c:	3104      	adds	r1, #4
  401a7e:	4809      	ldr	r0, [pc, #36]	; (401aa4 <vTaskPlaceOnEventListRestricted+0x74>)
  401a80:	4b05      	ldr	r3, [pc, #20]	; (401a98 <vTaskPlaceOnEventListRestricted+0x68>)
  401a82:	4798      	blx	r3
  401a84:	bd70      	pop	{r4, r5, r6, pc}
			else
			{
				/* Calculate the time at which the task should be woken if the
				event does not occur.  This may overflow but this doesn't
				matter. */
				xTimeToWake = xTickCount + xTicksToWait;
  401a86:	4b08      	ldr	r3, [pc, #32]	; (401aa8 <vTaskPlaceOnEventListRestricted+0x78>)
  401a88:	6818      	ldr	r0, [r3, #0]
				traceTASK_DELAY_UNTIL();
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  401a8a:	4420      	add	r0, r4
  401a8c:	4b07      	ldr	r3, [pc, #28]	; (401aac <vTaskPlaceOnEventListRestricted+0x7c>)
  401a8e:	4798      	blx	r3
  401a90:	bd70      	pop	{r4, r5, r6, pc}
  401a92:	bf00      	nop
  401a94:	2040c2b0 	.word	0x2040c2b0
  401a98:	004008fd 	.word	0x004008fd
  401a9c:	00400949 	.word	0x00400949
  401aa0:	2040c304 	.word	0x2040c304
  401aa4:	2040c2f0 	.word	0x2040c2f0
  401aa8:	2040c2cc 	.word	0x2040c2cc
  401aac:	0040127d 	.word	0x0040127d

00401ab0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  401ab0:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  401ab2:	68c3      	ldr	r3, [r0, #12]
  401ab4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  401ab6:	b954      	cbnz	r4, 401ace <xTaskRemoveFromEventList+0x1e>
  401ab8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401abc:	b672      	cpsid	i
  401abe:	f383 8811 	msr	BASEPRI, r3
  401ac2:	f3bf 8f6f 	isb	sy
  401ac6:	f3bf 8f4f 	dsb	sy
  401aca:	b662      	cpsie	i
  401acc:	e7fe      	b.n	401acc <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  401ace:	f104 0518 	add.w	r5, r4, #24
  401ad2:	4628      	mov	r0, r5
  401ad4:	4b14      	ldr	r3, [pc, #80]	; (401b28 <xTaskRemoveFromEventList+0x78>)
  401ad6:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401ad8:	4b14      	ldr	r3, [pc, #80]	; (401b2c <xTaskRemoveFromEventList+0x7c>)
  401ada:	681b      	ldr	r3, [r3, #0]
  401adc:	b99b      	cbnz	r3, 401b06 <xTaskRemoveFromEventList+0x56>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  401ade:	1d25      	adds	r5, r4, #4
  401ae0:	4628      	mov	r0, r5
  401ae2:	4b11      	ldr	r3, [pc, #68]	; (401b28 <xTaskRemoveFromEventList+0x78>)
  401ae4:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  401ae6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401ae8:	4911      	ldr	r1, [pc, #68]	; (401b30 <xTaskRemoveFromEventList+0x80>)
  401aea:	680b      	ldr	r3, [r1, #0]
  401aec:	2201      	movs	r2, #1
  401aee:	4082      	lsls	r2, r0
  401af0:	4313      	orrs	r3, r2
  401af2:	600b      	str	r3, [r1, #0]
  401af4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401af8:	4629      	mov	r1, r5
  401afa:	4b0e      	ldr	r3, [pc, #56]	; (401b34 <xTaskRemoveFromEventList+0x84>)
  401afc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401b00:	4b0d      	ldr	r3, [pc, #52]	; (401b38 <xTaskRemoveFromEventList+0x88>)
  401b02:	4798      	blx	r3
  401b04:	e003      	b.n	401b0e <xTaskRemoveFromEventList+0x5e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  401b06:	4629      	mov	r1, r5
  401b08:	480c      	ldr	r0, [pc, #48]	; (401b3c <xTaskRemoveFromEventList+0x8c>)
  401b0a:	4b0b      	ldr	r3, [pc, #44]	; (401b38 <xTaskRemoveFromEventList+0x88>)
  401b0c:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  401b0e:	4b0c      	ldr	r3, [pc, #48]	; (401b40 <xTaskRemoveFromEventList+0x90>)
  401b10:	681b      	ldr	r3, [r3, #0]
  401b12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401b16:	429a      	cmp	r2, r3
  401b18:	d903      	bls.n	401b22 <xTaskRemoveFromEventList+0x72>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  401b1a:	2001      	movs	r0, #1
  401b1c:	4b09      	ldr	r3, [pc, #36]	; (401b44 <xTaskRemoveFromEventList+0x94>)
  401b1e:	6018      	str	r0, [r3, #0]
  401b20:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
  401b22:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
  401b24:	bd38      	pop	{r3, r4, r5, pc}
  401b26:	bf00      	nop
  401b28:	00400949 	.word	0x00400949
  401b2c:	2040c2c8 	.word	0x2040c2c8
  401b30:	2040c304 	.word	0x2040c304
  401b34:	2040c1d4 	.word	0x2040c1d4
  401b38:	004008fd 	.word	0x004008fd
  401b3c:	2040c2b4 	.word	0x2040c2b4
  401b40:	2040c2b0 	.word	0x2040c2b0
  401b44:	2040c308 	.word	0x2040c308

00401b48 <vTaskSetTimeOutState>:
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
  401b48:	b950      	cbnz	r0, 401b60 <vTaskSetTimeOutState+0x18>
  401b4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b4e:	b672      	cpsid	i
  401b50:	f383 8811 	msr	BASEPRI, r3
  401b54:	f3bf 8f6f 	isb	sy
  401b58:	f3bf 8f4f 	dsb	sy
  401b5c:	b662      	cpsie	i
  401b5e:	e7fe      	b.n	401b5e <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  401b60:	4a03      	ldr	r2, [pc, #12]	; (401b70 <vTaskSetTimeOutState+0x28>)
  401b62:	6812      	ldr	r2, [r2, #0]
  401b64:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  401b66:	4a03      	ldr	r2, [pc, #12]	; (401b74 <vTaskSetTimeOutState+0x2c>)
  401b68:	6812      	ldr	r2, [r2, #0]
  401b6a:	6042      	str	r2, [r0, #4]
  401b6c:	4770      	bx	lr
  401b6e:	bf00      	nop
  401b70:	2040c1a8 	.word	0x2040c1a8
  401b74:	2040c2cc 	.word	0x2040c2cc

00401b78 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  401b78:	b538      	push	{r3, r4, r5, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
  401b7a:	b950      	cbnz	r0, 401b92 <xTaskCheckForTimeOut+0x1a>
  401b7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b80:	b672      	cpsid	i
  401b82:	f383 8811 	msr	BASEPRI, r3
  401b86:	f3bf 8f6f 	isb	sy
  401b8a:	f3bf 8f4f 	dsb	sy
  401b8e:	b662      	cpsie	i
  401b90:	e7fe      	b.n	401b90 <xTaskCheckForTimeOut+0x18>
  401b92:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  401b94:	b951      	cbnz	r1, 401bac <xTaskCheckForTimeOut+0x34>
  401b96:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b9a:	b672      	cpsid	i
  401b9c:	f383 8811 	msr	BASEPRI, r3
  401ba0:	f3bf 8f6f 	isb	sy
  401ba4:	f3bf 8f4f 	dsb	sy
  401ba8:	b662      	cpsie	i
  401baa:	e7fe      	b.n	401baa <xTaskCheckForTimeOut+0x32>
  401bac:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
  401bae:	4b12      	ldr	r3, [pc, #72]	; (401bf8 <xTaskCheckForTimeOut+0x80>)
  401bb0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  401bb2:	4b12      	ldr	r3, [pc, #72]	; (401bfc <xTaskCheckForTimeOut+0x84>)
  401bb4:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
  401bb6:	682b      	ldr	r3, [r5, #0]
  401bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
  401bbc:	d013      	beq.n	401be6 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  401bbe:	4a10      	ldr	r2, [pc, #64]	; (401c00 <xTaskCheckForTimeOut+0x88>)
  401bc0:	6812      	ldr	r2, [r2, #0]
  401bc2:	6820      	ldr	r0, [r4, #0]
  401bc4:	4290      	cmp	r0, r2
  401bc6:	d002      	beq.n	401bce <xTaskCheckForTimeOut+0x56>
  401bc8:	6862      	ldr	r2, [r4, #4]
  401bca:	4291      	cmp	r1, r2
  401bcc:	d20d      	bcs.n	401bea <xTaskCheckForTimeOut+0x72>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  401bce:	6862      	ldr	r2, [r4, #4]
  401bd0:	1a88      	subs	r0, r1, r2
  401bd2:	4283      	cmp	r3, r0
  401bd4:	d90b      	bls.n	401bee <xTaskCheckForTimeOut+0x76>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  401bd6:	1a52      	subs	r2, r2, r1
  401bd8:	4413      	add	r3, r2
  401bda:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  401bdc:	4620      	mov	r0, r4
  401bde:	4b09      	ldr	r3, [pc, #36]	; (401c04 <xTaskCheckForTimeOut+0x8c>)
  401be0:	4798      	blx	r3
			xReturn = pdFALSE;
  401be2:	2400      	movs	r4, #0
  401be4:	e004      	b.n	401bf0 <xTaskCheckForTimeOut+0x78>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
  401be6:	2400      	movs	r4, #0
  401be8:	e002      	b.n	401bf0 <xTaskCheckForTimeOut+0x78>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
  401bea:	2401      	movs	r4, #1
  401bec:	e000      	b.n	401bf0 <xTaskCheckForTimeOut+0x78>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
  401bee:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
  401bf0:	4b05      	ldr	r3, [pc, #20]	; (401c08 <xTaskCheckForTimeOut+0x90>)
  401bf2:	4798      	blx	r3

	return xReturn;
}
  401bf4:	4620      	mov	r0, r4
  401bf6:	bd38      	pop	{r3, r4, r5, pc}
  401bf8:	00400605 	.word	0x00400605
  401bfc:	2040c2cc 	.word	0x2040c2cc
  401c00:	2040c1a8 	.word	0x2040c1a8
  401c04:	00401b49 	.word	0x00401b49
  401c08:	00400651 	.word	0x00400651

00401c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
  401c0c:	2201      	movs	r2, #1
  401c0e:	4b01      	ldr	r3, [pc, #4]	; (401c14 <vTaskMissedYield+0x8>)
  401c10:	601a      	str	r2, [r3, #0]
  401c12:	4770      	bx	lr
  401c14:	2040c308 	.word	0x2040c308

00401c18 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  401c18:	4b05      	ldr	r3, [pc, #20]	; (401c30 <xTaskGetSchedulerState+0x18>)
  401c1a:	681b      	ldr	r3, [r3, #0]
  401c1c:	b133      	cbz	r3, 401c2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401c1e:	4b05      	ldr	r3, [pc, #20]	; (401c34 <xTaskGetSchedulerState+0x1c>)
  401c20:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  401c22:	2b00      	cmp	r3, #0
  401c24:	bf0c      	ite	eq
  401c26:	2002      	moveq	r0, #2
  401c28:	2000      	movne	r0, #0
  401c2a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
  401c2c:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
  401c2e:	4770      	bx	lr
  401c30:	2040c1b0 	.word	0x2040c1b0
  401c34:	2040c2c8 	.word	0x2040c2c8

00401c38 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  401c38:	2800      	cmp	r0, #0
  401c3a:	d045      	beq.n	401cc8 <vTaskPriorityInherit+0x90>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
  401c3c:	b538      	push	{r3, r4, r5, lr}
  401c3e:	4603      	mov	r3, r0
		if( pxMutexHolder != NULL )
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  401c40:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  401c42:	4922      	ldr	r1, [pc, #136]	; (401ccc <vTaskPriorityInherit+0x94>)
  401c44:	6809      	ldr	r1, [r1, #0]
  401c46:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c48:	428a      	cmp	r2, r1
  401c4a:	d23c      	bcs.n	401cc6 <vTaskPriorityInherit+0x8e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  401c4c:	6981      	ldr	r1, [r0, #24]
  401c4e:	2900      	cmp	r1, #0
  401c50:	db05      	blt.n	401c5e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c52:	491e      	ldr	r1, [pc, #120]	; (401ccc <vTaskPriorityInherit+0x94>)
  401c54:	6809      	ldr	r1, [r1, #0]
  401c56:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  401c58:	f1c1 010a 	rsb	r1, r1, #10
  401c5c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  401c5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  401c62:	491b      	ldr	r1, [pc, #108]	; (401cd0 <vTaskPriorityInherit+0x98>)
  401c64:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  401c68:	6959      	ldr	r1, [r3, #20]
  401c6a:	4291      	cmp	r1, r2
  401c6c:	d127      	bne.n	401cbe <vTaskPriorityInherit+0x86>
  401c6e:	461c      	mov	r4, r3
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401c70:	1d1d      	adds	r5, r3, #4
  401c72:	4628      	mov	r0, r5
  401c74:	4b17      	ldr	r3, [pc, #92]	; (401cd4 <vTaskPriorityInherit+0x9c>)
  401c76:	4798      	blx	r3
  401c78:	b970      	cbnz	r0, 401c98 <vTaskPriorityInherit+0x60>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401c7c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  401c80:	4a13      	ldr	r2, [pc, #76]	; (401cd0 <vTaskPriorityInherit+0x98>)
  401c82:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  401c86:	b93a      	cbnz	r2, 401c98 <vTaskPriorityInherit+0x60>
  401c88:	4813      	ldr	r0, [pc, #76]	; (401cd8 <vTaskPriorityInherit+0xa0>)
  401c8a:	6802      	ldr	r2, [r0, #0]
  401c8c:	2101      	movs	r1, #1
  401c8e:	fa01 f303 	lsl.w	r3, r1, r3
  401c92:	ea22 0303 	bic.w	r3, r2, r3
  401c96:	6003      	str	r3, [r0, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401c98:	4b0c      	ldr	r3, [pc, #48]	; (401ccc <vTaskPriorityInherit+0x94>)
  401c9a:	681b      	ldr	r3, [r3, #0]
  401c9c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  401c9e:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  401ca0:	490d      	ldr	r1, [pc, #52]	; (401cd8 <vTaskPriorityInherit+0xa0>)
  401ca2:	680a      	ldr	r2, [r1, #0]
  401ca4:	2301      	movs	r3, #1
  401ca6:	4083      	lsls	r3, r0
  401ca8:	4313      	orrs	r3, r2
  401caa:	600b      	str	r3, [r1, #0]
  401cac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401cb0:	4629      	mov	r1, r5
  401cb2:	4b07      	ldr	r3, [pc, #28]	; (401cd0 <vTaskPriorityInherit+0x98>)
  401cb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401cb8:	4b08      	ldr	r3, [pc, #32]	; (401cdc <vTaskPriorityInherit+0xa4>)
  401cba:	4798      	blx	r3
  401cbc:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  401cbe:	4a03      	ldr	r2, [pc, #12]	; (401ccc <vTaskPriorityInherit+0x94>)
  401cc0:	6812      	ldr	r2, [r2, #0]
  401cc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  401cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  401cc6:	bd38      	pop	{r3, r4, r5, pc}
  401cc8:	4770      	bx	lr
  401cca:	bf00      	nop
  401ccc:	2040c2b0 	.word	0x2040c2b0
  401cd0:	2040c1d4 	.word	0x2040c1d4
  401cd4:	00400949 	.word	0x00400949
  401cd8:	2040c304 	.word	0x2040c304
  401cdc:	004008fd 	.word	0x004008fd

00401ce0 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  401ce0:	2800      	cmp	r0, #0
  401ce2:	d04e      	beq.n	401d82 <xTaskPriorityDisinherit+0xa2>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
  401ce4:	b538      	push	{r3, r4, r5, lr}
  401ce6:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  401ce8:	4a28      	ldr	r2, [pc, #160]	; (401d8c <xTaskPriorityDisinherit+0xac>)
  401cea:	6812      	ldr	r2, [r2, #0]
  401cec:	4290      	cmp	r0, r2
  401cee:	d00a      	beq.n	401d06 <xTaskPriorityDisinherit+0x26>
  401cf0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cf4:	b672      	cpsid	i
  401cf6:	f383 8811 	msr	BASEPRI, r3
  401cfa:	f3bf 8f6f 	isb	sy
  401cfe:	f3bf 8f4f 	dsb	sy
  401d02:	b662      	cpsie	i
  401d04:	e7fe      	b.n	401d04 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  401d06:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  401d08:	b952      	cbnz	r2, 401d20 <xTaskPriorityDisinherit+0x40>
  401d0a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d0e:	b672      	cpsid	i
  401d10:	f383 8811 	msr	BASEPRI, r3
  401d14:	f3bf 8f6f 	isb	sy
  401d18:	f3bf 8f4f 	dsb	sy
  401d1c:	b662      	cpsie	i
  401d1e:	e7fe      	b.n	401d1e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  401d20:	3a01      	subs	r2, #1
  401d22:	64c2      	str	r2, [r0, #76]	; 0x4c
			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  401d24:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  401d26:	6c99      	ldr	r1, [r3, #72]	; 0x48
  401d28:	4288      	cmp	r0, r1
  401d2a:	d02c      	beq.n	401d86 <xTaskPriorityDisinherit+0xa6>
  401d2c:	bb5a      	cbnz	r2, 401d86 <xTaskPriorityDisinherit+0xa6>
  401d2e:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  401d30:	1d1d      	adds	r5, r3, #4
  401d32:	4628      	mov	r0, r5
  401d34:	4b16      	ldr	r3, [pc, #88]	; (401d90 <xTaskPriorityDisinherit+0xb0>)
  401d36:	4798      	blx	r3
  401d38:	b968      	cbnz	r0, 401d56 <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  401d3a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  401d3c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  401d40:	4b14      	ldr	r3, [pc, #80]	; (401d94 <xTaskPriorityDisinherit+0xb4>)
  401d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401d46:	b933      	cbnz	r3, 401d56 <xTaskPriorityDisinherit+0x76>
  401d48:	4813      	ldr	r0, [pc, #76]	; (401d98 <xTaskPriorityDisinherit+0xb8>)
  401d4a:	6803      	ldr	r3, [r0, #0]
  401d4c:	2201      	movs	r2, #1
  401d4e:	408a      	lsls	r2, r1
  401d50:	ea23 0302 	bic.w	r3, r3, r2
  401d54:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  401d56:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  401d58:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d5a:	f1c0 030a 	rsb	r3, r0, #10
  401d5e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  401d60:	4a0d      	ldr	r2, [pc, #52]	; (401d98 <xTaskPriorityDisinherit+0xb8>)
  401d62:	6813      	ldr	r3, [r2, #0]
  401d64:	2401      	movs	r4, #1
  401d66:	fa04 f100 	lsl.w	r1, r4, r0
  401d6a:	430b      	orrs	r3, r1
  401d6c:	6013      	str	r3, [r2, #0]
  401d6e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d72:	4629      	mov	r1, r5
  401d74:	4b07      	ldr	r3, [pc, #28]	; (401d94 <xTaskPriorityDisinherit+0xb4>)
  401d76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d7a:	4b08      	ldr	r3, [pc, #32]	; (401d9c <xTaskPriorityDisinherit+0xbc>)
  401d7c:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  401d7e:	4620      	mov	r0, r4
  401d80:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401d82:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401d84:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
  401d86:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401d88:	bd38      	pop	{r3, r4, r5, pc}
  401d8a:	bf00      	nop
  401d8c:	2040c2b0 	.word	0x2040c2b0
  401d90:	00400949 	.word	0x00400949
  401d94:	2040c1d4 	.word	0x2040c1d4
  401d98:	2040c304 	.word	0x2040c304
  401d9c:	004008fd 	.word	0x004008fd

00401da0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  401da0:	4b05      	ldr	r3, [pc, #20]	; (401db8 <pvTaskIncrementMutexHeldCount+0x18>)
  401da2:	681b      	ldr	r3, [r3, #0]
  401da4:	b123      	cbz	r3, 401db0 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  401da6:	4b04      	ldr	r3, [pc, #16]	; (401db8 <pvTaskIncrementMutexHeldCount+0x18>)
  401da8:	681a      	ldr	r2, [r3, #0]
  401daa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  401dac:	3301      	adds	r3, #1
  401dae:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  401db0:	4b01      	ldr	r3, [pc, #4]	; (401db8 <pvTaskIncrementMutexHeldCount+0x18>)
  401db2:	6818      	ldr	r0, [r3, #0]
	}
  401db4:	4770      	bx	lr
  401db6:	bf00      	nop
  401db8:	2040c2b0 	.word	0x2040c2b0

00401dbc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  401dbc:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  401dbe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401dc0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  401dc2:	4291      	cmp	r1, r2
  401dc4:	d80a      	bhi.n	401ddc <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  401dc6:	1ad2      	subs	r2, r2, r3
  401dc8:	6983      	ldr	r3, [r0, #24]
  401dca:	429a      	cmp	r2, r3
  401dcc:	d211      	bcs.n	401df2 <prvInsertTimerInActiveList+0x36>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  401dce:	1d01      	adds	r1, r0, #4
  401dd0:	4b0a      	ldr	r3, [pc, #40]	; (401dfc <prvInsertTimerInActiveList+0x40>)
  401dd2:	6818      	ldr	r0, [r3, #0]
  401dd4:	4b0a      	ldr	r3, [pc, #40]	; (401e00 <prvInsertTimerInActiveList+0x44>)
  401dd6:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401dd8:	2000      	movs	r0, #0
  401dda:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  401ddc:	429a      	cmp	r2, r3
  401dde:	d201      	bcs.n	401de4 <prvInsertTimerInActiveList+0x28>
  401de0:	4299      	cmp	r1, r3
  401de2:	d208      	bcs.n	401df6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401de4:	1d01      	adds	r1, r0, #4
  401de6:	4b07      	ldr	r3, [pc, #28]	; (401e04 <prvInsertTimerInActiveList+0x48>)
  401de8:	6818      	ldr	r0, [r3, #0]
  401dea:	4b05      	ldr	r3, [pc, #20]	; (401e00 <prvInsertTimerInActiveList+0x44>)
  401dec:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
  401dee:	2000      	movs	r0, #0
  401df0:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  401df2:	2001      	movs	r0, #1
  401df4:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  401df6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  401df8:	bd08      	pop	{r3, pc}
  401dfa:	bf00      	nop
  401dfc:	2040c340 	.word	0x2040c340
  401e00:	00400915 	.word	0x00400915
  401e04:	2040c30c 	.word	0x2040c30c

00401e08 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  401e08:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  401e0a:	4b14      	ldr	r3, [pc, #80]	; (401e5c <prvCheckForValidListAndQueue+0x54>)
  401e0c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  401e0e:	4b14      	ldr	r3, [pc, #80]	; (401e60 <prvCheckForValidListAndQueue+0x58>)
  401e10:	681b      	ldr	r3, [r3, #0]
  401e12:	bb03      	cbnz	r3, 401e56 <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
  401e14:	4d13      	ldr	r5, [pc, #76]	; (401e64 <prvCheckForValidListAndQueue+0x5c>)
  401e16:	4628      	mov	r0, r5
  401e18:	4e13      	ldr	r6, [pc, #76]	; (401e68 <prvCheckForValidListAndQueue+0x60>)
  401e1a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  401e1c:	4c13      	ldr	r4, [pc, #76]	; (401e6c <prvCheckForValidListAndQueue+0x64>)
  401e1e:	4620      	mov	r0, r4
  401e20:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  401e22:	4b13      	ldr	r3, [pc, #76]	; (401e70 <prvCheckForValidListAndQueue+0x68>)
  401e24:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  401e26:	4b13      	ldr	r3, [pc, #76]	; (401e74 <prvCheckForValidListAndQueue+0x6c>)
  401e28:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  401e2a:	2200      	movs	r2, #0
  401e2c:	2110      	movs	r1, #16
  401e2e:	2005      	movs	r0, #5
  401e30:	4b11      	ldr	r3, [pc, #68]	; (401e78 <prvCheckForValidListAndQueue+0x70>)
  401e32:	4798      	blx	r3
  401e34:	4b0a      	ldr	r3, [pc, #40]	; (401e60 <prvCheckForValidListAndQueue+0x58>)
  401e36:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  401e38:	b950      	cbnz	r0, 401e50 <prvCheckForValidListAndQueue+0x48>
  401e3a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e3e:	b672      	cpsid	i
  401e40:	f383 8811 	msr	BASEPRI, r3
  401e44:	f3bf 8f6f 	isb	sy
  401e48:	f3bf 8f4f 	dsb	sy
  401e4c:	b662      	cpsie	i
  401e4e:	e7fe      	b.n	401e4e <prvCheckForValidListAndQueue+0x46>

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  401e50:	490a      	ldr	r1, [pc, #40]	; (401e7c <prvCheckForValidListAndQueue+0x74>)
  401e52:	4b0b      	ldr	r3, [pc, #44]	; (401e80 <prvCheckForValidListAndQueue+0x78>)
  401e54:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  401e56:	4b0b      	ldr	r3, [pc, #44]	; (401e84 <prvCheckForValidListAndQueue+0x7c>)
  401e58:	4798      	blx	r3
  401e5a:	bd70      	pop	{r4, r5, r6, pc}
  401e5c:	00400605 	.word	0x00400605
  401e60:	2040c33c 	.word	0x2040c33c
  401e64:	2040c310 	.word	0x2040c310
  401e68:	004008dd 	.word	0x004008dd
  401e6c:	2040c324 	.word	0x2040c324
  401e70:	2040c30c 	.word	0x2040c30c
  401e74:	2040c340 	.word	0x2040c340
  401e78:	00400bd1 	.word	0x00400bd1
  401e7c:	00407ef4 	.word	0x00407ef4
  401e80:	004011cd 	.word	0x004011cd
  401e84:	00400651 	.word	0x00400651

00401e88 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
  401e88:	b510      	push	{r4, lr}
  401e8a:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
  401e8c:	4b0f      	ldr	r3, [pc, #60]	; (401ecc <xTimerCreateTimerTask+0x44>)
  401e8e:	4798      	blx	r3

	if( xTimerQueue != NULL )
  401e90:	4b0f      	ldr	r3, [pc, #60]	; (401ed0 <xTimerCreateTimerTask+0x48>)
  401e92:	681b      	ldr	r3, [r3, #0]
  401e94:	b163      	cbz	r3, 401eb0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  401e96:	2300      	movs	r3, #0
  401e98:	9303      	str	r3, [sp, #12]
  401e9a:	9302      	str	r3, [sp, #8]
  401e9c:	9301      	str	r3, [sp, #4]
  401e9e:	2209      	movs	r2, #9
  401ea0:	9200      	str	r2, [sp, #0]
  401ea2:	f44f 7282 	mov.w	r2, #260	; 0x104
  401ea6:	490b      	ldr	r1, [pc, #44]	; (401ed4 <xTimerCreateTimerTask+0x4c>)
  401ea8:	480b      	ldr	r0, [pc, #44]	; (401ed8 <xTimerCreateTimerTask+0x50>)
  401eaa:	4c0c      	ldr	r4, [pc, #48]	; (401edc <xTimerCreateTimerTask+0x54>)
  401eac:	47a0      	blx	r4
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
  401eae:	b950      	cbnz	r0, 401ec6 <xTimerCreateTimerTask+0x3e>
  401eb0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eb4:	b672      	cpsid	i
  401eb6:	f383 8811 	msr	BASEPRI, r3
  401eba:	f3bf 8f6f 	isb	sy
  401ebe:	f3bf 8f4f 	dsb	sy
  401ec2:	b662      	cpsie	i
  401ec4:	e7fe      	b.n	401ec4 <xTimerCreateTimerTask+0x3c>
	return xReturn;
}
  401ec6:	b004      	add	sp, #16
  401ec8:	bd10      	pop	{r4, pc}
  401eca:	bf00      	nop
  401ecc:	00401e09 	.word	0x00401e09
  401ed0:	2040c33c 	.word	0x2040c33c
  401ed4:	00407efc 	.word	0x00407efc
  401ed8:	0040200d 	.word	0x0040200d
  401edc:	004012d5 	.word	0x004012d5

00401ee0 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
  401ee0:	b950      	cbnz	r0, 401ef8 <xTimerGenericCommand+0x18>
  401ee2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ee6:	b672      	cpsid	i
  401ee8:	f383 8811 	msr	BASEPRI, r3
  401eec:	f3bf 8f6f 	isb	sy
  401ef0:	f3bf 8f4f 	dsb	sy
  401ef4:	b662      	cpsie	i
  401ef6:	e7fe      	b.n	401ef6 <xTimerGenericCommand+0x16>
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
  401ef8:	b530      	push	{r4, r5, lr}
  401efa:	b085      	sub	sp, #20
  401efc:	4615      	mov	r5, r2
  401efe:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
  401f00:	4a0f      	ldr	r2, [pc, #60]	; (401f40 <xTimerGenericCommand+0x60>)
  401f02:	6810      	ldr	r0, [r2, #0]
  401f04:	b1c0      	cbz	r0, 401f38 <xTimerGenericCommand+0x58>
  401f06:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
  401f08:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  401f0a:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  401f0c:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  401f0e:	2905      	cmp	r1, #5
  401f10:	dc0d      	bgt.n	401f2e <xTimerGenericCommand+0x4e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  401f12:	4b0c      	ldr	r3, [pc, #48]	; (401f44 <xTimerGenericCommand+0x64>)
  401f14:	4798      	blx	r3
  401f16:	2802      	cmp	r0, #2
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  401f18:	f04f 0300 	mov.w	r3, #0
  401f1c:	bf0c      	ite	eq
  401f1e:	9a08      	ldreq	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  401f20:	461a      	movne	r2, r3
  401f22:	4669      	mov	r1, sp
  401f24:	4806      	ldr	r0, [pc, #24]	; (401f40 <xTimerGenericCommand+0x60>)
  401f26:	6800      	ldr	r0, [r0, #0]
  401f28:	4c07      	ldr	r4, [pc, #28]	; (401f48 <xTimerGenericCommand+0x68>)
  401f2a:	47a0      	blx	r4
  401f2c:	e005      	b.n	401f3a <xTimerGenericCommand+0x5a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  401f2e:	2300      	movs	r3, #0
  401f30:	4669      	mov	r1, sp
  401f32:	4c06      	ldr	r4, [pc, #24]	; (401f4c <xTimerGenericCommand+0x6c>)
  401f34:	47a0      	blx	r4
  401f36:	e000      	b.n	401f3a <xTimerGenericCommand+0x5a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
  401f38:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
  401f3a:	b005      	add	sp, #20
  401f3c:	bd30      	pop	{r4, r5, pc}
  401f3e:	bf00      	nop
  401f40:	2040c33c 	.word	0x2040c33c
  401f44:	00401c19 	.word	0x00401c19
  401f48:	00400c55 	.word	0x00400c55
  401f4c:	00400e31 	.word	0x00400e31

00401f50 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
  401f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401f54:	b082      	sub	sp, #8
  401f56:	4680      	mov	r8, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
  401f58:	4b25      	ldr	r3, [pc, #148]	; (401ff0 <prvSampleTimeNow+0xa0>)
  401f5a:	4798      	blx	r3
  401f5c:	4607      	mov	r7, r0

	if( xTimeNow < xLastTime )
  401f5e:	4b25      	ldr	r3, [pc, #148]	; (401ff4 <prvSampleTimeNow+0xa4>)
  401f60:	681b      	ldr	r3, [r3, #0]
  401f62:	4298      	cmp	r0, r3
  401f64:	d23b      	bcs.n	401fde <prvSampleTimeNow+0x8e>
  401f66:	e02b      	b.n	401fc0 <prvSampleTimeNow+0x70>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f68:	68db      	ldr	r3, [r3, #12]
  401f6a:	f8d3 a000 	ldr.w	sl, [r3]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  401f6e:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401f70:	f104 0904 	add.w	r9, r4, #4
  401f74:	4648      	mov	r0, r9
  401f76:	47b0      	blx	r6
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  401f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f7a:	4620      	mov	r0, r4
  401f7c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  401f7e:	69e3      	ldr	r3, [r4, #28]
  401f80:	2b01      	cmp	r3, #1
  401f82:	d11f      	bne.n	401fc4 <prvSampleTimeNow+0x74>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  401f84:	69a3      	ldr	r3, [r4, #24]
  401f86:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  401f88:	459a      	cmp	sl, r3
  401f8a:	d206      	bcs.n	401f9a <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  401f8c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  401f8e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  401f90:	4649      	mov	r1, r9
  401f92:	6828      	ldr	r0, [r5, #0]
  401f94:	4b18      	ldr	r3, [pc, #96]	; (401ff8 <prvSampleTimeNow+0xa8>)
  401f96:	4798      	blx	r3
  401f98:	e014      	b.n	401fc4 <prvSampleTimeNow+0x74>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  401f9a:	2100      	movs	r1, #0
  401f9c:	9100      	str	r1, [sp, #0]
  401f9e:	460b      	mov	r3, r1
  401fa0:	4652      	mov	r2, sl
  401fa2:	4620      	mov	r0, r4
  401fa4:	4c15      	ldr	r4, [pc, #84]	; (401ffc <prvSampleTimeNow+0xac>)
  401fa6:	47a0      	blx	r4
				configASSERT( xResult );
  401fa8:	b960      	cbnz	r0, 401fc4 <prvSampleTimeNow+0x74>
  401faa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fae:	b672      	cpsid	i
  401fb0:	f383 8811 	msr	BASEPRI, r3
  401fb4:	f3bf 8f6f 	isb	sy
  401fb8:	f3bf 8f4f 	dsb	sy
  401fbc:	b662      	cpsie	i
  401fbe:	e7fe      	b.n	401fbe <prvSampleTimeNow+0x6e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401fc0:	4d0f      	ldr	r5, [pc, #60]	; (402000 <prvSampleTimeNow+0xb0>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  401fc2:	4e10      	ldr	r6, [pc, #64]	; (402004 <prvSampleTimeNow+0xb4>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  401fc4:	682b      	ldr	r3, [r5, #0]
  401fc6:	681a      	ldr	r2, [r3, #0]
  401fc8:	2a00      	cmp	r2, #0
  401fca:	d1cd      	bne.n	401f68 <prvSampleTimeNow+0x18>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
  401fcc:	4a0e      	ldr	r2, [pc, #56]	; (402008 <prvSampleTimeNow+0xb8>)
  401fce:	6810      	ldr	r0, [r2, #0]
  401fd0:	490b      	ldr	r1, [pc, #44]	; (402000 <prvSampleTimeNow+0xb0>)
  401fd2:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  401fd4:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
  401fd6:	2301      	movs	r3, #1
  401fd8:	f8c8 3000 	str.w	r3, [r8]
  401fdc:	e002      	b.n	401fe4 <prvSampleTimeNow+0x94>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
  401fde:	2300      	movs	r3, #0
  401fe0:	f8c8 3000 	str.w	r3, [r8]
	}

	xLastTime = xTimeNow;
  401fe4:	4b03      	ldr	r3, [pc, #12]	; (401ff4 <prvSampleTimeNow+0xa4>)
  401fe6:	601f      	str	r7, [r3, #0]

	return xTimeNow;
}
  401fe8:	4638      	mov	r0, r7
  401fea:	b002      	add	sp, #8
  401fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ff0:	0040159d 	.word	0x0040159d
  401ff4:	2040c338 	.word	0x2040c338
  401ff8:	00400915 	.word	0x00400915
  401ffc:	00401ee1 	.word	0x00401ee1
  402000:	2040c30c 	.word	0x2040c30c
  402004:	00400949 	.word	0x00400949
  402008:	2040c340 	.word	0x2040c340

0040200c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
  40200c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  402010:	b089      	sub	sp, #36	; 0x24
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402012:	4c68      	ldr	r4, [pc, #416]	; (4021b4 <prvTimerTask+0x1a8>)
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  402014:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 4021e4 <prvTimerTask+0x1d8>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402018:	4d67      	ldr	r5, [pc, #412]	; (4021b8 <prvTimerTask+0x1ac>)
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40201a:	4b68      	ldr	r3, [pc, #416]	; (4021bc <prvTimerTask+0x1b0>)
  40201c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40201e:	681a      	ldr	r2, [r3, #0]
  402020:	2a00      	cmp	r2, #0
  402022:	f000 80b5 	beq.w	402190 <prvTimerTask+0x184>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402026:	68db      	ldr	r3, [r3, #12]
  402028:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  40202a:	4b65      	ldr	r3, [pc, #404]	; (4021c0 <prvTimerTask+0x1b4>)
  40202c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40202e:	a804      	add	r0, sp, #16
  402030:	4b64      	ldr	r3, [pc, #400]	; (4021c4 <prvTimerTask+0x1b8>)
  402032:	4798      	blx	r3
  402034:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402036:	9b04      	ldr	r3, [sp, #16]
  402038:	2b00      	cmp	r3, #0
  40203a:	d144      	bne.n	4020c6 <prvTimerTask+0xba>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  40203c:	42b0      	cmp	r0, r6
  40203e:	d330      	bcc.n	4020a2 <prvTimerTask+0x96>
			{
				( void ) xTaskResumeAll();
  402040:	4b61      	ldr	r3, [pc, #388]	; (4021c8 <prvTimerTask+0x1bc>)
  402042:	4798      	blx	r3
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402044:	4b5d      	ldr	r3, [pc, #372]	; (4021bc <prvTimerTask+0x1b0>)
  402046:	681b      	ldr	r3, [r3, #0]
  402048:	68db      	ldr	r3, [r3, #12]
  40204a:	f8d3 900c 	ldr.w	r9, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40204e:	f109 0004 	add.w	r0, r9, #4
  402052:	4b5e      	ldr	r3, [pc, #376]	; (4021cc <prvTimerTask+0x1c0>)
  402054:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402056:	f8d9 301c 	ldr.w	r3, [r9, #28]
  40205a:	2b01      	cmp	r3, #1
  40205c:	d11c      	bne.n	402098 <prvTimerTask+0x8c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  40205e:	f8d9 1018 	ldr.w	r1, [r9, #24]
  402062:	4633      	mov	r3, r6
  402064:	463a      	mov	r2, r7
  402066:	4431      	add	r1, r6
  402068:	4648      	mov	r0, r9
  40206a:	4f59      	ldr	r7, [pc, #356]	; (4021d0 <prvTimerTask+0x1c4>)
  40206c:	47b8      	blx	r7
  40206e:	2801      	cmp	r0, #1
  402070:	d112      	bne.n	402098 <prvTimerTask+0x8c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402072:	2100      	movs	r1, #0
  402074:	9100      	str	r1, [sp, #0]
  402076:	460b      	mov	r3, r1
  402078:	4632      	mov	r2, r6
  40207a:	4648      	mov	r0, r9
  40207c:	4e55      	ldr	r6, [pc, #340]	; (4021d4 <prvTimerTask+0x1c8>)
  40207e:	47b0      	blx	r6
			configASSERT( xResult );
  402080:	b950      	cbnz	r0, 402098 <prvTimerTask+0x8c>
  402082:	f04f 0380 	mov.w	r3, #128	; 0x80
  402086:	b672      	cpsid	i
  402088:	f383 8811 	msr	BASEPRI, r3
  40208c:	f3bf 8f6f 	isb	sy
  402090:	f3bf 8f4f 	dsb	sy
  402094:	b662      	cpsie	i
  402096:	e7fe      	b.n	402096 <prvTimerTask+0x8a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402098:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40209c:	4648      	mov	r0, r9
  40209e:	4798      	blx	r3
  4020a0:	e06d      	b.n	40217e <prvTimerTask+0x172>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4020a2:	2200      	movs	r2, #0
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4020a4:	1bf1      	subs	r1, r6, r7
  4020a6:	6820      	ldr	r0, [r4, #0]
  4020a8:	4b4b      	ldr	r3, [pc, #300]	; (4021d8 <prvTimerTask+0x1cc>)
  4020aa:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
  4020ac:	4b46      	ldr	r3, [pc, #280]	; (4021c8 <prvTimerTask+0x1bc>)
  4020ae:	4798      	blx	r3
  4020b0:	2800      	cmp	r0, #0
  4020b2:	d164      	bne.n	40217e <prvTimerTask+0x172>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
  4020b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4020b8:	f8c8 3000 	str.w	r3, [r8]
  4020bc:	f3bf 8f4f 	dsb	sy
  4020c0:	f3bf 8f6f 	isb	sy
  4020c4:	e05b      	b.n	40217e <prvTimerTask+0x172>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
  4020c6:	4b40      	ldr	r3, [pc, #256]	; (4021c8 <prvTimerTask+0x1bc>)
  4020c8:	4798      	blx	r3
  4020ca:	e058      	b.n	40217e <prvTimerTask+0x172>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4020cc:	9b04      	ldr	r3, [sp, #16]
  4020ce:	2b00      	cmp	r3, #0
  4020d0:	da06      	bge.n	4020e0 <prvTimerTask+0xd4>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4020d2:	9907      	ldr	r1, [sp, #28]
  4020d4:	9806      	ldr	r0, [sp, #24]
  4020d6:	9b05      	ldr	r3, [sp, #20]
  4020d8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4020da:	9b04      	ldr	r3, [sp, #16]
  4020dc:	2b00      	cmp	r3, #0
  4020de:	db4f      	blt.n	402180 <prvTimerTask+0x174>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4020e0:	9e06      	ldr	r6, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4020e2:	6973      	ldr	r3, [r6, #20]
  4020e4:	b10b      	cbz	r3, 4020ea <prvTimerTask+0xde>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4020e6:	1d30      	adds	r0, r6, #4
  4020e8:	47b8      	blx	r7
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4020ea:	a803      	add	r0, sp, #12
  4020ec:	4b35      	ldr	r3, [pc, #212]	; (4021c4 <prvTimerTask+0x1b8>)
  4020ee:	4798      	blx	r3

			switch( xMessage.xMessageID )
  4020f0:	9b04      	ldr	r3, [sp, #16]
  4020f2:	2b09      	cmp	r3, #9
  4020f4:	d844      	bhi.n	402180 <prvTimerTask+0x174>
  4020f6:	e8df f003 	tbb	[pc, r3]
  4020fa:	0505      	.short	0x0505
  4020fc:	3f2a4305 	.word	0x3f2a4305
  402100:	2a430505 	.word	0x2a430505
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402104:	9f05      	ldr	r7, [sp, #20]
  402106:	69b1      	ldr	r1, [r6, #24]
  402108:	463b      	mov	r3, r7
  40210a:	4602      	mov	r2, r0
  40210c:	4439      	add	r1, r7
  40210e:	4630      	mov	r0, r6
  402110:	4f2f      	ldr	r7, [pc, #188]	; (4021d0 <prvTimerTask+0x1c4>)
  402112:	47b8      	blx	r7
  402114:	2801      	cmp	r0, #1
  402116:	d132      	bne.n	40217e <prvTimerTask+0x172>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402118:	6a73      	ldr	r3, [r6, #36]	; 0x24
  40211a:	4630      	mov	r0, r6
  40211c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40211e:	69f3      	ldr	r3, [r6, #28]
  402120:	2b01      	cmp	r3, #1
  402122:	d12c      	bne.n	40217e <prvTimerTask+0x172>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402124:	69b2      	ldr	r2, [r6, #24]
  402126:	2100      	movs	r1, #0
  402128:	9100      	str	r1, [sp, #0]
  40212a:	460b      	mov	r3, r1
  40212c:	9805      	ldr	r0, [sp, #20]
  40212e:	4402      	add	r2, r0
  402130:	4630      	mov	r0, r6
  402132:	4e28      	ldr	r6, [pc, #160]	; (4021d4 <prvTimerTask+0x1c8>)
  402134:	47b0      	blx	r6
							configASSERT( xResult );
  402136:	bb10      	cbnz	r0, 40217e <prvTimerTask+0x172>
  402138:	f04f 0380 	mov.w	r3, #128	; 0x80
  40213c:	b672      	cpsid	i
  40213e:	f383 8811 	msr	BASEPRI, r3
  402142:	f3bf 8f6f 	isb	sy
  402146:	f3bf 8f4f 	dsb	sy
  40214a:	b662      	cpsie	i
  40214c:	e7fe      	b.n	40214c <prvTimerTask+0x140>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  40214e:	9905      	ldr	r1, [sp, #20]
  402150:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402152:	b951      	cbnz	r1, 40216a <prvTimerTask+0x15e>
  402154:	f04f 0380 	mov.w	r3, #128	; 0x80
  402158:	b672      	cpsid	i
  40215a:	f383 8811 	msr	BASEPRI, r3
  40215e:	f3bf 8f6f 	isb	sy
  402162:	f3bf 8f4f 	dsb	sy
  402166:	b662      	cpsie	i
  402168:	e7fe      	b.n	402168 <prvTimerTask+0x15c>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  40216a:	4603      	mov	r3, r0
  40216c:	4602      	mov	r2, r0
  40216e:	4401      	add	r1, r0
  402170:	4630      	mov	r0, r6
  402172:	4e17      	ldr	r6, [pc, #92]	; (4021d0 <prvTimerTask+0x1c4>)
  402174:	47b0      	blx	r6
  402176:	e002      	b.n	40217e <prvTimerTask+0x172>
					break;

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
  402178:	4630      	mov	r0, r6
  40217a:	4b18      	ldr	r3, [pc, #96]	; (4021dc <prvTimerTask+0x1d0>)
  40217c:	4798      	blx	r3
			pxTimer = xMessage.u.xTimerParameters.pxTimer;

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40217e:	4f13      	ldr	r7, [pc, #76]	; (4021cc <prvTimerTask+0x1c0>)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402180:	2300      	movs	r3, #0
  402182:	461a      	mov	r2, r3
  402184:	a904      	add	r1, sp, #16
  402186:	6820      	ldr	r0, [r4, #0]
  402188:	47a8      	blx	r5
  40218a:	2800      	cmp	r0, #0
  40218c:	d19e      	bne.n	4020cc <prvTimerTask+0xc0>
  40218e:	e744      	b.n	40201a <prvTimerTask+0xe>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
  402190:	4b0b      	ldr	r3, [pc, #44]	; (4021c0 <prvTimerTask+0x1b4>)
  402192:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402194:	a804      	add	r0, sp, #16
  402196:	4b0b      	ldr	r3, [pc, #44]	; (4021c4 <prvTimerTask+0x1b8>)
  402198:	4798      	blx	r3
  40219a:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40219c:	9b04      	ldr	r3, [sp, #16]
  40219e:	2b00      	cmp	r3, #0
  4021a0:	d191      	bne.n	4020c6 <prvTimerTask+0xba>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4021a2:	4b0f      	ldr	r3, [pc, #60]	; (4021e0 <prvTimerTask+0x1d4>)
  4021a4:	681b      	ldr	r3, [r3, #0]
  4021a6:	681a      	ldr	r2, [r3, #0]
  4021a8:	fab2 f282 	clz	r2, r2
  4021ac:	0952      	lsrs	r2, r2, #5
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  4021ae:	2600      	movs	r6, #0
  4021b0:	e778      	b.n	4020a4 <prvTimerTask+0x98>
  4021b2:	bf00      	nop
  4021b4:	2040c33c 	.word	0x2040c33c
  4021b8:	00401009 	.word	0x00401009
  4021bc:	2040c30c 	.word	0x2040c30c
  4021c0:	0040158d 	.word	0x0040158d
  4021c4:	00401f51 	.word	0x00401f51
  4021c8:	004016dd 	.word	0x004016dd
  4021cc:	00400949 	.word	0x00400949
  4021d0:	00401dbd 	.word	0x00401dbd
  4021d4:	00401ee1 	.word	0x00401ee1
  4021d8:	00401201 	.word	0x00401201
  4021dc:	004008c1 	.word	0x004008c1
  4021e0:	2040c340 	.word	0x2040c340
  4021e4:	e000ed04 	.word	0xe000ed04

004021e8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4021e8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4021ea:	4810      	ldr	r0, [pc, #64]	; (40222c <sysclk_init+0x44>)
  4021ec:	4b10      	ldr	r3, [pc, #64]	; (402230 <sysclk_init+0x48>)
  4021ee:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4021f0:	213e      	movs	r1, #62	; 0x3e
  4021f2:	2000      	movs	r0, #0
  4021f4:	4b0f      	ldr	r3, [pc, #60]	; (402234 <sysclk_init+0x4c>)
  4021f6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4021f8:	4c0f      	ldr	r4, [pc, #60]	; (402238 <sysclk_init+0x50>)
  4021fa:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4021fc:	2800      	cmp	r0, #0
  4021fe:	d0fc      	beq.n	4021fa <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  402200:	4b0e      	ldr	r3, [pc, #56]	; (40223c <sysclk_init+0x54>)
  402202:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  402204:	4a0e      	ldr	r2, [pc, #56]	; (402240 <sysclk_init+0x58>)
  402206:	4b0f      	ldr	r3, [pc, #60]	; (402244 <sysclk_init+0x5c>)
  402208:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40220a:	4c0f      	ldr	r4, [pc, #60]	; (402248 <sysclk_init+0x60>)
  40220c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40220e:	2800      	cmp	r0, #0
  402210:	d0fc      	beq.n	40220c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  402212:	2002      	movs	r0, #2
  402214:	4b0d      	ldr	r3, [pc, #52]	; (40224c <sysclk_init+0x64>)
  402216:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  402218:	2000      	movs	r0, #0
  40221a:	4b0d      	ldr	r3, [pc, #52]	; (402250 <sysclk_init+0x68>)
  40221c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40221e:	4b0d      	ldr	r3, [pc, #52]	; (402254 <sysclk_init+0x6c>)
  402220:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  402222:	4802      	ldr	r0, [pc, #8]	; (40222c <sysclk_init+0x44>)
  402224:	4b02      	ldr	r3, [pc, #8]	; (402230 <sysclk_init+0x48>)
  402226:	4798      	blx	r3
  402228:	bd10      	pop	{r4, pc}
  40222a:	bf00      	nop
  40222c:	11e1a300 	.word	0x11e1a300
  402230:	00402a41 	.word	0x00402a41
  402234:	00402501 	.word	0x00402501
  402238:	00402555 	.word	0x00402555
  40223c:	00402565 	.word	0x00402565
  402240:	20183f01 	.word	0x20183f01
  402244:	400e0600 	.word	0x400e0600
  402248:	00402575 	.word	0x00402575
  40224c:	0040245d 	.word	0x0040245d
  402250:	00402499 	.word	0x00402499
  402254:	00402931 	.word	0x00402931

00402258 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  402258:	b570      	push	{r4, r5, r6, lr}
  40225a:	b082      	sub	sp, #8
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  40225c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  40225e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  402260:	4013      	ands	r3, r2
  402262:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  402264:	2400      	movs	r4, #0
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  402266:	4e1a      	ldr	r6, [pc, #104]	; (4022d0 <afec_process_callback+0x78>)
  402268:	4d1a      	ldr	r5, [pc, #104]	; (4022d4 <afec_process_callback+0x7c>)
  40226a:	42a8      	cmp	r0, r5
  40226c:	bf14      	ite	ne
  40226e:	2000      	movne	r0, #0
  402270:	2001      	moveq	r0, #1
  402272:	0105      	lsls	r5, r0, #4

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  402274:	2c0b      	cmp	r4, #11
  402276:	d80a      	bhi.n	40228e <afec_process_callback+0x36>
				if (status & (1 << cnt)) {
					afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
				}
			}
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
  402278:	9a01      	ldr	r2, [sp, #4]
  40227a:	2301      	movs	r3, #1
  40227c:	40a3      	lsls	r3, r4
  40227e:	4213      	tst	r3, r2
  402280:	d020      	beq.n	4022c4 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  402282:	192b      	adds	r3, r5, r4
  402284:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  402288:	b1e3      	cbz	r3, 4022c4 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  40228a:	4798      	blx	r3
  40228c:	e01a      	b.n	4022c4 <afec_process_callback+0x6c>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  40228e:	2c0e      	cmp	r4, #14
  402290:	d80c      	bhi.n	4022ac <afec_process_callback+0x54>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  402292:	9a01      	ldr	r2, [sp, #4]
  402294:	f104 010c 	add.w	r1, r4, #12
  402298:	2301      	movs	r3, #1
  40229a:	408b      	lsls	r3, r1
  40229c:	4213      	tst	r3, r2
  40229e:	d011      	beq.n	4022c4 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4022a0:	192b      	adds	r3, r5, r4
  4022a2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4022a6:	b16b      	cbz	r3, 4022c4 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4022a8:	4798      	blx	r3
  4022aa:	e00b      	b.n	4022c4 <afec_process_callback+0x6c>
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4022ac:	9a01      	ldr	r2, [sp, #4]
  4022ae:	f104 010f 	add.w	r1, r4, #15
  4022b2:	2301      	movs	r3, #1
  4022b4:	408b      	lsls	r3, r1
  4022b6:	4213      	tst	r3, r2
  4022b8:	d004      	beq.n	4022c4 <afec_process_callback+0x6c>
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
	if (afec_callback_pointer[inst_num][source]) {
  4022ba:	192b      	adds	r3, r5, r4
  4022bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
  4022c0:	b103      	cbz	r3, 4022c4 <afec_process_callback+0x6c>
		afec_callback_pointer[inst_num][source]();
  4022c2:	4798      	blx	r3
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
	inst_num = afec_find_inst_num(afec);

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  4022c4:	3401      	adds	r4, #1
  4022c6:	2c10      	cmp	r4, #16
  4022c8:	d1d4      	bne.n	402274 <afec_process_callback+0x1c>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		}
	}
}
  4022ca:	b002      	add	sp, #8
  4022cc:	bd70      	pop	{r4, r5, r6, pc}
  4022ce:	bf00      	nop
  4022d0:	2040c3c0 	.word	0x2040c3c0
  4022d4:	40064000 	.word	0x40064000

004022d8 <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  4022d8:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  4022da:	4802      	ldr	r0, [pc, #8]	; (4022e4 <AFEC0_Handler+0xc>)
  4022dc:	4b02      	ldr	r3, [pc, #8]	; (4022e8 <AFEC0_Handler+0x10>)
  4022de:	4798      	blx	r3
  4022e0:	bd08      	pop	{r3, pc}
  4022e2:	bf00      	nop
  4022e4:	4003c000 	.word	0x4003c000
  4022e8:	00402259 	.word	0x00402259

004022ec <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4022ec:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4022ee:	4802      	ldr	r0, [pc, #8]	; (4022f8 <AFEC1_Handler+0xc>)
  4022f0:	4b02      	ldr	r3, [pc, #8]	; (4022fc <AFEC1_Handler+0x10>)
  4022f2:	4798      	blx	r3
  4022f4:	bd08      	pop	{r3, pc}
  4022f6:	bf00      	nop
  4022f8:	40064000 	.word	0x40064000
  4022fc:	00402259 	.word	0x00402259

00402300 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  402300:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  402304:	0052      	lsls	r2, r2, #1
  402306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40230a:	fbb3 f2f2 	udiv	r2, r3, r2
  40230e:	3a01      	subs	r2, #1
  402310:	f3c2 020d 	ubfx	r2, r2, #0, #14
  402314:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  402318:	4770      	bx	lr
  40231a:	bf00      	nop

0040231c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40231c:	6301      	str	r1, [r0, #48]	; 0x30
  40231e:	4770      	bx	lr

00402320 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  402320:	6341      	str	r1, [r0, #52]	; 0x34
  402322:	4770      	bx	lr

00402324 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  402324:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402326:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40232a:	d02f      	beq.n	40238c <pio_set_peripheral+0x68>
  40232c:	d807      	bhi.n	40233e <pio_set_peripheral+0x1a>
  40232e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  402332:	d014      	beq.n	40235e <pio_set_peripheral+0x3a>
  402334:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  402338:	d01e      	beq.n	402378 <pio_set_peripheral+0x54>
  40233a:	b939      	cbnz	r1, 40234c <pio_set_peripheral+0x28>
  40233c:	4770      	bx	lr
  40233e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  402342:	d037      	beq.n	4023b4 <pio_set_peripheral+0x90>
  402344:	d804      	bhi.n	402350 <pio_set_peripheral+0x2c>
  402346:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40234a:	d029      	beq.n	4023a0 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40234c:	6042      	str	r2, [r0, #4]
  40234e:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  402350:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  402354:	d02e      	beq.n	4023b4 <pio_set_peripheral+0x90>
  402356:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40235a:	d02b      	beq.n	4023b4 <pio_set_peripheral+0x90>
  40235c:	e7f6      	b.n	40234c <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40235e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402360:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  402362:	6f01      	ldr	r1, [r0, #112]	; 0x70
  402364:	43d3      	mvns	r3, r2
  402366:	4021      	ands	r1, r4
  402368:	4019      	ands	r1, r3
  40236a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40236c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40236e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  402370:	4021      	ands	r1, r4
  402372:	400b      	ands	r3, r1
  402374:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  402376:	e01a      	b.n	4023ae <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  402378:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40237a:	4313      	orrs	r3, r2
  40237c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40237e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  402380:	6f43      	ldr	r3, [r0, #116]	; 0x74
  402382:	400b      	ands	r3, r1
  402384:	ea23 0302 	bic.w	r3, r3, r2
  402388:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40238a:	e7df      	b.n	40234c <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40238c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40238e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  402390:	400b      	ands	r3, r1
  402392:	ea23 0302 	bic.w	r3, r3, r2
  402396:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  402398:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40239a:	4313      	orrs	r3, r2
  40239c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40239e:	e7d5      	b.n	40234c <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4023a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4023a2:	4313      	orrs	r3, r2
  4023a4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4023a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4023a8:	4313      	orrs	r3, r2
  4023aa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4023ac:	e7ce      	b.n	40234c <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4023ae:	6042      	str	r2, [r0, #4]
}
  4023b0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4023b4:	4770      	bx	lr
  4023b6:	bf00      	nop

004023b8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4023b8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4023ba:	f012 0f01 	tst.w	r2, #1
  4023be:	d001      	beq.n	4023c4 <pio_set_input+0xc>
		p_pio->PIO_PUER = ul_mask;
  4023c0:	6641      	str	r1, [r0, #100]	; 0x64
  4023c2:	e000      	b.n	4023c6 <pio_set_input+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4023c4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4023c6:	f012 0f0a 	tst.w	r2, #10
  4023ca:	d001      	beq.n	4023d0 <pio_set_input+0x18>
		p_pio->PIO_IFER = ul_mask;
  4023cc:	6201      	str	r1, [r0, #32]
  4023ce:	e000      	b.n	4023d2 <pio_set_input+0x1a>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  4023d0:	6241      	str	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  4023d2:	f012 0f02 	tst.w	r2, #2
  4023d6:	d002      	beq.n	4023de <pio_set_input+0x26>
		p_pio->PIO_IFSCDR = ul_mask;
  4023d8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  4023dc:	e004      	b.n	4023e8 <pio_set_input+0x30>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  4023de:	f012 0f08 	tst.w	r2, #8
  4023e2:	d001      	beq.n	4023e8 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4023e4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4023e8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4023ea:	6001      	str	r1, [r0, #0]
  4023ec:	4770      	bx	lr
  4023ee:	bf00      	nop

004023f0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4023f0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4023f2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4023f4:	9c01      	ldr	r4, [sp, #4]
  4023f6:	b10c      	cbz	r4, 4023fc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4023f8:	6641      	str	r1, [r0, #100]	; 0x64
  4023fa:	e000      	b.n	4023fe <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4023fc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4023fe:	b10b      	cbz	r3, 402404 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  402400:	6501      	str	r1, [r0, #80]	; 0x50
  402402:	e000      	b.n	402406 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  402404:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  402406:	b10a      	cbz	r2, 40240c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  402408:	6301      	str	r1, [r0, #48]	; 0x30
  40240a:	e000      	b.n	40240e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  40240c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40240e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  402410:	6001      	str	r1, [r0, #0]
}
  402412:	f85d 4b04 	ldr.w	r4, [sp], #4
  402416:	4770      	bx	lr

00402418 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  402418:	f012 0f10 	tst.w	r2, #16
  40241c:	d012      	beq.n	402444 <pio_configure_interrupt+0x2c>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  40241e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  402422:	f012 0f20 	tst.w	r2, #32
  402426:	d002      	beq.n	40242e <pio_configure_interrupt+0x16>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  402428:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
  40242c:	e001      	b.n	402432 <pio_configure_interrupt+0x1a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  40242e:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  402432:	f012 0f40 	tst.w	r2, #64	; 0x40
  402436:	d002      	beq.n	40243e <pio_configure_interrupt+0x26>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  402438:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40243c:	4770      	bx	lr
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  40243e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  402442:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  402444:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  402448:	4770      	bx	lr
  40244a:	bf00      	nop

0040244c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_ISR;
  40244c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
	p_pio->PIO_IER = ul_mask;
  40244e:	6401      	str	r1, [r0, #64]	; 0x40
  402450:	4770      	bx	lr
  402452:	bf00      	nop

00402454 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  402454:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  402456:	4770      	bx	lr

00402458 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  402458:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  40245a:	4770      	bx	lr

0040245c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40245c:	2803      	cmp	r0, #3
  40245e:	d007      	beq.n	402470 <pmc_mck_set_division+0x14>
  402460:	2804      	cmp	r0, #4
  402462:	d008      	beq.n	402476 <pmc_mck_set_division+0x1a>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402464:	2802      	cmp	r0, #2
  402466:	bf0c      	ite	eq
  402468:	f44f 7280 	moveq.w	r2, #256	; 0x100
  40246c:	2200      	movne	r2, #0
  40246e:	e004      	b.n	40247a <pmc_mck_set_division+0x1e>
			break;
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
			break;
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402470:	f44f 7240 	mov.w	r2, #768	; 0x300
			break;
  402474:	e001      	b.n	40247a <pmc_mck_set_division+0x1e>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  402476:	f44f 7200 	mov.w	r2, #512	; 0x200
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40247a:	4906      	ldr	r1, [pc, #24]	; (402494 <pmc_mck_set_division+0x38>)
  40247c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40247e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  402482:	4313      	orrs	r3, r2
			break;
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
  402484:	630b      	str	r3, [r1, #48]	; 0x30
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402486:	460a      	mov	r2, r1
  402488:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40248a:	f013 0f08 	tst.w	r3, #8
  40248e:	d0fb      	beq.n	402488 <pmc_mck_set_division+0x2c>
}
  402490:	4770      	bx	lr
  402492:	bf00      	nop
  402494:	400e0600 	.word	0x400e0600

00402498 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402498:	4a18      	ldr	r2, [pc, #96]	; (4024fc <pmc_switch_mck_to_pllack+0x64>)
  40249a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40249c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4024a0:	4318      	orrs	r0, r3
  4024a2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4024a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4024a6:	f013 0f08 	tst.w	r3, #8
  4024aa:	d003      	beq.n	4024b4 <pmc_switch_mck_to_pllack+0x1c>
  4024ac:	e009      	b.n	4024c2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4024ae:	3b01      	subs	r3, #1
  4024b0:	d103      	bne.n	4024ba <pmc_switch_mck_to_pllack+0x22>
  4024b2:	e01e      	b.n	4024f2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4024b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4024b8:	4910      	ldr	r1, [pc, #64]	; (4024fc <pmc_switch_mck_to_pllack+0x64>)
  4024ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4024bc:	f012 0f08 	tst.w	r2, #8
  4024c0:	d0f5      	beq.n	4024ae <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4024c2:	4a0e      	ldr	r2, [pc, #56]	; (4024fc <pmc_switch_mck_to_pllack+0x64>)
  4024c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4024c6:	f023 0303 	bic.w	r3, r3, #3
  4024ca:	f043 0302 	orr.w	r3, r3, #2
  4024ce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4024d0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4024d2:	f010 0008 	ands.w	r0, r0, #8
  4024d6:	d004      	beq.n	4024e2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4024d8:	2000      	movs	r0, #0
  4024da:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4024dc:	3b01      	subs	r3, #1
  4024de:	d103      	bne.n	4024e8 <pmc_switch_mck_to_pllack+0x50>
  4024e0:	e009      	b.n	4024f6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4024e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4024e6:	4905      	ldr	r1, [pc, #20]	; (4024fc <pmc_switch_mck_to_pllack+0x64>)
  4024e8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4024ea:	f012 0f08 	tst.w	r2, #8
  4024ee:	d0f5      	beq.n	4024dc <pmc_switch_mck_to_pllack+0x44>
  4024f0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4024f2:	2001      	movs	r0, #1
  4024f4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4024f6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4024f8:	4770      	bx	lr
  4024fa:	bf00      	nop
  4024fc:	400e0600 	.word	0x400e0600

00402500 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402500:	b138      	cbz	r0, 402512 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402502:	490e      	ldr	r1, [pc, #56]	; (40253c <pmc_switch_mainck_to_xtal+0x3c>)
  402504:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402506:	4a0e      	ldr	r2, [pc, #56]	; (402540 <pmc_switch_mainck_to_xtal+0x40>)
  402508:	401a      	ands	r2, r3
  40250a:	4b0e      	ldr	r3, [pc, #56]	; (402544 <pmc_switch_mainck_to_xtal+0x44>)
  40250c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40250e:	620b      	str	r3, [r1, #32]
  402510:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402512:	480a      	ldr	r0, [pc, #40]	; (40253c <pmc_switch_mainck_to_xtal+0x3c>)
  402514:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402516:	0209      	lsls	r1, r1, #8
  402518:	b289      	uxth	r1, r1
  40251a:	4a0b      	ldr	r2, [pc, #44]	; (402548 <pmc_switch_mainck_to_xtal+0x48>)
  40251c:	401a      	ands	r2, r3
  40251e:	4b0b      	ldr	r3, [pc, #44]	; (40254c <pmc_switch_mainck_to_xtal+0x4c>)
  402520:	4313      	orrs	r3, r2
  402522:	4319      	orrs	r1, r3
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402524:	6201      	str	r1, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402526:	4602      	mov	r2, r0
  402528:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40252a:	f013 0f01 	tst.w	r3, #1
  40252e:	d0fb      	beq.n	402528 <pmc_switch_mainck_to_xtal+0x28>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402530:	4a02      	ldr	r2, [pc, #8]	; (40253c <pmc_switch_mainck_to_xtal+0x3c>)
  402532:	6a11      	ldr	r1, [r2, #32]
  402534:	4b06      	ldr	r3, [pc, #24]	; (402550 <pmc_switch_mainck_to_xtal+0x50>)
  402536:	430b      	orrs	r3, r1
  402538:	6213      	str	r3, [r2, #32]
  40253a:	4770      	bx	lr
  40253c:	400e0600 	.word	0x400e0600
  402540:	fec8fffc 	.word	0xfec8fffc
  402544:	01370002 	.word	0x01370002
  402548:	ffc8fffc 	.word	0xffc8fffc
  40254c:	00370001 	.word	0x00370001
  402550:	01370000 	.word	0x01370000

00402554 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402554:	4b02      	ldr	r3, [pc, #8]	; (402560 <pmc_osc_is_ready_mainck+0xc>)
  402556:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402558:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40255c:	4770      	bx	lr
  40255e:	bf00      	nop
  402560:	400e0600 	.word	0x400e0600

00402564 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402564:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402568:	4b01      	ldr	r3, [pc, #4]	; (402570 <pmc_disable_pllack+0xc>)
  40256a:	629a      	str	r2, [r3, #40]	; 0x28
  40256c:	4770      	bx	lr
  40256e:	bf00      	nop
  402570:	400e0600 	.word	0x400e0600

00402574 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402574:	4b02      	ldr	r3, [pc, #8]	; (402580 <pmc_is_locked_pllack+0xc>)
  402576:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  402578:	f000 0002 	and.w	r0, r0, #2
  40257c:	4770      	bx	lr
  40257e:	bf00      	nop
  402580:	400e0600 	.word	0x400e0600

00402584 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  402584:	283f      	cmp	r0, #63	; 0x3f
  402586:	d81e      	bhi.n	4025c6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  402588:	281f      	cmp	r0, #31
  40258a:	d80c      	bhi.n	4025a6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40258c:	4b11      	ldr	r3, [pc, #68]	; (4025d4 <pmc_enable_periph_clk+0x50>)
  40258e:	699a      	ldr	r2, [r3, #24]
  402590:	2301      	movs	r3, #1
  402592:	4083      	lsls	r3, r0
  402594:	4393      	bics	r3, r2
  402596:	d018      	beq.n	4025ca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  402598:	2301      	movs	r3, #1
  40259a:	fa03 f000 	lsl.w	r0, r3, r0
  40259e:	4b0d      	ldr	r3, [pc, #52]	; (4025d4 <pmc_enable_periph_clk+0x50>)
  4025a0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4025a2:	2000      	movs	r0, #0
  4025a4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4025a6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4025a8:	4b0a      	ldr	r3, [pc, #40]	; (4025d4 <pmc_enable_periph_clk+0x50>)
  4025aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4025ae:	2301      	movs	r3, #1
  4025b0:	4083      	lsls	r3, r0
  4025b2:	4393      	bics	r3, r2
  4025b4:	d00b      	beq.n	4025ce <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4025b6:	2301      	movs	r3, #1
  4025b8:	fa03 f000 	lsl.w	r0, r3, r0
  4025bc:	4b05      	ldr	r3, [pc, #20]	; (4025d4 <pmc_enable_periph_clk+0x50>)
  4025be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4025c2:	2000      	movs	r0, #0
  4025c4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4025c6:	2001      	movs	r0, #1
  4025c8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4025ca:	2000      	movs	r0, #0
  4025cc:	4770      	bx	lr
  4025ce:	2000      	movs	r0, #0
}
  4025d0:	4770      	bx	lr
  4025d2:	bf00      	nop
  4025d4:	400e0600 	.word	0x400e0600

004025d8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4025d8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4025da:	23ac      	movs	r3, #172	; 0xac
  4025dc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4025de:	680b      	ldr	r3, [r1, #0]
  4025e0:	684a      	ldr	r2, [r1, #4]
  4025e2:	fbb3 f3f2 	udiv	r3, r3, r2
  4025e6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4025e8:	1e5c      	subs	r4, r3, #1
  4025ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4025ee:	4294      	cmp	r4, r2
  4025f0:	d806      	bhi.n	402600 <uart_init+0x28>
		return 1;

	p_uart->UART_BRGR = cd;
  4025f2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4025f4:	688b      	ldr	r3, [r1, #8]
  4025f6:	6043      	str	r3, [r0, #4]
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  4025f8:	2350      	movs	r3, #80	; 0x50
  4025fa:	6003      	str	r3, [r0, #0]

	return 0;
  4025fc:	2000      	movs	r0, #0
  4025fe:	e000      	b.n	402602 <uart_init+0x2a>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  402600:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  402602:	f85d 4b04 	ldr.w	r4, [sp], #4
  402606:	4770      	bx	lr

00402608 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
  402608:	2340      	movs	r3, #64	; 0x40
  40260a:	6003      	str	r3, [r0, #0]
  40260c:	4770      	bx	lr
  40260e:	bf00      	nop

00402610 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
  402610:	2310      	movs	r3, #16
  402612:	6003      	str	r3, [r0, #0]
  402614:	4770      	bx	lr
  402616:	bf00      	nop

00402618 <uart_enable>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  402618:	2350      	movs	r3, #80	; 0x50
  40261a:	6003      	str	r3, [r0, #0]
  40261c:	4770      	bx	lr
  40261e:	bf00      	nop

00402620 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
  402620:	6081      	str	r1, [r0, #8]
  402622:	4770      	bx	lr

00402624 <uart_is_tx_ready>:
 * \retval 1 Data has been transmitted.
 * \retval 0 Transmit is not ready, data pending.
 */
uint32_t uart_is_tx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
  402624:	6940      	ldr	r0, [r0, #20]
}
  402626:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40262a:	4770      	bx	lr

0040262c <uart_set_clock_divisor>:
 * \param us_divisor Value to be set.
 *
 */
void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
{
	p_uart->UART_BRGR = us_divisor;
  40262c:	6201      	str	r1, [r0, #32]
  40262e:	4770      	bx	lr

00402630 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  402630:	6943      	ldr	r3, [r0, #20]
  402632:	f013 0f02 	tst.w	r3, #2
  402636:	d002      	beq.n	40263e <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  402638:	61c1      	str	r1, [r0, #28]
	return 0;
  40263a:	2000      	movs	r0, #0
  40263c:	4770      	bx	lr
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  40263e:	2001      	movs	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  402640:	4770      	bx	lr
  402642:	bf00      	nop

00402644 <board_init>:
#define PIOD_SPI					PIO_PD20|PIO_PD21|PIO_PD22
#define PIOB_SPI					PIO_PB2


void board_init(void)
{
  402644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402648:	b087      	sub	sp, #28
	   ######################################
					Setup Clock
	   ######################################
	   ###################################### */
	CONFIG_SYSCLK_SOURCE;
	supc_switch_sclk_to_32kxtal(SUPC,0);
  40264a:	2100      	movs	r1, #0
  40264c:	4863      	ldr	r0, [pc, #396]	; (4027dc <board_init+0x198>)
  40264e:	4b64      	ldr	r3, [pc, #400]	; (4027e0 <board_init+0x19c>)
  402650:	4798      	blx	r3
	sysclk_init();
  402652:	4b64      	ldr	r3, [pc, #400]	; (4027e4 <board_init+0x1a0>)
  402654:	4798      	blx	r3
	/* ######################################
	   ######################################
					Enable UART
	   ######################################
	   ###################################### */
	const sam_uart_opt_t usart_console_settings = {
  402656:	4b64      	ldr	r3, [pc, #400]	; (4027e8 <board_init+0x1a4>)
  402658:	ac03      	add	r4, sp, #12
  40265a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40265e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  402662:	2008      	movs	r0, #8
  402664:	4e61      	ldr	r6, [pc, #388]	; (4027ec <board_init+0x1a8>)
  402666:	47b0      	blx	r6
		UART_SERIAL_PARITY,
		UART_SERIAL_STOP_BIT,
		UART_MR_CHMODE_NORMAL
	};
	sysclk_enable_peripheral_clock(ID_UART1);
	pmc_enable_periph_clk(ID_UART1);
  402668:	2008      	movs	r0, #8
  40266a:	47b0      	blx	r6
	uart_init(UART1, &usart_console_settings);
  40266c:	4621      	mov	r1, r4
  40266e:	4860      	ldr	r0, [pc, #384]	; (4027f0 <board_init+0x1ac>)
  402670:	4b60      	ldr	r3, [pc, #384]	; (4027f4 <board_init+0x1b0>)
  402672:	4798      	blx	r3
	uart_enable(UART1);
  402674:	485e      	ldr	r0, [pc, #376]	; (4027f0 <board_init+0x1ac>)
  402676:	4b60      	ldr	r3, [pc, #384]	; (4027f8 <board_init+0x1b4>)
  402678:	4798      	blx	r3
	uart_enable_tx(UART1);
  40267a:	485d      	ldr	r0, [pc, #372]	; (4027f0 <board_init+0x1ac>)
  40267c:	4b5f      	ldr	r3, [pc, #380]	; (4027fc <board_init+0x1b8>)
  40267e:	4798      	blx	r3
	uart_enable_rx(UART1);
  402680:	485b      	ldr	r0, [pc, #364]	; (4027f0 <board_init+0x1ac>)
  402682:	4b5f      	ldr	r3, [pc, #380]	; (402800 <board_init+0x1bc>)
  402684:	4798      	blx	r3
	uart_set_clock_divisor(UART1,(83/1)); //Pippin had GLOBAL_SLOWDOWN IT WAS VALUED 1
  402686:	2153      	movs	r1, #83	; 0x53
  402688:	4859      	ldr	r0, [pc, #356]	; (4027f0 <board_init+0x1ac>)
  40268a:	4b5e      	ldr	r3, [pc, #376]	; (402804 <board_init+0x1c0>)
  40268c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
  40268e:	200a      	movs	r0, #10
  402690:	47b0      	blx	r6
	pio_set_peripheral(PIOA,PIO_TYPE_PIO_PERIPH_C,1<<4 | 1<<5);
  402692:	2230      	movs	r2, #48	; 0x30
  402694:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402698:	485b      	ldr	r0, [pc, #364]	; (402808 <board_init+0x1c4>)
  40269a:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 402888 <board_init+0x244>
  40269e:	47d8      	blx	fp
	//Test UART
	sendDebugString("MELLATRON9000 BOOT SEQUENCE\nUART CONSOLE STARTED ON UART4\nBaudRate: 115200\nBits: 8\nNo stop bits \n");
  4026a0:	485a      	ldr	r0, [pc, #360]	; (40280c <board_init+0x1c8>)
  4026a2:	4d5b      	ldr	r5, [pc, #364]	; (402810 <board_init+0x1cc>)
  4026a4:	47a8      	blx	r5
	   ######################################
	   ###################################### */
	//sendDebugString("LED INITIALIZATION - STARTED\n");
		//pio_set_peripheral(PIOB,PIO_TYPE_PIO_OUTPUT_1,1<<12);
		//pmc_enable_periph_clk(ID_PIOA);
		pmc_enable_periph_clk(ID_PIOD);
  4026a6:	2010      	movs	r0, #16
  4026a8:	47b0      	blx	r6
		pio_set_output(LED1,LOW,DISABLE,DISABLE);
  4026aa:	2400      	movs	r4, #0
  4026ac:	9400      	str	r4, [sp, #0]
  4026ae:	4623      	mov	r3, r4
  4026b0:	4622      	mov	r2, r4
  4026b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4026b6:	4857      	ldr	r0, [pc, #348]	; (402814 <board_init+0x1d0>)
  4026b8:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 40288c <board_init+0x248>
  4026bc:	47d0      	blx	sl
		pio_set_output(LED2,LOW,DISABLE,DISABLE);
  4026be:	9400      	str	r4, [sp, #0]
  4026c0:	4623      	mov	r3, r4
  4026c2:	4622      	mov	r2, r4
  4026c4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4026c8:	4852      	ldr	r0, [pc, #328]	; (402814 <board_init+0x1d0>)
  4026ca:	47d0      	blx	sl
	/* ######################################
	   ######################################
					Enable SPI
	   ######################################
	   ###################################### */
		sendDebugString("SPI INITIALIZATION - STARTED\n");
  4026cc:	4852      	ldr	r0, [pc, #328]	; (402818 <board_init+0x1d4>)
  4026ce:	47a8      	blx	r5
  4026d0:	2015      	movs	r0, #21
  4026d2:	47b0      	blx	r6
		sysclk_enable_peripheral_clock(ID_SPI0);
		pmc_enable_periph_clk(ID_PIOD);
  4026d4:	2010      	movs	r0, #16
  4026d6:	47b0      	blx	r6
		pmc_enable_periph_clk(ID_PIOB);
  4026d8:	200b      	movs	r0, #11
  4026da:	47b0      	blx	r6
		
		struct spi_device spidevice;
		spidevice.id = 0;
  4026dc:	f10d 0918 	add.w	r9, sp, #24
  4026e0:	f849 4d10 	str.w	r4, [r9, #-16]!
		
		
		//Set up SPI
		spi_master_init(SPI0);
  4026e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 402890 <board_init+0x24c>
  4026e8:	4640      	mov	r0, r8
  4026ea:	4b4c      	ldr	r3, [pc, #304]	; (40281c <board_init+0x1d8>)
  4026ec:	4798      	blx	r3
		spi_master_setup_device(SPI0,&spidevice,SPI_MODE_0,3000000,0); //was 16000000
  4026ee:	9400      	str	r4, [sp, #0]
  4026f0:	4b4b      	ldr	r3, [pc, #300]	; (402820 <board_init+0x1dc>)
  4026f2:	4622      	mov	r2, r4
  4026f4:	4649      	mov	r1, r9
  4026f6:	4640      	mov	r0, r8
  4026f8:	4f4a      	ldr	r7, [pc, #296]	; (402824 <board_init+0x1e0>)
  4026fa:	47b8      	blx	r7
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4026fc:	2701      	movs	r7, #1
  4026fe:	f8c8 7000 	str.w	r7, [r8]
		spi_enable(SPI0);
		spi_select_device(SPI0,&spidevice);
  402702:	4649      	mov	r1, r9
  402704:	4640      	mov	r0, r8
  402706:	4b48      	ldr	r3, [pc, #288]	; (402828 <board_init+0x1e4>)
  402708:	4798      	blx	r3
		spi_disable_loopback(SPI0);
		spi_set_peripheral_chip_select_value(SPI0,spi_get_pcs(DEFAULT_CHIP_ID))*/
		
		
		
		pio_set_peripheral(PIOD,PIO_TYPE_PIO_PERIPH_B,PIOD_SPI);
  40270a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
  40270e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402712:	4840      	ldr	r0, [pc, #256]	; (402814 <board_init+0x1d0>)
  402714:	47d8      	blx	fp
		pio_set_peripheral(PIOB,PIO_TYPE_PIO_PERIPH_D,PIOB_SPI);
  402716:	f508 2859 	add.w	r8, r8, #888832	; 0xd9000
  40271a:	2204      	movs	r2, #4
  40271c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  402720:	4640      	mov	r0, r8
  402722:	47d8      	blx	fp
		sendDebugString("SPI INITIALIZATION - FINISHED\n");
  402724:	4841      	ldr	r0, [pc, #260]	; (40282c <board_init+0x1e8>)
  402726:	47a8      	blx	r5
		sendDebugString("DWM1000 INITIALIZATION - STARTED\n");
  402728:	4841      	ldr	r0, [pc, #260]	; (402830 <board_init+0x1ec>)
  40272a:	47a8      	blx	r5
		pio_set_output(PIOB_DWM_RESET,LOW,DISABLE,DISABLE);
  40272c:	9400      	str	r4, [sp, #0]
  40272e:	4623      	mov	r3, r4
  402730:	4622      	mov	r2, r4
  402732:	4639      	mov	r1, r7
  402734:	4640      	mov	r0, r8
  402736:	47d0      	blx	sl
		pio_set(PIOB_DWM_RESET);
  402738:	4639      	mov	r1, r7
  40273a:	4640      	mov	r0, r8
  40273c:	4b3d      	ldr	r3, [pc, #244]	; (402834 <board_init+0x1f0>)
  40273e:	4798      	blx	r3
		pio_clear(PIOB_DWM_RESET);
  402740:	4639      	mov	r1, r7
  402742:	4640      	mov	r0, r8
  402744:	4b3c      	ldr	r3, [pc, #240]	; (402838 <board_init+0x1f4>)
  402746:	4798      	blx	r3
		//DW1000_initialise();
		
		
		
		
		sendDebugString("DWM1000 INITIALIZATION - FINISHED\n");
  402748:	483c      	ldr	r0, [pc, #240]	; (40283c <board_init+0x1f8>)
  40274a:	47a8      	blx	r5
	/* ######################################
	   ######################################
					Disable Watchdog
	   ######################################
	   ###################################### */
		sendDebugString("WATCHDOG INITIALIZATION - STARTED\n");
  40274c:	483c      	ldr	r0, [pc, #240]	; (402840 <board_init+0x1fc>)
  40274e:	47a8      	blx	r5
		wdt_disable(WDT);
  402750:	483c      	ldr	r0, [pc, #240]	; (402844 <board_init+0x200>)
  402752:	4b3d      	ldr	r3, [pc, #244]	; (402848 <board_init+0x204>)
  402754:	4798      	blx	r3
		sendDebugString("WATCHDOG INITIALIZATION - FINISHED\n");
  402756:	483d      	ldr	r0, [pc, #244]	; (40284c <board_init+0x208>)
  402758:	47a8      	blx	r5
		/* ######################################
	   ######################################
					Enable IRQ
	   ######################################
	   ###################################### */
		sendDebugString("GLOBAL IRQ INITIALIZATION - STARTED\n");
  40275a:	483d      	ldr	r0, [pc, #244]	; (402850 <board_init+0x20c>)
  40275c:	47a8      	blx	r5
		cpu_irq_enable();
  40275e:	4b3d      	ldr	r3, [pc, #244]	; (402854 <board_init+0x210>)
  402760:	701f      	strb	r7, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  402762:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  402766:	b662      	cpsie	i
		sendDebugString("GLOBAL IRQ INITIALIZATION - FINISHED\n");
  402768:	483b      	ldr	r0, [pc, #236]	; (402858 <board_init+0x214>)
  40276a:	47a8      	blx	r5
	/* ######################################
	   ######################################
                  Setup Switches
	   ######################################
	   ###################################### */
		pmc_enable_periph_clk(ID_PIOA);
  40276c:	200a      	movs	r0, #10
  40276e:	47b0      	blx	r6
		pio_set_input(PIOA,PIOA_BUTTSANDDIR,PIO_PULLUP|PIO_DEBOUNCE);
  402770:	4e3a      	ldr	r6, [pc, #232]	; (40285c <board_init+0x218>)
  402772:	2209      	movs	r2, #9
  402774:	4631      	mov	r1, r6
  402776:	4824      	ldr	r0, [pc, #144]	; (402808 <board_init+0x1c4>)
  402778:	4b39      	ldr	r3, [pc, #228]	; (402860 <board_init+0x21c>)
  40277a:	4798      	blx	r3
		pio_set_debounce_filter(PIOA,PIOA_BUTTSANDDIR,100);
  40277c:	2264      	movs	r2, #100	; 0x64
  40277e:	4631      	mov	r1, r6
  402780:	4821      	ldr	r0, [pc, #132]	; (402808 <board_init+0x1c4>)
  402782:	4b38      	ldr	r3, [pc, #224]	; (402864 <board_init+0x220>)
  402784:	4798      	blx	r3
	   ######################################
                  Setup Interrupts
	   ######################################
	   ###################################### */
	
		sendDebugString("PERIPHERAL IRQ INITIALIZATION - STARTED\n");
  402786:	4838      	ldr	r0, [pc, #224]	; (402868 <board_init+0x224>)
  402788:	47a8      	blx	r5
		//NVIC_ClearPendingIRQ(ISI_IRQn);
		//NVIC_SetPriority(ISI_IRQn,7);
		//NVIC_EnableIRQ(ISI_IRQn);
		
		//UART4
		uart_enable_interrupt(UART1,UART_IER_RXRDY);
  40278a:	4639      	mov	r1, r7
  40278c:	4818      	ldr	r0, [pc, #96]	; (4027f0 <board_init+0x1ac>)
  40278e:	4b37      	ldr	r3, [pc, #220]	; (40286c <board_init+0x228>)
  402790:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402792:	4c37      	ldr	r4, [pc, #220]	; (402870 <board_init+0x22c>)
  402794:	f44f 7380 	mov.w	r3, #256	; 0x100
  402798:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40279c:	27c0      	movs	r7, #192	; 0xc0
  40279e:	f884 7308 	strb.w	r7, [r4, #776]	; 0x308
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4027a2:	6023      	str	r3, [r4, #0]
		NVIC_ClearPendingIRQ(UART1_IRQn);
		NVIC_SetPriority(UART1_IRQn,6);
		NVIC_EnableIRQ(UART1_IRQn);
		sendDebugString("PERIPHERAL IRQ INITIALIZATION - FINISHED\n");
  4027a4:	4833      	ldr	r0, [pc, #204]	; (402874 <board_init+0x230>)
  4027a6:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4027a8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  4027ac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4027b0:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4027b4:	f884 730a 	strb.w	r7, [r4, #778]	; 0x30a

		NVIC_DisableIRQ(PIOA_IRQn);
		NVIC_ClearPendingIRQ(PIOA_IRQn);
		NVIC_SetPriority(PIOA_IRQn, 6);
		pio_enable_interrupt(PIOA,PIOA_BUTTSANDDIR);
  4027b8:	4631      	mov	r1, r6
  4027ba:	4813      	ldr	r0, [pc, #76]	; (402808 <board_init+0x1c4>)
  4027bc:	4b2e      	ldr	r3, [pc, #184]	; (402878 <board_init+0x234>)
  4027be:	4798      	blx	r3
		pio_configure_interrupt(PIOA,PIOA_BUTTONS, PIO_IT_FALL_EDGE);
  4027c0:	2250      	movs	r2, #80	; 0x50
  4027c2:	492e      	ldr	r1, [pc, #184]	; (40287c <board_init+0x238>)
  4027c4:	4810      	ldr	r0, [pc, #64]	; (402808 <board_init+0x1c4>)
  4027c6:	4e2e      	ldr	r6, [pc, #184]	; (402880 <board_init+0x23c>)
  4027c8:	47b0      	blx	r6
		pio_configure_interrupt(PIOA,PIOA_DIRECTIONS, PIO_IT_EDGE);
  4027ca:	2240      	movs	r2, #64	; 0x40
  4027cc:	492d      	ldr	r1, [pc, #180]	; (402884 <board_init+0x240>)
  4027ce:	480e      	ldr	r0, [pc, #56]	; (402808 <board_init+0x1c4>)
  4027d0:	47b0      	blx	r6
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4027d2:	6025      	str	r5, [r4, #0]
		NVIC_EnableIRQ(PIOA_IRQn);
		
		 
}
  4027d4:	b007      	add	sp, #28
  4027d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4027da:	bf00      	nop
  4027dc:	400e1810 	.word	0x400e1810
  4027e0:	00400515 	.word	0x00400515
  4027e4:	004021e9 	.word	0x004021e9
  4027e8:	00407f04 	.word	0x00407f04
  4027ec:	00402585 	.word	0x00402585
  4027f0:	400e0a00 	.word	0x400e0a00
  4027f4:	004025d9 	.word	0x004025d9
  4027f8:	00402619 	.word	0x00402619
  4027fc:	00402609 	.word	0x00402609
  402800:	00402611 	.word	0x00402611
  402804:	0040262d 	.word	0x0040262d
  402808:	400e0e00 	.word	0x400e0e00
  40280c:	00407f10 	.word	0x00407f10
  402810:	00402ae9 	.word	0x00402ae9
  402814:	400e1400 	.word	0x400e1400
  402818:	00407f74 	.word	0x00407f74
  40281c:	0040019d 	.word	0x0040019d
  402820:	002dc6c0 	.word	0x002dc6c0
  402824:	004001f1 	.word	0x004001f1
  402828:	00400271 	.word	0x00400271
  40282c:	00407f94 	.word	0x00407f94
  402830:	00407fb4 	.word	0x00407fb4
  402834:	0040231d 	.word	0x0040231d
  402838:	00402321 	.word	0x00402321
  40283c:	00407fd8 	.word	0x00407fd8
  402840:	00407ffc 	.word	0x00407ffc
  402844:	400e1850 	.word	0x400e1850
  402848:	00400541 	.word	0x00400541
  40284c:	00408020 	.word	0x00408020
  402850:	00408044 	.word	0x00408044
  402854:	20400010 	.word	0x20400010
  402858:	0040806c 	.word	0x0040806c
  40285c:	01dff800 	.word	0x01dff800
  402860:	004023b9 	.word	0x004023b9
  402864:	00402301 	.word	0x00402301
  402868:	00408094 	.word	0x00408094
  40286c:	00402621 	.word	0x00402621
  402870:	e000e100 	.word	0xe000e100
  402874:	004080c0 	.word	0x004080c0
  402878:	0040244d 	.word	0x0040244d
  40287c:	01043800 	.word	0x01043800
  402880:	00402419 	.word	0x00402419
  402884:	00dbc000 	.word	0x00dbc000
  402888:	00402325 	.word	0x00402325
  40288c:	004023f1 	.word	0x004023f1
  402890:	40008000 	.word	0x40008000

00402894 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402894:	e7fe      	b.n	402894 <Dummy_Handler>
  402896:	bf00      	nop

00402898 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  402898:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
  40289a:	4b19      	ldr	r3, [pc, #100]	; (402900 <Reset_Handler+0x68>)
  40289c:	4a19      	ldr	r2, [pc, #100]	; (402904 <Reset_Handler+0x6c>)
  40289e:	429a      	cmp	r2, r3
  4028a0:	d003      	beq.n	4028aa <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
  4028a2:	4b19      	ldr	r3, [pc, #100]	; (402908 <Reset_Handler+0x70>)
  4028a4:	4a16      	ldr	r2, [pc, #88]	; (402900 <Reset_Handler+0x68>)
  4028a6:	429a      	cmp	r2, r3
  4028a8:	d304      	bcc.n	4028b4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4028aa:	4b18      	ldr	r3, [pc, #96]	; (40290c <Reset_Handler+0x74>)
  4028ac:	4a18      	ldr	r2, [pc, #96]	; (402910 <Reset_Handler+0x78>)
  4028ae:	429a      	cmp	r2, r3
  4028b0:	d30f      	bcc.n	4028d2 <Reset_Handler+0x3a>
  4028b2:	e01a      	b.n	4028ea <Reset_Handler+0x52>
  4028b4:	4912      	ldr	r1, [pc, #72]	; (402900 <Reset_Handler+0x68>)
  4028b6:	4b17      	ldr	r3, [pc, #92]	; (402914 <Reset_Handler+0x7c>)
  4028b8:	1a5b      	subs	r3, r3, r1
  4028ba:	f023 0303 	bic.w	r3, r3, #3
  4028be:	3304      	adds	r3, #4
  4028c0:	4a10      	ldr	r2, [pc, #64]	; (402904 <Reset_Handler+0x6c>)
  4028c2:	4413      	add	r3, r2
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
                        *pDest++ = *pSrc++;
  4028c4:	f852 0b04 	ldr.w	r0, [r2], #4
  4028c8:	f841 0b04 	str.w	r0, [r1], #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
  4028cc:	429a      	cmp	r2, r3
  4028ce:	d1f9      	bne.n	4028c4 <Reset_Handler+0x2c>
  4028d0:	e7eb      	b.n	4028aa <Reset_Handler+0x12>
  4028d2:	4b11      	ldr	r3, [pc, #68]	; (402918 <Reset_Handler+0x80>)
  4028d4:	4a11      	ldr	r2, [pc, #68]	; (40291c <Reset_Handler+0x84>)
  4028d6:	1ad2      	subs	r2, r2, r3
  4028d8:	f022 0203 	bic.w	r2, r2, #3
  4028dc:	441a      	add	r2, r3
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4028de:	3b04      	subs	r3, #4
                *pDest++ = 0;
  4028e0:	2100      	movs	r1, #0
  4028e2:	f843 1b04 	str.w	r1, [r3], #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  4028e6:	4293      	cmp	r3, r2
  4028e8:	d1fb      	bne.n	4028e2 <Reset_Handler+0x4a>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4028ea:	4a0d      	ldr	r2, [pc, #52]	; (402920 <Reset_Handler+0x88>)
  4028ec:	4b0d      	ldr	r3, [pc, #52]	; (402924 <Reset_Handler+0x8c>)
  4028ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4028f2:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  4028f4:	4b0c      	ldr	r3, [pc, #48]	; (402928 <Reset_Handler+0x90>)
  4028f6:	4798      	blx	r3

        /* Branch to main function */
        main();
  4028f8:	4b0c      	ldr	r3, [pc, #48]	; (40292c <Reset_Handler+0x94>)
  4028fa:	4798      	blx	r3
  4028fc:	e7fe      	b.n	4028fc <Reset_Handler+0x64>
  4028fe:	bf00      	nop
  402900:	20400000 	.word	0x20400000
  402904:	004083c0 	.word	0x004083c0
  402908:	2040088c 	.word	0x2040088c
  40290c:	2040c468 	.word	0x2040c468
  402910:	2040088c 	.word	0x2040088c
  402914:	2040088b 	.word	0x2040088b
  402918:	20400890 	.word	0x20400890
  40291c:	2040c46b 	.word	0x2040c46b
  402920:	e000ed00 	.word	0xe000ed00
  402924:	00400000 	.word	0x00400000
  402928:	00403c8d 	.word	0x00403c8d
  40292c:	004032a9 	.word	0x004032a9

00402930 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  402930:	4b3c      	ldr	r3, [pc, #240]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  402932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402934:	f003 0303 	and.w	r3, r3, #3
  402938:	2b01      	cmp	r3, #1
  40293a:	d00f      	beq.n	40295c <SystemCoreClockUpdate+0x2c>
  40293c:	b113      	cbz	r3, 402944 <SystemCoreClockUpdate+0x14>
  40293e:	2b02      	cmp	r3, #2
  402940:	d029      	beq.n	402996 <SystemCoreClockUpdate+0x66>
  402942:	e057      	b.n	4029f4 <SystemCoreClockUpdate+0xc4>
  {
    case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  402944:	4b38      	ldr	r3, [pc, #224]	; (402a28 <SystemCoreClockUpdate+0xf8>)
  402946:	695b      	ldr	r3, [r3, #20]
  402948:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40294c:	bf14      	ite	ne
  40294e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  402952:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  402956:	4b35      	ldr	r3, [pc, #212]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  402958:	601a      	str	r2, [r3, #0]
  40295a:	e04b      	b.n	4029f4 <SystemCoreClockUpdate+0xc4>
      }
    break;

    case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  40295c:	4b31      	ldr	r3, [pc, #196]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  40295e:	6a1b      	ldr	r3, [r3, #32]
  402960:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  402964:	d003      	beq.n	40296e <SystemCoreClockUpdate+0x3e>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  402966:	4a32      	ldr	r2, [pc, #200]	; (402a30 <SystemCoreClockUpdate+0x100>)
  402968:	4b30      	ldr	r3, [pc, #192]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  40296a:	601a      	str	r2, [r3, #0]
  40296c:	e042      	b.n	4029f4 <SystemCoreClockUpdate+0xc4>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40296e:	4a31      	ldr	r2, [pc, #196]	; (402a34 <SystemCoreClockUpdate+0x104>)
  402970:	4b2e      	ldr	r3, [pc, #184]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  402972:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  402974:	4b2b      	ldr	r3, [pc, #172]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  402976:	6a1b      	ldr	r3, [r3, #32]
  402978:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40297c:	2b10      	cmp	r3, #16
  40297e:	d002      	beq.n	402986 <SystemCoreClockUpdate+0x56>
  402980:	2b20      	cmp	r3, #32
  402982:	d004      	beq.n	40298e <SystemCoreClockUpdate+0x5e>
  402984:	e036      	b.n	4029f4 <SystemCoreClockUpdate+0xc4>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  402986:	4a2c      	ldr	r2, [pc, #176]	; (402a38 <SystemCoreClockUpdate+0x108>)
  402988:	4b28      	ldr	r3, [pc, #160]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  40298a:	601a      	str	r2, [r3, #0]
          break;
  40298c:	e032      	b.n	4029f4 <SystemCoreClockUpdate+0xc4>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  40298e:	4a28      	ldr	r2, [pc, #160]	; (402a30 <SystemCoreClockUpdate+0x100>)
  402990:	4b26      	ldr	r3, [pc, #152]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  402992:	601a      	str	r2, [r3, #0]
          break;
  402994:	e02e      	b.n	4029f4 <SystemCoreClockUpdate+0xc4>
        }
      }
    break;

    case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402996:	4b23      	ldr	r3, [pc, #140]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  402998:	6a1b      	ldr	r3, [r3, #32]
  40299a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40299e:	d003      	beq.n	4029a8 <SystemCoreClockUpdate+0x78>
      {
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4029a0:	4a23      	ldr	r2, [pc, #140]	; (402a30 <SystemCoreClockUpdate+0x100>)
  4029a2:	4b22      	ldr	r3, [pc, #136]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  4029a4:	601a      	str	r2, [r3, #0]
  4029a6:	e012      	b.n	4029ce <SystemCoreClockUpdate+0x9e>
      }
      else
      {
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4029a8:	4a22      	ldr	r2, [pc, #136]	; (402a34 <SystemCoreClockUpdate+0x104>)
  4029aa:	4b20      	ldr	r3, [pc, #128]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  4029ac:	601a      	str	r2, [r3, #0]

        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4029ae:	4b1d      	ldr	r3, [pc, #116]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  4029b0:	6a1b      	ldr	r3, [r3, #32]
  4029b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029b6:	2b10      	cmp	r3, #16
  4029b8:	d002      	beq.n	4029c0 <SystemCoreClockUpdate+0x90>
  4029ba:	2b20      	cmp	r3, #32
  4029bc:	d004      	beq.n	4029c8 <SystemCoreClockUpdate+0x98>
  4029be:	e006      	b.n	4029ce <SystemCoreClockUpdate+0x9e>
        {
          case CKGR_MOR_MOSCRCF_4_MHz:
          break;

          case CKGR_MOR_MOSCRCF_8_MHz:
            SystemCoreClock *= 2U;
  4029c0:	4a1d      	ldr	r2, [pc, #116]	; (402a38 <SystemCoreClockUpdate+0x108>)
  4029c2:	4b1a      	ldr	r3, [pc, #104]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  4029c4:	601a      	str	r2, [r3, #0]
          break;
  4029c6:	e002      	b.n	4029ce <SystemCoreClockUpdate+0x9e>

          case CKGR_MOR_MOSCRCF_12_MHz:
            SystemCoreClock *= 3U;
  4029c8:	4a19      	ldr	r2, [pc, #100]	; (402a30 <SystemCoreClockUpdate+0x100>)
  4029ca:	4b18      	ldr	r3, [pc, #96]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  4029cc:	601a      	str	r2, [r3, #0]
          default:
          break;
        }
      }

      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4029ce:	4b15      	ldr	r3, [pc, #84]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  4029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029d2:	f003 0303 	and.w	r3, r3, #3
  4029d6:	2b02      	cmp	r3, #2
  4029d8:	d10c      	bne.n	4029f4 <SystemCoreClockUpdate+0xc4>
      {
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4029da:	4a12      	ldr	r2, [pc, #72]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  4029dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4029de:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4029e0:	4812      	ldr	r0, [pc, #72]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  4029e2:	f3c3 410a 	ubfx	r1, r3, #16, #11
  4029e6:	6803      	ldr	r3, [r0, #0]
  4029e8:	fb01 3303 	mla	r3, r1, r3, r3
  4029ec:	b2d2      	uxtb	r2, r2
  4029ee:	fbb3 f3f2 	udiv	r3, r3, r2
  4029f2:	6003      	str	r3, [r0, #0]

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4029f4:	4b0b      	ldr	r3, [pc, #44]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  4029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4029f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4029fc:	2b70      	cmp	r3, #112	; 0x70
  4029fe:	d107      	bne.n	402a10 <SystemCoreClockUpdate+0xe0>
  {
    SystemCoreClock /= 3U;
  402a00:	4a0a      	ldr	r2, [pc, #40]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  402a02:	6813      	ldr	r3, [r2, #0]
  402a04:	490d      	ldr	r1, [pc, #52]	; (402a3c <SystemCoreClockUpdate+0x10c>)
  402a06:	fba1 1303 	umull	r1, r3, r1, r3
  402a0a:	085b      	lsrs	r3, r3, #1
  402a0c:	6013      	str	r3, [r2, #0]
  402a0e:	4770      	bx	lr
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  402a10:	4b04      	ldr	r3, [pc, #16]	; (402a24 <SystemCoreClockUpdate+0xf4>)
  402a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402a14:	4905      	ldr	r1, [pc, #20]	; (402a2c <SystemCoreClockUpdate+0xfc>)
  402a16:	f3c3 1202 	ubfx	r2, r3, #4, #3
  402a1a:	680b      	ldr	r3, [r1, #0]
  402a1c:	40d3      	lsrs	r3, r2
  402a1e:	600b      	str	r3, [r1, #0]
  402a20:	4770      	bx	lr
  402a22:	bf00      	nop
  402a24:	400e0600 	.word	0x400e0600
  402a28:	400e1810 	.word	0x400e1810
  402a2c:	20400014 	.word	0x20400014
  402a30:	00b71b00 	.word	0x00b71b00
  402a34:	003d0900 	.word	0x003d0900
  402a38:	007a1200 	.word	0x007a1200
  402a3c:	aaaaaaab 	.word	0xaaaaaaab

00402a40 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402a40:	4b12      	ldr	r3, [pc, #72]	; (402a8c <system_init_flash+0x4c>)
  402a42:	4298      	cmp	r0, r3
  402a44:	d804      	bhi.n	402a50 <system_init_flash+0x10>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402a46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402a4a:	4b11      	ldr	r3, [pc, #68]	; (402a90 <system_init_flash+0x50>)
  402a4c:	601a      	str	r2, [r3, #0]
  402a4e:	4770      	bx	lr
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  402a50:	4b10      	ldr	r3, [pc, #64]	; (402a94 <system_init_flash+0x54>)
  402a52:	4298      	cmp	r0, r3
  402a54:	d803      	bhi.n	402a5e <system_init_flash+0x1e>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402a56:	4a10      	ldr	r2, [pc, #64]	; (402a98 <system_init_flash+0x58>)
  402a58:	4b0d      	ldr	r3, [pc, #52]	; (402a90 <system_init_flash+0x50>)
  402a5a:	601a      	str	r2, [r3, #0]
  402a5c:	4770      	bx	lr
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  402a5e:	4b0f      	ldr	r3, [pc, #60]	; (402a9c <system_init_flash+0x5c>)
  402a60:	4298      	cmp	r0, r3
  402a62:	d803      	bhi.n	402a6c <system_init_flash+0x2c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402a64:	4a0e      	ldr	r2, [pc, #56]	; (402aa0 <system_init_flash+0x60>)
  402a66:	4b0a      	ldr	r3, [pc, #40]	; (402a90 <system_init_flash+0x50>)
  402a68:	601a      	str	r2, [r3, #0]
  402a6a:	4770      	bx	lr
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  402a6c:	4b0d      	ldr	r3, [pc, #52]	; (402aa4 <system_init_flash+0x64>)
  402a6e:	4298      	cmp	r0, r3
  402a70:	d803      	bhi.n	402a7a <system_init_flash+0x3a>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402a72:	4a0d      	ldr	r2, [pc, #52]	; (402aa8 <system_init_flash+0x68>)
  402a74:	4b06      	ldr	r3, [pc, #24]	; (402a90 <system_init_flash+0x50>)
  402a76:	601a      	str	r2, [r3, #0]
  402a78:	4770      	bx	lr
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  402a7a:	4b0c      	ldr	r3, [pc, #48]	; (402aac <system_init_flash+0x6c>)
  402a7c:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402a7e:	bf94      	ite	ls
  402a80:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402a84:	4a0a      	ldrhi	r2, [pc, #40]	; (402ab0 <system_init_flash+0x70>)
  402a86:	4b02      	ldr	r3, [pc, #8]	; (402a90 <system_init_flash+0x50>)
  402a88:	601a      	str	r2, [r3, #0]
  402a8a:	4770      	bx	lr
  402a8c:	01312cff 	.word	0x01312cff
  402a90:	400e0c00 	.word	0x400e0c00
  402a94:	026259ff 	.word	0x026259ff
  402a98:	04000100 	.word	0x04000100
  402a9c:	039386ff 	.word	0x039386ff
  402aa0:	04000200 	.word	0x04000200
  402aa4:	04c4b3ff 	.word	0x04c4b3ff
  402aa8:	04000300 	.word	0x04000300
  402aac:	05f5e0ff 	.word	0x05f5e0ff
  402ab0:	04000500 	.word	0x04000500

00402ab4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  402ab4:	4b09      	ldr	r3, [pc, #36]	; (402adc <_sbrk+0x28>)
  402ab6:	681b      	ldr	r3, [r3, #0]
  402ab8:	b913      	cbnz	r3, 402ac0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  402aba:	4a09      	ldr	r2, [pc, #36]	; (402ae0 <_sbrk+0x2c>)
  402abc:	4b07      	ldr	r3, [pc, #28]	; (402adc <_sbrk+0x28>)
  402abe:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  402ac0:	4b06      	ldr	r3, [pc, #24]	; (402adc <_sbrk+0x28>)
  402ac2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  402ac4:	181a      	adds	r2, r3, r0
  402ac6:	4907      	ldr	r1, [pc, #28]	; (402ae4 <_sbrk+0x30>)
  402ac8:	4291      	cmp	r1, r2
  402aca:	db04      	blt.n	402ad6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  402acc:	4610      	mov	r0, r2
  402ace:	4a03      	ldr	r2, [pc, #12]	; (402adc <_sbrk+0x28>)
  402ad0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  402ad2:	4618      	mov	r0, r3
  402ad4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  402ad6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  402ada:	4770      	bx	lr
  402adc:	2040c344 	.word	0x2040c344
  402ae0:	2040e668 	.word	0x2040e668
  402ae4:	2045fffc 	.word	0x2045fffc

00402ae8 <sendDebugString>:
 * Created: 9/05/2016 6:08:38 PM
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
  402ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402aec:	4680      	mov	r8, r0
  402aee:	1e47      	subs	r7, r0, #1
	for(int i=0;i<strlen(in);i++){
  402af0:	2600      	movs	r6, #0
  402af2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 402b28 <sendDebugString+0x40>
		while(!uart_is_tx_ready(UART1));
  402af6:	4d0a      	ldr	r5, [pc, #40]	; (402b20 <sendDebugString+0x38>)
  402af8:	4c0a      	ldr	r4, [pc, #40]	; (402b24 <sendDebugString+0x3c>)
		uart_write(UART1,in[i]);
  402afa:	f8df a030 	ldr.w	sl, [pc, #48]	; 402b2c <sendDebugString+0x44>
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  402afe:	e008      	b.n	402b12 <sendDebugString+0x2a>
		while(!uart_is_tx_ready(UART1));
  402b00:	4620      	mov	r0, r4
  402b02:	47a8      	blx	r5
  402b04:	2800      	cmp	r0, #0
  402b06:	d0fb      	beq.n	402b00 <sendDebugString+0x18>
		uart_write(UART1,in[i]);
  402b08:	f817 1f01 	ldrb.w	r1, [r7, #1]!
  402b0c:	4620      	mov	r0, r4
  402b0e:	47d0      	blx	sl
 *  Author: to300
 */ 
#include "Debug.h"

void sendDebugString(const char* in) {
	for(int i=0;i<strlen(in);i++){
  402b10:	3601      	adds	r6, #1
  402b12:	4640      	mov	r0, r8
  402b14:	47c8      	blx	r9
  402b16:	42b0      	cmp	r0, r6
  402b18:	d8f2      	bhi.n	402b00 <sendDebugString+0x18>
		while(!uart_is_tx_ready(UART1));
		uart_write(UART1,in[i]);
	}
}
  402b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b1e:	bf00      	nop
  402b20:	00402625 	.word	0x00402625
  402b24:	400e0a00 	.word	0x400e0a00
  402b28:	00403f01 	.word	0x00403f01
  402b2c:	00402631 	.word	0x00402631

00402b30 <DW1000_readReg>:
}

/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
  402b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402b34:	b084      	sub	sp, #16
  402b36:	af00      	add	r7, sp, #0
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
  402b38:	1ddc      	adds	r4, r3, #7
  402b3a:	f024 0407 	bic.w	r4, r4, #7
  402b3e:	ebad 0d04 	sub.w	sp, sp, r4

	struct spi_device2{
		uint32_t id;
	}spidevice1;

	spidevice1.id = 0;
  402b42:	2400      	movs	r4, #0
  402b44:	603c      	str	r4, [r7, #0]


	/* Filter results more than 4 octets */
	if (n > 8) {
  402b46:	2b08      	cmp	r3, #8
  402b48:	dc44      	bgt.n	402bd4 <DW1000_readReg+0xa4>
  402b4a:	466d      	mov	r5, sp
		return 0;									// TODO: return error
	}

	/* Generate header */
    if (!subindex) {
  402b4c:	b919      	cbnz	r1, 402b56 <DW1000_readReg+0x26>
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
  402b4e:	6078      	str	r0, [r7, #4]
/****************************************************************************/
/* HELPER FUNCTIONS */

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
  402b50:	f04f 0a01 	mov.w	sl, #1
  402b54:	e012      	b.n	402b7c <DW1000_readReg+0x4c>
	/* Generate header */
    if (!subindex) {
    	header[0] = DW1000_READ | cmd;						// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_READ_SUB | cmd;					// 0x40 OR with command if sub-index is present
  402b56:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  402b5a:	6078      	str	r0, [r7, #4]
    	if (offset < 128) {							// Check if extended sub-index is needed
  402b5c:	2a7f      	cmp	r2, #127	; 0x7f
  402b5e:	d803      	bhi.n	402b68 <DW1000_readReg+0x38>
    		header[1] = offset;						
  402b60:	60ba      	str	r2, [r7, #8]
    		headerLen = 2;
  402b62:	f04f 0a02 	mov.w	sl, #2
  402b66:	e009      	b.n	402b7c <DW1000_readReg+0x4c>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  402b68:	f002 017f 	and.w	r1, r2, #127	; 0x7f
  402b6c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  402b70:	60b9      	str	r1, [r7, #8]
    		header[2] = sub2;
  402b72:	f3c2 12c7 	ubfx	r2, r2, #7, #8
  402b76:	60fa      	str	r2, [r7, #12]
    		headerLen = 3;
  402b78:	f04f 0a03 	mov.w	sl, #3
  402b7c:	461c      	mov	r4, r3
    	}
    }
	
	spi_select_device(SPI0,&spidevice1);
  402b7e:	4e1a      	ldr	r6, [pc, #104]	; (402be8 <DW1000_readReg+0xb8>)
  402b80:	4639      	mov	r1, r7
  402b82:	4630      	mov	r0, r6
  402b84:	4b19      	ldr	r3, [pc, #100]	; (402bec <DW1000_readReg+0xbc>)
  402b86:	4798      	blx	r3
	spi_write_packet(SPI0,header,headerLen);
  402b88:	4652      	mov	r2, sl
  402b8a:	1d39      	adds	r1, r7, #4
  402b8c:	4630      	mov	r0, r6
  402b8e:	4b18      	ldr	r3, [pc, #96]	; (402bf0 <DW1000_readReg+0xc0>)
  402b90:	4798      	blx	r3
	
	spi_read_packet(SPI0,data,n);
  402b92:	4622      	mov	r2, r4
  402b94:	4629      	mov	r1, r5
  402b96:	4630      	mov	r0, r6
  402b98:	4b16      	ldr	r3, [pc, #88]	; (402bf4 <DW1000_readReg+0xc4>)
  402b9a:	4798      	blx	r3
	spi_deselect_device(SPI0,&spidevice1);
  402b9c:	4639      	mov	r1, r7
  402b9e:	4630      	mov	r0, r6
  402ba0:	4b15      	ldr	r3, [pc, #84]	; (402bf8 <DW1000_readReg+0xc8>)
  402ba2:	4798      	blx	r3
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  402ba4:	2c01      	cmp	r4, #1
  402ba6:	d418      	bmi.n	402bda <DW1000_readReg+0xaa>
  402ba8:	192b      	adds	r3, r5, r4
  402baa:	4629      	mov	r1, r5
  402bac:	2400      	movs	r4, #0
  402bae:	2500      	movs	r5, #0
		result = (result << 8) | data[i];
  402bb0:	ea4f 2905 	mov.w	r9, r5, lsl #8
  402bb4:	ea49 6914 	orr.w	r9, r9, r4, lsr #24
  402bb8:	ea4f 2804 	mov.w	r8, r4, lsl #8
  402bbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  402bc0:	2500      	movs	r5, #0
  402bc2:	ea44 0408 	orr.w	r4, r4, r8
  402bc6:	ea45 0509 	orr.w	r5, r5, r9
				//qspi_write(QSPI,Qbuf+1,1);
				//qspi_read(QSPI,Qbuf,4);
				//sprintf(buf,"recived Test: 0x%02x%02x%02x%02x\n",Qbuf[3],Qbuf[2],Qbuf[1],Qbuf[0]);
				//sendDebugString(buf);
	
	for (i = n-1; i >= 0; i--) {
  402bca:	428b      	cmp	r3, r1
  402bcc:	d1f0      	bne.n	402bb0 <DW1000_readReg+0x80>
		result = (result << 8) | data[i];
  402bce:	4620      	mov	r0, r4
  402bd0:	4629      	mov	r1, r5
  402bd2:	e004      	b.n	402bde <DW1000_readReg+0xae>
	spidevice1.id = 0;


	/* Filter results more than 4 octets */
	if (n > 8) {
		return 0;									// TODO: return error
  402bd4:	2000      	movs	r0, #0
  402bd6:	4601      	mov	r1, r0
  402bd8:	e001      	b.n	402bde <DW1000_readReg+0xae>

uint64_t DW1000_readReg(uint8_t cmd, int subindex, uint16_t offset, int n) {
	int header [3];
	int headerLen = 1;
	uint8_t data[n];
	uint64_t result = 0;
  402bda:	2000      	movs	r0, #0
  402bdc:	4601      	mov	r1, r0
	for (i = n-1; i >= 0; i--) {
		result = (result << 8) | data[i];
	}

	return result;
}
  402bde:	3710      	adds	r7, #16
  402be0:	46bd      	mov	sp, r7
  402be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402be6:	bf00      	nop
  402be8:	40008000 	.word	0x40008000
  402bec:	00400271 	.word	0x00400271
  402bf0:	004002bd 	.word	0x004002bd
  402bf4:	004002f5 	.word	0x004002f5
  402bf8:	0040029d 	.word	0x0040029d

00402bfc <DW1000_readDeviceIdentifier>:
	 DW1000_writeReg(OTP_IF_ID, DW1000_SUB, OTP_CTRL, 0x8000, OTP_IF_LEN);
	 delay_ms(150);
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_CTRL1_OFFSET, (temp | PMSC_CTRL1_LDERUNE), PMSC_CTRL1_LEN);
}

uint64_t DW1000_readDeviceIdentifier() {
  402bfc:	b510      	push	{r4, lr}
	uint64_t result = DW1000_readReg(DEV_ID_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, DEV_ID_LEN);
  402bfe:	2304      	movs	r3, #4
  402c00:	2200      	movs	r2, #0
  402c02:	4611      	mov	r1, r2
  402c04:	4610      	mov	r0, r2
  402c06:	4c01      	ldr	r4, [pc, #4]	; (402c0c <DW1000_readDeviceIdentifier+0x10>)
  402c08:	47a0      	blx	r4
	return result;
}
  402c0a:	bd10      	pop	{r4, pc}
  402c0c:	00402b31 	.word	0x00402b31

00402c10 <DW1000_readSystemStatus>:
uint64_t DW1000_readSystemConfiguration() {
	DW1000__syscfg = DW1000_readReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_CFG_LEN);
	return DW1000__syscfg;
}

uint64_t DW1000_readSystemStatus() {
  402c10:	b510      	push	{r4, lr}
	DW1000__sysstat = DW1000_readReg(SYS_STATUS_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, SYS_STATUS_LEN);
  402c12:	2305      	movs	r3, #5
  402c14:	2200      	movs	r2, #0
  402c16:	4611      	mov	r1, r2
  402c18:	200f      	movs	r0, #15
  402c1a:	4c03      	ldr	r4, [pc, #12]	; (402c28 <DW1000_readSystemStatus+0x18>)
  402c1c:	47a0      	blx	r4
  402c1e:	4b03      	ldr	r3, [pc, #12]	; (402c2c <DW1000_readSystemStatus+0x1c>)
  402c20:	6018      	str	r0, [r3, #0]
	return DW1000__sysstat;
}
  402c22:	17c1      	asrs	r1, r0, #31
  402c24:	bd10      	pop	{r4, pc}
  402c26:	bf00      	nop
  402c28:	00402b31 	.word	0x00402b31
  402c2c:	2040c444 	.word	0x2040c444

00402c30 <DW1000_writeReg>:
	}

	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
  402c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402c34:	b087      	sub	sp, #28
  402c36:	af00      	add	r7, sp, #0
  402c38:	6078      	str	r0, [r7, #4]
  402c3a:	60b9      	str	r1, [r7, #8]
  402c3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
  402c40:	6cbe      	ldr	r6, [r7, #72]	; 0x48

	struct spi_device2{
		uint32_t id;
	}spidevice1;
	
	spidevice1.id = 0;
  402c42:	2300      	movs	r3, #0
  402c44:	613b      	str	r3, [r7, #16]

	/* Split data buffer */
	uint8_t data[n];									// Array
  402c46:	1df3      	adds	r3, r6, #7
  402c48:	f023 0307 	bic.w	r3, r3, #7
  402c4c:	ebad 0d03 	sub.w	sp, sp, r3
  402c50:	f8c7 d00c 	str.w	sp, [r7, #12]
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  402c54:	2e00      	cmp	r6, #0
  402c56:	dd25      	ble.n	402ca4 <DW1000_writeReg+0x74>
  402c58:	eb0d 0b06 	add.w	fp, sp, r6
  402c5c:	2300      	movs	r3, #0
  402c5e:	20ff      	movs	r0, #255	; 0xff
  402c60:	2100      	movs	r1, #0
  402c62:	46ec      	mov	ip, sp
  402c64:	4616      	mov	r6, r2
  402c66:	465a      	mov	r2, fp
        data[i] = (buffer & mask) >> (i * 8);
  402c68:	ea08 0a00 	and.w	sl, r8, r0
  402c6c:	ea09 0b01 	and.w	fp, r9, r1
  402c70:	f1c3 0e20 	rsb	lr, r3, #32
  402c74:	f1a3 0520 	sub.w	r5, r3, #32
  402c78:	fa2a f403 	lsr.w	r4, sl, r3
  402c7c:	fa0b fe0e 	lsl.w	lr, fp, lr
  402c80:	ea44 040e 	orr.w	r4, r4, lr
  402c84:	fa2b f505 	lsr.w	r5, fp, r5
  402c88:	432c      	orrs	r4, r5
  402c8a:	f80c 4b01 	strb.w	r4, [ip], #1
        mask = mask << 8;
  402c8e:	020c      	lsls	r4, r1, #8
  402c90:	ea44 6410 	orr.w	r4, r4, r0, lsr #24
  402c94:	0205      	lsls	r5, r0, #8
  402c96:	4628      	mov	r0, r5
  402c98:	4621      	mov	r1, r4
  402c9a:	3308      	adds	r3, #8
	spidevice1.id = 0;

	/* Split data buffer */
	uint8_t data[n];									// Array
    uint64_t mask = 0xFF;							// Mask for bitwise operation (eg: first iter.- 0000 0000 0000 00FF)
    for (i = 0; i < n; i++) {
  402c9c:	4594      	cmp	ip, r2
  402c9e:	d1e3      	bne.n	402c68 <DW1000_writeReg+0x38>
  402ca0:	4632      	mov	r2, r6
  402ca2:	6cbe      	ldr	r6, [r7, #72]	; 0x48
        data[i] = (buffer & mask) >> (i * 8);
        mask = mask << 8;
    }

    /* Generate header */
    if (!subindex) {
  402ca4:	68bb      	ldr	r3, [r7, #8]
  402ca6:	b92b      	cbnz	r3, 402cb4 <DW1000_writeReg+0x84>
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
  402ca8:	687b      	ldr	r3, [r7, #4]
  402caa:	f063 007f 	orn	r0, r3, #127	; 0x7f
  402cae:	7538      	strb	r0, [r7, #20]
	return result;
}

void DW1000_writeReg(uint8_t cmd, int subindex, uint16_t offset, uint64_t buffer, int n) {
	uint8_t header[3];									// SPI transaction header
	int headerLen = 1;								// SPI transaction header length
  402cb0:	2501      	movs	r5, #1
  402cb2:	e00e      	b.n	402cd2 <DW1000_writeReg+0xa2>
    /* Generate header */
    if (!subindex) {
    	header[0] = DW1000_WRITE | cmd;					// 0x80 OR with command if no sub-index
    }
    else {
    	header[0] = DW1000_WRITE_SUB | cmd;				// 0xC0 OR with command if sub-index is present
  402cb4:	687b      	ldr	r3, [r7, #4]
  402cb6:	f063 003f 	orn	r0, r3, #63	; 0x3f
  402cba:	7538      	strb	r0, [r7, #20]
    	if (offset < 128) {							// Check if extended sub-index is needed
  402cbc:	2a7f      	cmp	r2, #127	; 0x7f
  402cbe:	d802      	bhi.n	402cc6 <DW1000_writeReg+0x96>
    		header[1] = offset;						
  402cc0:	757a      	strb	r2, [r7, #21]
    		headerLen = 2;
  402cc2:	2502      	movs	r5, #2
  402cc4:	e005      	b.n	402cd2 <DW1000_writeReg+0xa2>
    	}
    	else {
    		int sub1 = 0x7F & offset;				// 0x7F OR with offset if extended sub-index is used 
    		int sub2 = (0x7F80 & offset) >> 7;		// Remaining offset shifted right 7 bits
    		header[1] = 0x80 | sub1;
  402cc6:	f062 037f 	orn	r3, r2, #127	; 0x7f
  402cca:	757b      	strb	r3, [r7, #21]
    		header[2] = sub2;
  402ccc:	09d2      	lsrs	r2, r2, #7
  402cce:	75ba      	strb	r2, [r7, #22]
    		headerLen = 3;
  402cd0:	2503      	movs	r5, #3
    	}
    }
	//while(!(SPI0->SPI_SR & SPI_SR_TXEMPTY));
	spi_select_device(SPI0,&spidevice1);
  402cd2:	4c0c      	ldr	r4, [pc, #48]	; (402d04 <DW1000_writeReg+0xd4>)
  402cd4:	f107 0110 	add.w	r1, r7, #16
  402cd8:	4620      	mov	r0, r4
  402cda:	4b0b      	ldr	r3, [pc, #44]	; (402d08 <DW1000_writeReg+0xd8>)
  402cdc:	4798      	blx	r3
	
	spi_write_packet(SPI0,header,headerLen);
  402cde:	462a      	mov	r2, r5
  402ce0:	f107 0114 	add.w	r1, r7, #20
  402ce4:	4620      	mov	r0, r4
  402ce6:	4d09      	ldr	r5, [pc, #36]	; (402d0c <DW1000_writeReg+0xdc>)
  402ce8:	47a8      	blx	r5
	
	//for(int i = 0;i<headerLen;i++){
	//	 spi_write(SPI0,header+i,NULL,NULL);
	//}
	
	spi_write_packet(SPI0,data,n);
  402cea:	4632      	mov	r2, r6
  402cec:	68f9      	ldr	r1, [r7, #12]
  402cee:	4620      	mov	r0, r4
  402cf0:	47a8      	blx	r5
	
	spi_deselect_device(SPI0,&spidevice1);
  402cf2:	f107 0110 	add.w	r1, r7, #16
  402cf6:	4620      	mov	r0, r4
  402cf8:	4b05      	ldr	r3, [pc, #20]	; (402d10 <DW1000_writeReg+0xe0>)
  402cfa:	4798      	blx	r3
    //}
    //for (i = 0; i < n; i++) {
    	//SPI.transfer(data[i]);
    //}
    //digitalWrite(_ss, HIGH);
}
  402cfc:	371c      	adds	r7, #28
  402cfe:	46bd      	mov	sp, r7
  402d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402d04:	40008000 	.word	0x40008000
  402d08:	00400271 	.word	0x00400271
  402d0c:	004002bd 	.word	0x004002bd
  402d10:	0040029d 	.word	0x0040029d

00402d14 <DW1000_toggleGPIO_MODE>:

void DW1000_setSystemConfig(uint64_t buffer) {
	 DW1000_writeReg(SYS_CFG_ID, DW1000_NO_SUB, DW1000_NO_OFFSET, buffer, SYS_CFG_LEN);
}

void DW1000_toggleGPIO_MODE() {
  402d14:	b530      	push	{r4, r5, lr}
  402d16:	b085      	sub	sp, #20
	 DW1000_writeReg(GPIO_CTRL_ID, DW1000_SUB, GPIO_MODE_OFFSET,0x001540, GPIO_MODE_LEN);
  402d18:	2504      	movs	r5, #4
  402d1a:	9502      	str	r5, [sp, #8]
  402d1c:	f44f 52aa 	mov.w	r2, #5440	; 0x1540
  402d20:	2300      	movs	r3, #0
  402d22:	e9cd 2300 	strd	r2, r3, [sp]
  402d26:	2200      	movs	r2, #0
  402d28:	2101      	movs	r1, #1
  402d2a:	2026      	movs	r0, #38	; 0x26
  402d2c:	4c06      	ldr	r4, [pc, #24]	; (402d48 <DW1000_toggleGPIO_MODE+0x34>)
  402d2e:	47a0      	blx	r4
	 DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x00000120, PMSC_LEDC_LEN);
  402d30:	9502      	str	r5, [sp, #8]
  402d32:	f44f 7290 	mov.w	r2, #288	; 0x120
  402d36:	2300      	movs	r3, #0
  402d38:	e9cd 2300 	strd	r2, r3, [sp]
  402d3c:	2228      	movs	r2, #40	; 0x28
  402d3e:	2101      	movs	r1, #1
  402d40:	2036      	movs	r0, #54	; 0x36
  402d42:	47a0      	blx	r4
}
  402d44:	b005      	add	sp, #20
  402d46:	bd30      	pop	{r4, r5, pc}
  402d48:	00402c31 	.word	0x00402c31

00402d4c <Task1>:
	return 0;
	/* Insert application code here, after the board has been initialized. */
}


void Task1 (void* pvParameters) {
  402d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int tg = 1;
	
	pio_clear(LED1);
  402d4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402d52:	480d      	ldr	r0, [pc, #52]	; (402d88 <Task1+0x3c>)
  402d54:	4b0d      	ldr	r3, [pc, #52]	; (402d8c <Task1+0x40>)
  402d56:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
}


void Task1 (void* pvParameters) {
	int tg = 1;
  402d58:	2501      	movs	r5, #1
	
	
	
	for(;;){
		
		if(LEDtg)
  402d5a:	4c0d      	ldr	r4, [pc, #52]	; (402d90 <Task1+0x44>)
			tg = !tg;
			//sendDebugString("On\n");
		}
		else {
			
			pio_clear(LED1);
  402d5c:	4e0a      	ldr	r6, [pc, #40]	; (402d88 <Task1+0x3c>)
  402d5e:	4f0b      	ldr	r7, [pc, #44]	; (402d8c <Task1+0x40>)
	
	
	
	for(;;){
		
		if(LEDtg)
  402d60:	6823      	ldr	r3, [r4, #0]
  402d62:	b163      	cbz	r3, 402d7e <Task1+0x32>
		
		
		if (tg){
  402d64:	b135      	cbz	r5, 402d74 <Task1+0x28>
			
			pio_set(LED1);
  402d66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402d6a:	4630      	mov	r0, r6
  402d6c:	4b09      	ldr	r3, [pc, #36]	; (402d94 <Task1+0x48>)
  402d6e:	4798      	blx	r3
			tg = !tg;
  402d70:	2500      	movs	r5, #0
  402d72:	e004      	b.n	402d7e <Task1+0x32>
			//sendDebugString("On\n");
		}
		else {
			
			pio_clear(LED1);
  402d74:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402d78:	4630      	mov	r0, r6
  402d7a:	47b8      	blx	r7
			tg = !tg;
  402d7c:	2501      	movs	r5, #1
			//sendDebugString("Fresh\n");
		}
		
		
		vTaskDelay(1000);
  402d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402d82:	4b05      	ldr	r3, [pc, #20]	; (402d98 <Task1+0x4c>)
  402d84:	4798      	blx	r3
	}
  402d86:	e7eb      	b.n	402d60 <Task1+0x14>
  402d88:	400e1400 	.word	0x400e1400
  402d8c:	00402321 	.word	0x00402321
  402d90:	2040c458 	.word	0x2040c458
  402d94:	0040231d 	.word	0x0040231d
  402d98:	004017f5 	.word	0x004017f5
  402d9c:	00000000 	.word	0x00000000

00402da0 <ButtonTask>:

}

void ButtonTask(void* pvParameters){
  402da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402da4:	b095      	sub	sp, #84	; 0x54
	float movDir = 0;
	int cycle = 60;
	int max_i = 0;
	Byte walkEN = 0;
	
	PIOAsem = xSemaphoreCreateBinary();
  402da6:	2203      	movs	r2, #3
  402da8:	2100      	movs	r1, #0
  402daa:	2001      	movs	r0, #1
  402dac:	4bb2      	ldr	r3, [pc, #712]	; (403078 <ButtonTask+0x2d8>)
  402dae:	4798      	blx	r3
  402db0:	4bb2      	ldr	r3, [pc, #712]	; (40307c <ButtonTask+0x2dc>)
  402db2:	6018      	str	r0, [r3, #0]
	int SW4Downtg = 0;
	int SW4Lefttg = 0;
	int SW4Righttg = 0;
	int SW5Uptg = 0;
	int SW5Downtg = 0;
	int SW5Lefttg = 0;
  402db4:	2300      	movs	r3, #0
  402db6:	9309      	str	r3, [sp, #36]	; 0x24
	int tgd = 1;
	
	int SW4Uptg = 0;
	int SW4Downtg = 0;
	int SW4Lefttg = 0;
	int SW4Righttg = 0;
  402db8:	9304      	str	r3, [sp, #16]
	int tg2 = 1;
	int tgd = 1;
	
	int SW4Uptg = 0;
	int SW4Downtg = 0;
	int SW4Lefttg = 0;
  402dba:	9308      	str	r3, [sp, #32]
	int tg1 = 1;
	int tg2 = 1;
	int tgd = 1;
	
	int SW4Uptg = 0;
	int SW4Downtg = 0;
  402dbc:	9307      	str	r3, [sp, #28]
	
	int tg1 = 1;
	int tg2 = 1;
	int tgd = 1;
	
	int SW4Uptg = 0;
  402dbe:	9306      	str	r3, [sp, #24]

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
	int tg2 = 1;
	int tgd = 1;
  402dc0:	2301      	movs	r3, #1
  402dc2:	9305      	str	r3, [sp, #20]
}

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
	int tg2 = 1;
  402dc4:	461f      	mov	r7, r3

}

void ButtonTask(void* pvParameters){
	
	int tg1 = 1;
  402dc6:	4698      	mov	r8, r3
	
	//spidevice1.id = 0;
	
	for(;;){
		
		if( PIOAsem !=NULL){
  402dc8:	4dac      	ldr	r5, [pc, #688]	; (40307c <ButtonTask+0x2dc>)
			
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){
  402dca:	4cad      	ldr	r4, [pc, #692]	; (403080 <ButtonTask+0x2e0>)
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
						pio_clear(LED1);
  402dcc:	4ead      	ldr	r6, [pc, #692]	; (403084 <ButtonTask+0x2e4>)
	
	for(;;){
		
		if( PIOAsem !=NULL){
			
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){
  402dce:	f04f 0900 	mov.w	r9, #0
	
	//spidevice1.id = 0;
	
	for(;;){
		
		if( PIOAsem !=NULL){
  402dd2:	6828      	ldr	r0, [r5, #0]
  402dd4:	2800      	cmp	r0, #0
  402dd6:	d0fd      	beq.n	402dd4 <ButtonTask+0x34>
			
			if( xSemaphoreTake(PIOAsem,0xFFFF) == pdTRUE){
  402dd8:	464b      	mov	r3, r9
  402dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
  402dde:	4649      	mov	r1, r9
  402de0:	47a0      	blx	r4
  402de2:	2801      	cmp	r0, #1
  402de4:	d1f5      	bne.n	402dd2 <ButtonTask+0x32>
				
				switch(ButtonStatus){
  402de6:	4ba8      	ldr	r3, [pc, #672]	; (403088 <ButtonTask+0x2e8>)
  402de8:	681b      	ldr	r3, [r3, #0]
  402dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
  402dee:	f000 80cb 	beq.w	402f88 <ButtonTask+0x1e8>
  402df2:	d814      	bhi.n	402e1e <ButtonTask+0x7e>
  402df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  402df8:	f000 811c 	beq.w	403034 <ButtonTask+0x294>
  402dfc:	d806      	bhi.n	402e0c <ButtonTask+0x6c>
  402dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  402e02:	d027      	beq.n	402e54 <ButtonTask+0xb4>
  402e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  402e08:	d043      	beq.n	402e92 <ButtonTask+0xf2>
  402e0a:	e215      	b.n	403238 <ButtonTask+0x498>
  402e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  402e10:	f000 80e5 	beq.w	402fde <ButtonTask+0x23e>
  402e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402e18:	f000 808b 	beq.w	402f32 <ButtonTask+0x192>
  402e1c:	e20c      	b.n	403238 <ButtonTask+0x498>
  402e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
  402e22:	f000 81d3 	beq.w	4031cc <ButtonTask+0x42c>
  402e26:	d808      	bhi.n	402e3a <ButtonTask+0x9a>
  402e28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  402e2c:	f000 816c 	beq.w	403108 <ButtonTask+0x368>
  402e30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
  402e34:	f000 81dc 	beq.w	4031f0 <ButtonTask+0x450>
  402e38:	e1fe      	b.n	403238 <ButtonTask+0x498>
  402e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
  402e3e:	f000 81a4 	beq.w	40318a <ButtonTask+0x3ea>
  402e42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
  402e46:	f000 81e5 	beq.w	403214 <ButtonTask+0x474>
  402e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
  402e4e:	f040 81f3 	bne.w	403238 <ButtonTask+0x498>
  402e52:	e16f      	b.n	403134 <ButtonTask+0x394>
					
					case(Push1) :
					sendDebugString("Push Switch 1\n");
  402e54:	488d      	ldr	r0, [pc, #564]	; (40308c <ButtonTask+0x2ec>)
  402e56:	4b8e      	ldr	r3, [pc, #568]	; (403090 <ButtonTask+0x2f0>)
  402e58:	4798      	blx	r3
					
					
					
					
					
					DW1000_toggleGPIO_MODE();
  402e5a:	4b8e      	ldr	r3, [pc, #568]	; (403094 <ButtonTask+0x2f4>)
  402e5c:	4798      	blx	r3
					DW1000_writeReg(PMSC_ID, DW1000_SUB, PMSC_LEDC_OFFSET, 0x000F01FF, PMSC_LEDC_LEN);
  402e5e:	2304      	movs	r3, #4
  402e60:	9302      	str	r3, [sp, #8]
  402e62:	4a8d      	ldr	r2, [pc, #564]	; (403098 <ButtonTask+0x2f8>)
  402e64:	2300      	movs	r3, #0
  402e66:	e9cd 2300 	strd	r2, r3, [sp]
  402e6a:	2228      	movs	r2, #40	; 0x28
  402e6c:	2101      	movs	r1, #1
  402e6e:	2036      	movs	r0, #54	; 0x36
  402e70:	4b8a      	ldr	r3, [pc, #552]	; (40309c <ButtonTask+0x2fc>)
  402e72:	4798      	blx	r3
					sendDebugString(buffcast);
					*/
					
					
					
					if(tg2){
  402e74:	b137      	cbz	r7, 402e84 <ButtonTask+0xe4>
						pio_set(LED2);
  402e76:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402e7a:	4630      	mov	r0, r6
  402e7c:	4b88      	ldr	r3, [pc, #544]	; (4030a0 <ButtonTask+0x300>)
  402e7e:	4798      	blx	r3
						tg2 = !tg2;
  402e80:	2700      	movs	r7, #0
  402e82:	e7a4      	b.n	402dce <ButtonTask+0x2e>
					}
					else {
						pio_clear(LED2);
  402e84:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  402e88:	4630      	mov	r0, r6
  402e8a:	4b86      	ldr	r3, [pc, #536]	; (4030a4 <ButtonTask+0x304>)
  402e8c:	4798      	blx	r3
						tg2 = !tg2;
  402e8e:	2701      	movs	r7, #1
  402e90:	e79d      	b.n	402dce <ButtonTask+0x2e>
					}
					break;
					
					case(Push2) :
					sendDebugString("Push Switch 2\n");
  402e92:	4885      	ldr	r0, [pc, #532]	; (4030a8 <ButtonTask+0x308>)
  402e94:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 403090 <ButtonTask+0x2f0>
  402e98:	47c8      	blx	r9
					
					char buf[40];
					
					//spi_select_device(SPI0,&spidevice1);

					delay_us(1);
  402e9a:	2033      	movs	r0, #51	; 0x33
  402e9c:	4b83      	ldr	r3, [pc, #524]	; (4030ac <ButtonTask+0x30c>)
  402e9e:	4798      	blx	r3
					sprintf(buf,"TestDevID: 0x%x\n",DW1000_readDeviceIdentifier());
  402ea0:	4b83      	ldr	r3, [pc, #524]	; (4030b0 <ButtonTask+0x310>)
  402ea2:	4798      	blx	r3
  402ea4:	4602      	mov	r2, r0
  402ea6:	460b      	mov	r3, r1
  402ea8:	4982      	ldr	r1, [pc, #520]	; (4030b4 <ButtonTask+0x314>)
  402eaa:	a80a      	add	r0, sp, #40	; 0x28
  402eac:	f8df a22c 	ldr.w	sl, [pc, #556]	; 4030dc <ButtonTask+0x33c>
  402eb0:	47d0      	blx	sl
					sendDebugString(buf);
  402eb2:	a80a      	add	r0, sp, #40	; 0x28
  402eb4:	47c8      	blx	r9
					sendDebugString("\n");
  402eb6:	f8df b228 	ldr.w	fp, [pc, #552]	; 4030e0 <ButtonTask+0x340>
  402eba:	4658      	mov	r0, fp
  402ebc:	47c8      	blx	r9
					
					
					//spi_deselect_device(SPI0,&spidevice1);
					
					sprintf(buf,"SysStatus: 0x%x\n", DW1000_readSystemStatus());
  402ebe:	4b7e      	ldr	r3, [pc, #504]	; (4030b8 <ButtonTask+0x318>)
  402ec0:	4798      	blx	r3
  402ec2:	4602      	mov	r2, r0
  402ec4:	460b      	mov	r3, r1
  402ec6:	497d      	ldr	r1, [pc, #500]	; (4030bc <ButtonTask+0x31c>)
  402ec8:	a80a      	add	r0, sp, #40	; 0x28
  402eca:	47d0      	blx	sl
					sendDebugString(buf);
  402ecc:	a80a      	add	r0, sp, #40	; 0x28
  402ece:	47c8      	blx	r9
					sendDebugString("\n");
  402ed0:	4658      	mov	r0, fp
  402ed2:	47c8      	blx	r9
					DW1000_writeReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,0xDECA2230,PANADR_LEN);
  402ed4:	f04f 0b04 	mov.w	fp, #4
  402ed8:	f8cd b008 	str.w	fp, [sp, #8]
  402edc:	a364      	add	r3, pc, #400	; (adr r3, 403070 <ButtonTask+0x2d0>)
  402ede:	e9d3 2300 	ldrd	r2, r3, [r3]
  402ee2:	e9cd 2300 	strd	r2, r3, [sp]
  402ee6:	2200      	movs	r2, #0
  402ee8:	4611      	mov	r1, r2
  402eea:	2003      	movs	r0, #3
  402eec:	4b6b      	ldr	r3, [pc, #428]	; (40309c <ButtonTask+0x2fc>)
  402eee:	4798      	blx	r3
					sprintf(buf,"ID WRITTEN\nREAD BACK: 0x%x\n",DW1000_readReg(PANADR_ID,DW1000_NO_SUB,DW1000_NO_OFFSET,PANADR_LEN));
  402ef0:	465b      	mov	r3, fp
  402ef2:	2200      	movs	r2, #0
  402ef4:	4611      	mov	r1, r2
  402ef6:	2003      	movs	r0, #3
  402ef8:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 4030e4 <ButtonTask+0x344>
  402efc:	47d8      	blx	fp
  402efe:	4602      	mov	r2, r0
  402f00:	460b      	mov	r3, r1
  402f02:	496f      	ldr	r1, [pc, #444]	; (4030c0 <ButtonTask+0x320>)
  402f04:	a80a      	add	r0, sp, #40	; 0x28
  402f06:	47d0      	blx	sl
					sendDebugString(buf);
  402f08:	a80a      	add	r0, sp, #40	; 0x28
  402f0a:	47c8      	blx	r9
					
					//pio_set(PIOB_DWM_RESET);
					//pio_clear(PIOB_DWM_RESET);
					
					
					if(tg1){
  402f0c:	f1b8 0f00 	cmp.w	r8, #0
  402f10:	d007      	beq.n	402f22 <ButtonTask+0x182>
						pio_set(LED1);
  402f12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402f16:	4630      	mov	r0, r6
  402f18:	4b61      	ldr	r3, [pc, #388]	; (4030a0 <ButtonTask+0x300>)
  402f1a:	4798      	blx	r3
						tg1 = !tg1;
  402f1c:	f04f 0800 	mov.w	r8, #0
  402f20:	e755      	b.n	402dce <ButtonTask+0x2e>
					}
					else {
						pio_clear(LED1);
  402f22:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402f26:	4630      	mov	r0, r6
  402f28:	4b5e      	ldr	r3, [pc, #376]	; (4030a4 <ButtonTask+0x304>)
  402f2a:	4798      	blx	r3
						tg1 = !tg1;
  402f2c:	f04f 0801 	mov.w	r8, #1
  402f30:	e74d      	b.n	402dce <ButtonTask+0x2e>
					}
					break;
					
					case(SW4Left) :
					sendDebugString("NAV4 Left\n");
  402f32:	4864      	ldr	r0, [pc, #400]	; (4030c4 <ButtonTask+0x324>)
  402f34:	4b56      	ldr	r3, [pc, #344]	; (403090 <ButtonTask+0x2f0>)
  402f36:	4798      	blx	r3
					
					SW4Lefttg = !SW4Lefttg;
  402f38:	9b08      	ldr	r3, [sp, #32]
  402f3a:	2b00      	cmp	r3, #0
  402f3c:	bf0c      	ite	eq
  402f3e:	f04f 0901 	moveq.w	r9, #1
  402f42:	f04f 0900 	movne.w	r9, #0
					
					if (SW4Lefttg){
  402f46:	d10f      	bne.n	402f68 <ButtonTask+0x1c8>
						moveTurn = 0;
						movDir = 4.71;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  402f48:	f04f 0a01 	mov.w	sl, #1
  402f4c:	4b5e      	ldr	r3, [pc, #376]	; (4030c8 <ButtonTask+0x328>)
  402f4e:	f8c3 a000 	str.w	sl, [r3]
						
						pio_set(LED1);
  402f52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402f56:	4630      	mov	r0, r6
  402f58:	4b51      	ldr	r3, [pc, #324]	; (4030a0 <ButtonTask+0x300>)
  402f5a:	4798      	blx	r3
						LEDtg = 1;
  402f5c:	4b5b      	ldr	r3, [pc, #364]	; (4030cc <ButtonTask+0x32c>)
  402f5e:	f8c3 a000 	str.w	sl, [r3]
					break;
					
					case(SW4Left) :
					sendDebugString("NAV4 Left\n");
					
					SW4Lefttg = !SW4Lefttg;
  402f62:	f8cd 9020 	str.w	r9, [sp, #32]
  402f66:	e732      	b.n	402dce <ButtonTask+0x2e>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  402f68:	f04f 0a00 	mov.w	sl, #0
  402f6c:	4b56      	ldr	r3, [pc, #344]	; (4030c8 <ButtonTask+0x328>)
  402f6e:	f8c3 a000 	str.w	sl, [r3]
						pio_clear(LED1);
  402f72:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402f76:	4630      	mov	r0, r6
  402f78:	4b4a      	ldr	r3, [pc, #296]	; (4030a4 <ButtonTask+0x304>)
  402f7a:	4798      	blx	r3
						LEDtg = 0;
  402f7c:	4b53      	ldr	r3, [pc, #332]	; (4030cc <ButtonTask+0x32c>)
  402f7e:	f8c3 a000 	str.w	sl, [r3]
					break;
					
					case(SW4Left) :
					sendDebugString("NAV4 Left\n");
					
					SW4Lefttg = !SW4Lefttg;
  402f82:	f8cd 9020 	str.w	r9, [sp, #32]
  402f86:	e722      	b.n	402dce <ButtonTask+0x2e>
						LEDtg = 0;
					}
					break;
					
					case(SW4Right) :
					sendDebugString("NAV4 Right\n");
  402f88:	4851      	ldr	r0, [pc, #324]	; (4030d0 <ButtonTask+0x330>)
  402f8a:	4b41      	ldr	r3, [pc, #260]	; (403090 <ButtonTask+0x2f0>)
  402f8c:	4798      	blx	r3
					
					SW4Righttg = !SW4Righttg;
  402f8e:	9b04      	ldr	r3, [sp, #16]
  402f90:	2b00      	cmp	r3, #0
  402f92:	bf0c      	ite	eq
  402f94:	f04f 0901 	moveq.w	r9, #1
  402f98:	f04f 0900 	movne.w	r9, #0
					
					if (SW4Righttg){
  402f9c:	d10f      	bne.n	402fbe <ButtonTask+0x21e>
						moveTurn = 0;
						movDir = 1.57;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  402f9e:	f04f 0a01 	mov.w	sl, #1
  402fa2:	4b49      	ldr	r3, [pc, #292]	; (4030c8 <ButtonTask+0x328>)
  402fa4:	f8c3 a000 	str.w	sl, [r3]
						
						pio_set(LED1);
  402fa8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402fac:	4630      	mov	r0, r6
  402fae:	4b3c      	ldr	r3, [pc, #240]	; (4030a0 <ButtonTask+0x300>)
  402fb0:	4798      	blx	r3
						LEDtg = 1;
  402fb2:	4b46      	ldr	r3, [pc, #280]	; (4030cc <ButtonTask+0x32c>)
  402fb4:	f8c3 a000 	str.w	sl, [r3]
					break;
					
					case(SW4Right) :
					sendDebugString("NAV4 Right\n");
					
					SW4Righttg = !SW4Righttg;
  402fb8:	f8cd 9010 	str.w	r9, [sp, #16]
  402fbc:	e707      	b.n	402dce <ButtonTask+0x2e>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  402fbe:	f04f 0a00 	mov.w	sl, #0
  402fc2:	4b41      	ldr	r3, [pc, #260]	; (4030c8 <ButtonTask+0x328>)
  402fc4:	f8c3 a000 	str.w	sl, [r3]
						pio_clear(LED1);
  402fc8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  402fcc:	4630      	mov	r0, r6
  402fce:	4b35      	ldr	r3, [pc, #212]	; (4030a4 <ButtonTask+0x304>)
  402fd0:	4798      	blx	r3
						LEDtg = 0;
  402fd2:	4b3e      	ldr	r3, [pc, #248]	; (4030cc <ButtonTask+0x32c>)
  402fd4:	f8c3 a000 	str.w	sl, [r3]
					break;
					
					case(SW4Right) :
					sendDebugString("NAV4 Right\n");
					
					SW4Righttg = !SW4Righttg;
  402fd8:	f8cd 9010 	str.w	r9, [sp, #16]
  402fdc:	e6f7      	b.n	402dce <ButtonTask+0x2e>
					break;
					
					
					
					case(SW4Up) :
					sendDebugString("NAV4 Up\n");
  402fde:	483d      	ldr	r0, [pc, #244]	; (4030d4 <ButtonTask+0x334>)
  402fe0:	4b2b      	ldr	r3, [pc, #172]	; (403090 <ButtonTask+0x2f0>)
  402fe2:	4798      	blx	r3
					
					
					SW4Uptg = !SW4Uptg;
  402fe4:	9b06      	ldr	r3, [sp, #24]
  402fe6:	2b00      	cmp	r3, #0
  402fe8:	bf0c      	ite	eq
  402fea:	f04f 0901 	moveq.w	r9, #1
  402fee:	f04f 0900 	movne.w	r9, #0
					
					if (SW4Uptg){
  402ff2:	d10f      	bne.n	403014 <ButtonTask+0x274>
						moveTurn = 0;
						movDir = 0;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  402ff4:	f04f 0a01 	mov.w	sl, #1
  402ff8:	4b33      	ldr	r3, [pc, #204]	; (4030c8 <ButtonTask+0x328>)
  402ffa:	f8c3 a000 	str.w	sl, [r3]
						
						pio_set(LED1);
  402ffe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403002:	4630      	mov	r0, r6
  403004:	4b26      	ldr	r3, [pc, #152]	; (4030a0 <ButtonTask+0x300>)
  403006:	4798      	blx	r3
						LEDtg = 1;
  403008:	4b30      	ldr	r3, [pc, #192]	; (4030cc <ButtonTask+0x32c>)
  40300a:	f8c3 a000 	str.w	sl, [r3]
					
					case(SW4Up) :
					sendDebugString("NAV4 Up\n");
					
					
					SW4Uptg = !SW4Uptg;
  40300e:	f8cd 9018 	str.w	r9, [sp, #24]
  403012:	e6dc      	b.n	402dce <ButtonTask+0x2e>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  403014:	f04f 0a00 	mov.w	sl, #0
  403018:	4b2b      	ldr	r3, [pc, #172]	; (4030c8 <ButtonTask+0x328>)
  40301a:	f8c3 a000 	str.w	sl, [r3]
						pio_clear(LED1);
  40301e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403022:	4630      	mov	r0, r6
  403024:	4b1f      	ldr	r3, [pc, #124]	; (4030a4 <ButtonTask+0x304>)
  403026:	4798      	blx	r3
						LEDtg = 0;
  403028:	4b28      	ldr	r3, [pc, #160]	; (4030cc <ButtonTask+0x32c>)
  40302a:	f8c3 a000 	str.w	sl, [r3]
					
					case(SW4Up) :
					sendDebugString("NAV4 Up\n");
					
					
					SW4Uptg = !SW4Uptg;
  40302e:	f8cd 9018 	str.w	r9, [sp, #24]
  403032:	e6cc      	b.n	402dce <ButtonTask+0x2e>
					break;
					
					
					
					case(SW4Down) :
					sendDebugString("NAV4 Down\n");
  403034:	4828      	ldr	r0, [pc, #160]	; (4030d8 <ButtonTask+0x338>)
  403036:	4b16      	ldr	r3, [pc, #88]	; (403090 <ButtonTask+0x2f0>)
  403038:	4798      	blx	r3
					
					
					SW4Downtg = !SW4Downtg;
  40303a:	9b07      	ldr	r3, [sp, #28]
  40303c:	2b00      	cmp	r3, #0
  40303e:	bf0c      	ite	eq
  403040:	f04f 0901 	moveq.w	r9, #1
  403044:	f04f 0900 	movne.w	r9, #0
					
					
					if (SW4Downtg){
  403048:	d14e      	bne.n	4030e8 <ButtonTask+0x348>
						moveTurn = 0;
						movDir = 3.14;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  40304a:	f04f 0a01 	mov.w	sl, #1
  40304e:	4b1e      	ldr	r3, [pc, #120]	; (4030c8 <ButtonTask+0x328>)
  403050:	f8c3 a000 	str.w	sl, [r3]
						
						pio_set(LED1);
  403054:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403058:	4630      	mov	r0, r6
  40305a:	4b11      	ldr	r3, [pc, #68]	; (4030a0 <ButtonTask+0x300>)
  40305c:	4798      	blx	r3
						LEDtg = 1;
  40305e:	4b1b      	ldr	r3, [pc, #108]	; (4030cc <ButtonTask+0x32c>)
  403060:	f8c3 a000 	str.w	sl, [r3]
					
					case(SW4Down) :
					sendDebugString("NAV4 Down\n");
					
					
					SW4Downtg = !SW4Downtg;
  403064:	f8cd 901c 	str.w	r9, [sp, #28]
  403068:	e6b1      	b.n	402dce <ButtonTask+0x2e>
  40306a:	bf00      	nop
  40306c:	f3af 8000 	nop.w
  403070:	deca2230 	.word	0xdeca2230
  403074:	00000000 	.word	0x00000000
  403078:	00400bd1 	.word	0x00400bd1
  40307c:	2040c348 	.word	0x2040c348
  403080:	00401009 	.word	0x00401009
  403084:	400e1400 	.word	0x400e1400
  403088:	2040c460 	.word	0x2040c460
  40308c:	004080ec 	.word	0x004080ec
  403090:	00402ae9 	.word	0x00402ae9
  403094:	00402d15 	.word	0x00402d15
  403098:	000f01ff 	.word	0x000f01ff
  40309c:	00402c31 	.word	0x00402c31
  4030a0:	0040231d 	.word	0x0040231d
  4030a4:	00402321 	.word	0x00402321
  4030a8:	004080fc 	.word	0x004080fc
  4030ac:	20400001 	.word	0x20400001
  4030b0:	00402bfd 	.word	0x00402bfd
  4030b4:	0040810c 	.word	0x0040810c
  4030b8:	00402c11 	.word	0x00402c11
  4030bc:	00408120 	.word	0x00408120
  4030c0:	00408134 	.word	0x00408134
  4030c4:	00408150 	.word	0x00408150
  4030c8:	2040c45c 	.word	0x2040c45c
  4030cc:	2040c458 	.word	0x2040c458
  4030d0:	0040815c 	.word	0x0040815c
  4030d4:	00408168 	.word	0x00408168
  4030d8:	00408174 	.word	0x00408174
  4030dc:	00403ead 	.word	0x00403ead
  4030e0:	00407f70 	.word	0x00407f70
  4030e4:	00402b31 	.word	0x00402b31
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  4030e8:	f04f 0a00 	mov.w	sl, #0
  4030ec:	4b62      	ldr	r3, [pc, #392]	; (403278 <ButtonTask+0x4d8>)
  4030ee:	f8c3 a000 	str.w	sl, [r3]
						pio_clear(LED1);
  4030f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4030f6:	4630      	mov	r0, r6
  4030f8:	4b60      	ldr	r3, [pc, #384]	; (40327c <ButtonTask+0x4dc>)
  4030fa:	4798      	blx	r3
						LEDtg = 0;
  4030fc:	4b60      	ldr	r3, [pc, #384]	; (403280 <ButtonTask+0x4e0>)
  4030fe:	f8c3 a000 	str.w	sl, [r3]
					
					case(SW4Down) :
					sendDebugString("NAV4 Down\n");
					
					
					SW4Downtg = !SW4Downtg;
  403102:	f8cd 901c 	str.w	r9, [sp, #28]
  403106:	e662      	b.n	402dce <ButtonTask+0x2e>
					
					
					break;
					
					case(SW4Push) :
					sendDebugString("NAV4 Push\n");
  403108:	485e      	ldr	r0, [pc, #376]	; (403284 <ButtonTask+0x4e4>)
  40310a:	4b5f      	ldr	r3, [pc, #380]	; (403288 <ButtonTask+0x4e8>)
  40310c:	4798      	blx	r3
					if(tg1){
  40310e:	f1b8 0f00 	cmp.w	r8, #0
  403112:	d007      	beq.n	403124 <ButtonTask+0x384>
						pio_set(LED1);
  403114:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403118:	4630      	mov	r0, r6
  40311a:	4b5c      	ldr	r3, [pc, #368]	; (40328c <ButtonTask+0x4ec>)
  40311c:	4798      	blx	r3
						tg1 = !tg1;
  40311e:	f04f 0800 	mov.w	r8, #0
  403122:	e654      	b.n	402dce <ButtonTask+0x2e>
					}
					else {
						pio_clear(LED1);
  403124:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403128:	4630      	mov	r0, r6
  40312a:	4b54      	ldr	r3, [pc, #336]	; (40327c <ButtonTask+0x4dc>)
  40312c:	4798      	blx	r3
						tg1 = !tg1;
  40312e:	f04f 0801 	mov.w	r8, #1
  403132:	e64c      	b.n	402dce <ButtonTask+0x2e>
					}
					break;
					
					case(SW5Left) :
					sendDebugString("NAV5 Left\n");
  403134:	4856      	ldr	r0, [pc, #344]	; (403290 <ButtonTask+0x4f0>)
  403136:	4b54      	ldr	r3, [pc, #336]	; (403288 <ButtonTask+0x4e8>)
  403138:	4798      	blx	r3
					
					SW5Lefttg = !SW5Lefttg;
  40313a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40313c:	2b00      	cmp	r3, #0
  40313e:	bf0c      	ite	eq
  403140:	f04f 0901 	moveq.w	r9, #1
  403144:	f04f 0900 	movne.w	r9, #0
					
					if (SW5Lefttg){
  403148:	d10f      	bne.n	40316a <ButtonTask+0x3ca>
						moveTurn = -1;
						movDir = 0;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  40314a:	f04f 0a01 	mov.w	sl, #1
  40314e:	4b4a      	ldr	r3, [pc, #296]	; (403278 <ButtonTask+0x4d8>)
  403150:	f8c3 a000 	str.w	sl, [r3]
						
						pio_set(LED1);
  403154:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403158:	4630      	mov	r0, r6
  40315a:	4b4c      	ldr	r3, [pc, #304]	; (40328c <ButtonTask+0x4ec>)
  40315c:	4798      	blx	r3
						LEDtg = 1;
  40315e:	4b48      	ldr	r3, [pc, #288]	; (403280 <ButtonTask+0x4e0>)
  403160:	f8c3 a000 	str.w	sl, [r3]
					break;
					
					case(SW5Left) :
					sendDebugString("NAV5 Left\n");
					
					SW5Lefttg = !SW5Lefttg;
  403164:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  403168:	e631      	b.n	402dce <ButtonTask+0x2e>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  40316a:	f04f 0a00 	mov.w	sl, #0
  40316e:	4b42      	ldr	r3, [pc, #264]	; (403278 <ButtonTask+0x4d8>)
  403170:	f8c3 a000 	str.w	sl, [r3]
						pio_clear(LED1);
  403174:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403178:	4630      	mov	r0, r6
  40317a:	4b40      	ldr	r3, [pc, #256]	; (40327c <ButtonTask+0x4dc>)
  40317c:	4798      	blx	r3
						LEDtg = 0;
  40317e:	4b40      	ldr	r3, [pc, #256]	; (403280 <ButtonTask+0x4e0>)
  403180:	f8c3 a000 	str.w	sl, [r3]
					break;
					
					case(SW5Left) :
					sendDebugString("NAV5 Left\n");
					
					SW5Lefttg = !SW5Lefttg;
  403184:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  403188:	e621      	b.n	402dce <ButtonTask+0x2e>
						LEDtg = 0;
					}
					break;
					
					case(SW5Right) :
					sendDebugString("NAV5 Right\n");
  40318a:	4842      	ldr	r0, [pc, #264]	; (403294 <ButtonTask+0x4f4>)
  40318c:	4b3e      	ldr	r3, [pc, #248]	; (403288 <ButtonTask+0x4e8>)
  40318e:	4798      	blx	r3
					
					SW5Righttg = !SW5Righttg;
					
					if (SW4Righttg){
  403190:	9b04      	ldr	r3, [sp, #16]
  403192:	b16b      	cbz	r3, 4031b0 <ButtonTask+0x410>
						moveTurn = 1;
						movDir = 0;
						cycle = 60;
						max_i = 30;
						walkEN = 1;
						holdFrame = 1;
  403194:	f04f 0901 	mov.w	r9, #1
  403198:	4b37      	ldr	r3, [pc, #220]	; (403278 <ButtonTask+0x4d8>)
  40319a:	f8c3 9000 	str.w	r9, [r3]
						
						pio_set(LED1);
  40319e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4031a2:	4630      	mov	r0, r6
  4031a4:	4b39      	ldr	r3, [pc, #228]	; (40328c <ButtonTask+0x4ec>)
  4031a6:	4798      	blx	r3
						LEDtg = 1;
  4031a8:	4b35      	ldr	r3, [pc, #212]	; (403280 <ButtonTask+0x4e0>)
  4031aa:	f8c3 9000 	str.w	r9, [r3]
  4031ae:	e60e      	b.n	402dce <ButtonTask+0x2e>
						
					}
					else{
						
						walkEN = 0;
						holdFrame = 0;
  4031b0:	f04f 0900 	mov.w	r9, #0
  4031b4:	4b30      	ldr	r3, [pc, #192]	; (403278 <ButtonTask+0x4d8>)
  4031b6:	f8c3 9000 	str.w	r9, [r3]
						pio_clear(LED1);
  4031ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4031be:	4630      	mov	r0, r6
  4031c0:	4b2e      	ldr	r3, [pc, #184]	; (40327c <ButtonTask+0x4dc>)
  4031c2:	4798      	blx	r3
						LEDtg = 0;
  4031c4:	4b2e      	ldr	r3, [pc, #184]	; (403280 <ButtonTask+0x4e0>)
  4031c6:	f8c3 9000 	str.w	r9, [r3]
  4031ca:	e600      	b.n	402dce <ButtonTask+0x2e>
					}
					break;
					
					case(SW5Up) :
					sendDebugString("NAV5 Up\n");
  4031cc:	4832      	ldr	r0, [pc, #200]	; (403298 <ButtonTask+0x4f8>)
  4031ce:	4b2e      	ldr	r3, [pc, #184]	; (403288 <ButtonTask+0x4e8>)
  4031d0:	4798      	blx	r3
					
					SW5Uptg = !SW5Uptg;
					
					if(tg2){
  4031d2:	b137      	cbz	r7, 4031e2 <ButtonTask+0x442>
						pio_set(LED2);
  4031d4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4031d8:	4630      	mov	r0, r6
  4031da:	4b2c      	ldr	r3, [pc, #176]	; (40328c <ButtonTask+0x4ec>)
  4031dc:	4798      	blx	r3
						tg2 = !tg2;
  4031de:	2700      	movs	r7, #0
  4031e0:	e5f5      	b.n	402dce <ButtonTask+0x2e>
					}
					else {
						pio_clear(LED2);
  4031e2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4031e6:	4630      	mov	r0, r6
  4031e8:	4b24      	ldr	r3, [pc, #144]	; (40327c <ButtonTask+0x4dc>)
  4031ea:	4798      	blx	r3
						tg2 = !tg2;
  4031ec:	2701      	movs	r7, #1
  4031ee:	e5ee      	b.n	402dce <ButtonTask+0x2e>
					}
					break;
					
					case(SW5Down) :
					sendDebugString("NAV5 Down\n");
  4031f0:	482a      	ldr	r0, [pc, #168]	; (40329c <ButtonTask+0x4fc>)
  4031f2:	4b25      	ldr	r3, [pc, #148]	; (403288 <ButtonTask+0x4e8>)
  4031f4:	4798      	blx	r3
					
					SW5Downtg = !SW5Downtg;
					
					if(tg2){
  4031f6:	b137      	cbz	r7, 403206 <ButtonTask+0x466>
						pio_set(LED2);
  4031f8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4031fc:	4630      	mov	r0, r6
  4031fe:	4b23      	ldr	r3, [pc, #140]	; (40328c <ButtonTask+0x4ec>)
  403200:	4798      	blx	r3
						tg2 = !tg2;
  403202:	2700      	movs	r7, #0
  403204:	e5e3      	b.n	402dce <ButtonTask+0x2e>
					}
					else {
						pio_clear(LED2);
  403206:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40320a:	4630      	mov	r0, r6
  40320c:	4b1b      	ldr	r3, [pc, #108]	; (40327c <ButtonTask+0x4dc>)
  40320e:	4798      	blx	r3
						tg2 = !tg2;
  403210:	2701      	movs	r7, #1
  403212:	e5dc      	b.n	402dce <ButtonTask+0x2e>
					}
					break;
					
					case(SW5Push) :
					sendDebugString("NAV5 Push\n");
  403214:	4822      	ldr	r0, [pc, #136]	; (4032a0 <ButtonTask+0x500>)
  403216:	4b1c      	ldr	r3, [pc, #112]	; (403288 <ButtonTask+0x4e8>)
  403218:	4798      	blx	r3
					if(tg2){
  40321a:	b137      	cbz	r7, 40322a <ButtonTask+0x48a>
						pio_set(LED2);
  40321c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403220:	4630      	mov	r0, r6
  403222:	4b1a      	ldr	r3, [pc, #104]	; (40328c <ButtonTask+0x4ec>)
  403224:	4798      	blx	r3
						tg2 = !tg2;
  403226:	2700      	movs	r7, #0
  403228:	e5d1      	b.n	402dce <ButtonTask+0x2e>
					}
					else {
						pio_clear(LED2);
  40322a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40322e:	4630      	mov	r0, r6
  403230:	4b12      	ldr	r3, [pc, #72]	; (40327c <ButtonTask+0x4dc>)
  403232:	4798      	blx	r3
						tg2 = !tg2;
  403234:	2701      	movs	r7, #1
  403236:	e5ca      	b.n	402dce <ButtonTask+0x2e>
					}
					break;
					
					default :
					sendDebugString("ANALOGUE BITCH!\n");
  403238:	481a      	ldr	r0, [pc, #104]	; (4032a4 <ButtonTask+0x504>)
  40323a:	4b13      	ldr	r3, [pc, #76]	; (403288 <ButtonTask+0x4e8>)
  40323c:	4798      	blx	r3
					if(tgd){
  40323e:	9b05      	ldr	r3, [sp, #20]
  403240:	b163      	cbz	r3, 40325c <ButtonTask+0x4bc>
						pio_set(LED1);
  403242:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403246:	4630      	mov	r0, r6
  403248:	f8df 9040 	ldr.w	r9, [pc, #64]	; 40328c <ButtonTask+0x4ec>
  40324c:	47c8      	blx	r9
						pio_set(LED2);
  40324e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  403252:	4630      	mov	r0, r6
  403254:	47c8      	blx	r9
						tgd = !tgd;
  403256:	2300      	movs	r3, #0
  403258:	9305      	str	r3, [sp, #20]
  40325a:	e5b8      	b.n	402dce <ButtonTask+0x2e>
					}
					else {
						pio_clear(LED1);
  40325c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403260:	4630      	mov	r0, r6
  403262:	f8df 9018 	ldr.w	r9, [pc, #24]	; 40327c <ButtonTask+0x4dc>
  403266:	47c8      	blx	r9
						pio_clear(LED2);
  403268:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40326c:	4630      	mov	r0, r6
  40326e:	47c8      	blx	r9
						tgd = !tgd;
  403270:	2301      	movs	r3, #1
  403272:	9305      	str	r3, [sp, #20]
  403274:	e5ab      	b.n	402dce <ButtonTask+0x2e>
  403276:	bf00      	nop
  403278:	2040c45c 	.word	0x2040c45c
  40327c:	00402321 	.word	0x00402321
  403280:	2040c458 	.word	0x2040c458
  403284:	00408180 	.word	0x00408180
  403288:	00402ae9 	.word	0x00402ae9
  40328c:	0040231d 	.word	0x0040231d
  403290:	0040818c 	.word	0x0040818c
  403294:	00408198 	.word	0x00408198
  403298:	004081a4 	.word	0x004081a4
  40329c:	004081b0 	.word	0x004081b0
  4032a0:	004081bc 	.word	0x004081bc
  4032a4:	004081c8 	.word	0x004081c8

004032a8 <main>:





int main (void){
  4032a8:	b570      	push	{r4, r5, r6, lr}
  4032aa:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
  4032ac:	4b14      	ldr	r3, [pc, #80]	; (403300 <main+0x58>)
  4032ae:	4798      	blx	r3
	xTaskCreate(Task1,"TASK1",200,NULL,2,NULL);
  4032b0:	2400      	movs	r4, #0
  4032b2:	9403      	str	r4, [sp, #12]
  4032b4:	9402      	str	r4, [sp, #8]
  4032b6:	9401      	str	r4, [sp, #4]
  4032b8:	2302      	movs	r3, #2
  4032ba:	9300      	str	r3, [sp, #0]
  4032bc:	4623      	mov	r3, r4
  4032be:	22c8      	movs	r2, #200	; 0xc8
  4032c0:	4910      	ldr	r1, [pc, #64]	; (403304 <main+0x5c>)
  4032c2:	4811      	ldr	r0, [pc, #68]	; (403308 <main+0x60>)
  4032c4:	4d11      	ldr	r5, [pc, #68]	; (40330c <main+0x64>)
  4032c6:	47a8      	blx	r5
	xTaskCreate(ButtonTask,"BUTTONTASK",200,NULL,1,NULL);
  4032c8:	9403      	str	r4, [sp, #12]
  4032ca:	9402      	str	r4, [sp, #8]
  4032cc:	9401      	str	r4, [sp, #4]
  4032ce:	2301      	movs	r3, #1
  4032d0:	9300      	str	r3, [sp, #0]
  4032d2:	4623      	mov	r3, r4
  4032d4:	22c8      	movs	r2, #200	; 0xc8
  4032d6:	490e      	ldr	r1, [pc, #56]	; (403310 <main+0x68>)
  4032d8:	480e      	ldr	r0, [pc, #56]	; (403314 <main+0x6c>)
  4032da:	47a8      	blx	r5
	pio_set(LED1);
  4032dc:	4e0e      	ldr	r6, [pc, #56]	; (403318 <main+0x70>)
  4032de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4032e2:	4630      	mov	r0, r6
  4032e4:	4d0d      	ldr	r5, [pc, #52]	; (40331c <main+0x74>)
  4032e6:	47a8      	blx	r5
	pio_set(LED2);
  4032e8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4032ec:	4630      	mov	r0, r6
  4032ee:	47a8      	blx	r5
	
	sendDebugString("Lights on\n Hi Shovel Lord\n");
  4032f0:	480b      	ldr	r0, [pc, #44]	; (403320 <main+0x78>)
  4032f2:	4b0c      	ldr	r3, [pc, #48]	; (403324 <main+0x7c>)
  4032f4:	4798      	blx	r3
	vTaskStartScheduler();
  4032f6:	4b0c      	ldr	r3, [pc, #48]	; (403328 <main+0x80>)
  4032f8:	4798      	blx	r3
	
	
	return 0;
	/* Insert application code here, after the board has been initialized. */
}
  4032fa:	4620      	mov	r0, r4
  4032fc:	b004      	add	sp, #16
  4032fe:	bd70      	pop	{r4, r5, r6, pc}
  403300:	00402645 	.word	0x00402645
  403304:	004081dc 	.word	0x004081dc
  403308:	00402d4d 	.word	0x00402d4d
  40330c:	004012d5 	.word	0x004012d5
  403310:	004081e4 	.word	0x004081e4
  403314:	00402da1 	.word	0x00402da1
  403318:	400e1400 	.word	0x400e1400
  40331c:	0040231d 	.word	0x0040231d
  403320:	004081f0 	.word	0x004081f0
  403324:	00402ae9 	.word	0x00402ae9
  403328:	004014fd 	.word	0x004014fd

0040332c <PIOA_Handler>:
CLIbuf[CLIbufIndex] = temp;
CLIbufIndex++;
if(temp = "\n") xSemaphoreGiveFromISR(UARTsem,NULL);
}*/

void PIOA_Handler (void) {
  40332c:	b538      	push	{r3, r4, r5, lr}
	
	ButtonStatus = pio_get_interrupt_status(PIOA);
  40332e:	4d09      	ldr	r5, [pc, #36]	; (403354 <PIOA_Handler+0x28>)
  403330:	4628      	mov	r0, r5
  403332:	4b09      	ldr	r3, [pc, #36]	; (403358 <PIOA_Handler+0x2c>)
  403334:	4798      	blx	r3
  403336:	4c09      	ldr	r4, [pc, #36]	; (40335c <PIOA_Handler+0x30>)
  403338:	6020      	str	r0, [r4, #0]
	ButtonStatus &= pio_get_interrupt_mask(PIOA);
  40333a:	4628      	mov	r0, r5
  40333c:	4b08      	ldr	r3, [pc, #32]	; (403360 <PIOA_Handler+0x34>)
  40333e:	4798      	blx	r3
  403340:	6823      	ldr	r3, [r4, #0]
  403342:	4018      	ands	r0, r3
  403344:	6020      	str	r0, [r4, #0]
	xSemaphoreGiveFromISR(PIOAsem,NULL);
  403346:	2100      	movs	r1, #0
  403348:	4b06      	ldr	r3, [pc, #24]	; (403364 <PIOA_Handler+0x38>)
  40334a:	6818      	ldr	r0, [r3, #0]
  40334c:	4b06      	ldr	r3, [pc, #24]	; (403368 <PIOA_Handler+0x3c>)
  40334e:	4798      	blx	r3
  403350:	bd38      	pop	{r3, r4, r5, pc}
  403352:	bf00      	nop
  403354:	400e0e00 	.word	0x400e0e00
  403358:	00402455 	.word	0x00402455
  40335c:	2040c460 	.word	0x2040c460
  403360:	00402459 	.word	0x00402459
  403364:	2040c348 	.word	0x2040c348
  403368:	00400f29 	.word	0x00400f29

0040336c <__aeabi_drsub>:
  40336c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  403370:	e002      	b.n	403378 <__adddf3>
  403372:	bf00      	nop

00403374 <__aeabi_dsub>:
  403374:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00403378 <__adddf3>:
  403378:	b530      	push	{r4, r5, lr}
  40337a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40337e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  403382:	ea94 0f05 	teq	r4, r5
  403386:	bf08      	it	eq
  403388:	ea90 0f02 	teqeq	r0, r2
  40338c:	bf1f      	itttt	ne
  40338e:	ea54 0c00 	orrsne.w	ip, r4, r0
  403392:	ea55 0c02 	orrsne.w	ip, r5, r2
  403396:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  40339a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40339e:	f000 80e2 	beq.w	403566 <__adddf3+0x1ee>
  4033a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4033a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4033aa:	bfb8      	it	lt
  4033ac:	426d      	neglt	r5, r5
  4033ae:	dd0c      	ble.n	4033ca <__adddf3+0x52>
  4033b0:	442c      	add	r4, r5
  4033b2:	ea80 0202 	eor.w	r2, r0, r2
  4033b6:	ea81 0303 	eor.w	r3, r1, r3
  4033ba:	ea82 0000 	eor.w	r0, r2, r0
  4033be:	ea83 0101 	eor.w	r1, r3, r1
  4033c2:	ea80 0202 	eor.w	r2, r0, r2
  4033c6:	ea81 0303 	eor.w	r3, r1, r3
  4033ca:	2d36      	cmp	r5, #54	; 0x36
  4033cc:	bf88      	it	hi
  4033ce:	bd30      	pophi	{r4, r5, pc}
  4033d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4033d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4033d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4033dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4033e0:	d002      	beq.n	4033e8 <__adddf3+0x70>
  4033e2:	4240      	negs	r0, r0
  4033e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4033e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4033ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4033f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4033f4:	d002      	beq.n	4033fc <__adddf3+0x84>
  4033f6:	4252      	negs	r2, r2
  4033f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4033fc:	ea94 0f05 	teq	r4, r5
  403400:	f000 80a7 	beq.w	403552 <__adddf3+0x1da>
  403404:	f1a4 0401 	sub.w	r4, r4, #1
  403408:	f1d5 0e20 	rsbs	lr, r5, #32
  40340c:	db0d      	blt.n	40342a <__adddf3+0xb2>
  40340e:	fa02 fc0e 	lsl.w	ip, r2, lr
  403412:	fa22 f205 	lsr.w	r2, r2, r5
  403416:	1880      	adds	r0, r0, r2
  403418:	f141 0100 	adc.w	r1, r1, #0
  40341c:	fa03 f20e 	lsl.w	r2, r3, lr
  403420:	1880      	adds	r0, r0, r2
  403422:	fa43 f305 	asr.w	r3, r3, r5
  403426:	4159      	adcs	r1, r3
  403428:	e00e      	b.n	403448 <__adddf3+0xd0>
  40342a:	f1a5 0520 	sub.w	r5, r5, #32
  40342e:	f10e 0e20 	add.w	lr, lr, #32
  403432:	2a01      	cmp	r2, #1
  403434:	fa03 fc0e 	lsl.w	ip, r3, lr
  403438:	bf28      	it	cs
  40343a:	f04c 0c02 	orrcs.w	ip, ip, #2
  40343e:	fa43 f305 	asr.w	r3, r3, r5
  403442:	18c0      	adds	r0, r0, r3
  403444:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  40344c:	d507      	bpl.n	40345e <__adddf3+0xe6>
  40344e:	f04f 0e00 	mov.w	lr, #0
  403452:	f1dc 0c00 	rsbs	ip, ip, #0
  403456:	eb7e 0000 	sbcs.w	r0, lr, r0
  40345a:	eb6e 0101 	sbc.w	r1, lr, r1
  40345e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  403462:	d31b      	bcc.n	40349c <__adddf3+0x124>
  403464:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  403468:	d30c      	bcc.n	403484 <__adddf3+0x10c>
  40346a:	0849      	lsrs	r1, r1, #1
  40346c:	ea5f 0030 	movs.w	r0, r0, rrx
  403470:	ea4f 0c3c 	mov.w	ip, ip, rrx
  403474:	f104 0401 	add.w	r4, r4, #1
  403478:	ea4f 5244 	mov.w	r2, r4, lsl #21
  40347c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  403480:	f080 809a 	bcs.w	4035b8 <__adddf3+0x240>
  403484:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  403488:	bf08      	it	eq
  40348a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40348e:	f150 0000 	adcs.w	r0, r0, #0
  403492:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403496:	ea41 0105 	orr.w	r1, r1, r5
  40349a:	bd30      	pop	{r4, r5, pc}
  40349c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4034a0:	4140      	adcs	r0, r0
  4034a2:	eb41 0101 	adc.w	r1, r1, r1
  4034a6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4034aa:	f1a4 0401 	sub.w	r4, r4, #1
  4034ae:	d1e9      	bne.n	403484 <__adddf3+0x10c>
  4034b0:	f091 0f00 	teq	r1, #0
  4034b4:	bf04      	itt	eq
  4034b6:	4601      	moveq	r1, r0
  4034b8:	2000      	moveq	r0, #0
  4034ba:	fab1 f381 	clz	r3, r1
  4034be:	bf08      	it	eq
  4034c0:	3320      	addeq	r3, #32
  4034c2:	f1a3 030b 	sub.w	r3, r3, #11
  4034c6:	f1b3 0220 	subs.w	r2, r3, #32
  4034ca:	da0c      	bge.n	4034e6 <__adddf3+0x16e>
  4034cc:	320c      	adds	r2, #12
  4034ce:	dd08      	ble.n	4034e2 <__adddf3+0x16a>
  4034d0:	f102 0c14 	add.w	ip, r2, #20
  4034d4:	f1c2 020c 	rsb	r2, r2, #12
  4034d8:	fa01 f00c 	lsl.w	r0, r1, ip
  4034dc:	fa21 f102 	lsr.w	r1, r1, r2
  4034e0:	e00c      	b.n	4034fc <__adddf3+0x184>
  4034e2:	f102 0214 	add.w	r2, r2, #20
  4034e6:	bfd8      	it	le
  4034e8:	f1c2 0c20 	rsble	ip, r2, #32
  4034ec:	fa01 f102 	lsl.w	r1, r1, r2
  4034f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4034f4:	bfdc      	itt	le
  4034f6:	ea41 010c 	orrle.w	r1, r1, ip
  4034fa:	4090      	lslle	r0, r2
  4034fc:	1ae4      	subs	r4, r4, r3
  4034fe:	bfa2      	ittt	ge
  403500:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403504:	4329      	orrge	r1, r5
  403506:	bd30      	popge	{r4, r5, pc}
  403508:	ea6f 0404 	mvn.w	r4, r4
  40350c:	3c1f      	subs	r4, #31
  40350e:	da1c      	bge.n	40354a <__adddf3+0x1d2>
  403510:	340c      	adds	r4, #12
  403512:	dc0e      	bgt.n	403532 <__adddf3+0x1ba>
  403514:	f104 0414 	add.w	r4, r4, #20
  403518:	f1c4 0220 	rsb	r2, r4, #32
  40351c:	fa20 f004 	lsr.w	r0, r0, r4
  403520:	fa01 f302 	lsl.w	r3, r1, r2
  403524:	ea40 0003 	orr.w	r0, r0, r3
  403528:	fa21 f304 	lsr.w	r3, r1, r4
  40352c:	ea45 0103 	orr.w	r1, r5, r3
  403530:	bd30      	pop	{r4, r5, pc}
  403532:	f1c4 040c 	rsb	r4, r4, #12
  403536:	f1c4 0220 	rsb	r2, r4, #32
  40353a:	fa20 f002 	lsr.w	r0, r0, r2
  40353e:	fa01 f304 	lsl.w	r3, r1, r4
  403542:	ea40 0003 	orr.w	r0, r0, r3
  403546:	4629      	mov	r1, r5
  403548:	bd30      	pop	{r4, r5, pc}
  40354a:	fa21 f004 	lsr.w	r0, r1, r4
  40354e:	4629      	mov	r1, r5
  403550:	bd30      	pop	{r4, r5, pc}
  403552:	f094 0f00 	teq	r4, #0
  403556:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  40355a:	bf06      	itte	eq
  40355c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  403560:	3401      	addeq	r4, #1
  403562:	3d01      	subne	r5, #1
  403564:	e74e      	b.n	403404 <__adddf3+0x8c>
  403566:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  40356a:	bf18      	it	ne
  40356c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  403570:	d029      	beq.n	4035c6 <__adddf3+0x24e>
  403572:	ea94 0f05 	teq	r4, r5
  403576:	bf08      	it	eq
  403578:	ea90 0f02 	teqeq	r0, r2
  40357c:	d005      	beq.n	40358a <__adddf3+0x212>
  40357e:	ea54 0c00 	orrs.w	ip, r4, r0
  403582:	bf04      	itt	eq
  403584:	4619      	moveq	r1, r3
  403586:	4610      	moveq	r0, r2
  403588:	bd30      	pop	{r4, r5, pc}
  40358a:	ea91 0f03 	teq	r1, r3
  40358e:	bf1e      	ittt	ne
  403590:	2100      	movne	r1, #0
  403592:	2000      	movne	r0, #0
  403594:	bd30      	popne	{r4, r5, pc}
  403596:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  40359a:	d105      	bne.n	4035a8 <__adddf3+0x230>
  40359c:	0040      	lsls	r0, r0, #1
  40359e:	4149      	adcs	r1, r1
  4035a0:	bf28      	it	cs
  4035a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4035a6:	bd30      	pop	{r4, r5, pc}
  4035a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4035ac:	bf3c      	itt	cc
  4035ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4035b2:	bd30      	popcc	{r4, r5, pc}
  4035b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4035b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4035bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4035c0:	f04f 0000 	mov.w	r0, #0
  4035c4:	bd30      	pop	{r4, r5, pc}
  4035c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4035ca:	bf1a      	itte	ne
  4035cc:	4619      	movne	r1, r3
  4035ce:	4610      	movne	r0, r2
  4035d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4035d4:	bf1c      	itt	ne
  4035d6:	460b      	movne	r3, r1
  4035d8:	4602      	movne	r2, r0
  4035da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4035de:	bf06      	itte	eq
  4035e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4035e4:	ea91 0f03 	teqeq	r1, r3
  4035e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4035ec:	bd30      	pop	{r4, r5, pc}
  4035ee:	bf00      	nop

004035f0 <__aeabi_ui2d>:
  4035f0:	f090 0f00 	teq	r0, #0
  4035f4:	bf04      	itt	eq
  4035f6:	2100      	moveq	r1, #0
  4035f8:	4770      	bxeq	lr
  4035fa:	b530      	push	{r4, r5, lr}
  4035fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403600:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403604:	f04f 0500 	mov.w	r5, #0
  403608:	f04f 0100 	mov.w	r1, #0
  40360c:	e750      	b.n	4034b0 <__adddf3+0x138>
  40360e:	bf00      	nop

00403610 <__aeabi_i2d>:
  403610:	f090 0f00 	teq	r0, #0
  403614:	bf04      	itt	eq
  403616:	2100      	moveq	r1, #0
  403618:	4770      	bxeq	lr
  40361a:	b530      	push	{r4, r5, lr}
  40361c:	f44f 6480 	mov.w	r4, #1024	; 0x400
  403620:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403624:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403628:	bf48      	it	mi
  40362a:	4240      	negmi	r0, r0
  40362c:	f04f 0100 	mov.w	r1, #0
  403630:	e73e      	b.n	4034b0 <__adddf3+0x138>
  403632:	bf00      	nop

00403634 <__aeabi_f2d>:
  403634:	0042      	lsls	r2, r0, #1
  403636:	ea4f 01e2 	mov.w	r1, r2, asr #3
  40363a:	ea4f 0131 	mov.w	r1, r1, rrx
  40363e:	ea4f 7002 	mov.w	r0, r2, lsl #28
  403642:	bf1f      	itttt	ne
  403644:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403648:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40364c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  403650:	4770      	bxne	lr
  403652:	f092 0f00 	teq	r2, #0
  403656:	bf14      	ite	ne
  403658:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  40365c:	4770      	bxeq	lr
  40365e:	b530      	push	{r4, r5, lr}
  403660:	f44f 7460 	mov.w	r4, #896	; 0x380
  403664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  40366c:	e720      	b.n	4034b0 <__adddf3+0x138>
  40366e:	bf00      	nop

00403670 <__aeabi_ul2d>:
  403670:	ea50 0201 	orrs.w	r2, r0, r1
  403674:	bf08      	it	eq
  403676:	4770      	bxeq	lr
  403678:	b530      	push	{r4, r5, lr}
  40367a:	f04f 0500 	mov.w	r5, #0
  40367e:	e00a      	b.n	403696 <__aeabi_l2d+0x16>

00403680 <__aeabi_l2d>:
  403680:	ea50 0201 	orrs.w	r2, r0, r1
  403684:	bf08      	it	eq
  403686:	4770      	bxeq	lr
  403688:	b530      	push	{r4, r5, lr}
  40368a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40368e:	d502      	bpl.n	403696 <__aeabi_l2d+0x16>
  403690:	4240      	negs	r0, r0
  403692:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403696:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40369a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40369e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4036a2:	f43f aedc 	beq.w	40345e <__adddf3+0xe6>
  4036a6:	f04f 0203 	mov.w	r2, #3
  4036aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4036ae:	bf18      	it	ne
  4036b0:	3203      	addne	r2, #3
  4036b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4036b6:	bf18      	it	ne
  4036b8:	3203      	addne	r2, #3
  4036ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4036be:	f1c2 0320 	rsb	r3, r2, #32
  4036c2:	fa00 fc03 	lsl.w	ip, r0, r3
  4036c6:	fa20 f002 	lsr.w	r0, r0, r2
  4036ca:	fa01 fe03 	lsl.w	lr, r1, r3
  4036ce:	ea40 000e 	orr.w	r0, r0, lr
  4036d2:	fa21 f102 	lsr.w	r1, r1, r2
  4036d6:	4414      	add	r4, r2
  4036d8:	e6c1      	b.n	40345e <__adddf3+0xe6>
  4036da:	bf00      	nop

004036dc <__aeabi_dmul>:
  4036dc:	b570      	push	{r4, r5, r6, lr}
  4036de:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4036e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4036e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4036ea:	bf1d      	ittte	ne
  4036ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4036f0:	ea94 0f0c 	teqne	r4, ip
  4036f4:	ea95 0f0c 	teqne	r5, ip
  4036f8:	f000 f8de 	bleq	4038b8 <__aeabi_dmul+0x1dc>
  4036fc:	442c      	add	r4, r5
  4036fe:	ea81 0603 	eor.w	r6, r1, r3
  403702:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403706:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  40370a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40370e:	bf18      	it	ne
  403710:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403718:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  40371c:	d038      	beq.n	403790 <__aeabi_dmul+0xb4>
  40371e:	fba0 ce02 	umull	ip, lr, r0, r2
  403722:	f04f 0500 	mov.w	r5, #0
  403726:	fbe1 e502 	umlal	lr, r5, r1, r2
  40372a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40372e:	fbe0 e503 	umlal	lr, r5, r0, r3
  403732:	f04f 0600 	mov.w	r6, #0
  403736:	fbe1 5603 	umlal	r5, r6, r1, r3
  40373a:	f09c 0f00 	teq	ip, #0
  40373e:	bf18      	it	ne
  403740:	f04e 0e01 	orrne.w	lr, lr, #1
  403744:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403748:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  40374c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  403750:	d204      	bcs.n	40375c <__aeabi_dmul+0x80>
  403752:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403756:	416d      	adcs	r5, r5
  403758:	eb46 0606 	adc.w	r6, r6, r6
  40375c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  403760:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  403764:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  403768:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  40376c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  403770:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403774:	bf88      	it	hi
  403776:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  40377a:	d81e      	bhi.n	4037ba <__aeabi_dmul+0xde>
  40377c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  403780:	bf08      	it	eq
  403782:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  403786:	f150 0000 	adcs.w	r0, r0, #0
  40378a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40378e:	bd70      	pop	{r4, r5, r6, pc}
  403790:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  403794:	ea46 0101 	orr.w	r1, r6, r1
  403798:	ea40 0002 	orr.w	r0, r0, r2
  40379c:	ea81 0103 	eor.w	r1, r1, r3
  4037a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4037a4:	bfc2      	ittt	gt
  4037a6:	ebd4 050c 	rsbsgt	r5, r4, ip
  4037aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4037ae:	bd70      	popgt	{r4, r5, r6, pc}
  4037b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4037b4:	f04f 0e00 	mov.w	lr, #0
  4037b8:	3c01      	subs	r4, #1
  4037ba:	f300 80ab 	bgt.w	403914 <__aeabi_dmul+0x238>
  4037be:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4037c2:	bfde      	ittt	le
  4037c4:	2000      	movle	r0, #0
  4037c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4037ca:	bd70      	pople	{r4, r5, r6, pc}
  4037cc:	f1c4 0400 	rsb	r4, r4, #0
  4037d0:	3c20      	subs	r4, #32
  4037d2:	da35      	bge.n	403840 <__aeabi_dmul+0x164>
  4037d4:	340c      	adds	r4, #12
  4037d6:	dc1b      	bgt.n	403810 <__aeabi_dmul+0x134>
  4037d8:	f104 0414 	add.w	r4, r4, #20
  4037dc:	f1c4 0520 	rsb	r5, r4, #32
  4037e0:	fa00 f305 	lsl.w	r3, r0, r5
  4037e4:	fa20 f004 	lsr.w	r0, r0, r4
  4037e8:	fa01 f205 	lsl.w	r2, r1, r5
  4037ec:	ea40 0002 	orr.w	r0, r0, r2
  4037f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4037f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4037f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4037fc:	fa21 f604 	lsr.w	r6, r1, r4
  403800:	eb42 0106 	adc.w	r1, r2, r6
  403804:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403808:	bf08      	it	eq
  40380a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40380e:	bd70      	pop	{r4, r5, r6, pc}
  403810:	f1c4 040c 	rsb	r4, r4, #12
  403814:	f1c4 0520 	rsb	r5, r4, #32
  403818:	fa00 f304 	lsl.w	r3, r0, r4
  40381c:	fa20 f005 	lsr.w	r0, r0, r5
  403820:	fa01 f204 	lsl.w	r2, r1, r4
  403824:	ea40 0002 	orr.w	r0, r0, r2
  403828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40382c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403830:	f141 0100 	adc.w	r1, r1, #0
  403834:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403838:	bf08      	it	eq
  40383a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40383e:	bd70      	pop	{r4, r5, r6, pc}
  403840:	f1c4 0520 	rsb	r5, r4, #32
  403844:	fa00 f205 	lsl.w	r2, r0, r5
  403848:	ea4e 0e02 	orr.w	lr, lr, r2
  40384c:	fa20 f304 	lsr.w	r3, r0, r4
  403850:	fa01 f205 	lsl.w	r2, r1, r5
  403854:	ea43 0302 	orr.w	r3, r3, r2
  403858:	fa21 f004 	lsr.w	r0, r1, r4
  40385c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403860:	fa21 f204 	lsr.w	r2, r1, r4
  403864:	ea20 0002 	bic.w	r0, r0, r2
  403868:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  40386c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403870:	bf08      	it	eq
  403872:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  403876:	bd70      	pop	{r4, r5, r6, pc}
  403878:	f094 0f00 	teq	r4, #0
  40387c:	d10f      	bne.n	40389e <__aeabi_dmul+0x1c2>
  40387e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  403882:	0040      	lsls	r0, r0, #1
  403884:	eb41 0101 	adc.w	r1, r1, r1
  403888:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40388c:	bf08      	it	eq
  40388e:	3c01      	subeq	r4, #1
  403890:	d0f7      	beq.n	403882 <__aeabi_dmul+0x1a6>
  403892:	ea41 0106 	orr.w	r1, r1, r6
  403896:	f095 0f00 	teq	r5, #0
  40389a:	bf18      	it	ne
  40389c:	4770      	bxne	lr
  40389e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4038a2:	0052      	lsls	r2, r2, #1
  4038a4:	eb43 0303 	adc.w	r3, r3, r3
  4038a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4038ac:	bf08      	it	eq
  4038ae:	3d01      	subeq	r5, #1
  4038b0:	d0f7      	beq.n	4038a2 <__aeabi_dmul+0x1c6>
  4038b2:	ea43 0306 	orr.w	r3, r3, r6
  4038b6:	4770      	bx	lr
  4038b8:	ea94 0f0c 	teq	r4, ip
  4038bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4038c0:	bf18      	it	ne
  4038c2:	ea95 0f0c 	teqne	r5, ip
  4038c6:	d00c      	beq.n	4038e2 <__aeabi_dmul+0x206>
  4038c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4038cc:	bf18      	it	ne
  4038ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4038d2:	d1d1      	bne.n	403878 <__aeabi_dmul+0x19c>
  4038d4:	ea81 0103 	eor.w	r1, r1, r3
  4038d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4038dc:	f04f 0000 	mov.w	r0, #0
  4038e0:	bd70      	pop	{r4, r5, r6, pc}
  4038e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4038e6:	bf06      	itte	eq
  4038e8:	4610      	moveq	r0, r2
  4038ea:	4619      	moveq	r1, r3
  4038ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4038f0:	d019      	beq.n	403926 <__aeabi_dmul+0x24a>
  4038f2:	ea94 0f0c 	teq	r4, ip
  4038f6:	d102      	bne.n	4038fe <__aeabi_dmul+0x222>
  4038f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4038fc:	d113      	bne.n	403926 <__aeabi_dmul+0x24a>
  4038fe:	ea95 0f0c 	teq	r5, ip
  403902:	d105      	bne.n	403910 <__aeabi_dmul+0x234>
  403904:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403908:	bf1c      	itt	ne
  40390a:	4610      	movne	r0, r2
  40390c:	4619      	movne	r1, r3
  40390e:	d10a      	bne.n	403926 <__aeabi_dmul+0x24a>
  403910:	ea81 0103 	eor.w	r1, r1, r3
  403914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403918:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40391c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  403920:	f04f 0000 	mov.w	r0, #0
  403924:	bd70      	pop	{r4, r5, r6, pc}
  403926:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  40392a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40392e:	bd70      	pop	{r4, r5, r6, pc}

00403930 <__aeabi_ddiv>:
  403930:	b570      	push	{r4, r5, r6, lr}
  403932:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403936:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40393a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40393e:	bf1d      	ittte	ne
  403940:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403944:	ea94 0f0c 	teqne	r4, ip
  403948:	ea95 0f0c 	teqne	r5, ip
  40394c:	f000 f8a7 	bleq	403a9e <__aeabi_ddiv+0x16e>
  403950:	eba4 0405 	sub.w	r4, r4, r5
  403954:	ea81 0e03 	eor.w	lr, r1, r3
  403958:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40395c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403960:	f000 8088 	beq.w	403a74 <__aeabi_ddiv+0x144>
  403964:	ea4f 3303 	mov.w	r3, r3, lsl #12
  403968:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  40396c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  403970:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  403974:	ea4f 2202 	mov.w	r2, r2, lsl #8
  403978:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  40397c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  403980:	ea4f 2600 	mov.w	r6, r0, lsl #8
  403984:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  403988:	429d      	cmp	r5, r3
  40398a:	bf08      	it	eq
  40398c:	4296      	cmpeq	r6, r2
  40398e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  403992:	f504 7440 	add.w	r4, r4, #768	; 0x300
  403996:	d202      	bcs.n	40399e <__aeabi_ddiv+0x6e>
  403998:	085b      	lsrs	r3, r3, #1
  40399a:	ea4f 0232 	mov.w	r2, r2, rrx
  40399e:	1ab6      	subs	r6, r6, r2
  4039a0:	eb65 0503 	sbc.w	r5, r5, r3
  4039a4:	085b      	lsrs	r3, r3, #1
  4039a6:	ea4f 0232 	mov.w	r2, r2, rrx
  4039aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4039ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4039b2:	ebb6 0e02 	subs.w	lr, r6, r2
  4039b6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039ba:	bf22      	ittt	cs
  4039bc:	1ab6      	subcs	r6, r6, r2
  4039be:	4675      	movcs	r5, lr
  4039c0:	ea40 000c 	orrcs.w	r0, r0, ip
  4039c4:	085b      	lsrs	r3, r3, #1
  4039c6:	ea4f 0232 	mov.w	r2, r2, rrx
  4039ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4039ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039d2:	bf22      	ittt	cs
  4039d4:	1ab6      	subcs	r6, r6, r2
  4039d6:	4675      	movcs	r5, lr
  4039d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4039dc:	085b      	lsrs	r3, r3, #1
  4039de:	ea4f 0232 	mov.w	r2, r2, rrx
  4039e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4039e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4039ea:	bf22      	ittt	cs
  4039ec:	1ab6      	subcs	r6, r6, r2
  4039ee:	4675      	movcs	r5, lr
  4039f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4039f4:	085b      	lsrs	r3, r3, #1
  4039f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4039fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4039fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  403a02:	bf22      	ittt	cs
  403a04:	1ab6      	subcs	r6, r6, r2
  403a06:	4675      	movcs	r5, lr
  403a08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403a0c:	ea55 0e06 	orrs.w	lr, r5, r6
  403a10:	d018      	beq.n	403a44 <__aeabi_ddiv+0x114>
  403a12:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403a16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403a1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
  403a1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  403a22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403a26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403a2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  403a2e:	d1c0      	bne.n	4039b2 <__aeabi_ddiv+0x82>
  403a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a34:	d10b      	bne.n	403a4e <__aeabi_ddiv+0x11e>
  403a36:	ea41 0100 	orr.w	r1, r1, r0
  403a3a:	f04f 0000 	mov.w	r0, #0
  403a3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  403a42:	e7b6      	b.n	4039b2 <__aeabi_ddiv+0x82>
  403a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403a48:	bf04      	itt	eq
  403a4a:	4301      	orreq	r1, r0
  403a4c:	2000      	moveq	r0, #0
  403a4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  403a52:	bf88      	it	hi
  403a54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403a58:	f63f aeaf 	bhi.w	4037ba <__aeabi_dmul+0xde>
  403a5c:	ebb5 0c03 	subs.w	ip, r5, r3
  403a60:	bf04      	itt	eq
  403a62:	ebb6 0c02 	subseq.w	ip, r6, r2
  403a66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  403a6a:	f150 0000 	adcs.w	r0, r0, #0
  403a6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  403a72:	bd70      	pop	{r4, r5, r6, pc}
  403a74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  403a78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  403a7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  403a80:	bfc2      	ittt	gt
  403a82:	ebd4 050c 	rsbsgt	r5, r4, ip
  403a86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  403a8a:	bd70      	popgt	{r4, r5, r6, pc}
  403a8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403a90:	f04f 0e00 	mov.w	lr, #0
  403a94:	3c01      	subs	r4, #1
  403a96:	e690      	b.n	4037ba <__aeabi_dmul+0xde>
  403a98:	ea45 0e06 	orr.w	lr, r5, r6
  403a9c:	e68d      	b.n	4037ba <__aeabi_dmul+0xde>
  403a9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  403aa2:	ea94 0f0c 	teq	r4, ip
  403aa6:	bf08      	it	eq
  403aa8:	ea95 0f0c 	teqeq	r5, ip
  403aac:	f43f af3b 	beq.w	403926 <__aeabi_dmul+0x24a>
  403ab0:	ea94 0f0c 	teq	r4, ip
  403ab4:	d10a      	bne.n	403acc <__aeabi_ddiv+0x19c>
  403ab6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  403aba:	f47f af34 	bne.w	403926 <__aeabi_dmul+0x24a>
  403abe:	ea95 0f0c 	teq	r5, ip
  403ac2:	f47f af25 	bne.w	403910 <__aeabi_dmul+0x234>
  403ac6:	4610      	mov	r0, r2
  403ac8:	4619      	mov	r1, r3
  403aca:	e72c      	b.n	403926 <__aeabi_dmul+0x24a>
  403acc:	ea95 0f0c 	teq	r5, ip
  403ad0:	d106      	bne.n	403ae0 <__aeabi_ddiv+0x1b0>
  403ad2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403ad6:	f43f aefd 	beq.w	4038d4 <__aeabi_dmul+0x1f8>
  403ada:	4610      	mov	r0, r2
  403adc:	4619      	mov	r1, r3
  403ade:	e722      	b.n	403926 <__aeabi_dmul+0x24a>
  403ae0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403ae4:	bf18      	it	ne
  403ae6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403aea:	f47f aec5 	bne.w	403878 <__aeabi_dmul+0x19c>
  403aee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  403af2:	f47f af0d 	bne.w	403910 <__aeabi_dmul+0x234>
  403af6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403afa:	f47f aeeb 	bne.w	4038d4 <__aeabi_dmul+0x1f8>
  403afe:	e712      	b.n	403926 <__aeabi_dmul+0x24a>

00403b00 <__gedf2>:
  403b00:	f04f 3cff 	mov.w	ip, #4294967295
  403b04:	e006      	b.n	403b14 <__cmpdf2+0x4>
  403b06:	bf00      	nop

00403b08 <__ledf2>:
  403b08:	f04f 0c01 	mov.w	ip, #1
  403b0c:	e002      	b.n	403b14 <__cmpdf2+0x4>
  403b0e:	bf00      	nop

00403b10 <__cmpdf2>:
  403b10:	f04f 0c01 	mov.w	ip, #1
  403b14:	f84d cd04 	str.w	ip, [sp, #-4]!
  403b18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403b24:	bf18      	it	ne
  403b26:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  403b2a:	d01b      	beq.n	403b64 <__cmpdf2+0x54>
  403b2c:	b001      	add	sp, #4
  403b2e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  403b32:	bf0c      	ite	eq
  403b34:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  403b38:	ea91 0f03 	teqne	r1, r3
  403b3c:	bf02      	ittt	eq
  403b3e:	ea90 0f02 	teqeq	r0, r2
  403b42:	2000      	moveq	r0, #0
  403b44:	4770      	bxeq	lr
  403b46:	f110 0f00 	cmn.w	r0, #0
  403b4a:	ea91 0f03 	teq	r1, r3
  403b4e:	bf58      	it	pl
  403b50:	4299      	cmppl	r1, r3
  403b52:	bf08      	it	eq
  403b54:	4290      	cmpeq	r0, r2
  403b56:	bf2c      	ite	cs
  403b58:	17d8      	asrcs	r0, r3, #31
  403b5a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  403b5e:	f040 0001 	orr.w	r0, r0, #1
  403b62:	4770      	bx	lr
  403b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b6c:	d102      	bne.n	403b74 <__cmpdf2+0x64>
  403b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403b72:	d107      	bne.n	403b84 <__cmpdf2+0x74>
  403b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403b7c:	d1d6      	bne.n	403b2c <__cmpdf2+0x1c>
  403b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403b82:	d0d3      	beq.n	403b2c <__cmpdf2+0x1c>
  403b84:	f85d 0b04 	ldr.w	r0, [sp], #4
  403b88:	4770      	bx	lr
  403b8a:	bf00      	nop

00403b8c <__aeabi_cdrcmple>:
  403b8c:	4684      	mov	ip, r0
  403b8e:	4610      	mov	r0, r2
  403b90:	4662      	mov	r2, ip
  403b92:	468c      	mov	ip, r1
  403b94:	4619      	mov	r1, r3
  403b96:	4663      	mov	r3, ip
  403b98:	e000      	b.n	403b9c <__aeabi_cdcmpeq>
  403b9a:	bf00      	nop

00403b9c <__aeabi_cdcmpeq>:
  403b9c:	b501      	push	{r0, lr}
  403b9e:	f7ff ffb7 	bl	403b10 <__cmpdf2>
  403ba2:	2800      	cmp	r0, #0
  403ba4:	bf48      	it	mi
  403ba6:	f110 0f00 	cmnmi.w	r0, #0
  403baa:	bd01      	pop	{r0, pc}

00403bac <__aeabi_dcmpeq>:
  403bac:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bb0:	f7ff fff4 	bl	403b9c <__aeabi_cdcmpeq>
  403bb4:	bf0c      	ite	eq
  403bb6:	2001      	moveq	r0, #1
  403bb8:	2000      	movne	r0, #0
  403bba:	f85d fb08 	ldr.w	pc, [sp], #8
  403bbe:	bf00      	nop

00403bc0 <__aeabi_dcmplt>:
  403bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bc4:	f7ff ffea 	bl	403b9c <__aeabi_cdcmpeq>
  403bc8:	bf34      	ite	cc
  403bca:	2001      	movcc	r0, #1
  403bcc:	2000      	movcs	r0, #0
  403bce:	f85d fb08 	ldr.w	pc, [sp], #8
  403bd2:	bf00      	nop

00403bd4 <__aeabi_dcmple>:
  403bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bd8:	f7ff ffe0 	bl	403b9c <__aeabi_cdcmpeq>
  403bdc:	bf94      	ite	ls
  403bde:	2001      	movls	r0, #1
  403be0:	2000      	movhi	r0, #0
  403be2:	f85d fb08 	ldr.w	pc, [sp], #8
  403be6:	bf00      	nop

00403be8 <__aeabi_dcmpge>:
  403be8:	f84d ed08 	str.w	lr, [sp, #-8]!
  403bec:	f7ff ffce 	bl	403b8c <__aeabi_cdrcmple>
  403bf0:	bf94      	ite	ls
  403bf2:	2001      	movls	r0, #1
  403bf4:	2000      	movhi	r0, #0
  403bf6:	f85d fb08 	ldr.w	pc, [sp], #8
  403bfa:	bf00      	nop

00403bfc <__aeabi_dcmpgt>:
  403bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
  403c00:	f7ff ffc4 	bl	403b8c <__aeabi_cdrcmple>
  403c04:	bf34      	ite	cc
  403c06:	2001      	movcc	r0, #1
  403c08:	2000      	movcs	r0, #0
  403c0a:	f85d fb08 	ldr.w	pc, [sp], #8
  403c0e:	bf00      	nop

00403c10 <__aeabi_dcmpun>:
  403c10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  403c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403c18:	d102      	bne.n	403c20 <__aeabi_dcmpun+0x10>
  403c1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  403c1e:	d10a      	bne.n	403c36 <__aeabi_dcmpun+0x26>
  403c20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  403c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  403c28:	d102      	bne.n	403c30 <__aeabi_dcmpun+0x20>
  403c2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  403c2e:	d102      	bne.n	403c36 <__aeabi_dcmpun+0x26>
  403c30:	f04f 0000 	mov.w	r0, #0
  403c34:	4770      	bx	lr
  403c36:	f04f 0001 	mov.w	r0, #1
  403c3a:	4770      	bx	lr

00403c3c <__aeabi_d2iz>:
  403c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403c40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403c44:	d215      	bcs.n	403c72 <__aeabi_d2iz+0x36>
  403c46:	d511      	bpl.n	403c6c <__aeabi_d2iz+0x30>
  403c48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  403c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403c50:	d912      	bls.n	403c78 <__aeabi_d2iz+0x3c>
  403c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  403c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  403c5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403c62:	fa23 f002 	lsr.w	r0, r3, r2
  403c66:	bf18      	it	ne
  403c68:	4240      	negne	r0, r0
  403c6a:	4770      	bx	lr
  403c6c:	f04f 0000 	mov.w	r0, #0
  403c70:	4770      	bx	lr
  403c72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403c76:	d105      	bne.n	403c84 <__aeabi_d2iz+0x48>
  403c78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  403c7c:	bf08      	it	eq
  403c7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403c82:	4770      	bx	lr
  403c84:	f04f 0000 	mov.w	r0, #0
  403c88:	4770      	bx	lr
  403c8a:	bf00      	nop

00403c8c <__libc_init_array>:
  403c8c:	b570      	push	{r4, r5, r6, lr}
  403c8e:	4e0f      	ldr	r6, [pc, #60]	; (403ccc <__libc_init_array+0x40>)
  403c90:	4d0f      	ldr	r5, [pc, #60]	; (403cd0 <__libc_init_array+0x44>)
  403c92:	1b76      	subs	r6, r6, r5
  403c94:	10b6      	asrs	r6, r6, #2
  403c96:	bf18      	it	ne
  403c98:	2400      	movne	r4, #0
  403c9a:	d005      	beq.n	403ca8 <__libc_init_array+0x1c>
  403c9c:	3401      	adds	r4, #1
  403c9e:	f855 3b04 	ldr.w	r3, [r5], #4
  403ca2:	4798      	blx	r3
  403ca4:	42a6      	cmp	r6, r4
  403ca6:	d1f9      	bne.n	403c9c <__libc_init_array+0x10>
  403ca8:	4e0a      	ldr	r6, [pc, #40]	; (403cd4 <__libc_init_array+0x48>)
  403caa:	4d0b      	ldr	r5, [pc, #44]	; (403cd8 <__libc_init_array+0x4c>)
  403cac:	1b76      	subs	r6, r6, r5
  403cae:	f004 fb71 	bl	408394 <_init>
  403cb2:	10b6      	asrs	r6, r6, #2
  403cb4:	bf18      	it	ne
  403cb6:	2400      	movne	r4, #0
  403cb8:	d006      	beq.n	403cc8 <__libc_init_array+0x3c>
  403cba:	3401      	adds	r4, #1
  403cbc:	f855 3b04 	ldr.w	r3, [r5], #4
  403cc0:	4798      	blx	r3
  403cc2:	42a6      	cmp	r6, r4
  403cc4:	d1f9      	bne.n	403cba <__libc_init_array+0x2e>
  403cc6:	bd70      	pop	{r4, r5, r6, pc}
  403cc8:	bd70      	pop	{r4, r5, r6, pc}
  403cca:	bf00      	nop
  403ccc:	004083a0 	.word	0x004083a0
  403cd0:	004083a0 	.word	0x004083a0
  403cd4:	004083a8 	.word	0x004083a8
  403cd8:	004083a0 	.word	0x004083a0

00403cdc <memcpy>:
  403cdc:	4684      	mov	ip, r0
  403cde:	ea41 0300 	orr.w	r3, r1, r0
  403ce2:	f013 0303 	ands.w	r3, r3, #3
  403ce6:	d16d      	bne.n	403dc4 <memcpy+0xe8>
  403ce8:	3a40      	subs	r2, #64	; 0x40
  403cea:	d341      	bcc.n	403d70 <memcpy+0x94>
  403cec:	f851 3b04 	ldr.w	r3, [r1], #4
  403cf0:	f840 3b04 	str.w	r3, [r0], #4
  403cf4:	f851 3b04 	ldr.w	r3, [r1], #4
  403cf8:	f840 3b04 	str.w	r3, [r0], #4
  403cfc:	f851 3b04 	ldr.w	r3, [r1], #4
  403d00:	f840 3b04 	str.w	r3, [r0], #4
  403d04:	f851 3b04 	ldr.w	r3, [r1], #4
  403d08:	f840 3b04 	str.w	r3, [r0], #4
  403d0c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d10:	f840 3b04 	str.w	r3, [r0], #4
  403d14:	f851 3b04 	ldr.w	r3, [r1], #4
  403d18:	f840 3b04 	str.w	r3, [r0], #4
  403d1c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d20:	f840 3b04 	str.w	r3, [r0], #4
  403d24:	f851 3b04 	ldr.w	r3, [r1], #4
  403d28:	f840 3b04 	str.w	r3, [r0], #4
  403d2c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d30:	f840 3b04 	str.w	r3, [r0], #4
  403d34:	f851 3b04 	ldr.w	r3, [r1], #4
  403d38:	f840 3b04 	str.w	r3, [r0], #4
  403d3c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d40:	f840 3b04 	str.w	r3, [r0], #4
  403d44:	f851 3b04 	ldr.w	r3, [r1], #4
  403d48:	f840 3b04 	str.w	r3, [r0], #4
  403d4c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d50:	f840 3b04 	str.w	r3, [r0], #4
  403d54:	f851 3b04 	ldr.w	r3, [r1], #4
  403d58:	f840 3b04 	str.w	r3, [r0], #4
  403d5c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d60:	f840 3b04 	str.w	r3, [r0], #4
  403d64:	f851 3b04 	ldr.w	r3, [r1], #4
  403d68:	f840 3b04 	str.w	r3, [r0], #4
  403d6c:	3a40      	subs	r2, #64	; 0x40
  403d6e:	d2bd      	bcs.n	403cec <memcpy+0x10>
  403d70:	3230      	adds	r2, #48	; 0x30
  403d72:	d311      	bcc.n	403d98 <memcpy+0xbc>
  403d74:	f851 3b04 	ldr.w	r3, [r1], #4
  403d78:	f840 3b04 	str.w	r3, [r0], #4
  403d7c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d80:	f840 3b04 	str.w	r3, [r0], #4
  403d84:	f851 3b04 	ldr.w	r3, [r1], #4
  403d88:	f840 3b04 	str.w	r3, [r0], #4
  403d8c:	f851 3b04 	ldr.w	r3, [r1], #4
  403d90:	f840 3b04 	str.w	r3, [r0], #4
  403d94:	3a10      	subs	r2, #16
  403d96:	d2ed      	bcs.n	403d74 <memcpy+0x98>
  403d98:	320c      	adds	r2, #12
  403d9a:	d305      	bcc.n	403da8 <memcpy+0xcc>
  403d9c:	f851 3b04 	ldr.w	r3, [r1], #4
  403da0:	f840 3b04 	str.w	r3, [r0], #4
  403da4:	3a04      	subs	r2, #4
  403da6:	d2f9      	bcs.n	403d9c <memcpy+0xc0>
  403da8:	3204      	adds	r2, #4
  403daa:	d008      	beq.n	403dbe <memcpy+0xe2>
  403dac:	07d2      	lsls	r2, r2, #31
  403dae:	bf1c      	itt	ne
  403db0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403db4:	f800 3b01 	strbne.w	r3, [r0], #1
  403db8:	d301      	bcc.n	403dbe <memcpy+0xe2>
  403dba:	880b      	ldrh	r3, [r1, #0]
  403dbc:	8003      	strh	r3, [r0, #0]
  403dbe:	4660      	mov	r0, ip
  403dc0:	4770      	bx	lr
  403dc2:	bf00      	nop
  403dc4:	2a08      	cmp	r2, #8
  403dc6:	d313      	bcc.n	403df0 <memcpy+0x114>
  403dc8:	078b      	lsls	r3, r1, #30
  403dca:	d08d      	beq.n	403ce8 <memcpy+0xc>
  403dcc:	f010 0303 	ands.w	r3, r0, #3
  403dd0:	d08a      	beq.n	403ce8 <memcpy+0xc>
  403dd2:	f1c3 0304 	rsb	r3, r3, #4
  403dd6:	1ad2      	subs	r2, r2, r3
  403dd8:	07db      	lsls	r3, r3, #31
  403dda:	bf1c      	itt	ne
  403ddc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403de0:	f800 3b01 	strbne.w	r3, [r0], #1
  403de4:	d380      	bcc.n	403ce8 <memcpy+0xc>
  403de6:	f831 3b02 	ldrh.w	r3, [r1], #2
  403dea:	f820 3b02 	strh.w	r3, [r0], #2
  403dee:	e77b      	b.n	403ce8 <memcpy+0xc>
  403df0:	3a04      	subs	r2, #4
  403df2:	d3d9      	bcc.n	403da8 <memcpy+0xcc>
  403df4:	3a01      	subs	r2, #1
  403df6:	f811 3b01 	ldrb.w	r3, [r1], #1
  403dfa:	f800 3b01 	strb.w	r3, [r0], #1
  403dfe:	d2f9      	bcs.n	403df4 <memcpy+0x118>
  403e00:	780b      	ldrb	r3, [r1, #0]
  403e02:	7003      	strb	r3, [r0, #0]
  403e04:	784b      	ldrb	r3, [r1, #1]
  403e06:	7043      	strb	r3, [r0, #1]
  403e08:	788b      	ldrb	r3, [r1, #2]
  403e0a:	7083      	strb	r3, [r0, #2]
  403e0c:	4660      	mov	r0, ip
  403e0e:	4770      	bx	lr

00403e10 <memset>:
  403e10:	b470      	push	{r4, r5, r6}
  403e12:	0784      	lsls	r4, r0, #30
  403e14:	d046      	beq.n	403ea4 <memset+0x94>
  403e16:	1e54      	subs	r4, r2, #1
  403e18:	2a00      	cmp	r2, #0
  403e1a:	d041      	beq.n	403ea0 <memset+0x90>
  403e1c:	b2cd      	uxtb	r5, r1
  403e1e:	4603      	mov	r3, r0
  403e20:	e002      	b.n	403e28 <memset+0x18>
  403e22:	1e62      	subs	r2, r4, #1
  403e24:	b3e4      	cbz	r4, 403ea0 <memset+0x90>
  403e26:	4614      	mov	r4, r2
  403e28:	f803 5b01 	strb.w	r5, [r3], #1
  403e2c:	079a      	lsls	r2, r3, #30
  403e2e:	d1f8      	bne.n	403e22 <memset+0x12>
  403e30:	2c03      	cmp	r4, #3
  403e32:	d92e      	bls.n	403e92 <memset+0x82>
  403e34:	b2cd      	uxtb	r5, r1
  403e36:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  403e3a:	2c0f      	cmp	r4, #15
  403e3c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403e40:	d919      	bls.n	403e76 <memset+0x66>
  403e42:	f103 0210 	add.w	r2, r3, #16
  403e46:	4626      	mov	r6, r4
  403e48:	3e10      	subs	r6, #16
  403e4a:	2e0f      	cmp	r6, #15
  403e4c:	f842 5c10 	str.w	r5, [r2, #-16]
  403e50:	f842 5c0c 	str.w	r5, [r2, #-12]
  403e54:	f842 5c08 	str.w	r5, [r2, #-8]
  403e58:	f842 5c04 	str.w	r5, [r2, #-4]
  403e5c:	f102 0210 	add.w	r2, r2, #16
  403e60:	d8f2      	bhi.n	403e48 <memset+0x38>
  403e62:	f1a4 0210 	sub.w	r2, r4, #16
  403e66:	f022 020f 	bic.w	r2, r2, #15
  403e6a:	f004 040f 	and.w	r4, r4, #15
  403e6e:	3210      	adds	r2, #16
  403e70:	2c03      	cmp	r4, #3
  403e72:	4413      	add	r3, r2
  403e74:	d90d      	bls.n	403e92 <memset+0x82>
  403e76:	461e      	mov	r6, r3
  403e78:	4622      	mov	r2, r4
  403e7a:	3a04      	subs	r2, #4
  403e7c:	2a03      	cmp	r2, #3
  403e7e:	f846 5b04 	str.w	r5, [r6], #4
  403e82:	d8fa      	bhi.n	403e7a <memset+0x6a>
  403e84:	1f22      	subs	r2, r4, #4
  403e86:	f022 0203 	bic.w	r2, r2, #3
  403e8a:	3204      	adds	r2, #4
  403e8c:	4413      	add	r3, r2
  403e8e:	f004 0403 	and.w	r4, r4, #3
  403e92:	b12c      	cbz	r4, 403ea0 <memset+0x90>
  403e94:	b2c9      	uxtb	r1, r1
  403e96:	441c      	add	r4, r3
  403e98:	f803 1b01 	strb.w	r1, [r3], #1
  403e9c:	42a3      	cmp	r3, r4
  403e9e:	d1fb      	bne.n	403e98 <memset+0x88>
  403ea0:	bc70      	pop	{r4, r5, r6}
  403ea2:	4770      	bx	lr
  403ea4:	4614      	mov	r4, r2
  403ea6:	4603      	mov	r3, r0
  403ea8:	e7c2      	b.n	403e30 <memset+0x20>
  403eaa:	bf00      	nop

00403eac <sprintf>:
  403eac:	b40e      	push	{r1, r2, r3}
  403eae:	b5f0      	push	{r4, r5, r6, r7, lr}
  403eb0:	b09c      	sub	sp, #112	; 0x70
  403eb2:	ab21      	add	r3, sp, #132	; 0x84
  403eb4:	490f      	ldr	r1, [pc, #60]	; (403ef4 <sprintf+0x48>)
  403eb6:	f853 2b04 	ldr.w	r2, [r3], #4
  403eba:	9301      	str	r3, [sp, #4]
  403ebc:	4605      	mov	r5, r0
  403ebe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403ec2:	6808      	ldr	r0, [r1, #0]
  403ec4:	9502      	str	r5, [sp, #8]
  403ec6:	f44f 7702 	mov.w	r7, #520	; 0x208
  403eca:	f64f 76ff 	movw	r6, #65535	; 0xffff
  403ece:	a902      	add	r1, sp, #8
  403ed0:	9506      	str	r5, [sp, #24]
  403ed2:	f8ad 7014 	strh.w	r7, [sp, #20]
  403ed6:	9404      	str	r4, [sp, #16]
  403ed8:	9407      	str	r4, [sp, #28]
  403eda:	f8ad 6016 	strh.w	r6, [sp, #22]
  403ede:	f000 f87d 	bl	403fdc <_svfprintf_r>
  403ee2:	9b02      	ldr	r3, [sp, #8]
  403ee4:	2200      	movs	r2, #0
  403ee6:	701a      	strb	r2, [r3, #0]
  403ee8:	b01c      	add	sp, #112	; 0x70
  403eea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  403eee:	b003      	add	sp, #12
  403ef0:	4770      	bx	lr
  403ef2:	bf00      	nop
  403ef4:	20400440 	.word	0x20400440
	...

00403f00 <strlen>:
  403f00:	f890 f000 	pld	[r0]
  403f04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403f08:	f020 0107 	bic.w	r1, r0, #7
  403f0c:	f06f 0c00 	mvn.w	ip, #0
  403f10:	f010 0407 	ands.w	r4, r0, #7
  403f14:	f891 f020 	pld	[r1, #32]
  403f18:	f040 8049 	bne.w	403fae <strlen+0xae>
  403f1c:	f04f 0400 	mov.w	r4, #0
  403f20:	f06f 0007 	mvn.w	r0, #7
  403f24:	e9d1 2300 	ldrd	r2, r3, [r1]
  403f28:	f891 f040 	pld	[r1, #64]	; 0x40
  403f2c:	f100 0008 	add.w	r0, r0, #8
  403f30:	fa82 f24c 	uadd8	r2, r2, ip
  403f34:	faa4 f28c 	sel	r2, r4, ip
  403f38:	fa83 f34c 	uadd8	r3, r3, ip
  403f3c:	faa2 f38c 	sel	r3, r2, ip
  403f40:	bb4b      	cbnz	r3, 403f96 <strlen+0x96>
  403f42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403f46:	fa82 f24c 	uadd8	r2, r2, ip
  403f4a:	f100 0008 	add.w	r0, r0, #8
  403f4e:	faa4 f28c 	sel	r2, r4, ip
  403f52:	fa83 f34c 	uadd8	r3, r3, ip
  403f56:	faa2 f38c 	sel	r3, r2, ip
  403f5a:	b9e3      	cbnz	r3, 403f96 <strlen+0x96>
  403f5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403f60:	fa82 f24c 	uadd8	r2, r2, ip
  403f64:	f100 0008 	add.w	r0, r0, #8
  403f68:	faa4 f28c 	sel	r2, r4, ip
  403f6c:	fa83 f34c 	uadd8	r3, r3, ip
  403f70:	faa2 f38c 	sel	r3, r2, ip
  403f74:	b97b      	cbnz	r3, 403f96 <strlen+0x96>
  403f76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  403f7a:	f101 0120 	add.w	r1, r1, #32
  403f7e:	fa82 f24c 	uadd8	r2, r2, ip
  403f82:	f100 0008 	add.w	r0, r0, #8
  403f86:	faa4 f28c 	sel	r2, r4, ip
  403f8a:	fa83 f34c 	uadd8	r3, r3, ip
  403f8e:	faa2 f38c 	sel	r3, r2, ip
  403f92:	2b00      	cmp	r3, #0
  403f94:	d0c6      	beq.n	403f24 <strlen+0x24>
  403f96:	2a00      	cmp	r2, #0
  403f98:	bf04      	itt	eq
  403f9a:	3004      	addeq	r0, #4
  403f9c:	461a      	moveq	r2, r3
  403f9e:	ba12      	rev	r2, r2
  403fa0:	fab2 f282 	clz	r2, r2
  403fa4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  403fa8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  403fac:	4770      	bx	lr
  403fae:	e9d1 2300 	ldrd	r2, r3, [r1]
  403fb2:	f004 0503 	and.w	r5, r4, #3
  403fb6:	f1c4 0000 	rsb	r0, r4, #0
  403fba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  403fbe:	f014 0f04 	tst.w	r4, #4
  403fc2:	f891 f040 	pld	[r1, #64]	; 0x40
  403fc6:	fa0c f505 	lsl.w	r5, ip, r5
  403fca:	ea62 0205 	orn	r2, r2, r5
  403fce:	bf1c      	itt	ne
  403fd0:	ea63 0305 	ornne	r3, r3, r5
  403fd4:	4662      	movne	r2, ip
  403fd6:	f04f 0400 	mov.w	r4, #0
  403fda:	e7a9      	b.n	403f30 <strlen+0x30>

00403fdc <_svfprintf_r>:
  403fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403fe0:	b0c1      	sub	sp, #260	; 0x104
  403fe2:	460c      	mov	r4, r1
  403fe4:	9109      	str	r1, [sp, #36]	; 0x24
  403fe6:	4615      	mov	r5, r2
  403fe8:	930e      	str	r3, [sp, #56]	; 0x38
  403fea:	900a      	str	r0, [sp, #40]	; 0x28
  403fec:	f002 fc5e 	bl	4068ac <_localeconv_r>
  403ff0:	6803      	ldr	r3, [r0, #0]
  403ff2:	9317      	str	r3, [sp, #92]	; 0x5c
  403ff4:	4618      	mov	r0, r3
  403ff6:	f7ff ff83 	bl	403f00 <strlen>
  403ffa:	89a3      	ldrh	r3, [r4, #12]
  403ffc:	9016      	str	r0, [sp, #88]	; 0x58
  403ffe:	061e      	lsls	r6, r3, #24
  404000:	d503      	bpl.n	40400a <_svfprintf_r+0x2e>
  404002:	6923      	ldr	r3, [r4, #16]
  404004:	2b00      	cmp	r3, #0
  404006:	f001 8119 	beq.w	40523c <_svfprintf_r+0x1260>
  40400a:	2300      	movs	r3, #0
  40400c:	461a      	mov	r2, r3
  40400e:	9312      	str	r3, [sp, #72]	; 0x48
  404010:	9325      	str	r3, [sp, #148]	; 0x94
  404012:	9324      	str	r3, [sp, #144]	; 0x90
  404014:	9319      	str	r3, [sp, #100]	; 0x64
  404016:	930b      	str	r3, [sp, #44]	; 0x2c
  404018:	f8df a464 	ldr.w	sl, [pc, #1124]	; 404480 <_svfprintf_r+0x4a4>
  40401c:	9214      	str	r2, [sp, #80]	; 0x50
  40401e:	ab30      	add	r3, sp, #192	; 0xc0
  404020:	9323      	str	r3, [sp, #140]	; 0x8c
  404022:	4699      	mov	r9, r3
  404024:	9215      	str	r2, [sp, #84]	; 0x54
  404026:	46a8      	mov	r8, r5
  404028:	f898 3000 	ldrb.w	r3, [r8]
  40402c:	4644      	mov	r4, r8
  40402e:	b1eb      	cbz	r3, 40406c <_svfprintf_r+0x90>
  404030:	2b25      	cmp	r3, #37	; 0x25
  404032:	d102      	bne.n	40403a <_svfprintf_r+0x5e>
  404034:	e01a      	b.n	40406c <_svfprintf_r+0x90>
  404036:	2b25      	cmp	r3, #37	; 0x25
  404038:	d003      	beq.n	404042 <_svfprintf_r+0x66>
  40403a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40403e:	2b00      	cmp	r3, #0
  404040:	d1f9      	bne.n	404036 <_svfprintf_r+0x5a>
  404042:	ebc8 0504 	rsb	r5, r8, r4
  404046:	b18d      	cbz	r5, 40406c <_svfprintf_r+0x90>
  404048:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40404a:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40404c:	f8c9 8000 	str.w	r8, [r9]
  404050:	3301      	adds	r3, #1
  404052:	442a      	add	r2, r5
  404054:	2b07      	cmp	r3, #7
  404056:	f8c9 5004 	str.w	r5, [r9, #4]
  40405a:	9225      	str	r2, [sp, #148]	; 0x94
  40405c:	9324      	str	r3, [sp, #144]	; 0x90
  40405e:	f300 80a6 	bgt.w	4041ae <_svfprintf_r+0x1d2>
  404062:	f109 0908 	add.w	r9, r9, #8
  404066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404068:	442b      	add	r3, r5
  40406a:	930b      	str	r3, [sp, #44]	; 0x2c
  40406c:	7823      	ldrb	r3, [r4, #0]
  40406e:	2b00      	cmp	r3, #0
  404070:	f000 80a6 	beq.w	4041c0 <_svfprintf_r+0x1e4>
  404074:	2300      	movs	r3, #0
  404076:	461a      	mov	r2, r3
  404078:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  40407c:	4619      	mov	r1, r3
  40407e:	930c      	str	r3, [sp, #48]	; 0x30
  404080:	9307      	str	r3, [sp, #28]
  404082:	f04f 3bff 	mov.w	fp, #4294967295
  404086:	7863      	ldrb	r3, [r4, #1]
  404088:	f104 0801 	add.w	r8, r4, #1
  40408c:	465d      	mov	r5, fp
  40408e:	f108 0801 	add.w	r8, r8, #1
  404092:	f1a3 0020 	sub.w	r0, r3, #32
  404096:	2858      	cmp	r0, #88	; 0x58
  404098:	f200 8425 	bhi.w	4048e6 <_svfprintf_r+0x90a>
  40409c:	e8df f010 	tbh	[pc, r0, lsl #1]
  4040a0:	04230388 	.word	0x04230388
  4040a4:	03900423 	.word	0x03900423
  4040a8:	04230423 	.word	0x04230423
  4040ac:	04230423 	.word	0x04230423
  4040b0:	04230423 	.word	0x04230423
  4040b4:	03a50397 	.word	0x03a50397
  4040b8:	005d0423 	.word	0x005d0423
  4040bc:	042300e2 	.word	0x042300e2
  4040c0:	010500fe 	.word	0x010500fe
  4040c4:	01050105 	.word	0x01050105
  4040c8:	01050105 	.word	0x01050105
  4040cc:	01050105 	.word	0x01050105
  4040d0:	01050105 	.word	0x01050105
  4040d4:	04230423 	.word	0x04230423
  4040d8:	04230423 	.word	0x04230423
  4040dc:	04230423 	.word	0x04230423
  4040e0:	04230423 	.word	0x04230423
  4040e4:	04230423 	.word	0x04230423
  4040e8:	02810115 	.word	0x02810115
  4040ec:	02810423 	.word	0x02810423
  4040f0:	04230423 	.word	0x04230423
  4040f4:	04230423 	.word	0x04230423
  4040f8:	042302c6 	.word	0x042302c6
  4040fc:	02cd0423 	.word	0x02cd0423
  404100:	04230423 	.word	0x04230423
  404104:	04230423 	.word	0x04230423
  404108:	02f70423 	.word	0x02f70423
  40410c:	04230423 	.word	0x04230423
  404110:	04230325 	.word	0x04230325
  404114:	04230423 	.word	0x04230423
  404118:	04230423 	.word	0x04230423
  40411c:	04230423 	.word	0x04230423
  404120:	04230423 	.word	0x04230423
  404124:	03660423 	.word	0x03660423
  404128:	02810379 	.word	0x02810379
  40412c:	02810281 	.word	0x02810281
  404130:	03790381 	.word	0x03790381
  404134:	04230423 	.word	0x04230423
  404138:	042303d1 	.word	0x042303d1
  40413c:	00a303db 	.word	0x00a303db
  404140:	03ee0064 	.word	0x03ee0064
  404144:	03f50423 	.word	0x03f50423
  404148:	03aa0423 	.word	0x03aa0423
  40414c:	04230423 	.word	0x04230423
  404150:	03bc      	.short	0x03bc
  404152:	980c      	ldr	r0, [sp, #48]	; 0x30
  404154:	930e      	str	r3, [sp, #56]	; 0x38
  404156:	4240      	negs	r0, r0
  404158:	900c      	str	r0, [sp, #48]	; 0x30
  40415a:	9b07      	ldr	r3, [sp, #28]
  40415c:	f043 0304 	orr.w	r3, r3, #4
  404160:	9307      	str	r3, [sp, #28]
  404162:	f898 3000 	ldrb.w	r3, [r8]
  404166:	e792      	b.n	40408e <_svfprintf_r+0xb2>
  404168:	980e      	ldr	r0, [sp, #56]	; 0x38
  40416a:	46ab      	mov	fp, r5
  40416c:	2100      	movs	r1, #0
  40416e:	6804      	ldr	r4, [r0, #0]
  404170:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404174:	1d07      	adds	r7, r0, #4
  404176:	9807      	ldr	r0, [sp, #28]
  404178:	2330      	movs	r3, #48	; 0x30
  40417a:	2278      	movs	r2, #120	; 0x78
  40417c:	458b      	cmp	fp, r1
  40417e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  404182:	f04f 0500 	mov.w	r5, #0
  404186:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40418a:	f040 0302 	orr.w	r3, r0, #2
  40418e:	f2c0 83c7 	blt.w	404920 <_svfprintf_r+0x944>
  404192:	f020 0380 	bic.w	r3, r0, #128	; 0x80
  404196:	f043 0302 	orr.w	r3, r3, #2
  40419a:	9307      	str	r3, [sp, #28]
  40419c:	ea54 0305 	orrs.w	r3, r4, r5
  4041a0:	970e      	str	r7, [sp, #56]	; 0x38
  4041a2:	f000 8393 	beq.w	4048cc <_svfprintf_r+0x8f0>
  4041a6:	460f      	mov	r7, r1
  4041a8:	9211      	str	r2, [sp, #68]	; 0x44
  4041aa:	48b3      	ldr	r0, [pc, #716]	; (404478 <_svfprintf_r+0x49c>)
  4041ac:	e2ce      	b.n	40474c <_svfprintf_r+0x770>
  4041ae:	aa23      	add	r2, sp, #140	; 0x8c
  4041b0:	9909      	ldr	r1, [sp, #36]	; 0x24
  4041b2:	980a      	ldr	r0, [sp, #40]	; 0x28
  4041b4:	f003 fc04 	bl	4079c0 <__ssprint_r>
  4041b8:	b948      	cbnz	r0, 4041ce <_svfprintf_r+0x1f2>
  4041ba:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4041be:	e752      	b.n	404066 <_svfprintf_r+0x8a>
  4041c0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4041c2:	b123      	cbz	r3, 4041ce <_svfprintf_r+0x1f2>
  4041c4:	980a      	ldr	r0, [sp, #40]	; 0x28
  4041c6:	9909      	ldr	r1, [sp, #36]	; 0x24
  4041c8:	aa23      	add	r2, sp, #140	; 0x8c
  4041ca:	f003 fbf9 	bl	4079c0 <__ssprint_r>
  4041ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4041d0:	899b      	ldrh	r3, [r3, #12]
  4041d2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4041d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4041d8:	bf18      	it	ne
  4041da:	f04f 33ff 	movne.w	r3, #4294967295
  4041de:	4618      	mov	r0, r3
  4041e0:	b041      	add	sp, #260	; 0x104
  4041e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4041e6:	9311      	str	r3, [sp, #68]	; 0x44
  4041e8:	46ab      	mov	fp, r5
  4041ea:	2a00      	cmp	r2, #0
  4041ec:	f041 8223 	bne.w	405636 <_svfprintf_r+0x165a>
  4041f0:	9a07      	ldr	r2, [sp, #28]
  4041f2:	f012 0320 	ands.w	r3, r2, #32
  4041f6:	f000 822e 	beq.w	404656 <_svfprintf_r+0x67a>
  4041fa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4041fc:	3707      	adds	r7, #7
  4041fe:	f027 0307 	bic.w	r3, r7, #7
  404202:	2700      	movs	r7, #0
  404204:	f103 0108 	add.w	r1, r3, #8
  404208:	45bb      	cmp	fp, r7
  40420a:	910e      	str	r1, [sp, #56]	; 0x38
  40420c:	e9d3 4500 	ldrd	r4, r5, [r3]
  404210:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404214:	f2c0 8752 	blt.w	4050bc <_svfprintf_r+0x10e0>
  404218:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  40421c:	9307      	str	r3, [sp, #28]
  40421e:	ea54 0305 	orrs.w	r3, r4, r5
  404222:	f000 8375 	beq.w	404910 <_svfprintf_r+0x934>
  404226:	ae30      	add	r6, sp, #192	; 0xc0
  404228:	08e2      	lsrs	r2, r4, #3
  40422a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  40422e:	08e9      	lsrs	r1, r5, #3
  404230:	f004 0307 	and.w	r3, r4, #7
  404234:	460d      	mov	r5, r1
  404236:	4614      	mov	r4, r2
  404238:	3330      	adds	r3, #48	; 0x30
  40423a:	ea54 0205 	orrs.w	r2, r4, r5
  40423e:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404242:	d1f1      	bne.n	404228 <_svfprintf_r+0x24c>
  404244:	9a07      	ldr	r2, [sp, #28]
  404246:	07d1      	lsls	r1, r2, #31
  404248:	f140 8084 	bpl.w	404354 <_svfprintf_r+0x378>
  40424c:	2b30      	cmp	r3, #48	; 0x30
  40424e:	f000 8081 	beq.w	404354 <_svfprintf_r+0x378>
  404252:	2230      	movs	r2, #48	; 0x30
  404254:	1e73      	subs	r3, r6, #1
  404256:	f806 2c01 	strb.w	r2, [r6, #-1]
  40425a:	aa30      	add	r2, sp, #192	; 0xc0
  40425c:	1ad2      	subs	r2, r2, r3
  40425e:	920d      	str	r2, [sp, #52]	; 0x34
  404260:	461e      	mov	r6, r3
  404262:	e07a      	b.n	40435a <_svfprintf_r+0x37e>
  404264:	f898 3000 	ldrb.w	r3, [r8]
  404268:	2b2a      	cmp	r3, #42	; 0x2a
  40426a:	f108 0401 	add.w	r4, r8, #1
  40426e:	f001 81b1 	beq.w	4055d4 <_svfprintf_r+0x15f8>
  404272:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404276:	2809      	cmp	r0, #9
  404278:	bf98      	it	ls
  40427a:	2500      	movls	r5, #0
  40427c:	f201 8164 	bhi.w	405548 <_svfprintf_r+0x156c>
  404280:	f814 3b01 	ldrb.w	r3, [r4], #1
  404284:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  404288:	eb00 0545 	add.w	r5, r0, r5, lsl #1
  40428c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404290:	2809      	cmp	r0, #9
  404292:	d9f5      	bls.n	404280 <_svfprintf_r+0x2a4>
  404294:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
  404298:	46a0      	mov	r8, r4
  40429a:	e6fa      	b.n	404092 <_svfprintf_r+0xb6>
  40429c:	9b07      	ldr	r3, [sp, #28]
  40429e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4042a2:	9307      	str	r3, [sp, #28]
  4042a4:	f898 3000 	ldrb.w	r3, [r8]
  4042a8:	e6f1      	b.n	40408e <_svfprintf_r+0xb2>
  4042aa:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4042ae:	2300      	movs	r3, #0
  4042b0:	461c      	mov	r4, r3
  4042b2:	f818 3b01 	ldrb.w	r3, [r8], #1
  4042b6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4042ba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  4042be:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  4042c2:	2809      	cmp	r0, #9
  4042c4:	d9f5      	bls.n	4042b2 <_svfprintf_r+0x2d6>
  4042c6:	940c      	str	r4, [sp, #48]	; 0x30
  4042c8:	e6e3      	b.n	404092 <_svfprintf_r+0xb6>
  4042ca:	9311      	str	r3, [sp, #68]	; 0x44
  4042cc:	46ab      	mov	fp, r5
  4042ce:	2a00      	cmp	r2, #0
  4042d0:	f041 81c9 	bne.w	405666 <_svfprintf_r+0x168a>
  4042d4:	9b07      	ldr	r3, [sp, #28]
  4042d6:	f043 0310 	orr.w	r3, r3, #16
  4042da:	9307      	str	r3, [sp, #28]
  4042dc:	9b07      	ldr	r3, [sp, #28]
  4042de:	0698      	lsls	r0, r3, #26
  4042e0:	f140 8530 	bpl.w	404d44 <_svfprintf_r+0xd68>
  4042e4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4042e6:	3707      	adds	r7, #7
  4042e8:	f027 0707 	bic.w	r7, r7, #7
  4042ec:	e9d7 2300 	ldrd	r2, r3, [r7]
  4042f0:	f107 0108 	add.w	r1, r7, #8
  4042f4:	910e      	str	r1, [sp, #56]	; 0x38
  4042f6:	4614      	mov	r4, r2
  4042f8:	461d      	mov	r5, r3
  4042fa:	2a00      	cmp	r2, #0
  4042fc:	f173 0300 	sbcs.w	r3, r3, #0
  404300:	f2c0 855b 	blt.w	404dba <_svfprintf_r+0xdde>
  404304:	f1bb 0f00 	cmp.w	fp, #0
  404308:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40430c:	f2c0 8538 	blt.w	404d80 <_svfprintf_r+0xda4>
  404310:	9b07      	ldr	r3, [sp, #28]
  404312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404316:	9307      	str	r3, [sp, #28]
  404318:	ea54 0305 	orrs.w	r3, r4, r5
  40431c:	f000 81db 	beq.w	4046d6 <_svfprintf_r+0x6fa>
  404320:	2d00      	cmp	r5, #0
  404322:	bf08      	it	eq
  404324:	2c0a      	cmpeq	r4, #10
  404326:	f0c0 81db 	bcc.w	4046e0 <_svfprintf_r+0x704>
  40432a:	ae30      	add	r6, sp, #192	; 0xc0
  40432c:	4620      	mov	r0, r4
  40432e:	4629      	mov	r1, r5
  404330:	220a      	movs	r2, #10
  404332:	2300      	movs	r3, #0
  404334:	f003 fc46 	bl	407bc4 <__aeabi_uldivmod>
  404338:	3230      	adds	r2, #48	; 0x30
  40433a:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40433e:	4620      	mov	r0, r4
  404340:	4629      	mov	r1, r5
  404342:	2300      	movs	r3, #0
  404344:	220a      	movs	r2, #10
  404346:	f003 fc3d 	bl	407bc4 <__aeabi_uldivmod>
  40434a:	4604      	mov	r4, r0
  40434c:	460d      	mov	r5, r1
  40434e:	ea54 0305 	orrs.w	r3, r4, r5
  404352:	d1eb      	bne.n	40432c <_svfprintf_r+0x350>
  404354:	ab30      	add	r3, sp, #192	; 0xc0
  404356:	1b9b      	subs	r3, r3, r6
  404358:	930d      	str	r3, [sp, #52]	; 0x34
  40435a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40435c:	455b      	cmp	r3, fp
  40435e:	bfb8      	it	lt
  404360:	465b      	movlt	r3, fp
  404362:	9308      	str	r3, [sp, #32]
  404364:	2300      	movs	r3, #0
  404366:	9313      	str	r3, [sp, #76]	; 0x4c
  404368:	b117      	cbz	r7, 404370 <_svfprintf_r+0x394>
  40436a:	9b08      	ldr	r3, [sp, #32]
  40436c:	3301      	adds	r3, #1
  40436e:	9308      	str	r3, [sp, #32]
  404370:	9b07      	ldr	r3, [sp, #28]
  404372:	f013 0302 	ands.w	r3, r3, #2
  404376:	930f      	str	r3, [sp, #60]	; 0x3c
  404378:	d002      	beq.n	404380 <_svfprintf_r+0x3a4>
  40437a:	9b08      	ldr	r3, [sp, #32]
  40437c:	3302      	adds	r3, #2
  40437e:	9308      	str	r3, [sp, #32]
  404380:	9b07      	ldr	r3, [sp, #28]
  404382:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404386:	9310      	str	r3, [sp, #64]	; 0x40
  404388:	f040 82d7 	bne.w	40493a <_svfprintf_r+0x95e>
  40438c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40438e:	9a08      	ldr	r2, [sp, #32]
  404390:	1a9d      	subs	r5, r3, r2
  404392:	2d00      	cmp	r5, #0
  404394:	f340 82d1 	ble.w	40493a <_svfprintf_r+0x95e>
  404398:	2d10      	cmp	r5, #16
  40439a:	9925      	ldr	r1, [sp, #148]	; 0x94
  40439c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40439e:	4f37      	ldr	r7, [pc, #220]	; (40447c <_svfprintf_r+0x4a0>)
  4043a0:	dd27      	ble.n	4043f2 <_svfprintf_r+0x416>
  4043a2:	9618      	str	r6, [sp, #96]	; 0x60
  4043a4:	4648      	mov	r0, r9
  4043a6:	2410      	movs	r4, #16
  4043a8:	46b9      	mov	r9, r7
  4043aa:	9e09      	ldr	r6, [sp, #36]	; 0x24
  4043ac:	462f      	mov	r7, r5
  4043ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4043b0:	e004      	b.n	4043bc <_svfprintf_r+0x3e0>
  4043b2:	3f10      	subs	r7, #16
  4043b4:	2f10      	cmp	r7, #16
  4043b6:	f100 0008 	add.w	r0, r0, #8
  4043ba:	dd16      	ble.n	4043ea <_svfprintf_r+0x40e>
  4043bc:	3201      	adds	r2, #1
  4043be:	4b2f      	ldr	r3, [pc, #188]	; (40447c <_svfprintf_r+0x4a0>)
  4043c0:	9224      	str	r2, [sp, #144]	; 0x90
  4043c2:	3110      	adds	r1, #16
  4043c4:	2a07      	cmp	r2, #7
  4043c6:	9125      	str	r1, [sp, #148]	; 0x94
  4043c8:	e880 0018 	stmia.w	r0, {r3, r4}
  4043cc:	ddf1      	ble.n	4043b2 <_svfprintf_r+0x3d6>
  4043ce:	aa23      	add	r2, sp, #140	; 0x8c
  4043d0:	4631      	mov	r1, r6
  4043d2:	4628      	mov	r0, r5
  4043d4:	f003 faf4 	bl	4079c0 <__ssprint_r>
  4043d8:	2800      	cmp	r0, #0
  4043da:	f47f aef8 	bne.w	4041ce <_svfprintf_r+0x1f2>
  4043de:	3f10      	subs	r7, #16
  4043e0:	2f10      	cmp	r7, #16
  4043e2:	9925      	ldr	r1, [sp, #148]	; 0x94
  4043e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4043e6:	a830      	add	r0, sp, #192	; 0xc0
  4043e8:	dce8      	bgt.n	4043bc <_svfprintf_r+0x3e0>
  4043ea:	9e18      	ldr	r6, [sp, #96]	; 0x60
  4043ec:	463d      	mov	r5, r7
  4043ee:	464f      	mov	r7, r9
  4043f0:	4681      	mov	r9, r0
  4043f2:	3201      	adds	r2, #1
  4043f4:	186c      	adds	r4, r5, r1
  4043f6:	2a07      	cmp	r2, #7
  4043f8:	9425      	str	r4, [sp, #148]	; 0x94
  4043fa:	9224      	str	r2, [sp, #144]	; 0x90
  4043fc:	f8c9 7000 	str.w	r7, [r9]
  404400:	f8c9 5004 	str.w	r5, [r9, #4]
  404404:	f300 8428 	bgt.w	404c58 <_svfprintf_r+0xc7c>
  404408:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40440c:	f109 0908 	add.w	r9, r9, #8
  404410:	b177      	cbz	r7, 404430 <_svfprintf_r+0x454>
  404412:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404414:	3301      	adds	r3, #1
  404416:	3401      	adds	r4, #1
  404418:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
  40441c:	2201      	movs	r2, #1
  40441e:	2b07      	cmp	r3, #7
  404420:	9425      	str	r4, [sp, #148]	; 0x94
  404422:	9324      	str	r3, [sp, #144]	; 0x90
  404424:	e889 0006 	stmia.w	r9, {r1, r2}
  404428:	f300 83a0 	bgt.w	404b6c <_svfprintf_r+0xb90>
  40442c:	f109 0908 	add.w	r9, r9, #8
  404430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404432:	b16b      	cbz	r3, 404450 <_svfprintf_r+0x474>
  404434:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404436:	3301      	adds	r3, #1
  404438:	3402      	adds	r4, #2
  40443a:	a91c      	add	r1, sp, #112	; 0x70
  40443c:	2202      	movs	r2, #2
  40443e:	2b07      	cmp	r3, #7
  404440:	9425      	str	r4, [sp, #148]	; 0x94
  404442:	9324      	str	r3, [sp, #144]	; 0x90
  404444:	e889 0006 	stmia.w	r9, {r1, r2}
  404448:	f300 839c 	bgt.w	404b84 <_svfprintf_r+0xba8>
  40444c:	f109 0908 	add.w	r9, r9, #8
  404450:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404452:	2b80      	cmp	r3, #128	; 0x80
  404454:	f000 82d5 	beq.w	404a02 <_svfprintf_r+0xa26>
  404458:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40445a:	ebc3 070b 	rsb	r7, r3, fp
  40445e:	2f00      	cmp	r7, #0
  404460:	dd39      	ble.n	4044d6 <_svfprintf_r+0x4fa>
  404462:	4a07      	ldr	r2, [pc, #28]	; (404480 <_svfprintf_r+0x4a4>)
  404464:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404466:	920f      	str	r2, [sp, #60]	; 0x3c
  404468:	2f10      	cmp	r7, #16
  40446a:	dd28      	ble.n	4044be <_svfprintf_r+0x4e2>
  40446c:	4622      	mov	r2, r4
  40446e:	f04f 0b10 	mov.w	fp, #16
  404472:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404474:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404476:	e00a      	b.n	40448e <_svfprintf_r+0x4b2>
  404478:	00408248 	.word	0x00408248
  40447c:	00408268 	.word	0x00408268
  404480:	00408214 	.word	0x00408214
  404484:	3f10      	subs	r7, #16
  404486:	2f10      	cmp	r7, #16
  404488:	f109 0908 	add.w	r9, r9, #8
  40448c:	dd16      	ble.n	4044bc <_svfprintf_r+0x4e0>
  40448e:	3301      	adds	r3, #1
  404490:	3210      	adds	r2, #16
  404492:	2b07      	cmp	r3, #7
  404494:	9225      	str	r2, [sp, #148]	; 0x94
  404496:	9324      	str	r3, [sp, #144]	; 0x90
  404498:	e889 0c00 	stmia.w	r9, {sl, fp}
  40449c:	ddf2      	ble.n	404484 <_svfprintf_r+0x4a8>
  40449e:	aa23      	add	r2, sp, #140	; 0x8c
  4044a0:	4621      	mov	r1, r4
  4044a2:	4628      	mov	r0, r5
  4044a4:	f003 fa8c 	bl	4079c0 <__ssprint_r>
  4044a8:	2800      	cmp	r0, #0
  4044aa:	f47f ae90 	bne.w	4041ce <_svfprintf_r+0x1f2>
  4044ae:	3f10      	subs	r7, #16
  4044b0:	2f10      	cmp	r7, #16
  4044b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4044b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044b6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4044ba:	dce8      	bgt.n	40448e <_svfprintf_r+0x4b2>
  4044bc:	4614      	mov	r4, r2
  4044be:	3301      	adds	r3, #1
  4044c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4044c2:	9324      	str	r3, [sp, #144]	; 0x90
  4044c4:	443c      	add	r4, r7
  4044c6:	2b07      	cmp	r3, #7
  4044c8:	9425      	str	r4, [sp, #148]	; 0x94
  4044ca:	e889 0084 	stmia.w	r9, {r2, r7}
  4044ce:	f300 8341 	bgt.w	404b54 <_svfprintf_r+0xb78>
  4044d2:	f109 0908 	add.w	r9, r9, #8
  4044d6:	9b07      	ldr	r3, [sp, #28]
  4044d8:	05da      	lsls	r2, r3, #23
  4044da:	f100 8230 	bmi.w	40493e <_svfprintf_r+0x962>
  4044de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4044e0:	990d      	ldr	r1, [sp, #52]	; 0x34
  4044e2:	f8c9 6000 	str.w	r6, [r9]
  4044e6:	3301      	adds	r3, #1
  4044e8:	440c      	add	r4, r1
  4044ea:	2b07      	cmp	r3, #7
  4044ec:	9425      	str	r4, [sp, #148]	; 0x94
  4044ee:	f8c9 1004 	str.w	r1, [r9, #4]
  4044f2:	9324      	str	r3, [sp, #144]	; 0x90
  4044f4:	f300 8318 	bgt.w	404b28 <_svfprintf_r+0xb4c>
  4044f8:	f109 0908 	add.w	r9, r9, #8
  4044fc:	9b07      	ldr	r3, [sp, #28]
  4044fe:	0759      	lsls	r1, r3, #29
  404500:	d53f      	bpl.n	404582 <_svfprintf_r+0x5a6>
  404502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404504:	9a08      	ldr	r2, [sp, #32]
  404506:	1a9d      	subs	r5, r3, r2
  404508:	2d00      	cmp	r5, #0
  40450a:	dd3a      	ble.n	404582 <_svfprintf_r+0x5a6>
  40450c:	2d10      	cmp	r5, #16
  40450e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404510:	4fbc      	ldr	r7, [pc, #752]	; (404804 <_svfprintf_r+0x828>)
  404512:	dd23      	ble.n	40455c <_svfprintf_r+0x580>
  404514:	4622      	mov	r2, r4
  404516:	2610      	movs	r6, #16
  404518:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  40451c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40451e:	e004      	b.n	40452a <_svfprintf_r+0x54e>
  404520:	3d10      	subs	r5, #16
  404522:	2d10      	cmp	r5, #16
  404524:	f109 0908 	add.w	r9, r9, #8
  404528:	dd17      	ble.n	40455a <_svfprintf_r+0x57e>
  40452a:	3301      	adds	r3, #1
  40452c:	49b5      	ldr	r1, [pc, #724]	; (404804 <_svfprintf_r+0x828>)
  40452e:	9324      	str	r3, [sp, #144]	; 0x90
  404530:	3210      	adds	r2, #16
  404532:	2b07      	cmp	r3, #7
  404534:	9225      	str	r2, [sp, #148]	; 0x94
  404536:	e889 0042 	stmia.w	r9, {r1, r6}
  40453a:	ddf1      	ble.n	404520 <_svfprintf_r+0x544>
  40453c:	aa23      	add	r2, sp, #140	; 0x8c
  40453e:	4621      	mov	r1, r4
  404540:	4658      	mov	r0, fp
  404542:	f003 fa3d 	bl	4079c0 <__ssprint_r>
  404546:	2800      	cmp	r0, #0
  404548:	f47f ae41 	bne.w	4041ce <_svfprintf_r+0x1f2>
  40454c:	3d10      	subs	r5, #16
  40454e:	2d10      	cmp	r5, #16
  404550:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404552:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404554:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404558:	dce7      	bgt.n	40452a <_svfprintf_r+0x54e>
  40455a:	4614      	mov	r4, r2
  40455c:	3301      	adds	r3, #1
  40455e:	442c      	add	r4, r5
  404560:	2b07      	cmp	r3, #7
  404562:	9425      	str	r4, [sp, #148]	; 0x94
  404564:	9324      	str	r3, [sp, #144]	; 0x90
  404566:	f8c9 7000 	str.w	r7, [r9]
  40456a:	f8c9 5004 	str.w	r5, [r9, #4]
  40456e:	dd08      	ble.n	404582 <_svfprintf_r+0x5a6>
  404570:	aa23      	add	r2, sp, #140	; 0x8c
  404572:	9909      	ldr	r1, [sp, #36]	; 0x24
  404574:	980a      	ldr	r0, [sp, #40]	; 0x28
  404576:	f003 fa23 	bl	4079c0 <__ssprint_r>
  40457a:	2800      	cmp	r0, #0
  40457c:	f47f ae27 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404580:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404586:	9908      	ldr	r1, [sp, #32]
  404588:	428a      	cmp	r2, r1
  40458a:	bfac      	ite	ge
  40458c:	189b      	addge	r3, r3, r2
  40458e:	185b      	addlt	r3, r3, r1
  404590:	930b      	str	r3, [sp, #44]	; 0x2c
  404592:	2c00      	cmp	r4, #0
  404594:	f040 82d4 	bne.w	404b40 <_svfprintf_r+0xb64>
  404598:	2300      	movs	r3, #0
  40459a:	9324      	str	r3, [sp, #144]	; 0x90
  40459c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4045a0:	e542      	b.n	404028 <_svfprintf_r+0x4c>
  4045a2:	9311      	str	r3, [sp, #68]	; 0x44
  4045a4:	46ab      	mov	fp, r5
  4045a6:	2a00      	cmp	r2, #0
  4045a8:	f041 8059 	bne.w	40565e <_svfprintf_r+0x1682>
  4045ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4045ae:	3707      	adds	r7, #7
  4045b0:	f027 0307 	bic.w	r3, r7, #7
  4045b4:	f103 0208 	add.w	r2, r3, #8
  4045b8:	920e      	str	r2, [sp, #56]	; 0x38
  4045ba:	681a      	ldr	r2, [r3, #0]
  4045bc:	9214      	str	r2, [sp, #80]	; 0x50
  4045be:	685b      	ldr	r3, [r3, #4]
  4045c0:	9315      	str	r3, [sp, #84]	; 0x54
  4045c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4045c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4045c6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  4045ca:	4628      	mov	r0, r5
  4045cc:	4621      	mov	r1, r4
  4045ce:	f04f 32ff 	mov.w	r2, #4294967295
  4045d2:	4b8d      	ldr	r3, [pc, #564]	; (404808 <_svfprintf_r+0x82c>)
  4045d4:	f7ff fb1c 	bl	403c10 <__aeabi_dcmpun>
  4045d8:	2800      	cmp	r0, #0
  4045da:	f040 84c1 	bne.w	404f60 <_svfprintf_r+0xf84>
  4045de:	4628      	mov	r0, r5
  4045e0:	4621      	mov	r1, r4
  4045e2:	f04f 32ff 	mov.w	r2, #4294967295
  4045e6:	4b88      	ldr	r3, [pc, #544]	; (404808 <_svfprintf_r+0x82c>)
  4045e8:	f7ff faf4 	bl	403bd4 <__aeabi_dcmple>
  4045ec:	2800      	cmp	r0, #0
  4045ee:	f040 84b7 	bne.w	404f60 <_svfprintf_r+0xf84>
  4045f2:	9814      	ldr	r0, [sp, #80]	; 0x50
  4045f4:	9915      	ldr	r1, [sp, #84]	; 0x54
  4045f6:	2200      	movs	r2, #0
  4045f8:	2300      	movs	r3, #0
  4045fa:	f7ff fae1 	bl	403bc0 <__aeabi_dcmplt>
  4045fe:	2800      	cmp	r0, #0
  404600:	f040 874b 	bne.w	40549a <_svfprintf_r+0x14be>
  404604:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404608:	4e80      	ldr	r6, [pc, #512]	; (40480c <_svfprintf_r+0x830>)
  40460a:	4b81      	ldr	r3, [pc, #516]	; (404810 <_svfprintf_r+0x834>)
  40460c:	9907      	ldr	r1, [sp, #28]
  40460e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
  404612:	9107      	str	r1, [sp, #28]
  404614:	9911      	ldr	r1, [sp, #68]	; 0x44
  404616:	2203      	movs	r2, #3
  404618:	f04f 0b00 	mov.w	fp, #0
  40461c:	9208      	str	r2, [sp, #32]
  40461e:	2947      	cmp	r1, #71	; 0x47
  404620:	bfd8      	it	le
  404622:	461e      	movle	r6, r3
  404624:	920d      	str	r2, [sp, #52]	; 0x34
  404626:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  40462a:	e69d      	b.n	404368 <_svfprintf_r+0x38c>
  40462c:	9b07      	ldr	r3, [sp, #28]
  40462e:	f043 0308 	orr.w	r3, r3, #8
  404632:	9307      	str	r3, [sp, #28]
  404634:	f898 3000 	ldrb.w	r3, [r8]
  404638:	e529      	b.n	40408e <_svfprintf_r+0xb2>
  40463a:	9311      	str	r3, [sp, #68]	; 0x44
  40463c:	46ab      	mov	fp, r5
  40463e:	2a00      	cmp	r2, #0
  404640:	f041 8009 	bne.w	405656 <_svfprintf_r+0x167a>
  404644:	9b07      	ldr	r3, [sp, #28]
  404646:	f043 0310 	orr.w	r3, r3, #16
  40464a:	9307      	str	r3, [sp, #28]
  40464c:	9a07      	ldr	r2, [sp, #28]
  40464e:	f012 0320 	ands.w	r3, r2, #32
  404652:	f47f add2 	bne.w	4041fa <_svfprintf_r+0x21e>
  404656:	9907      	ldr	r1, [sp, #28]
  404658:	f011 0210 	ands.w	r2, r1, #16
  40465c:	f000 8507 	beq.w	40506e <_svfprintf_r+0x1092>
  404660:	980e      	ldr	r0, [sp, #56]	; 0x38
  404662:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404666:	f1bb 0f00 	cmp.w	fp, #0
  40466a:	6804      	ldr	r4, [r0, #0]
  40466c:	f100 0704 	add.w	r7, r0, #4
  404670:	f04f 0500 	mov.w	r5, #0
  404674:	f2c0 8521 	blt.w	4050ba <_svfprintf_r+0x10de>
  404678:	460a      	mov	r2, r1
  40467a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  40467e:	9207      	str	r2, [sp, #28]
  404680:	ea54 0205 	orrs.w	r2, r4, r5
  404684:	970e      	str	r7, [sp, #56]	; 0x38
  404686:	f000 8143 	beq.w	404910 <_svfprintf_r+0x934>
  40468a:	461f      	mov	r7, r3
  40468c:	e5cb      	b.n	404226 <_svfprintf_r+0x24a>
  40468e:	9311      	str	r3, [sp, #68]	; 0x44
  404690:	46ab      	mov	fp, r5
  404692:	2a00      	cmp	r2, #0
  404694:	f040 87d7 	bne.w	405646 <_svfprintf_r+0x166a>
  404698:	9b07      	ldr	r3, [sp, #28]
  40469a:	f043 0310 	orr.w	r3, r3, #16
  40469e:	9307      	str	r3, [sp, #28]
  4046a0:	9a07      	ldr	r2, [sp, #28]
  4046a2:	f012 0320 	ands.w	r3, r2, #32
  4046a6:	f000 8332 	beq.w	404d0e <_svfprintf_r+0xd32>
  4046aa:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  4046ac:	3707      	adds	r7, #7
  4046ae:	f027 0307 	bic.w	r3, r7, #7
  4046b2:	2700      	movs	r7, #0
  4046b4:	f103 0108 	add.w	r1, r3, #8
  4046b8:	45bb      	cmp	fp, r7
  4046ba:	910e      	str	r1, [sp, #56]	; 0x38
  4046bc:	e9d3 4500 	ldrd	r4, r5, [r3]
  4046c0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4046c4:	f2c0 835c 	blt.w	404d80 <_svfprintf_r+0xda4>
  4046c8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  4046cc:	9307      	str	r3, [sp, #28]
  4046ce:	ea54 0305 	orrs.w	r3, r4, r5
  4046d2:	f47f ae25 	bne.w	404320 <_svfprintf_r+0x344>
  4046d6:	f1bb 0f00 	cmp.w	fp, #0
  4046da:	f000 80fe 	beq.w	4048da <_svfprintf_r+0x8fe>
  4046de:	2400      	movs	r4, #0
  4046e0:	ae40      	add	r6, sp, #256	; 0x100
  4046e2:	3430      	adds	r4, #48	; 0x30
  4046e4:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4046e8:	e634      	b.n	404354 <_svfprintf_r+0x378>
  4046ea:	9311      	str	r3, [sp, #68]	; 0x44
  4046ec:	46ab      	mov	fp, r5
  4046ee:	2a00      	cmp	r2, #0
  4046f0:	f040 87a5 	bne.w	40563e <_svfprintf_r+0x1662>
  4046f4:	9b07      	ldr	r3, [sp, #28]
  4046f6:	4847      	ldr	r0, [pc, #284]	; (404814 <_svfprintf_r+0x838>)
  4046f8:	069d      	lsls	r5, r3, #26
  4046fa:	f140 8097 	bpl.w	40482c <_svfprintf_r+0x850>
  4046fe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  404700:	3707      	adds	r7, #7
  404702:	f027 0307 	bic.w	r3, r7, #7
  404706:	e9d3 4500 	ldrd	r4, r5, [r3]
  40470a:	f103 0208 	add.w	r2, r3, #8
  40470e:	920e      	str	r2, [sp, #56]	; 0x38
  404710:	9a07      	ldr	r2, [sp, #28]
  404712:	f012 0701 	ands.w	r7, r2, #1
  404716:	f000 8241 	beq.w	404b9c <_svfprintf_r+0xbc0>
  40471a:	ea54 0305 	orrs.w	r3, r4, r5
  40471e:	f000 84f5 	beq.w	40510c <_svfprintf_r+0x1130>
  404722:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404726:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
  40472a:	2700      	movs	r7, #0
  40472c:	9a07      	ldr	r2, [sp, #28]
  40472e:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404732:	2330      	movs	r3, #48	; 0x30
  404734:	45bb      	cmp	fp, r7
  404736:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
  40473a:	f042 0302 	orr.w	r3, r2, #2
  40473e:	f2c0 86a9 	blt.w	405494 <_svfprintf_r+0x14b8>
  404742:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404746:	f043 0302 	orr.w	r3, r3, #2
  40474a:	9307      	str	r3, [sp, #28]
  40474c:	ae30      	add	r6, sp, #192	; 0xc0
  40474e:	0923      	lsrs	r3, r4, #4
  404750:	f004 010f 	and.w	r1, r4, #15
  404754:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404758:	092a      	lsrs	r2, r5, #4
  40475a:	461c      	mov	r4, r3
  40475c:	4615      	mov	r5, r2
  40475e:	5c43      	ldrb	r3, [r0, r1]
  404760:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404764:	ea54 0305 	orrs.w	r3, r4, r5
  404768:	d1f1      	bne.n	40474e <_svfprintf_r+0x772>
  40476a:	e5f3      	b.n	404354 <_svfprintf_r+0x378>
  40476c:	990e      	ldr	r1, [sp, #56]	; 0x38
  40476e:	9311      	str	r3, [sp, #68]	; 0x44
  404770:	680a      	ldr	r2, [r1, #0]
  404772:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404776:	2300      	movs	r3, #0
  404778:	460a      	mov	r2, r1
  40477a:	461f      	mov	r7, r3
  40477c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404780:	3204      	adds	r2, #4
  404782:	2301      	movs	r3, #1
  404784:	9308      	str	r3, [sp, #32]
  404786:	46bb      	mov	fp, r7
  404788:	9713      	str	r7, [sp, #76]	; 0x4c
  40478a:	920e      	str	r2, [sp, #56]	; 0x38
  40478c:	930d      	str	r3, [sp, #52]	; 0x34
  40478e:	ae26      	add	r6, sp, #152	; 0x98
  404790:	e5ee      	b.n	404370 <_svfprintf_r+0x394>
  404792:	9311      	str	r3, [sp, #68]	; 0x44
  404794:	46ab      	mov	fp, r5
  404796:	2a00      	cmp	r2, #0
  404798:	f43f ada0 	beq.w	4042dc <_svfprintf_r+0x300>
  40479c:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  4047a0:	e59c      	b.n	4042dc <_svfprintf_r+0x300>
  4047a2:	9b07      	ldr	r3, [sp, #28]
  4047a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4047a8:	9307      	str	r3, [sp, #28]
  4047aa:	f898 3000 	ldrb.w	r3, [r8]
  4047ae:	e46e      	b.n	40408e <_svfprintf_r+0xb2>
  4047b0:	f898 3000 	ldrb.w	r3, [r8]
  4047b4:	2900      	cmp	r1, #0
  4047b6:	f47f ac6a 	bne.w	40408e <_svfprintf_r+0xb2>
  4047ba:	2201      	movs	r2, #1
  4047bc:	2120      	movs	r1, #32
  4047be:	e466      	b.n	40408e <_svfprintf_r+0xb2>
  4047c0:	9b07      	ldr	r3, [sp, #28]
  4047c2:	f043 0301 	orr.w	r3, r3, #1
  4047c6:	9307      	str	r3, [sp, #28]
  4047c8:	f898 3000 	ldrb.w	r3, [r8]
  4047cc:	e45f      	b.n	40408e <_svfprintf_r+0xb2>
  4047ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  4047d0:	6823      	ldr	r3, [r4, #0]
  4047d2:	930c      	str	r3, [sp, #48]	; 0x30
  4047d4:	4618      	mov	r0, r3
  4047d6:	2800      	cmp	r0, #0
  4047d8:	4623      	mov	r3, r4
  4047da:	f103 0304 	add.w	r3, r3, #4
  4047de:	f6ff acb8 	blt.w	404152 <_svfprintf_r+0x176>
  4047e2:	930e      	str	r3, [sp, #56]	; 0x38
  4047e4:	f898 3000 	ldrb.w	r3, [r8]
  4047e8:	e451      	b.n	40408e <_svfprintf_r+0xb2>
  4047ea:	f898 3000 	ldrb.w	r3, [r8]
  4047ee:	2201      	movs	r2, #1
  4047f0:	212b      	movs	r1, #43	; 0x2b
  4047f2:	e44c      	b.n	40408e <_svfprintf_r+0xb2>
  4047f4:	9311      	str	r3, [sp, #68]	; 0x44
  4047f6:	46ab      	mov	fp, r5
  4047f8:	2a00      	cmp	r2, #0
  4047fa:	f43f af51 	beq.w	4046a0 <_svfprintf_r+0x6c4>
  4047fe:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  404802:	e74d      	b.n	4046a0 <_svfprintf_r+0x6c4>
  404804:	00408268 	.word	0x00408268
  404808:	7fefffff 	.word	0x7fefffff
  40480c:	00408228 	.word	0x00408228
  404810:	00408224 	.word	0x00408224
  404814:	00408234 	.word	0x00408234
  404818:	9311      	str	r3, [sp, #68]	; 0x44
  40481a:	46ab      	mov	fp, r5
  40481c:	2a00      	cmp	r2, #0
  40481e:	f040 8703 	bne.w	405628 <_svfprintf_r+0x164c>
  404822:	9b07      	ldr	r3, [sp, #28]
  404824:	4899      	ldr	r0, [pc, #612]	; (404a8c <_svfprintf_r+0xab0>)
  404826:	069d      	lsls	r5, r3, #26
  404828:	f53f af69 	bmi.w	4046fe <_svfprintf_r+0x722>
  40482c:	9b07      	ldr	r3, [sp, #28]
  40482e:	06dc      	lsls	r4, r3, #27
  404830:	f140 845e 	bpl.w	4050f0 <_svfprintf_r+0x1114>
  404834:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404836:	4613      	mov	r3, r2
  404838:	3304      	adds	r3, #4
  40483a:	6814      	ldr	r4, [r2, #0]
  40483c:	930e      	str	r3, [sp, #56]	; 0x38
  40483e:	2500      	movs	r5, #0
  404840:	e766      	b.n	404710 <_svfprintf_r+0x734>
  404842:	f898 3000 	ldrb.w	r3, [r8]
  404846:	2b6c      	cmp	r3, #108	; 0x6c
  404848:	f000 84e1 	beq.w	40520e <_svfprintf_r+0x1232>
  40484c:	9807      	ldr	r0, [sp, #28]
  40484e:	f040 0010 	orr.w	r0, r0, #16
  404852:	9007      	str	r0, [sp, #28]
  404854:	e41b      	b.n	40408e <_svfprintf_r+0xb2>
  404856:	2a00      	cmp	r2, #0
  404858:	f040 86db 	bne.w	405612 <_svfprintf_r+0x1636>
  40485c:	9b07      	ldr	r3, [sp, #28]
  40485e:	069b      	lsls	r3, r3, #26
  404860:	f140 842f 	bpl.w	4050c2 <_svfprintf_r+0x10e6>
  404864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404866:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404868:	6813      	ldr	r3, [r2, #0]
  40486a:	17cd      	asrs	r5, r1, #31
  40486c:	4608      	mov	r0, r1
  40486e:	3204      	adds	r2, #4
  404870:	4629      	mov	r1, r5
  404872:	920e      	str	r2, [sp, #56]	; 0x38
  404874:	e9c3 0100 	strd	r0, r1, [r3]
  404878:	f7ff bbd6 	b.w	404028 <_svfprintf_r+0x4c>
  40487c:	9b07      	ldr	r3, [sp, #28]
  40487e:	f043 0320 	orr.w	r3, r3, #32
  404882:	9307      	str	r3, [sp, #28]
  404884:	f898 3000 	ldrb.w	r3, [r8]
  404888:	e401      	b.n	40408e <_svfprintf_r+0xb2>
  40488a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40488c:	9311      	str	r3, [sp, #68]	; 0x44
  40488e:	6816      	ldr	r6, [r2, #0]
  404890:	2400      	movs	r4, #0
  404892:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
  404896:	1d17      	adds	r7, r2, #4
  404898:	2e00      	cmp	r6, #0
  40489a:	f000 85bd 	beq.w	405418 <_svfprintf_r+0x143c>
  40489e:	2d00      	cmp	r5, #0
  4048a0:	f2c0 850f 	blt.w	4052c2 <_svfprintf_r+0x12e6>
  4048a4:	462a      	mov	r2, r5
  4048a6:	4621      	mov	r1, r4
  4048a8:	4630      	mov	r0, r6
  4048aa:	f002 fac1 	bl	406e30 <memchr>
  4048ae:	2800      	cmp	r0, #0
  4048b0:	f000 8604 	beq.w	4054bc <_svfprintf_r+0x14e0>
  4048b4:	1b83      	subs	r3, r0, r6
  4048b6:	930d      	str	r3, [sp, #52]	; 0x34
  4048b8:	46a3      	mov	fp, r4
  4048ba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4048be:	970e      	str	r7, [sp, #56]	; 0x38
  4048c0:	9308      	str	r3, [sp, #32]
  4048c2:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
  4048c6:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4048ca:	e54d      	b.n	404368 <_svfprintf_r+0x38c>
  4048cc:	486f      	ldr	r0, [pc, #444]	; (404a8c <_svfprintf_r+0xab0>)
  4048ce:	9211      	str	r2, [sp, #68]	; 0x44
  4048d0:	f1bb 0f00 	cmp.w	fp, #0
  4048d4:	f040 8173 	bne.w	404bbe <_svfprintf_r+0xbe2>
  4048d8:	465f      	mov	r7, fp
  4048da:	f04f 0b00 	mov.w	fp, #0
  4048de:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4048e2:	ae30      	add	r6, sp, #192	; 0xc0
  4048e4:	e539      	b.n	40435a <_svfprintf_r+0x37e>
  4048e6:	9311      	str	r3, [sp, #68]	; 0x44
  4048e8:	2a00      	cmp	r2, #0
  4048ea:	f040 86b0 	bne.w	40564e <_svfprintf_r+0x1672>
  4048ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4048f0:	2a00      	cmp	r2, #0
  4048f2:	f43f ac65 	beq.w	4041c0 <_svfprintf_r+0x1e4>
  4048f6:	2300      	movs	r3, #0
  4048f8:	2101      	movs	r1, #1
  4048fa:	461f      	mov	r7, r3
  4048fc:	9108      	str	r1, [sp, #32]
  4048fe:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
  404902:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404906:	469b      	mov	fp, r3
  404908:	9313      	str	r3, [sp, #76]	; 0x4c
  40490a:	910d      	str	r1, [sp, #52]	; 0x34
  40490c:	ae26      	add	r6, sp, #152	; 0x98
  40490e:	e52f      	b.n	404370 <_svfprintf_r+0x394>
  404910:	f1bb 0f00 	cmp.w	fp, #0
  404914:	f000 85dd 	beq.w	4054d2 <_svfprintf_r+0x14f6>
  404918:	2700      	movs	r7, #0
  40491a:	2400      	movs	r4, #0
  40491c:	2500      	movs	r5, #0
  40491e:	e482      	b.n	404226 <_svfprintf_r+0x24a>
  404920:	485a      	ldr	r0, [pc, #360]	; (404a8c <_svfprintf_r+0xab0>)
  404922:	9307      	str	r3, [sp, #28]
  404924:	9211      	str	r2, [sp, #68]	; 0x44
  404926:	ea54 0305 	orrs.w	r3, r4, r5
  40492a:	970e      	str	r7, [sp, #56]	; 0x38
  40492c:	f04f 0700 	mov.w	r7, #0
  404930:	f47f af0c 	bne.w	40474c <_svfprintf_r+0x770>
  404934:	2400      	movs	r4, #0
  404936:	2500      	movs	r5, #0
  404938:	e708      	b.n	40474c <_svfprintf_r+0x770>
  40493a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40493c:	e568      	b.n	404410 <_svfprintf_r+0x434>
  40493e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404940:	2b65      	cmp	r3, #101	; 0x65
  404942:	f340 80a9 	ble.w	404a98 <_svfprintf_r+0xabc>
  404946:	9814      	ldr	r0, [sp, #80]	; 0x50
  404948:	9915      	ldr	r1, [sp, #84]	; 0x54
  40494a:	2200      	movs	r2, #0
  40494c:	2300      	movs	r3, #0
  40494e:	f7ff f92d 	bl	403bac <__aeabi_dcmpeq>
  404952:	2800      	cmp	r0, #0
  404954:	f000 8135 	beq.w	404bc2 <_svfprintf_r+0xbe6>
  404958:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40495a:	4a4d      	ldr	r2, [pc, #308]	; (404a90 <_svfprintf_r+0xab4>)
  40495c:	f8c9 2000 	str.w	r2, [r9]
  404960:	3301      	adds	r3, #1
  404962:	3401      	adds	r4, #1
  404964:	2201      	movs	r2, #1
  404966:	2b07      	cmp	r3, #7
  404968:	9425      	str	r4, [sp, #148]	; 0x94
  40496a:	9324      	str	r3, [sp, #144]	; 0x90
  40496c:	f8c9 2004 	str.w	r2, [r9, #4]
  404970:	f300 83e6 	bgt.w	405140 <_svfprintf_r+0x1164>
  404974:	f109 0908 	add.w	r9, r9, #8
  404978:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40497a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40497c:	4293      	cmp	r3, r2
  40497e:	db03      	blt.n	404988 <_svfprintf_r+0x9ac>
  404980:	9b07      	ldr	r3, [sp, #28]
  404982:	07db      	lsls	r3, r3, #31
  404984:	f57f adba 	bpl.w	4044fc <_svfprintf_r+0x520>
  404988:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40498a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40498c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40498e:	f8c9 2000 	str.w	r2, [r9]
  404992:	3301      	adds	r3, #1
  404994:	440c      	add	r4, r1
  404996:	2b07      	cmp	r3, #7
  404998:	9425      	str	r4, [sp, #148]	; 0x94
  40499a:	f8c9 1004 	str.w	r1, [r9, #4]
  40499e:	9324      	str	r3, [sp, #144]	; 0x90
  4049a0:	f300 843f 	bgt.w	405222 <_svfprintf_r+0x1246>
  4049a4:	f109 0908 	add.w	r9, r9, #8
  4049a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4049aa:	1e5d      	subs	r5, r3, #1
  4049ac:	2d00      	cmp	r5, #0
  4049ae:	f77f ada5 	ble.w	4044fc <_svfprintf_r+0x520>
  4049b2:	4a38      	ldr	r2, [pc, #224]	; (404a94 <_svfprintf_r+0xab8>)
  4049b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4049b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4049b8:	2d10      	cmp	r5, #16
  4049ba:	f340 81e6 	ble.w	404d8a <_svfprintf_r+0xdae>
  4049be:	2610      	movs	r6, #16
  4049c0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4049c2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  4049c6:	e005      	b.n	4049d4 <_svfprintf_r+0x9f8>
  4049c8:	f109 0908 	add.w	r9, r9, #8
  4049cc:	3d10      	subs	r5, #16
  4049ce:	2d10      	cmp	r5, #16
  4049d0:	f340 81db 	ble.w	404d8a <_svfprintf_r+0xdae>
  4049d4:	3301      	adds	r3, #1
  4049d6:	3410      	adds	r4, #16
  4049d8:	2b07      	cmp	r3, #7
  4049da:	9425      	str	r4, [sp, #148]	; 0x94
  4049dc:	9324      	str	r3, [sp, #144]	; 0x90
  4049de:	f8c9 a000 	str.w	sl, [r9]
  4049e2:	f8c9 6004 	str.w	r6, [r9, #4]
  4049e6:	ddef      	ble.n	4049c8 <_svfprintf_r+0x9ec>
  4049e8:	aa23      	add	r2, sp, #140	; 0x8c
  4049ea:	4659      	mov	r1, fp
  4049ec:	4638      	mov	r0, r7
  4049ee:	f002 ffe7 	bl	4079c0 <__ssprint_r>
  4049f2:	2800      	cmp	r0, #0
  4049f4:	f47f abeb 	bne.w	4041ce <_svfprintf_r+0x1f2>
  4049f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4049fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4049fc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404a00:	e7e4      	b.n	4049cc <_svfprintf_r+0x9f0>
  404a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404a04:	9a08      	ldr	r2, [sp, #32]
  404a06:	1a9f      	subs	r7, r3, r2
  404a08:	2f00      	cmp	r7, #0
  404a0a:	f77f ad25 	ble.w	404458 <_svfprintf_r+0x47c>
  404a0e:	4a21      	ldr	r2, [pc, #132]	; (404a94 <_svfprintf_r+0xab8>)
  404a10:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a12:	920f      	str	r2, [sp, #60]	; 0x3c
  404a14:	2f10      	cmp	r7, #16
  404a16:	dd2b      	ble.n	404a70 <_svfprintf_r+0xa94>
  404a18:	464a      	mov	r2, r9
  404a1a:	4621      	mov	r1, r4
  404a1c:	46b9      	mov	r9, r7
  404a1e:	2510      	movs	r5, #16
  404a20:	4637      	mov	r7, r6
  404a22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  404a24:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404a26:	e006      	b.n	404a36 <_svfprintf_r+0xa5a>
  404a28:	f1a9 0910 	sub.w	r9, r9, #16
  404a2c:	f1b9 0f10 	cmp.w	r9, #16
  404a30:	f102 0208 	add.w	r2, r2, #8
  404a34:	dd18      	ble.n	404a68 <_svfprintf_r+0xa8c>
  404a36:	3301      	adds	r3, #1
  404a38:	3110      	adds	r1, #16
  404a3a:	2b07      	cmp	r3, #7
  404a3c:	9125      	str	r1, [sp, #148]	; 0x94
  404a3e:	9324      	str	r3, [sp, #144]	; 0x90
  404a40:	f8c2 a000 	str.w	sl, [r2]
  404a44:	6055      	str	r5, [r2, #4]
  404a46:	ddef      	ble.n	404a28 <_svfprintf_r+0xa4c>
  404a48:	aa23      	add	r2, sp, #140	; 0x8c
  404a4a:	4631      	mov	r1, r6
  404a4c:	4620      	mov	r0, r4
  404a4e:	f002 ffb7 	bl	4079c0 <__ssprint_r>
  404a52:	2800      	cmp	r0, #0
  404a54:	f47f abbb 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404a58:	f1a9 0910 	sub.w	r9, r9, #16
  404a5c:	f1b9 0f10 	cmp.w	r9, #16
  404a60:	9925      	ldr	r1, [sp, #148]	; 0x94
  404a62:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404a64:	aa30      	add	r2, sp, #192	; 0xc0
  404a66:	dce6      	bgt.n	404a36 <_svfprintf_r+0xa5a>
  404a68:	463e      	mov	r6, r7
  404a6a:	460c      	mov	r4, r1
  404a6c:	464f      	mov	r7, r9
  404a6e:	4691      	mov	r9, r2
  404a70:	3301      	adds	r3, #1
  404a72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404a74:	9324      	str	r3, [sp, #144]	; 0x90
  404a76:	443c      	add	r4, r7
  404a78:	2b07      	cmp	r3, #7
  404a7a:	9425      	str	r4, [sp, #148]	; 0x94
  404a7c:	e889 0084 	stmia.w	r9, {r2, r7}
  404a80:	f300 8245 	bgt.w	404f0e <_svfprintf_r+0xf32>
  404a84:	f109 0908 	add.w	r9, r9, #8
  404a88:	e4e6      	b.n	404458 <_svfprintf_r+0x47c>
  404a8a:	bf00      	nop
  404a8c:	00408248 	.word	0x00408248
  404a90:	00408264 	.word	0x00408264
  404a94:	00408214 	.word	0x00408214
  404a98:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404a9a:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404a9c:	2b01      	cmp	r3, #1
  404a9e:	f340 8208 	ble.w	404eb2 <_svfprintf_r+0xed6>
  404aa2:	3501      	adds	r5, #1
  404aa4:	3401      	adds	r4, #1
  404aa6:	2301      	movs	r3, #1
  404aa8:	2d07      	cmp	r5, #7
  404aaa:	9425      	str	r4, [sp, #148]	; 0x94
  404aac:	9524      	str	r5, [sp, #144]	; 0x90
  404aae:	f8c9 6000 	str.w	r6, [r9]
  404ab2:	f8c9 3004 	str.w	r3, [r9, #4]
  404ab6:	f300 820d 	bgt.w	404ed4 <_svfprintf_r+0xef8>
  404aba:	f109 0908 	add.w	r9, r9, #8
  404abe:	9a16      	ldr	r2, [sp, #88]	; 0x58
  404ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404ac2:	f8c9 3000 	str.w	r3, [r9]
  404ac6:	3501      	adds	r5, #1
  404ac8:	4414      	add	r4, r2
  404aca:	2d07      	cmp	r5, #7
  404acc:	9425      	str	r4, [sp, #148]	; 0x94
  404ace:	9524      	str	r5, [sp, #144]	; 0x90
  404ad0:	f8c9 2004 	str.w	r2, [r9, #4]
  404ad4:	f300 820e 	bgt.w	404ef4 <_svfprintf_r+0xf18>
  404ad8:	f109 0908 	add.w	r9, r9, #8
  404adc:	2300      	movs	r3, #0
  404ade:	9814      	ldr	r0, [sp, #80]	; 0x50
  404ae0:	9915      	ldr	r1, [sp, #84]	; 0x54
  404ae2:	2200      	movs	r2, #0
  404ae4:	f7ff f862 	bl	403bac <__aeabi_dcmpeq>
  404ae8:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404aea:	2800      	cmp	r0, #0
  404aec:	f040 80c3 	bne.w	404c76 <_svfprintf_r+0xc9a>
  404af0:	3b01      	subs	r3, #1
  404af2:	3501      	adds	r5, #1
  404af4:	3601      	adds	r6, #1
  404af6:	441c      	add	r4, r3
  404af8:	2d07      	cmp	r5, #7
  404afa:	9524      	str	r5, [sp, #144]	; 0x90
  404afc:	9425      	str	r4, [sp, #148]	; 0x94
  404afe:	f8c9 6000 	str.w	r6, [r9]
  404b02:	f8c9 3004 	str.w	r3, [r9, #4]
  404b06:	f300 80f5 	bgt.w	404cf4 <_svfprintf_r+0xd18>
  404b0a:	f109 0908 	add.w	r9, r9, #8
  404b0e:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404b10:	f8c9 2004 	str.w	r2, [r9, #4]
  404b14:	3501      	adds	r5, #1
  404b16:	4414      	add	r4, r2
  404b18:	ab1f      	add	r3, sp, #124	; 0x7c
  404b1a:	2d07      	cmp	r5, #7
  404b1c:	9425      	str	r4, [sp, #148]	; 0x94
  404b1e:	9524      	str	r5, [sp, #144]	; 0x90
  404b20:	f8c9 3000 	str.w	r3, [r9]
  404b24:	f77f ace8 	ble.w	4044f8 <_svfprintf_r+0x51c>
  404b28:	aa23      	add	r2, sp, #140	; 0x8c
  404b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b2c:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b2e:	f002 ff47 	bl	4079c0 <__ssprint_r>
  404b32:	2800      	cmp	r0, #0
  404b34:	f47f ab4b 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404b38:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b3a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b3e:	e4dd      	b.n	4044fc <_svfprintf_r+0x520>
  404b40:	aa23      	add	r2, sp, #140	; 0x8c
  404b42:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b44:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b46:	f002 ff3b 	bl	4079c0 <__ssprint_r>
  404b4a:	2800      	cmp	r0, #0
  404b4c:	f43f ad24 	beq.w	404598 <_svfprintf_r+0x5bc>
  404b50:	f7ff bb3d 	b.w	4041ce <_svfprintf_r+0x1f2>
  404b54:	aa23      	add	r2, sp, #140	; 0x8c
  404b56:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b58:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b5a:	f002 ff31 	bl	4079c0 <__ssprint_r>
  404b5e:	2800      	cmp	r0, #0
  404b60:	f47f ab35 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404b64:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b66:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b6a:	e4b4      	b.n	4044d6 <_svfprintf_r+0x4fa>
  404b6c:	aa23      	add	r2, sp, #140	; 0x8c
  404b6e:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b70:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b72:	f002 ff25 	bl	4079c0 <__ssprint_r>
  404b76:	2800      	cmp	r0, #0
  404b78:	f47f ab29 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404b7c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b7e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b82:	e455      	b.n	404430 <_svfprintf_r+0x454>
  404b84:	aa23      	add	r2, sp, #140	; 0x8c
  404b86:	9909      	ldr	r1, [sp, #36]	; 0x24
  404b88:	980a      	ldr	r0, [sp, #40]	; 0x28
  404b8a:	f002 ff19 	bl	4079c0 <__ssprint_r>
  404b8e:	2800      	cmp	r0, #0
  404b90:	f47f ab1d 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404b94:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404b96:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404b9a:	e459      	b.n	404450 <_svfprintf_r+0x474>
  404b9c:	f1bb 0f00 	cmp.w	fp, #0
  404ba0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404ba4:	f2c0 82d8 	blt.w	405158 <_svfprintf_r+0x117c>
  404ba8:	f022 0380 	bic.w	r3, r2, #128	; 0x80
  404bac:	9307      	str	r3, [sp, #28]
  404bae:	ea54 0305 	orrs.w	r3, r4, r5
  404bb2:	f47f adcb 	bne.w	40474c <_svfprintf_r+0x770>
  404bb6:	f1bb 0f00 	cmp.w	fp, #0
  404bba:	f43f ae8d 	beq.w	4048d8 <_svfprintf_r+0x8fc>
  404bbe:	2700      	movs	r7, #0
  404bc0:	e6b8      	b.n	404934 <_svfprintf_r+0x958>
  404bc2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  404bc4:	2d00      	cmp	r5, #0
  404bc6:	f340 82ca 	ble.w	40515e <_svfprintf_r+0x1182>
  404bca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404bcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404bce:	4293      	cmp	r3, r2
  404bd0:	bfa8      	it	ge
  404bd2:	4613      	movge	r3, r2
  404bd4:	2b00      	cmp	r3, #0
  404bd6:	461d      	mov	r5, r3
  404bd8:	dd0d      	ble.n	404bf6 <_svfprintf_r+0xc1a>
  404bda:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404bdc:	f8c9 6000 	str.w	r6, [r9]
  404be0:	3301      	adds	r3, #1
  404be2:	442c      	add	r4, r5
  404be4:	2b07      	cmp	r3, #7
  404be6:	9425      	str	r4, [sp, #148]	; 0x94
  404be8:	f8c9 5004 	str.w	r5, [r9, #4]
  404bec:	9324      	str	r3, [sp, #144]	; 0x90
  404bee:	f300 839c 	bgt.w	40532a <_svfprintf_r+0x134e>
  404bf2:	f109 0908 	add.w	r9, r9, #8
  404bf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404bf8:	2d00      	cmp	r5, #0
  404bfa:	bfa8      	it	ge
  404bfc:	1b5b      	subge	r3, r3, r5
  404bfe:	2b00      	cmp	r3, #0
  404c00:	461d      	mov	r5, r3
  404c02:	f340 80f6 	ble.w	404df2 <_svfprintf_r+0xe16>
  404c06:	4aba      	ldr	r2, [pc, #744]	; (404ef0 <_svfprintf_r+0xf14>)
  404c08:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c0a:	920f      	str	r2, [sp, #60]	; 0x3c
  404c0c:	2d10      	cmp	r5, #16
  404c0e:	f340 828a 	ble.w	405126 <_svfprintf_r+0x114a>
  404c12:	4622      	mov	r2, r4
  404c14:	2710      	movs	r7, #16
  404c16:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404c1a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  404c1c:	e005      	b.n	404c2a <_svfprintf_r+0xc4e>
  404c1e:	f109 0908 	add.w	r9, r9, #8
  404c22:	3d10      	subs	r5, #16
  404c24:	2d10      	cmp	r5, #16
  404c26:	f340 827d 	ble.w	405124 <_svfprintf_r+0x1148>
  404c2a:	3301      	adds	r3, #1
  404c2c:	3210      	adds	r2, #16
  404c2e:	2b07      	cmp	r3, #7
  404c30:	9225      	str	r2, [sp, #148]	; 0x94
  404c32:	9324      	str	r3, [sp, #144]	; 0x90
  404c34:	f8c9 a000 	str.w	sl, [r9]
  404c38:	f8c9 7004 	str.w	r7, [r9, #4]
  404c3c:	ddef      	ble.n	404c1e <_svfprintf_r+0xc42>
  404c3e:	aa23      	add	r2, sp, #140	; 0x8c
  404c40:	4621      	mov	r1, r4
  404c42:	4658      	mov	r0, fp
  404c44:	f002 febc 	bl	4079c0 <__ssprint_r>
  404c48:	2800      	cmp	r0, #0
  404c4a:	f47f aac0 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404c4e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404c50:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404c52:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404c56:	e7e4      	b.n	404c22 <_svfprintf_r+0xc46>
  404c58:	aa23      	add	r2, sp, #140	; 0x8c
  404c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
  404c5c:	980a      	ldr	r0, [sp, #40]	; 0x28
  404c5e:	f002 feaf 	bl	4079c0 <__ssprint_r>
  404c62:	2800      	cmp	r0, #0
  404c64:	f47f aab3 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404c68:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  404c6c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404c6e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404c72:	f7ff bbcd 	b.w	404410 <_svfprintf_r+0x434>
  404c76:	1e5e      	subs	r6, r3, #1
  404c78:	2e00      	cmp	r6, #0
  404c7a:	f77f af48 	ble.w	404b0e <_svfprintf_r+0xb32>
  404c7e:	4b9c      	ldr	r3, [pc, #624]	; (404ef0 <_svfprintf_r+0xf14>)
  404c80:	930f      	str	r3, [sp, #60]	; 0x3c
  404c82:	2e10      	cmp	r6, #16
  404c84:	dd2c      	ble.n	404ce0 <_svfprintf_r+0xd04>
  404c86:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  404c8a:	2710      	movs	r7, #16
  404c8c:	46b0      	mov	r8, r6
  404c8e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404c92:	9e09      	ldr	r6, [sp, #36]	; 0x24
  404c94:	e006      	b.n	404ca4 <_svfprintf_r+0xcc8>
  404c96:	f1a8 0810 	sub.w	r8, r8, #16
  404c9a:	f1b8 0f10 	cmp.w	r8, #16
  404c9e:	f109 0908 	add.w	r9, r9, #8
  404ca2:	dd1a      	ble.n	404cda <_svfprintf_r+0xcfe>
  404ca4:	3501      	adds	r5, #1
  404ca6:	3410      	adds	r4, #16
  404ca8:	2d07      	cmp	r5, #7
  404caa:	9425      	str	r4, [sp, #148]	; 0x94
  404cac:	9524      	str	r5, [sp, #144]	; 0x90
  404cae:	f8c9 a000 	str.w	sl, [r9]
  404cb2:	f8c9 7004 	str.w	r7, [r9, #4]
  404cb6:	ddee      	ble.n	404c96 <_svfprintf_r+0xcba>
  404cb8:	aa23      	add	r2, sp, #140	; 0x8c
  404cba:	4631      	mov	r1, r6
  404cbc:	4658      	mov	r0, fp
  404cbe:	f002 fe7f 	bl	4079c0 <__ssprint_r>
  404cc2:	2800      	cmp	r0, #0
  404cc4:	f47f aa83 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404cc8:	f1a8 0810 	sub.w	r8, r8, #16
  404ccc:	f1b8 0f10 	cmp.w	r8, #16
  404cd0:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404cd2:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404cd4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404cd8:	dce4      	bgt.n	404ca4 <_svfprintf_r+0xcc8>
  404cda:	4646      	mov	r6, r8
  404cdc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  404ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404ce2:	3501      	adds	r5, #1
  404ce4:	4434      	add	r4, r6
  404ce6:	2d07      	cmp	r5, #7
  404ce8:	9425      	str	r4, [sp, #148]	; 0x94
  404cea:	9524      	str	r5, [sp, #144]	; 0x90
  404cec:	e889 0048 	stmia.w	r9, {r3, r6}
  404cf0:	f77f af0b 	ble.w	404b0a <_svfprintf_r+0xb2e>
  404cf4:	aa23      	add	r2, sp, #140	; 0x8c
  404cf6:	9909      	ldr	r1, [sp, #36]	; 0x24
  404cf8:	980a      	ldr	r0, [sp, #40]	; 0x28
  404cfa:	f002 fe61 	bl	4079c0 <__ssprint_r>
  404cfe:	2800      	cmp	r0, #0
  404d00:	f47f aa65 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404d04:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404d06:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404d08:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404d0c:	e6ff      	b.n	404b0e <_svfprintf_r+0xb32>
  404d0e:	9907      	ldr	r1, [sp, #28]
  404d10:	f011 0210 	ands.w	r2, r1, #16
  404d14:	f000 8108 	beq.w	404f28 <_svfprintf_r+0xf4c>
  404d18:	980e      	ldr	r0, [sp, #56]	; 0x38
  404d1a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404d1e:	f1bb 0f00 	cmp.w	fp, #0
  404d22:	6804      	ldr	r4, [r0, #0]
  404d24:	f100 0704 	add.w	r7, r0, #4
  404d28:	f04f 0500 	mov.w	r5, #0
  404d2c:	db26      	blt.n	404d7c <_svfprintf_r+0xda0>
  404d2e:	460a      	mov	r2, r1
  404d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  404d34:	9207      	str	r2, [sp, #28]
  404d36:	ea54 0205 	orrs.w	r2, r4, r5
  404d3a:	970e      	str	r7, [sp, #56]	; 0x38
  404d3c:	461f      	mov	r7, r3
  404d3e:	f47f aaef 	bne.w	404320 <_svfprintf_r+0x344>
  404d42:	e4c8      	b.n	4046d6 <_svfprintf_r+0x6fa>
  404d44:	9b07      	ldr	r3, [sp, #28]
  404d46:	06d9      	lsls	r1, r3, #27
  404d48:	d42a      	bmi.n	404da0 <_svfprintf_r+0xdc4>
  404d4a:	9b07      	ldr	r3, [sp, #28]
  404d4c:	065a      	lsls	r2, r3, #25
  404d4e:	d527      	bpl.n	404da0 <_svfprintf_r+0xdc4>
  404d50:	990e      	ldr	r1, [sp, #56]	; 0x38
  404d52:	f9b1 4000 	ldrsh.w	r4, [r1]
  404d56:	3104      	adds	r1, #4
  404d58:	17e5      	asrs	r5, r4, #31
  404d5a:	4622      	mov	r2, r4
  404d5c:	462b      	mov	r3, r5
  404d5e:	910e      	str	r1, [sp, #56]	; 0x38
  404d60:	f7ff bacb 	b.w	4042fa <_svfprintf_r+0x31e>
  404d64:	990e      	ldr	r1, [sp, #56]	; 0x38
  404d66:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  404d6a:	f1bb 0f00 	cmp.w	fp, #0
  404d6e:	680c      	ldr	r4, [r1, #0]
  404d70:	f101 0704 	add.w	r7, r1, #4
  404d74:	f04f 0500 	mov.w	r5, #0
  404d78:	f280 8247 	bge.w	40520a <_svfprintf_r+0x122e>
  404d7c:	970e      	str	r7, [sp, #56]	; 0x38
  404d7e:	461f      	mov	r7, r3
  404d80:	ea54 0305 	orrs.w	r3, r4, r5
  404d84:	f47f aacc 	bne.w	404320 <_svfprintf_r+0x344>
  404d88:	e4aa      	b.n	4046e0 <_svfprintf_r+0x704>
  404d8a:	3301      	adds	r3, #1
  404d8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404d8e:	9324      	str	r3, [sp, #144]	; 0x90
  404d90:	442c      	add	r4, r5
  404d92:	2b07      	cmp	r3, #7
  404d94:	9425      	str	r4, [sp, #148]	; 0x94
  404d96:	e889 0024 	stmia.w	r9, {r2, r5}
  404d9a:	f77f abad 	ble.w	4044f8 <_svfprintf_r+0x51c>
  404d9e:	e6c3      	b.n	404b28 <_svfprintf_r+0xb4c>
  404da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404da2:	6814      	ldr	r4, [r2, #0]
  404da4:	4613      	mov	r3, r2
  404da6:	3304      	adds	r3, #4
  404da8:	17e5      	asrs	r5, r4, #31
  404daa:	4622      	mov	r2, r4
  404dac:	930e      	str	r3, [sp, #56]	; 0x38
  404dae:	2a00      	cmp	r2, #0
  404db0:	462b      	mov	r3, r5
  404db2:	f173 0300 	sbcs.w	r3, r3, #0
  404db6:	f6bf aaa5 	bge.w	404304 <_svfprintf_r+0x328>
  404dba:	4264      	negs	r4, r4
  404dbc:	f04f 072d 	mov.w	r7, #45	; 0x2d
  404dc0:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404dc4:	f1bb 0f00 	cmp.w	fp, #0
  404dc8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  404dcc:	f6ff aaa8 	blt.w	404320 <_svfprintf_r+0x344>
  404dd0:	9b07      	ldr	r3, [sp, #28]
  404dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404dd6:	9307      	str	r3, [sp, #28]
  404dd8:	f7ff baa2 	b.w	404320 <_svfprintf_r+0x344>
  404ddc:	aa23      	add	r2, sp, #140	; 0x8c
  404dde:	9909      	ldr	r1, [sp, #36]	; 0x24
  404de0:	980a      	ldr	r0, [sp, #40]	; 0x28
  404de2:	f002 fded 	bl	4079c0 <__ssprint_r>
  404de6:	2800      	cmp	r0, #0
  404de8:	f47f a9f1 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404dec:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404dee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404df2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  404df6:	4432      	add	r2, r6
  404df8:	4617      	mov	r7, r2
  404dfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404dfc:	4293      	cmp	r3, r2
  404dfe:	db47      	blt.n	404e90 <_svfprintf_r+0xeb4>
  404e00:	9a07      	ldr	r2, [sp, #28]
  404e02:	07d5      	lsls	r5, r2, #31
  404e04:	d444      	bmi.n	404e90 <_svfprintf_r+0xeb4>
  404e06:	9912      	ldr	r1, [sp, #72]	; 0x48
  404e08:	440e      	add	r6, r1
  404e0a:	1bf5      	subs	r5, r6, r7
  404e0c:	1acb      	subs	r3, r1, r3
  404e0e:	429d      	cmp	r5, r3
  404e10:	bfa8      	it	ge
  404e12:	461d      	movge	r5, r3
  404e14:	2d00      	cmp	r5, #0
  404e16:	462e      	mov	r6, r5
  404e18:	dd0d      	ble.n	404e36 <_svfprintf_r+0xe5a>
  404e1a:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404e1c:	f8c9 7000 	str.w	r7, [r9]
  404e20:	3201      	adds	r2, #1
  404e22:	442c      	add	r4, r5
  404e24:	2a07      	cmp	r2, #7
  404e26:	9425      	str	r4, [sp, #148]	; 0x94
  404e28:	f8c9 5004 	str.w	r5, [r9, #4]
  404e2c:	9224      	str	r2, [sp, #144]	; 0x90
  404e2e:	f300 830b 	bgt.w	405448 <_svfprintf_r+0x146c>
  404e32:	f109 0908 	add.w	r9, r9, #8
  404e36:	2e00      	cmp	r6, #0
  404e38:	bfac      	ite	ge
  404e3a:	1b9d      	subge	r5, r3, r6
  404e3c:	461d      	movlt	r5, r3
  404e3e:	2d00      	cmp	r5, #0
  404e40:	f77f ab5c 	ble.w	4044fc <_svfprintf_r+0x520>
  404e44:	4a2a      	ldr	r2, [pc, #168]	; (404ef0 <_svfprintf_r+0xf14>)
  404e46:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e48:	920f      	str	r2, [sp, #60]	; 0x3c
  404e4a:	2d10      	cmp	r5, #16
  404e4c:	dd9d      	ble.n	404d8a <_svfprintf_r+0xdae>
  404e4e:	2610      	movs	r6, #16
  404e50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  404e52:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
  404e56:	e004      	b.n	404e62 <_svfprintf_r+0xe86>
  404e58:	f109 0908 	add.w	r9, r9, #8
  404e5c:	3d10      	subs	r5, #16
  404e5e:	2d10      	cmp	r5, #16
  404e60:	dd93      	ble.n	404d8a <_svfprintf_r+0xdae>
  404e62:	3301      	adds	r3, #1
  404e64:	3410      	adds	r4, #16
  404e66:	2b07      	cmp	r3, #7
  404e68:	9425      	str	r4, [sp, #148]	; 0x94
  404e6a:	9324      	str	r3, [sp, #144]	; 0x90
  404e6c:	f8c9 a000 	str.w	sl, [r9]
  404e70:	f8c9 6004 	str.w	r6, [r9, #4]
  404e74:	ddf0      	ble.n	404e58 <_svfprintf_r+0xe7c>
  404e76:	aa23      	add	r2, sp, #140	; 0x8c
  404e78:	4659      	mov	r1, fp
  404e7a:	4638      	mov	r0, r7
  404e7c:	f002 fda0 	bl	4079c0 <__ssprint_r>
  404e80:	2800      	cmp	r0, #0
  404e82:	f47f a9a4 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404e86:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404e88:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404e8a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404e8e:	e7e5      	b.n	404e5c <_svfprintf_r+0xe80>
  404e90:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404e92:	9816      	ldr	r0, [sp, #88]	; 0x58
  404e94:	9917      	ldr	r1, [sp, #92]	; 0x5c
  404e96:	f8c9 1000 	str.w	r1, [r9]
  404e9a:	3201      	adds	r2, #1
  404e9c:	4404      	add	r4, r0
  404e9e:	2a07      	cmp	r2, #7
  404ea0:	9425      	str	r4, [sp, #148]	; 0x94
  404ea2:	f8c9 0004 	str.w	r0, [r9, #4]
  404ea6:	9224      	str	r2, [sp, #144]	; 0x90
  404ea8:	f300 82a9 	bgt.w	4053fe <_svfprintf_r+0x1422>
  404eac:	f109 0908 	add.w	r9, r9, #8
  404eb0:	e7a9      	b.n	404e06 <_svfprintf_r+0xe2a>
  404eb2:	9b07      	ldr	r3, [sp, #28]
  404eb4:	07d8      	lsls	r0, r3, #31
  404eb6:	f53f adf4 	bmi.w	404aa2 <_svfprintf_r+0xac6>
  404eba:	3501      	adds	r5, #1
  404ebc:	3401      	adds	r4, #1
  404ebe:	2301      	movs	r3, #1
  404ec0:	2d07      	cmp	r5, #7
  404ec2:	9425      	str	r4, [sp, #148]	; 0x94
  404ec4:	9524      	str	r5, [sp, #144]	; 0x90
  404ec6:	f8c9 6000 	str.w	r6, [r9]
  404eca:	f8c9 3004 	str.w	r3, [r9, #4]
  404ece:	f77f ae1c 	ble.w	404b0a <_svfprintf_r+0xb2e>
  404ed2:	e70f      	b.n	404cf4 <_svfprintf_r+0xd18>
  404ed4:	aa23      	add	r2, sp, #140	; 0x8c
  404ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ed8:	980a      	ldr	r0, [sp, #40]	; 0x28
  404eda:	f002 fd71 	bl	4079c0 <__ssprint_r>
  404ede:	2800      	cmp	r0, #0
  404ee0:	f47f a975 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404ee4:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404ee6:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404ee8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404eec:	e5e7      	b.n	404abe <_svfprintf_r+0xae2>
  404eee:	bf00      	nop
  404ef0:	00408214 	.word	0x00408214
  404ef4:	aa23      	add	r2, sp, #140	; 0x8c
  404ef6:	9909      	ldr	r1, [sp, #36]	; 0x24
  404ef8:	980a      	ldr	r0, [sp, #40]	; 0x28
  404efa:	f002 fd61 	bl	4079c0 <__ssprint_r>
  404efe:	2800      	cmp	r0, #0
  404f00:	f47f a965 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404f04:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f06:	9d24      	ldr	r5, [sp, #144]	; 0x90
  404f08:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f0c:	e5e6      	b.n	404adc <_svfprintf_r+0xb00>
  404f0e:	aa23      	add	r2, sp, #140	; 0x8c
  404f10:	9909      	ldr	r1, [sp, #36]	; 0x24
  404f12:	980a      	ldr	r0, [sp, #40]	; 0x28
  404f14:	f002 fd54 	bl	4079c0 <__ssprint_r>
  404f18:	2800      	cmp	r0, #0
  404f1a:	f47f a958 	bne.w	4041ce <_svfprintf_r+0x1f2>
  404f1e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  404f20:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  404f24:	f7ff ba98 	b.w	404458 <_svfprintf_r+0x47c>
  404f28:	9907      	ldr	r1, [sp, #28]
  404f2a:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  404f2e:	f43f af19 	beq.w	404d64 <_svfprintf_r+0xd88>
  404f32:	980e      	ldr	r0, [sp, #56]	; 0x38
  404f34:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  404f38:	f1bb 0f00 	cmp.w	fp, #0
  404f3c:	8804      	ldrh	r4, [r0, #0]
  404f3e:	f100 0704 	add.w	r7, r0, #4
  404f42:	f04f 0500 	mov.w	r5, #0
  404f46:	f2c0 81b9 	blt.w	4052bc <_svfprintf_r+0x12e0>
  404f4a:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  404f4e:	9307      	str	r3, [sp, #28]
  404f50:	ea54 0305 	orrs.w	r3, r4, r5
  404f54:	970e      	str	r7, [sp, #56]	; 0x38
  404f56:	4617      	mov	r7, r2
  404f58:	f47f a9e2 	bne.w	404320 <_svfprintf_r+0x344>
  404f5c:	f7ff bbbb 	b.w	4046d6 <_svfprintf_r+0x6fa>
  404f60:	9c14      	ldr	r4, [sp, #80]	; 0x50
  404f62:	4622      	mov	r2, r4
  404f64:	4620      	mov	r0, r4
  404f66:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404f68:	4623      	mov	r3, r4
  404f6a:	4621      	mov	r1, r4
  404f6c:	f7fe fe50 	bl	403c10 <__aeabi_dcmpun>
  404f70:	2800      	cmp	r0, #0
  404f72:	f040 8317 	bne.w	4055a4 <_svfprintf_r+0x15c8>
  404f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f78:	f1bb 3fff 	cmp.w	fp, #4294967295
  404f7c:	f023 0320 	bic.w	r3, r3, #32
  404f80:	930d      	str	r3, [sp, #52]	; 0x34
  404f82:	f000 8270 	beq.w	405466 <_svfprintf_r+0x148a>
  404f86:	2b47      	cmp	r3, #71	; 0x47
  404f88:	f000 8192 	beq.w	4052b0 <_svfprintf_r+0x12d4>
  404f8c:	9b07      	ldr	r3, [sp, #28]
  404f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  404f92:	9310      	str	r3, [sp, #64]	; 0x40
  404f94:	9b15      	ldr	r3, [sp, #84]	; 0x54
  404f96:	1e1f      	subs	r7, r3, #0
  404f98:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404f9a:	9308      	str	r3, [sp, #32]
  404f9c:	bfbb      	ittet	lt
  404f9e:	463b      	movlt	r3, r7
  404fa0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  404fa4:	2300      	movge	r3, #0
  404fa6:	232d      	movlt	r3, #45	; 0x2d
  404fa8:	930f      	str	r3, [sp, #60]	; 0x3c
  404faa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404fac:	2b66      	cmp	r3, #102	; 0x66
  404fae:	f000 825d 	beq.w	40546c <_svfprintf_r+0x1490>
  404fb2:	2b46      	cmp	r3, #70	; 0x46
  404fb4:	f000 8151 	beq.w	40525a <_svfprintf_r+0x127e>
  404fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404fba:	9a08      	ldr	r2, [sp, #32]
  404fbc:	2b45      	cmp	r3, #69	; 0x45
  404fbe:	a821      	add	r0, sp, #132	; 0x84
  404fc0:	a91e      	add	r1, sp, #120	; 0x78
  404fc2:	bf0c      	ite	eq
  404fc4:	f10b 0501 	addeq.w	r5, fp, #1
  404fc8:	465d      	movne	r5, fp
  404fca:	9004      	str	r0, [sp, #16]
  404fcc:	9103      	str	r1, [sp, #12]
  404fce:	a81d      	add	r0, sp, #116	; 0x74
  404fd0:	2102      	movs	r1, #2
  404fd2:	463b      	mov	r3, r7
  404fd4:	9002      	str	r0, [sp, #8]
  404fd6:	9501      	str	r5, [sp, #4]
  404fd8:	9100      	str	r1, [sp, #0]
  404fda:	980a      	ldr	r0, [sp, #40]	; 0x28
  404fdc:	f000 fbf0 	bl	4057c0 <_dtoa_r>
  404fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404fe2:	2b67      	cmp	r3, #103	; 0x67
  404fe4:	4606      	mov	r6, r0
  404fe6:	f040 8290 	bne.w	40550a <_svfprintf_r+0x152e>
  404fea:	9b07      	ldr	r3, [sp, #28]
  404fec:	07da      	lsls	r2, r3, #31
  404fee:	f140 82af 	bpl.w	405550 <_svfprintf_r+0x1574>
  404ff2:	1974      	adds	r4, r6, r5
  404ff4:	9808      	ldr	r0, [sp, #32]
  404ff6:	4639      	mov	r1, r7
  404ff8:	2200      	movs	r2, #0
  404ffa:	2300      	movs	r3, #0
  404ffc:	f7fe fdd6 	bl	403bac <__aeabi_dcmpeq>
  405000:	2800      	cmp	r0, #0
  405002:	f040 8190 	bne.w	405326 <_svfprintf_r+0x134a>
  405006:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405008:	429c      	cmp	r4, r3
  40500a:	d906      	bls.n	40501a <_svfprintf_r+0x103e>
  40500c:	2130      	movs	r1, #48	; 0x30
  40500e:	1c5a      	adds	r2, r3, #1
  405010:	9221      	str	r2, [sp, #132]	; 0x84
  405012:	7019      	strb	r1, [r3, #0]
  405014:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405016:	429c      	cmp	r4, r3
  405018:	d8f9      	bhi.n	40500e <_svfprintf_r+0x1032>
  40501a:	1b9b      	subs	r3, r3, r6
  40501c:	9312      	str	r3, [sp, #72]	; 0x48
  40501e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405020:	2b47      	cmp	r3, #71	; 0x47
  405022:	f000 8179 	beq.w	405318 <_svfprintf_r+0x133c>
  405026:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405028:	2b65      	cmp	r3, #101	; 0x65
  40502a:	f340 827d 	ble.w	405528 <_svfprintf_r+0x154c>
  40502e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405030:	2b66      	cmp	r3, #102	; 0x66
  405032:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405034:	9313      	str	r3, [sp, #76]	; 0x4c
  405036:	f000 825b 	beq.w	4054f0 <_svfprintf_r+0x1514>
  40503a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40503c:	9912      	ldr	r1, [sp, #72]	; 0x48
  40503e:	428a      	cmp	r2, r1
  405040:	f2c0 8230 	blt.w	4054a4 <_svfprintf_r+0x14c8>
  405044:	9b07      	ldr	r3, [sp, #28]
  405046:	07d9      	lsls	r1, r3, #31
  405048:	f100 8284 	bmi.w	405554 <_svfprintf_r+0x1578>
  40504c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405050:	920d      	str	r2, [sp, #52]	; 0x34
  405052:	2267      	movs	r2, #103	; 0x67
  405054:	9211      	str	r2, [sp, #68]	; 0x44
  405056:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405058:	2a00      	cmp	r2, #0
  40505a:	f040 8153 	bne.w	405304 <_svfprintf_r+0x1328>
  40505e:	9308      	str	r3, [sp, #32]
  405060:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405062:	9307      	str	r3, [sp, #28]
  405064:	4693      	mov	fp, r2
  405066:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  40506a:	f7ff b97d 	b.w	404368 <_svfprintf_r+0x38c>
  40506e:	9907      	ldr	r1, [sp, #28]
  405070:	f011 0340 	ands.w	r3, r1, #64	; 0x40
  405074:	d015      	beq.n	4050a2 <_svfprintf_r+0x10c6>
  405076:	980e      	ldr	r0, [sp, #56]	; 0x38
  405078:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
  40507c:	f1bb 0f00 	cmp.w	fp, #0
  405080:	8804      	ldrh	r4, [r0, #0]
  405082:	f100 0704 	add.w	r7, r0, #4
  405086:	f04f 0500 	mov.w	r5, #0
  40508a:	db16      	blt.n	4050ba <_svfprintf_r+0x10de>
  40508c:	f021 0380 	bic.w	r3, r1, #128	; 0x80
  405090:	9307      	str	r3, [sp, #28]
  405092:	ea54 0305 	orrs.w	r3, r4, r5
  405096:	970e      	str	r7, [sp, #56]	; 0x38
  405098:	f43f ac3a 	beq.w	404910 <_svfprintf_r+0x934>
  40509c:	4617      	mov	r7, r2
  40509e:	f7ff b8c2 	b.w	404226 <_svfprintf_r+0x24a>
  4050a2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4050a4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
  4050a8:	f1bb 0f00 	cmp.w	fp, #0
  4050ac:	680c      	ldr	r4, [r1, #0]
  4050ae:	f101 0704 	add.w	r7, r1, #4
  4050b2:	f04f 0500 	mov.w	r5, #0
  4050b6:	f280 80a5 	bge.w	405204 <_svfprintf_r+0x1228>
  4050ba:	970e      	str	r7, [sp, #56]	; 0x38
  4050bc:	2700      	movs	r7, #0
  4050be:	f7ff b8b2 	b.w	404226 <_svfprintf_r+0x24a>
  4050c2:	9b07      	ldr	r3, [sp, #28]
  4050c4:	06df      	lsls	r7, r3, #27
  4050c6:	d40b      	bmi.n	4050e0 <_svfprintf_r+0x1104>
  4050c8:	9b07      	ldr	r3, [sp, #28]
  4050ca:	065e      	lsls	r6, r3, #25
  4050cc:	d508      	bpl.n	4050e0 <_svfprintf_r+0x1104>
  4050ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4050d0:	6813      	ldr	r3, [r2, #0]
  4050d2:	3204      	adds	r2, #4
  4050d4:	920e      	str	r2, [sp, #56]	; 0x38
  4050d6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
  4050da:	801a      	strh	r2, [r3, #0]
  4050dc:	f7fe bfa4 	b.w	404028 <_svfprintf_r+0x4c>
  4050e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4050e2:	6813      	ldr	r3, [r2, #0]
  4050e4:	3204      	adds	r2, #4
  4050e6:	920e      	str	r2, [sp, #56]	; 0x38
  4050e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4050ea:	601a      	str	r2, [r3, #0]
  4050ec:	f7fe bf9c 	b.w	404028 <_svfprintf_r+0x4c>
  4050f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4050f2:	9b07      	ldr	r3, [sp, #28]
  4050f4:	f013 0f40 	tst.w	r3, #64	; 0x40
  4050f8:	4613      	mov	r3, r2
  4050fa:	f103 0304 	add.w	r3, r3, #4
  4050fe:	bf0c      	ite	eq
  405100:	6814      	ldreq	r4, [r2, #0]
  405102:	8814      	ldrhne	r4, [r2, #0]
  405104:	930e      	str	r3, [sp, #56]	; 0x38
  405106:	2500      	movs	r5, #0
  405108:	f7ff bb02 	b.w	404710 <_svfprintf_r+0x734>
  40510c:	2700      	movs	r7, #0
  40510e:	45bb      	cmp	fp, r7
  405110:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405114:	f6ff ac0e 	blt.w	404934 <_svfprintf_r+0x958>
  405118:	9b07      	ldr	r3, [sp, #28]
  40511a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40511e:	9307      	str	r3, [sp, #28]
  405120:	f7ff bbd6 	b.w	4048d0 <_svfprintf_r+0x8f4>
  405124:	4614      	mov	r4, r2
  405126:	3301      	adds	r3, #1
  405128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40512a:	9324      	str	r3, [sp, #144]	; 0x90
  40512c:	442c      	add	r4, r5
  40512e:	2b07      	cmp	r3, #7
  405130:	9425      	str	r4, [sp, #148]	; 0x94
  405132:	e889 0024 	stmia.w	r9, {r2, r5}
  405136:	f73f ae51 	bgt.w	404ddc <_svfprintf_r+0xe00>
  40513a:	f109 0908 	add.w	r9, r9, #8
  40513e:	e658      	b.n	404df2 <_svfprintf_r+0xe16>
  405140:	aa23      	add	r2, sp, #140	; 0x8c
  405142:	9909      	ldr	r1, [sp, #36]	; 0x24
  405144:	980a      	ldr	r0, [sp, #40]	; 0x28
  405146:	f002 fc3b 	bl	4079c0 <__ssprint_r>
  40514a:	2800      	cmp	r0, #0
  40514c:	f47f a83f 	bne.w	4041ce <_svfprintf_r+0x1f2>
  405150:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405152:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405156:	e40f      	b.n	404978 <_svfprintf_r+0x99c>
  405158:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  40515a:	f7ff bbe4 	b.w	404926 <_svfprintf_r+0x94a>
  40515e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405160:	4ab5      	ldr	r2, [pc, #724]	; (405438 <_svfprintf_r+0x145c>)
  405162:	f8c9 2000 	str.w	r2, [r9]
  405166:	3301      	adds	r3, #1
  405168:	3401      	adds	r4, #1
  40516a:	2201      	movs	r2, #1
  40516c:	2b07      	cmp	r3, #7
  40516e:	9425      	str	r4, [sp, #148]	; 0x94
  405170:	9324      	str	r3, [sp, #144]	; 0x90
  405172:	f8c9 2004 	str.w	r2, [r9, #4]
  405176:	f300 808e 	bgt.w	405296 <_svfprintf_r+0x12ba>
  40517a:	f109 0908 	add.w	r9, r9, #8
  40517e:	b92d      	cbnz	r5, 40518c <_svfprintf_r+0x11b0>
  405180:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405182:	b91b      	cbnz	r3, 40518c <_svfprintf_r+0x11b0>
  405184:	9b07      	ldr	r3, [sp, #28]
  405186:	07df      	lsls	r7, r3, #31
  405188:	f57f a9b8 	bpl.w	4044fc <_svfprintf_r+0x520>
  40518c:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40518e:	9916      	ldr	r1, [sp, #88]	; 0x58
  405190:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  405192:	f8c9 2000 	str.w	r2, [r9]
  405196:	3301      	adds	r3, #1
  405198:	440c      	add	r4, r1
  40519a:	2b07      	cmp	r3, #7
  40519c:	9425      	str	r4, [sp, #148]	; 0x94
  40519e:	f8c9 1004 	str.w	r1, [r9, #4]
  4051a2:	9324      	str	r3, [sp, #144]	; 0x90
  4051a4:	f300 81c2 	bgt.w	40552c <_svfprintf_r+0x1550>
  4051a8:	f109 0908 	add.w	r9, r9, #8
  4051ac:	426d      	negs	r5, r5
  4051ae:	2d00      	cmp	r5, #0
  4051b0:	f340 809b 	ble.w	4052ea <_svfprintf_r+0x130e>
  4051b4:	4aa1      	ldr	r2, [pc, #644]	; (40543c <_svfprintf_r+0x1460>)
  4051b6:	920f      	str	r2, [sp, #60]	; 0x3c
  4051b8:	2d10      	cmp	r5, #16
  4051ba:	f340 80c3 	ble.w	405344 <_svfprintf_r+0x1368>
  4051be:	4622      	mov	r2, r4
  4051c0:	2710      	movs	r7, #16
  4051c2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4051c6:	9c09      	ldr	r4, [sp, #36]	; 0x24
  4051c8:	e005      	b.n	4051d6 <_svfprintf_r+0x11fa>
  4051ca:	f109 0908 	add.w	r9, r9, #8
  4051ce:	3d10      	subs	r5, #16
  4051d0:	2d10      	cmp	r5, #16
  4051d2:	f340 80b6 	ble.w	405342 <_svfprintf_r+0x1366>
  4051d6:	3301      	adds	r3, #1
  4051d8:	3210      	adds	r2, #16
  4051da:	2b07      	cmp	r3, #7
  4051dc:	9225      	str	r2, [sp, #148]	; 0x94
  4051de:	9324      	str	r3, [sp, #144]	; 0x90
  4051e0:	f8c9 a000 	str.w	sl, [r9]
  4051e4:	f8c9 7004 	str.w	r7, [r9, #4]
  4051e8:	ddef      	ble.n	4051ca <_svfprintf_r+0x11ee>
  4051ea:	aa23      	add	r2, sp, #140	; 0x8c
  4051ec:	4621      	mov	r1, r4
  4051ee:	4658      	mov	r0, fp
  4051f0:	f002 fbe6 	bl	4079c0 <__ssprint_r>
  4051f4:	2800      	cmp	r0, #0
  4051f6:	f47e afea 	bne.w	4041ce <_svfprintf_r+0x1f2>
  4051fa:	9a25      	ldr	r2, [sp, #148]	; 0x94
  4051fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4051fe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405202:	e7e4      	b.n	4051ce <_svfprintf_r+0x11f2>
  405204:	9a07      	ldr	r2, [sp, #28]
  405206:	f7ff ba38 	b.w	40467a <_svfprintf_r+0x69e>
  40520a:	9a07      	ldr	r2, [sp, #28]
  40520c:	e590      	b.n	404d30 <_svfprintf_r+0xd54>
  40520e:	9b07      	ldr	r3, [sp, #28]
  405210:	f043 0320 	orr.w	r3, r3, #32
  405214:	9307      	str	r3, [sp, #28]
  405216:	f108 0801 	add.w	r8, r8, #1
  40521a:	f898 3000 	ldrb.w	r3, [r8]
  40521e:	f7fe bf36 	b.w	40408e <_svfprintf_r+0xb2>
  405222:	aa23      	add	r2, sp, #140	; 0x8c
  405224:	9909      	ldr	r1, [sp, #36]	; 0x24
  405226:	980a      	ldr	r0, [sp, #40]	; 0x28
  405228:	f002 fbca 	bl	4079c0 <__ssprint_r>
  40522c:	2800      	cmp	r0, #0
  40522e:	f47e afce 	bne.w	4041ce <_svfprintf_r+0x1f2>
  405232:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405234:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405238:	f7ff bbb6 	b.w	4049a8 <_svfprintf_r+0x9cc>
  40523c:	2140      	movs	r1, #64	; 0x40
  40523e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405240:	f001 fb38 	bl	4068b4 <_malloc_r>
  405244:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405246:	6010      	str	r0, [r2, #0]
  405248:	6110      	str	r0, [r2, #16]
  40524a:	2800      	cmp	r0, #0
  40524c:	f000 81e5 	beq.w	40561a <_svfprintf_r+0x163e>
  405250:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405252:	2340      	movs	r3, #64	; 0x40
  405254:	6153      	str	r3, [r2, #20]
  405256:	f7fe bed8 	b.w	40400a <_svfprintf_r+0x2e>
  40525a:	a821      	add	r0, sp, #132	; 0x84
  40525c:	a91e      	add	r1, sp, #120	; 0x78
  40525e:	9004      	str	r0, [sp, #16]
  405260:	9103      	str	r1, [sp, #12]
  405262:	a81d      	add	r0, sp, #116	; 0x74
  405264:	2103      	movs	r1, #3
  405266:	9002      	str	r0, [sp, #8]
  405268:	9a08      	ldr	r2, [sp, #32]
  40526a:	f8cd b004 	str.w	fp, [sp, #4]
  40526e:	463b      	mov	r3, r7
  405270:	9100      	str	r1, [sp, #0]
  405272:	980a      	ldr	r0, [sp, #40]	; 0x28
  405274:	f000 faa4 	bl	4057c0 <_dtoa_r>
  405278:	465d      	mov	r5, fp
  40527a:	4606      	mov	r6, r0
  40527c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40527e:	2b46      	cmp	r3, #70	; 0x46
  405280:	eb06 0405 	add.w	r4, r6, r5
  405284:	f47f aeb6 	bne.w	404ff4 <_svfprintf_r+0x1018>
  405288:	7833      	ldrb	r3, [r6, #0]
  40528a:	2b30      	cmp	r3, #48	; 0x30
  40528c:	f000 817c 	beq.w	405588 <_svfprintf_r+0x15ac>
  405290:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  405292:	442c      	add	r4, r5
  405294:	e6ae      	b.n	404ff4 <_svfprintf_r+0x1018>
  405296:	aa23      	add	r2, sp, #140	; 0x8c
  405298:	9909      	ldr	r1, [sp, #36]	; 0x24
  40529a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40529c:	f002 fb90 	bl	4079c0 <__ssprint_r>
  4052a0:	2800      	cmp	r0, #0
  4052a2:	f47e af94 	bne.w	4041ce <_svfprintf_r+0x1f2>
  4052a6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  4052a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4052aa:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4052ae:	e766      	b.n	40517e <_svfprintf_r+0x11a2>
  4052b0:	f1bb 0f00 	cmp.w	fp, #0
  4052b4:	bf08      	it	eq
  4052b6:	f04f 0b01 	moveq.w	fp, #1
  4052ba:	e667      	b.n	404f8c <_svfprintf_r+0xfb0>
  4052bc:	970e      	str	r7, [sp, #56]	; 0x38
  4052be:	4617      	mov	r7, r2
  4052c0:	e55e      	b.n	404d80 <_svfprintf_r+0xda4>
  4052c2:	4630      	mov	r0, r6
  4052c4:	f7fe fe1c 	bl	403f00 <strlen>
  4052c8:	46a3      	mov	fp, r4
  4052ca:	4603      	mov	r3, r0
  4052cc:	900d      	str	r0, [sp, #52]	; 0x34
  4052ce:	f7ff baf4 	b.w	4048ba <_svfprintf_r+0x8de>
  4052d2:	aa23      	add	r2, sp, #140	; 0x8c
  4052d4:	9909      	ldr	r1, [sp, #36]	; 0x24
  4052d6:	980a      	ldr	r0, [sp, #40]	; 0x28
  4052d8:	f002 fb72 	bl	4079c0 <__ssprint_r>
  4052dc:	2800      	cmp	r0, #0
  4052de:	f47e af76 	bne.w	4041ce <_svfprintf_r+0x1f2>
  4052e2:	9c25      	ldr	r4, [sp, #148]	; 0x94
  4052e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4052e6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  4052ea:	9912      	ldr	r1, [sp, #72]	; 0x48
  4052ec:	f8c9 6000 	str.w	r6, [r9]
  4052f0:	3301      	adds	r3, #1
  4052f2:	440c      	add	r4, r1
  4052f4:	2b07      	cmp	r3, #7
  4052f6:	9425      	str	r4, [sp, #148]	; 0x94
  4052f8:	9324      	str	r3, [sp, #144]	; 0x90
  4052fa:	f8c9 1004 	str.w	r1, [r9, #4]
  4052fe:	f77f a8fb 	ble.w	4044f8 <_svfprintf_r+0x51c>
  405302:	e411      	b.n	404b28 <_svfprintf_r+0xb4c>
  405304:	272d      	movs	r7, #45	; 0x2d
  405306:	9308      	str	r3, [sp, #32]
  405308:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40530a:	9307      	str	r3, [sp, #28]
  40530c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  405310:	f04f 0b00 	mov.w	fp, #0
  405314:	f7ff b829 	b.w	40436a <_svfprintf_r+0x38e>
  405318:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40531a:	1cdd      	adds	r5, r3, #3
  40531c:	db1e      	blt.n	40535c <_svfprintf_r+0x1380>
  40531e:	459b      	cmp	fp, r3
  405320:	db1c      	blt.n	40535c <_svfprintf_r+0x1380>
  405322:	9313      	str	r3, [sp, #76]	; 0x4c
  405324:	e689      	b.n	40503a <_svfprintf_r+0x105e>
  405326:	4623      	mov	r3, r4
  405328:	e677      	b.n	40501a <_svfprintf_r+0x103e>
  40532a:	aa23      	add	r2, sp, #140	; 0x8c
  40532c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40532e:	980a      	ldr	r0, [sp, #40]	; 0x28
  405330:	f002 fb46 	bl	4079c0 <__ssprint_r>
  405334:	2800      	cmp	r0, #0
  405336:	f47e af4a 	bne.w	4041ce <_svfprintf_r+0x1f2>
  40533a:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40533c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405340:	e459      	b.n	404bf6 <_svfprintf_r+0xc1a>
  405342:	4614      	mov	r4, r2
  405344:	3301      	adds	r3, #1
  405346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405348:	9324      	str	r3, [sp, #144]	; 0x90
  40534a:	442c      	add	r4, r5
  40534c:	2b07      	cmp	r3, #7
  40534e:	9425      	str	r4, [sp, #148]	; 0x94
  405350:	e889 0024 	stmia.w	r9, {r2, r5}
  405354:	dcbd      	bgt.n	4052d2 <_svfprintf_r+0x12f6>
  405356:	f109 0908 	add.w	r9, r9, #8
  40535a:	e7c6      	b.n	4052ea <_svfprintf_r+0x130e>
  40535c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40535e:	3a02      	subs	r2, #2
  405360:	9211      	str	r2, [sp, #68]	; 0x44
  405362:	3b01      	subs	r3, #1
  405364:	2b00      	cmp	r3, #0
  405366:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  40536a:	931d      	str	r3, [sp, #116]	; 0x74
  40536c:	bfb8      	it	lt
  40536e:	425b      	neglt	r3, r3
  405370:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
  405374:	bfb4      	ite	lt
  405376:	222d      	movlt	r2, #45	; 0x2d
  405378:	222b      	movge	r2, #43	; 0x2b
  40537a:	2b09      	cmp	r3, #9
  40537c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
  405380:	f340 80f1 	ble.w	405566 <_svfprintf_r+0x158a>
  405384:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
  405388:	4604      	mov	r4, r0
  40538a:	4a2d      	ldr	r2, [pc, #180]	; (405440 <_svfprintf_r+0x1464>)
  40538c:	fb82 2103 	smull	r2, r1, r2, r3
  405390:	17da      	asrs	r2, r3, #31
  405392:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  405396:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  40539a:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  40539e:	f103 0130 	add.w	r1, r3, #48	; 0x30
  4053a2:	2a09      	cmp	r2, #9
  4053a4:	4613      	mov	r3, r2
  4053a6:	f804 1d01 	strb.w	r1, [r4, #-1]!
  4053aa:	dcee      	bgt.n	40538a <_svfprintf_r+0x13ae>
  4053ac:	4621      	mov	r1, r4
  4053ae:	3330      	adds	r3, #48	; 0x30
  4053b0:	b2da      	uxtb	r2, r3
  4053b2:	f801 2d01 	strb.w	r2, [r1, #-1]!
  4053b6:	4288      	cmp	r0, r1
  4053b8:	f240 813a 	bls.w	405630 <_svfprintf_r+0x1654>
  4053bc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
  4053c0:	4623      	mov	r3, r4
  4053c2:	e001      	b.n	4053c8 <_svfprintf_r+0x13ec>
  4053c4:	f813 2b01 	ldrb.w	r2, [r3], #1
  4053c8:	f801 2b01 	strb.w	r2, [r1], #1
  4053cc:	4298      	cmp	r0, r3
  4053ce:	d1f9      	bne.n	4053c4 <_svfprintf_r+0x13e8>
  4053d0:	1c43      	adds	r3, r0, #1
  4053d2:	1b1b      	subs	r3, r3, r4
  4053d4:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
  4053d8:	4413      	add	r3, r2
  4053da:	aa1f      	add	r2, sp, #124	; 0x7c
  4053dc:	1a9b      	subs	r3, r3, r2
  4053de:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4053e0:	9319      	str	r3, [sp, #100]	; 0x64
  4053e2:	2a01      	cmp	r2, #1
  4053e4:	4413      	add	r3, r2
  4053e6:	930d      	str	r3, [sp, #52]	; 0x34
  4053e8:	f340 80ea 	ble.w	4055c0 <_svfprintf_r+0x15e4>
  4053ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4053ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4053f0:	4413      	add	r3, r2
  4053f2:	2200      	movs	r2, #0
  4053f4:	930d      	str	r3, [sp, #52]	; 0x34
  4053f6:	9213      	str	r2, [sp, #76]	; 0x4c
  4053f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4053fc:	e62b      	b.n	405056 <_svfprintf_r+0x107a>
  4053fe:	aa23      	add	r2, sp, #140	; 0x8c
  405400:	9909      	ldr	r1, [sp, #36]	; 0x24
  405402:	980a      	ldr	r0, [sp, #40]	; 0x28
  405404:	f002 fadc 	bl	4079c0 <__ssprint_r>
  405408:	2800      	cmp	r0, #0
  40540a:	f47e aee0 	bne.w	4041ce <_svfprintf_r+0x1f2>
  40540e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  405410:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405412:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405416:	e4f6      	b.n	404e06 <_svfprintf_r+0xe2a>
  405418:	2d06      	cmp	r5, #6
  40541a:	462b      	mov	r3, r5
  40541c:	bf28      	it	cs
  40541e:	2306      	movcs	r3, #6
  405420:	930d      	str	r3, [sp, #52]	; 0x34
  405422:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405426:	46b3      	mov	fp, r6
  405428:	970e      	str	r7, [sp, #56]	; 0x38
  40542a:	9613      	str	r6, [sp, #76]	; 0x4c
  40542c:	4637      	mov	r7, r6
  40542e:	9308      	str	r3, [sp, #32]
  405430:	4e04      	ldr	r6, [pc, #16]	; (405444 <_svfprintf_r+0x1468>)
  405432:	f7fe bf99 	b.w	404368 <_svfprintf_r+0x38c>
  405436:	bf00      	nop
  405438:	00408264 	.word	0x00408264
  40543c:	00408214 	.word	0x00408214
  405440:	66666667 	.word	0x66666667
  405444:	0040825c 	.word	0x0040825c
  405448:	aa23      	add	r2, sp, #140	; 0x8c
  40544a:	9909      	ldr	r1, [sp, #36]	; 0x24
  40544c:	980a      	ldr	r0, [sp, #40]	; 0x28
  40544e:	f002 fab7 	bl	4079c0 <__ssprint_r>
  405452:	2800      	cmp	r0, #0
  405454:	f47e aebb 	bne.w	4041ce <_svfprintf_r+0x1f2>
  405458:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40545a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40545c:	9c25      	ldr	r4, [sp, #148]	; 0x94
  40545e:	1ad3      	subs	r3, r2, r3
  405460:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405464:	e4e7      	b.n	404e36 <_svfprintf_r+0xe5a>
  405466:	f04f 0b06 	mov.w	fp, #6
  40546a:	e58f      	b.n	404f8c <_svfprintf_r+0xfb0>
  40546c:	a821      	add	r0, sp, #132	; 0x84
  40546e:	a91e      	add	r1, sp, #120	; 0x78
  405470:	9004      	str	r0, [sp, #16]
  405472:	9103      	str	r1, [sp, #12]
  405474:	a81d      	add	r0, sp, #116	; 0x74
  405476:	2103      	movs	r1, #3
  405478:	9002      	str	r0, [sp, #8]
  40547a:	9a08      	ldr	r2, [sp, #32]
  40547c:	f8cd b004 	str.w	fp, [sp, #4]
  405480:	463b      	mov	r3, r7
  405482:	9100      	str	r1, [sp, #0]
  405484:	980a      	ldr	r0, [sp, #40]	; 0x28
  405486:	f000 f99b 	bl	4057c0 <_dtoa_r>
  40548a:	465d      	mov	r5, fp
  40548c:	4606      	mov	r6, r0
  40548e:	eb00 040b 	add.w	r4, r0, fp
  405492:	e6f9      	b.n	405288 <_svfprintf_r+0x12ac>
  405494:	9307      	str	r3, [sp, #28]
  405496:	f7ff b959 	b.w	40474c <_svfprintf_r+0x770>
  40549a:	272d      	movs	r7, #45	; 0x2d
  40549c:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
  4054a0:	f7ff b8b2 	b.w	404608 <_svfprintf_r+0x62c>
  4054a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4054a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4054a8:	4413      	add	r3, r2
  4054aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4054ac:	930d      	str	r3, [sp, #52]	; 0x34
  4054ae:	2a00      	cmp	r2, #0
  4054b0:	dd7e      	ble.n	4055b0 <_svfprintf_r+0x15d4>
  4054b2:	2267      	movs	r2, #103	; 0x67
  4054b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4054b8:	9211      	str	r2, [sp, #68]	; 0x44
  4054ba:	e5cc      	b.n	405056 <_svfprintf_r+0x107a>
  4054bc:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
  4054c0:	970e      	str	r7, [sp, #56]	; 0x38
  4054c2:	9308      	str	r3, [sp, #32]
  4054c4:	950d      	str	r5, [sp, #52]	; 0x34
  4054c6:	4683      	mov	fp, r0
  4054c8:	9013      	str	r0, [sp, #76]	; 0x4c
  4054ca:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4054ce:	f7fe bf4b 	b.w	404368 <_svfprintf_r+0x38c>
  4054d2:	9b07      	ldr	r3, [sp, #28]
  4054d4:	07db      	lsls	r3, r3, #31
  4054d6:	465f      	mov	r7, fp
  4054d8:	d505      	bpl.n	4054e6 <_svfprintf_r+0x150a>
  4054da:	ae40      	add	r6, sp, #256	; 0x100
  4054dc:	2330      	movs	r3, #48	; 0x30
  4054de:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4054e2:	f7fe bf37 	b.w	404354 <_svfprintf_r+0x378>
  4054e6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  4054ea:	ae30      	add	r6, sp, #192	; 0xc0
  4054ec:	f7fe bf35 	b.w	40435a <_svfprintf_r+0x37e>
  4054f0:	2b00      	cmp	r3, #0
  4054f2:	dd7d      	ble.n	4055f0 <_svfprintf_r+0x1614>
  4054f4:	f1bb 0f00 	cmp.w	fp, #0
  4054f8:	d13d      	bne.n	405576 <_svfprintf_r+0x159a>
  4054fa:	9a07      	ldr	r2, [sp, #28]
  4054fc:	07d4      	lsls	r4, r2, #31
  4054fe:	d43a      	bmi.n	405576 <_svfprintf_r+0x159a>
  405500:	461a      	mov	r2, r3
  405502:	920d      	str	r2, [sp, #52]	; 0x34
  405504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405508:	e5a5      	b.n	405056 <_svfprintf_r+0x107a>
  40550a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40550c:	2b47      	cmp	r3, #71	; 0x47
  40550e:	f47f ad70 	bne.w	404ff2 <_svfprintf_r+0x1016>
  405512:	9b07      	ldr	r3, [sp, #28]
  405514:	07db      	lsls	r3, r3, #31
  405516:	f53f aeb1 	bmi.w	40527c <_svfprintf_r+0x12a0>
  40551a:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40551c:	1b9b      	subs	r3, r3, r6
  40551e:	9312      	str	r3, [sp, #72]	; 0x48
  405520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  405522:	2b47      	cmp	r3, #71	; 0x47
  405524:	f43f aef8 	beq.w	405318 <_svfprintf_r+0x133c>
  405528:	9b1d      	ldr	r3, [sp, #116]	; 0x74
  40552a:	e71a      	b.n	405362 <_svfprintf_r+0x1386>
  40552c:	aa23      	add	r2, sp, #140	; 0x8c
  40552e:	9909      	ldr	r1, [sp, #36]	; 0x24
  405530:	980a      	ldr	r0, [sp, #40]	; 0x28
  405532:	f002 fa45 	bl	4079c0 <__ssprint_r>
  405536:	2800      	cmp	r0, #0
  405538:	f47e ae49 	bne.w	4041ce <_svfprintf_r+0x1f2>
  40553c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
  40553e:	9c25      	ldr	r4, [sp, #148]	; 0x94
  405540:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405542:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
  405546:	e631      	b.n	4051ac <_svfprintf_r+0x11d0>
  405548:	46a0      	mov	r8, r4
  40554a:	2500      	movs	r5, #0
  40554c:	f7fe bda1 	b.w	404092 <_svfprintf_r+0xb6>
  405550:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405552:	e562      	b.n	40501a <_svfprintf_r+0x103e>
  405554:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405556:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405558:	4413      	add	r3, r2
  40555a:	2267      	movs	r2, #103	; 0x67
  40555c:	930d      	str	r3, [sp, #52]	; 0x34
  40555e:	9211      	str	r2, [sp, #68]	; 0x44
  405560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405564:	e577      	b.n	405056 <_svfprintf_r+0x107a>
  405566:	3330      	adds	r3, #48	; 0x30
  405568:	2230      	movs	r2, #48	; 0x30
  40556a:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
  40556e:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
  405572:	ab20      	add	r3, sp, #128	; 0x80
  405574:	e731      	b.n	4053da <_svfprintf_r+0x13fe>
  405576:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405578:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40557a:	189d      	adds	r5, r3, r2
  40557c:	eb05 030b 	add.w	r3, r5, fp
  405580:	930d      	str	r3, [sp, #52]	; 0x34
  405582:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405586:	e566      	b.n	405056 <_svfprintf_r+0x107a>
  405588:	9808      	ldr	r0, [sp, #32]
  40558a:	4639      	mov	r1, r7
  40558c:	2200      	movs	r2, #0
  40558e:	2300      	movs	r3, #0
  405590:	f7fe fb0c 	bl	403bac <__aeabi_dcmpeq>
  405594:	2800      	cmp	r0, #0
  405596:	f47f ae7b 	bne.w	405290 <_svfprintf_r+0x12b4>
  40559a:	f1c5 0501 	rsb	r5, r5, #1
  40559e:	951d      	str	r5, [sp, #116]	; 0x74
  4055a0:	442c      	add	r4, r5
  4055a2:	e527      	b.n	404ff4 <_svfprintf_r+0x1018>
  4055a4:	4e32      	ldr	r6, [pc, #200]	; (405670 <_svfprintf_r+0x1694>)
  4055a6:	4b33      	ldr	r3, [pc, #204]	; (405674 <_svfprintf_r+0x1698>)
  4055a8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
  4055ac:	f7ff b82e 	b.w	40460c <_svfprintf_r+0x630>
  4055b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4055b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4055b4:	f1c3 0301 	rsb	r3, r3, #1
  4055b8:	441a      	add	r2, r3
  4055ba:	4613      	mov	r3, r2
  4055bc:	920d      	str	r2, [sp, #52]	; 0x34
  4055be:	e778      	b.n	4054b2 <_svfprintf_r+0x14d6>
  4055c0:	9b07      	ldr	r3, [sp, #28]
  4055c2:	f013 0301 	ands.w	r3, r3, #1
  4055c6:	f47f af11 	bne.w	4053ec <_svfprintf_r+0x1410>
  4055ca:	9313      	str	r3, [sp, #76]	; 0x4c
  4055cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4055ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4055d2:	e540      	b.n	405056 <_svfprintf_r+0x107a>
  4055d4:	980e      	ldr	r0, [sp, #56]	; 0x38
  4055d6:	f898 3001 	ldrb.w	r3, [r8, #1]
  4055da:	6805      	ldr	r5, [r0, #0]
  4055dc:	3004      	adds	r0, #4
  4055de:	2d00      	cmp	r5, #0
  4055e0:	900e      	str	r0, [sp, #56]	; 0x38
  4055e2:	46a0      	mov	r8, r4
  4055e4:	f6be ad53 	bge.w	40408e <_svfprintf_r+0xb2>
  4055e8:	f04f 35ff 	mov.w	r5, #4294967295
  4055ec:	f7fe bd4f 	b.w	40408e <_svfprintf_r+0xb2>
  4055f0:	f1bb 0f00 	cmp.w	fp, #0
  4055f4:	d102      	bne.n	4055fc <_svfprintf_r+0x1620>
  4055f6:	9b07      	ldr	r3, [sp, #28]
  4055f8:	07d8      	lsls	r0, r3, #31
  4055fa:	d507      	bpl.n	40560c <_svfprintf_r+0x1630>
  4055fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
  4055fe:	1c5d      	adds	r5, r3, #1
  405600:	eb05 030b 	add.w	r3, r5, fp
  405604:	930d      	str	r3, [sp, #52]	; 0x34
  405606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40560a:	e524      	b.n	405056 <_svfprintf_r+0x107a>
  40560c:	2301      	movs	r3, #1
  40560e:	930d      	str	r3, [sp, #52]	; 0x34
  405610:	e521      	b.n	405056 <_svfprintf_r+0x107a>
  405612:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405616:	f7ff b921 	b.w	40485c <_svfprintf_r+0x880>
  40561a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40561c:	230c      	movs	r3, #12
  40561e:	6013      	str	r3, [r2, #0]
  405620:	f04f 30ff 	mov.w	r0, #4294967295
  405624:	f7fe bddc 	b.w	4041e0 <_svfprintf_r+0x204>
  405628:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40562c:	f7ff b8f9 	b.w	404822 <_svfprintf_r+0x846>
  405630:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
  405634:	e6d1      	b.n	4053da <_svfprintf_r+0x13fe>
  405636:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40563a:	f7fe bdd9 	b.w	4041f0 <_svfprintf_r+0x214>
  40563e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405642:	f7ff b857 	b.w	4046f4 <_svfprintf_r+0x718>
  405646:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40564a:	f7ff b825 	b.w	404698 <_svfprintf_r+0x6bc>
  40564e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405652:	f7ff b94c 	b.w	4048ee <_svfprintf_r+0x912>
  405656:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40565a:	f7fe bff3 	b.w	404644 <_svfprintf_r+0x668>
  40565e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  405662:	f7fe bfa3 	b.w	4045ac <_svfprintf_r+0x5d0>
  405666:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
  40566a:	f7fe be33 	b.w	4042d4 <_svfprintf_r+0x2f8>
  40566e:	bf00      	nop
  405670:	00408230 	.word	0x00408230
  405674:	0040822c 	.word	0x0040822c

00405678 <register_fini>:
  405678:	4b02      	ldr	r3, [pc, #8]	; (405684 <register_fini+0xc>)
  40567a:	b113      	cbz	r3, 405682 <register_fini+0xa>
  40567c:	4802      	ldr	r0, [pc, #8]	; (405688 <register_fini+0x10>)
  40567e:	f000 b805 	b.w	40568c <atexit>
  405682:	4770      	bx	lr
  405684:	00000000 	.word	0x00000000
  405688:	00406619 	.word	0x00406619

0040568c <atexit>:
  40568c:	2300      	movs	r3, #0
  40568e:	4601      	mov	r1, r0
  405690:	461a      	mov	r2, r3
  405692:	4618      	mov	r0, r3
  405694:	f002 ba14 	b.w	407ac0 <__register_exitproc>

00405698 <quorem>:
  405698:	6902      	ldr	r2, [r0, #16]
  40569a:	690b      	ldr	r3, [r1, #16]
  40569c:	4293      	cmp	r3, r2
  40569e:	f300 808d 	bgt.w	4057bc <quorem+0x124>
  4056a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4056a6:	f103 38ff 	add.w	r8, r3, #4294967295
  4056aa:	f101 0714 	add.w	r7, r1, #20
  4056ae:	f100 0b14 	add.w	fp, r0, #20
  4056b2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4056b6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4056ba:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4056be:	b083      	sub	sp, #12
  4056c0:	3201      	adds	r2, #1
  4056c2:	fbb3 f9f2 	udiv	r9, r3, r2
  4056c6:	eb0b 0304 	add.w	r3, fp, r4
  4056ca:	9400      	str	r4, [sp, #0]
  4056cc:	eb07 0a04 	add.w	sl, r7, r4
  4056d0:	9301      	str	r3, [sp, #4]
  4056d2:	f1b9 0f00 	cmp.w	r9, #0
  4056d6:	d039      	beq.n	40574c <quorem+0xb4>
  4056d8:	2500      	movs	r5, #0
  4056da:	46bc      	mov	ip, r7
  4056dc:	46de      	mov	lr, fp
  4056de:	462b      	mov	r3, r5
  4056e0:	f85c 6b04 	ldr.w	r6, [ip], #4
  4056e4:	f8de 2000 	ldr.w	r2, [lr]
  4056e8:	b2b4      	uxth	r4, r6
  4056ea:	fb09 5504 	mla	r5, r9, r4, r5
  4056ee:	0c36      	lsrs	r6, r6, #16
  4056f0:	0c2c      	lsrs	r4, r5, #16
  4056f2:	fb09 4406 	mla	r4, r9, r6, r4
  4056f6:	b2ad      	uxth	r5, r5
  4056f8:	1b5b      	subs	r3, r3, r5
  4056fa:	b2a6      	uxth	r6, r4
  4056fc:	fa13 f382 	uxtah	r3, r3, r2
  405700:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
  405704:	eb06 4623 	add.w	r6, r6, r3, asr #16
  405708:	b29b      	uxth	r3, r3
  40570a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  40570e:	45e2      	cmp	sl, ip
  405710:	f84e 3b04 	str.w	r3, [lr], #4
  405714:	ea4f 4514 	mov.w	r5, r4, lsr #16
  405718:	ea4f 4326 	mov.w	r3, r6, asr #16
  40571c:	d2e0      	bcs.n	4056e0 <quorem+0x48>
  40571e:	9b00      	ldr	r3, [sp, #0]
  405720:	f85b 3003 	ldr.w	r3, [fp, r3]
  405724:	b993      	cbnz	r3, 40574c <quorem+0xb4>
  405726:	9c01      	ldr	r4, [sp, #4]
  405728:	1f23      	subs	r3, r4, #4
  40572a:	459b      	cmp	fp, r3
  40572c:	d20c      	bcs.n	405748 <quorem+0xb0>
  40572e:	f854 3c04 	ldr.w	r3, [r4, #-4]
  405732:	b94b      	cbnz	r3, 405748 <quorem+0xb0>
  405734:	f1a4 0308 	sub.w	r3, r4, #8
  405738:	e002      	b.n	405740 <quorem+0xa8>
  40573a:	681a      	ldr	r2, [r3, #0]
  40573c:	3b04      	subs	r3, #4
  40573e:	b91a      	cbnz	r2, 405748 <quorem+0xb0>
  405740:	459b      	cmp	fp, r3
  405742:	f108 38ff 	add.w	r8, r8, #4294967295
  405746:	d3f8      	bcc.n	40573a <quorem+0xa2>
  405748:	f8c0 8010 	str.w	r8, [r0, #16]
  40574c:	4604      	mov	r4, r0
  40574e:	f001 fe2f 	bl	4073b0 <__mcmp>
  405752:	2800      	cmp	r0, #0
  405754:	db2e      	blt.n	4057b4 <quorem+0x11c>
  405756:	f109 0901 	add.w	r9, r9, #1
  40575a:	465d      	mov	r5, fp
  40575c:	2300      	movs	r3, #0
  40575e:	f857 1b04 	ldr.w	r1, [r7], #4
  405762:	6828      	ldr	r0, [r5, #0]
  405764:	b28a      	uxth	r2, r1
  405766:	1a9a      	subs	r2, r3, r2
  405768:	0c09      	lsrs	r1, r1, #16
  40576a:	fa12 f280 	uxtah	r2, r2, r0
  40576e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
  405772:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405776:	b291      	uxth	r1, r2
  405778:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  40577c:	45ba      	cmp	sl, r7
  40577e:	f845 1b04 	str.w	r1, [r5], #4
  405782:	ea4f 4323 	mov.w	r3, r3, asr #16
  405786:	d2ea      	bcs.n	40575e <quorem+0xc6>
  405788:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  40578c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  405790:	b982      	cbnz	r2, 4057b4 <quorem+0x11c>
  405792:	1f1a      	subs	r2, r3, #4
  405794:	4593      	cmp	fp, r2
  405796:	d20b      	bcs.n	4057b0 <quorem+0x118>
  405798:	f853 2c04 	ldr.w	r2, [r3, #-4]
  40579c:	b942      	cbnz	r2, 4057b0 <quorem+0x118>
  40579e:	3b08      	subs	r3, #8
  4057a0:	e002      	b.n	4057a8 <quorem+0x110>
  4057a2:	681a      	ldr	r2, [r3, #0]
  4057a4:	3b04      	subs	r3, #4
  4057a6:	b91a      	cbnz	r2, 4057b0 <quorem+0x118>
  4057a8:	459b      	cmp	fp, r3
  4057aa:	f108 38ff 	add.w	r8, r8, #4294967295
  4057ae:	d3f8      	bcc.n	4057a2 <quorem+0x10a>
  4057b0:	f8c4 8010 	str.w	r8, [r4, #16]
  4057b4:	4648      	mov	r0, r9
  4057b6:	b003      	add	sp, #12
  4057b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4057bc:	2000      	movs	r0, #0
  4057be:	4770      	bx	lr

004057c0 <_dtoa_r>:
  4057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057c4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  4057c6:	b097      	sub	sp, #92	; 0x5c
  4057c8:	4681      	mov	r9, r0
  4057ca:	9c23      	ldr	r4, [sp, #140]	; 0x8c
  4057cc:	4692      	mov	sl, r2
  4057ce:	469b      	mov	fp, r3
  4057d0:	b149      	cbz	r1, 4057e6 <_dtoa_r+0x26>
  4057d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  4057d4:	604a      	str	r2, [r1, #4]
  4057d6:	2301      	movs	r3, #1
  4057d8:	4093      	lsls	r3, r2
  4057da:	608b      	str	r3, [r1, #8]
  4057dc:	f001 fc06 	bl	406fec <_Bfree>
  4057e0:	2300      	movs	r3, #0
  4057e2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
  4057e6:	f1bb 0f00 	cmp.w	fp, #0
  4057ea:	46d8      	mov	r8, fp
  4057ec:	db33      	blt.n	405856 <_dtoa_r+0x96>
  4057ee:	2300      	movs	r3, #0
  4057f0:	6023      	str	r3, [r4, #0]
  4057f2:	4ba5      	ldr	r3, [pc, #660]	; (405a88 <_dtoa_r+0x2c8>)
  4057f4:	461a      	mov	r2, r3
  4057f6:	ea08 0303 	and.w	r3, r8, r3
  4057fa:	4293      	cmp	r3, r2
  4057fc:	d014      	beq.n	405828 <_dtoa_r+0x68>
  4057fe:	4650      	mov	r0, sl
  405800:	4659      	mov	r1, fp
  405802:	2200      	movs	r2, #0
  405804:	2300      	movs	r3, #0
  405806:	f7fe f9d1 	bl	403bac <__aeabi_dcmpeq>
  40580a:	4605      	mov	r5, r0
  40580c:	b348      	cbz	r0, 405862 <_dtoa_r+0xa2>
  40580e:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405810:	2301      	movs	r3, #1
  405812:	6013      	str	r3, [r2, #0]
  405814:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405816:	2b00      	cmp	r3, #0
  405818:	f000 80c5 	beq.w	4059a6 <_dtoa_r+0x1e6>
  40581c:	489b      	ldr	r0, [pc, #620]	; (405a8c <_dtoa_r+0x2cc>)
  40581e:	6018      	str	r0, [r3, #0]
  405820:	3801      	subs	r0, #1
  405822:	b017      	add	sp, #92	; 0x5c
  405824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405828:	9a22      	ldr	r2, [sp, #136]	; 0x88
  40582a:	f242 730f 	movw	r3, #9999	; 0x270f
  40582e:	6013      	str	r3, [r2, #0]
  405830:	f1ba 0f00 	cmp.w	sl, #0
  405834:	f000 80a2 	beq.w	40597c <_dtoa_r+0x1bc>
  405838:	4895      	ldr	r0, [pc, #596]	; (405a90 <_dtoa_r+0x2d0>)
  40583a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40583c:	2b00      	cmp	r3, #0
  40583e:	d0f0      	beq.n	405822 <_dtoa_r+0x62>
  405840:	78c3      	ldrb	r3, [r0, #3]
  405842:	2b00      	cmp	r3, #0
  405844:	f000 80b1 	beq.w	4059aa <_dtoa_r+0x1ea>
  405848:	f100 0308 	add.w	r3, r0, #8
  40584c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  40584e:	6013      	str	r3, [r2, #0]
  405850:	b017      	add	sp, #92	; 0x5c
  405852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405856:	2301      	movs	r3, #1
  405858:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
  40585c:	6023      	str	r3, [r4, #0]
  40585e:	46c3      	mov	fp, r8
  405860:	e7c7      	b.n	4057f2 <_dtoa_r+0x32>
  405862:	aa14      	add	r2, sp, #80	; 0x50
  405864:	ab15      	add	r3, sp, #84	; 0x54
  405866:	9201      	str	r2, [sp, #4]
  405868:	9300      	str	r3, [sp, #0]
  40586a:	4652      	mov	r2, sl
  40586c:	465b      	mov	r3, fp
  40586e:	4648      	mov	r0, r9
  405870:	f001 fe48 	bl	407504 <__d2b>
  405874:	ea5f 5418 	movs.w	r4, r8, lsr #20
  405878:	9008      	str	r0, [sp, #32]
  40587a:	f040 8088 	bne.w	40598e <_dtoa_r+0x1ce>
  40587e:	9d14      	ldr	r5, [sp, #80]	; 0x50
  405880:	9c15      	ldr	r4, [sp, #84]	; 0x54
  405882:	442c      	add	r4, r5
  405884:	f204 4332 	addw	r3, r4, #1074	; 0x432
  405888:	2b20      	cmp	r3, #32
  40588a:	f340 8291 	ble.w	405db0 <_dtoa_r+0x5f0>
  40588e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  405892:	f204 4012 	addw	r0, r4, #1042	; 0x412
  405896:	fa08 f803 	lsl.w	r8, r8, r3
  40589a:	fa2a f000 	lsr.w	r0, sl, r0
  40589e:	ea40 0008 	orr.w	r0, r0, r8
  4058a2:	f7fd fea5 	bl	4035f0 <__aeabi_ui2d>
  4058a6:	2301      	movs	r3, #1
  4058a8:	3c01      	subs	r4, #1
  4058aa:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4058ae:	9310      	str	r3, [sp, #64]	; 0x40
  4058b0:	2200      	movs	r2, #0
  4058b2:	4b78      	ldr	r3, [pc, #480]	; (405a94 <_dtoa_r+0x2d4>)
  4058b4:	f7fd fd5e 	bl	403374 <__aeabi_dsub>
  4058b8:	a36d      	add	r3, pc, #436	; (adr r3, 405a70 <_dtoa_r+0x2b0>)
  4058ba:	e9d3 2300 	ldrd	r2, r3, [r3]
  4058be:	f7fd ff0d 	bl	4036dc <__aeabi_dmul>
  4058c2:	a36d      	add	r3, pc, #436	; (adr r3, 405a78 <_dtoa_r+0x2b8>)
  4058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
  4058c8:	f7fd fd56 	bl	403378 <__adddf3>
  4058cc:	4606      	mov	r6, r0
  4058ce:	4620      	mov	r0, r4
  4058d0:	460f      	mov	r7, r1
  4058d2:	f7fd fe9d 	bl	403610 <__aeabi_i2d>
  4058d6:	a36a      	add	r3, pc, #424	; (adr r3, 405a80 <_dtoa_r+0x2c0>)
  4058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
  4058dc:	f7fd fefe 	bl	4036dc <__aeabi_dmul>
  4058e0:	4602      	mov	r2, r0
  4058e2:	460b      	mov	r3, r1
  4058e4:	4630      	mov	r0, r6
  4058e6:	4639      	mov	r1, r7
  4058e8:	f7fd fd46 	bl	403378 <__adddf3>
  4058ec:	4606      	mov	r6, r0
  4058ee:	460f      	mov	r7, r1
  4058f0:	f7fe f9a4 	bl	403c3c <__aeabi_d2iz>
  4058f4:	2200      	movs	r2, #0
  4058f6:	9004      	str	r0, [sp, #16]
  4058f8:	2300      	movs	r3, #0
  4058fa:	4630      	mov	r0, r6
  4058fc:	4639      	mov	r1, r7
  4058fe:	f7fe f95f 	bl	403bc0 <__aeabi_dcmplt>
  405902:	2800      	cmp	r0, #0
  405904:	f040 8230 	bne.w	405d68 <_dtoa_r+0x5a8>
  405908:	9e04      	ldr	r6, [sp, #16]
  40590a:	2e16      	cmp	r6, #22
  40590c:	f200 8229 	bhi.w	405d62 <_dtoa_r+0x5a2>
  405910:	4b61      	ldr	r3, [pc, #388]	; (405a98 <_dtoa_r+0x2d8>)
  405912:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  405916:	e9d3 0100 	ldrd	r0, r1, [r3]
  40591a:	4652      	mov	r2, sl
  40591c:	465b      	mov	r3, fp
  40591e:	f7fe f96d 	bl	403bfc <__aeabi_dcmpgt>
  405922:	2800      	cmp	r0, #0
  405924:	f000 8249 	beq.w	405dba <_dtoa_r+0x5fa>
  405928:	1e73      	subs	r3, r6, #1
  40592a:	9304      	str	r3, [sp, #16]
  40592c:	2300      	movs	r3, #0
  40592e:	930c      	str	r3, [sp, #48]	; 0x30
  405930:	1b2c      	subs	r4, r5, r4
  405932:	1e63      	subs	r3, r4, #1
  405934:	9302      	str	r3, [sp, #8]
  405936:	f100 8232 	bmi.w	405d9e <_dtoa_r+0x5de>
  40593a:	2300      	movs	r3, #0
  40593c:	9305      	str	r3, [sp, #20]
  40593e:	9b04      	ldr	r3, [sp, #16]
  405940:	2b00      	cmp	r3, #0
  405942:	f2c0 8223 	blt.w	405d8c <_dtoa_r+0x5cc>
  405946:	9a02      	ldr	r2, [sp, #8]
  405948:	930b      	str	r3, [sp, #44]	; 0x2c
  40594a:	4611      	mov	r1, r2
  40594c:	4419      	add	r1, r3
  40594e:	2300      	movs	r3, #0
  405950:	9102      	str	r1, [sp, #8]
  405952:	930a      	str	r3, [sp, #40]	; 0x28
  405954:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405956:	2b09      	cmp	r3, #9
  405958:	d829      	bhi.n	4059ae <_dtoa_r+0x1ee>
  40595a:	2b05      	cmp	r3, #5
  40595c:	f340 8658 	ble.w	406610 <_dtoa_r+0xe50>
  405960:	3b04      	subs	r3, #4
  405962:	9320      	str	r3, [sp, #128]	; 0x80
  405964:	2500      	movs	r5, #0
  405966:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405968:	3b02      	subs	r3, #2
  40596a:	2b03      	cmp	r3, #3
  40596c:	f200 8635 	bhi.w	4065da <_dtoa_r+0xe1a>
  405970:	e8df f013 	tbh	[pc, r3, lsl #1]
  405974:	0228032c 	.word	0x0228032c
  405978:	04590337 	.word	0x04590337
  40597c:	4b44      	ldr	r3, [pc, #272]	; (405a90 <_dtoa_r+0x2d0>)
  40597e:	4a47      	ldr	r2, [pc, #284]	; (405a9c <_dtoa_r+0x2dc>)
  405980:	f3c8 0013 	ubfx	r0, r8, #0, #20
  405984:	2800      	cmp	r0, #0
  405986:	bf14      	ite	ne
  405988:	4618      	movne	r0, r3
  40598a:	4610      	moveq	r0, r2
  40598c:	e755      	b.n	40583a <_dtoa_r+0x7a>
  40598e:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405992:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
  405996:	9510      	str	r5, [sp, #64]	; 0x40
  405998:	4650      	mov	r0, sl
  40599a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
  40599e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4059a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
  4059a4:	e784      	b.n	4058b0 <_dtoa_r+0xf0>
  4059a6:	483e      	ldr	r0, [pc, #248]	; (405aa0 <_dtoa_r+0x2e0>)
  4059a8:	e73b      	b.n	405822 <_dtoa_r+0x62>
  4059aa:	1cc3      	adds	r3, r0, #3
  4059ac:	e74e      	b.n	40584c <_dtoa_r+0x8c>
  4059ae:	2100      	movs	r1, #0
  4059b0:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4059b4:	4648      	mov	r0, r9
  4059b6:	9120      	str	r1, [sp, #128]	; 0x80
  4059b8:	f001 faf2 	bl	406fa0 <_Balloc>
  4059bc:	f04f 33ff 	mov.w	r3, #4294967295
  4059c0:	9306      	str	r3, [sp, #24]
  4059c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
  4059c4:	930d      	str	r3, [sp, #52]	; 0x34
  4059c6:	2301      	movs	r3, #1
  4059c8:	9007      	str	r0, [sp, #28]
  4059ca:	9221      	str	r2, [sp, #132]	; 0x84
  4059cc:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4059d0:	9309      	str	r3, [sp, #36]	; 0x24
  4059d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4059d4:	2b00      	cmp	r3, #0
  4059d6:	f2c0 80d1 	blt.w	405b7c <_dtoa_r+0x3bc>
  4059da:	9a04      	ldr	r2, [sp, #16]
  4059dc:	2a0e      	cmp	r2, #14
  4059de:	f300 80cd 	bgt.w	405b7c <_dtoa_r+0x3bc>
  4059e2:	4b2d      	ldr	r3, [pc, #180]	; (405a98 <_dtoa_r+0x2d8>)
  4059e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4059e8:	e9d3 3400 	ldrd	r3, r4, [r3]
  4059ec:	e9cd 3402 	strd	r3, r4, [sp, #8]
  4059f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  4059f2:	2b00      	cmp	r3, #0
  4059f4:	f2c0 8300 	blt.w	405ff8 <_dtoa_r+0x838>
  4059f8:	4656      	mov	r6, sl
  4059fa:	465f      	mov	r7, fp
  4059fc:	4650      	mov	r0, sl
  4059fe:	4659      	mov	r1, fp
  405a00:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
  405a04:	4652      	mov	r2, sl
  405a06:	465b      	mov	r3, fp
  405a08:	f7fd ff92 	bl	403930 <__aeabi_ddiv>
  405a0c:	f7fe f916 	bl	403c3c <__aeabi_d2iz>
  405a10:	4604      	mov	r4, r0
  405a12:	f7fd fdfd 	bl	403610 <__aeabi_i2d>
  405a16:	4652      	mov	r2, sl
  405a18:	465b      	mov	r3, fp
  405a1a:	f7fd fe5f 	bl	4036dc <__aeabi_dmul>
  405a1e:	460b      	mov	r3, r1
  405a20:	4602      	mov	r2, r0
  405a22:	4639      	mov	r1, r7
  405a24:	4630      	mov	r0, r6
  405a26:	f7fd fca5 	bl	403374 <__aeabi_dsub>
  405a2a:	9d07      	ldr	r5, [sp, #28]
  405a2c:	f104 0330 	add.w	r3, r4, #48	; 0x30
  405a30:	702b      	strb	r3, [r5, #0]
  405a32:	9b06      	ldr	r3, [sp, #24]
  405a34:	2b01      	cmp	r3, #1
  405a36:	4606      	mov	r6, r0
  405a38:	460f      	mov	r7, r1
  405a3a:	f105 0501 	add.w	r5, r5, #1
  405a3e:	d062      	beq.n	405b06 <_dtoa_r+0x346>
  405a40:	2200      	movs	r2, #0
  405a42:	4b18      	ldr	r3, [pc, #96]	; (405aa4 <_dtoa_r+0x2e4>)
  405a44:	f7fd fe4a 	bl	4036dc <__aeabi_dmul>
  405a48:	2200      	movs	r2, #0
  405a4a:	2300      	movs	r3, #0
  405a4c:	4606      	mov	r6, r0
  405a4e:	460f      	mov	r7, r1
  405a50:	f7fe f8ac 	bl	403bac <__aeabi_dcmpeq>
  405a54:	2800      	cmp	r0, #0
  405a56:	d17e      	bne.n	405b56 <_dtoa_r+0x396>
  405a58:	f8cd 9014 	str.w	r9, [sp, #20]
  405a5c:	f8dd a018 	ldr.w	sl, [sp, #24]
  405a60:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405a64:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
  405a68:	e029      	b.n	405abe <_dtoa_r+0x2fe>
  405a6a:	bf00      	nop
  405a6c:	f3af 8000 	nop.w
  405a70:	636f4361 	.word	0x636f4361
  405a74:	3fd287a7 	.word	0x3fd287a7
  405a78:	8b60c8b3 	.word	0x8b60c8b3
  405a7c:	3fc68a28 	.word	0x3fc68a28
  405a80:	509f79fb 	.word	0x509f79fb
  405a84:	3fd34413 	.word	0x3fd34413
  405a88:	7ff00000 	.word	0x7ff00000
  405a8c:	00408265 	.word	0x00408265
  405a90:	00408284 	.word	0x00408284
  405a94:	3ff80000 	.word	0x3ff80000
  405a98:	00408298 	.word	0x00408298
  405a9c:	00408278 	.word	0x00408278
  405aa0:	00408264 	.word	0x00408264
  405aa4:	40240000 	.word	0x40240000
  405aa8:	f7fd fe18 	bl	4036dc <__aeabi_dmul>
  405aac:	2200      	movs	r2, #0
  405aae:	2300      	movs	r3, #0
  405ab0:	4606      	mov	r6, r0
  405ab2:	460f      	mov	r7, r1
  405ab4:	f7fe f87a 	bl	403bac <__aeabi_dcmpeq>
  405ab8:	2800      	cmp	r0, #0
  405aba:	f040 83b7 	bne.w	40622c <_dtoa_r+0xa6c>
  405abe:	4642      	mov	r2, r8
  405ac0:	464b      	mov	r3, r9
  405ac2:	4630      	mov	r0, r6
  405ac4:	4639      	mov	r1, r7
  405ac6:	f7fd ff33 	bl	403930 <__aeabi_ddiv>
  405aca:	f7fe f8b7 	bl	403c3c <__aeabi_d2iz>
  405ace:	4604      	mov	r4, r0
  405ad0:	f7fd fd9e 	bl	403610 <__aeabi_i2d>
  405ad4:	4642      	mov	r2, r8
  405ad6:	464b      	mov	r3, r9
  405ad8:	f7fd fe00 	bl	4036dc <__aeabi_dmul>
  405adc:	4602      	mov	r2, r0
  405ade:	460b      	mov	r3, r1
  405ae0:	4630      	mov	r0, r6
  405ae2:	4639      	mov	r1, r7
  405ae4:	f7fd fc46 	bl	403374 <__aeabi_dsub>
  405ae8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  405aec:	f805 eb01 	strb.w	lr, [r5], #1
  405af0:	ebcb 0e05 	rsb	lr, fp, r5
  405af4:	45d6      	cmp	lr, sl
  405af6:	4606      	mov	r6, r0
  405af8:	460f      	mov	r7, r1
  405afa:	f04f 0200 	mov.w	r2, #0
  405afe:	4bb0      	ldr	r3, [pc, #704]	; (405dc0 <_dtoa_r+0x600>)
  405b00:	d1d2      	bne.n	405aa8 <_dtoa_r+0x2e8>
  405b02:	f8dd 9014 	ldr.w	r9, [sp, #20]
  405b06:	4632      	mov	r2, r6
  405b08:	463b      	mov	r3, r7
  405b0a:	4630      	mov	r0, r6
  405b0c:	4639      	mov	r1, r7
  405b0e:	f7fd fc33 	bl	403378 <__adddf3>
  405b12:	4606      	mov	r6, r0
  405b14:	460f      	mov	r7, r1
  405b16:	4602      	mov	r2, r0
  405b18:	460b      	mov	r3, r1
  405b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405b1e:	f7fe f84f 	bl	403bc0 <__aeabi_dcmplt>
  405b22:	b940      	cbnz	r0, 405b36 <_dtoa_r+0x376>
  405b24:	4632      	mov	r2, r6
  405b26:	463b      	mov	r3, r7
  405b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  405b2c:	f7fe f83e 	bl	403bac <__aeabi_dcmpeq>
  405b30:	b188      	cbz	r0, 405b56 <_dtoa_r+0x396>
  405b32:	07e3      	lsls	r3, r4, #31
  405b34:	d50f      	bpl.n	405b56 <_dtoa_r+0x396>
  405b36:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  405b3a:	9a07      	ldr	r2, [sp, #28]
  405b3c:	1e6b      	subs	r3, r5, #1
  405b3e:	e004      	b.n	405b4a <_dtoa_r+0x38a>
  405b40:	429a      	cmp	r2, r3
  405b42:	f000 842c 	beq.w	40639e <_dtoa_r+0xbde>
  405b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405b4a:	2c39      	cmp	r4, #57	; 0x39
  405b4c:	f103 0501 	add.w	r5, r3, #1
  405b50:	d0f6      	beq.n	405b40 <_dtoa_r+0x380>
  405b52:	3401      	adds	r4, #1
  405b54:	701c      	strb	r4, [r3, #0]
  405b56:	9908      	ldr	r1, [sp, #32]
  405b58:	4648      	mov	r0, r9
  405b5a:	f001 fa47 	bl	406fec <_Bfree>
  405b5e:	2200      	movs	r2, #0
  405b60:	9b04      	ldr	r3, [sp, #16]
  405b62:	702a      	strb	r2, [r5, #0]
  405b64:	9a22      	ldr	r2, [sp, #136]	; 0x88
  405b66:	3301      	adds	r3, #1
  405b68:	6013      	str	r3, [r2, #0]
  405b6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405b6c:	2b00      	cmp	r3, #0
  405b6e:	f000 83a7 	beq.w	4062c0 <_dtoa_r+0xb00>
  405b72:	9807      	ldr	r0, [sp, #28]
  405b74:	601d      	str	r5, [r3, #0]
  405b76:	b017      	add	sp, #92	; 0x5c
  405b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405b7e:	2a00      	cmp	r2, #0
  405b80:	f000 8112 	beq.w	405da8 <_dtoa_r+0x5e8>
  405b84:	9a20      	ldr	r2, [sp, #128]	; 0x80
  405b86:	2a01      	cmp	r2, #1
  405b88:	f340 8258 	ble.w	40603c <_dtoa_r+0x87c>
  405b8c:	9b06      	ldr	r3, [sp, #24]
  405b8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405b90:	1e5f      	subs	r7, r3, #1
  405b92:	42ba      	cmp	r2, r7
  405b94:	f2c0 8397 	blt.w	4062c6 <_dtoa_r+0xb06>
  405b98:	1bd7      	subs	r7, r2, r7
  405b9a:	9b06      	ldr	r3, [sp, #24]
  405b9c:	2b00      	cmp	r3, #0
  405b9e:	f2c0 848a 	blt.w	4064b6 <_dtoa_r+0xcf6>
  405ba2:	9d05      	ldr	r5, [sp, #20]
  405ba4:	9b06      	ldr	r3, [sp, #24]
  405ba6:	9a05      	ldr	r2, [sp, #20]
  405ba8:	441a      	add	r2, r3
  405baa:	9205      	str	r2, [sp, #20]
  405bac:	9a02      	ldr	r2, [sp, #8]
  405bae:	2101      	movs	r1, #1
  405bb0:	441a      	add	r2, r3
  405bb2:	4648      	mov	r0, r9
  405bb4:	9202      	str	r2, [sp, #8]
  405bb6:	f001 fab1 	bl	40711c <__i2b>
  405bba:	4606      	mov	r6, r0
  405bbc:	b165      	cbz	r5, 405bd8 <_dtoa_r+0x418>
  405bbe:	9902      	ldr	r1, [sp, #8]
  405bc0:	2900      	cmp	r1, #0
  405bc2:	460b      	mov	r3, r1
  405bc4:	dd08      	ble.n	405bd8 <_dtoa_r+0x418>
  405bc6:	42a9      	cmp	r1, r5
  405bc8:	9a05      	ldr	r2, [sp, #20]
  405bca:	bfa8      	it	ge
  405bcc:	462b      	movge	r3, r5
  405bce:	1ad2      	subs	r2, r2, r3
  405bd0:	1aed      	subs	r5, r5, r3
  405bd2:	1acb      	subs	r3, r1, r3
  405bd4:	9205      	str	r2, [sp, #20]
  405bd6:	9302      	str	r3, [sp, #8]
  405bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405bda:	2b00      	cmp	r3, #0
  405bdc:	f340 82fc 	ble.w	4061d8 <_dtoa_r+0xa18>
  405be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405be2:	2a00      	cmp	r2, #0
  405be4:	f000 8201 	beq.w	405fea <_dtoa_r+0x82a>
  405be8:	2f00      	cmp	r7, #0
  405bea:	f000 81fe 	beq.w	405fea <_dtoa_r+0x82a>
  405bee:	4631      	mov	r1, r6
  405bf0:	463a      	mov	r2, r7
  405bf2:	4648      	mov	r0, r9
  405bf4:	f001 fb34 	bl	407260 <__pow5mult>
  405bf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  405bfc:	4601      	mov	r1, r0
  405bfe:	4642      	mov	r2, r8
  405c00:	4606      	mov	r6, r0
  405c02:	4648      	mov	r0, r9
  405c04:	f001 fa94 	bl	407130 <__multiply>
  405c08:	4641      	mov	r1, r8
  405c0a:	4604      	mov	r4, r0
  405c0c:	4648      	mov	r0, r9
  405c0e:	f001 f9ed 	bl	406fec <_Bfree>
  405c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405c14:	1bdb      	subs	r3, r3, r7
  405c16:	930a      	str	r3, [sp, #40]	; 0x28
  405c18:	f040 81e6 	bne.w	405fe8 <_dtoa_r+0x828>
  405c1c:	2101      	movs	r1, #1
  405c1e:	4648      	mov	r0, r9
  405c20:	f001 fa7c 	bl	40711c <__i2b>
  405c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405c26:	4680      	mov	r8, r0
  405c28:	2b00      	cmp	r3, #0
  405c2a:	f000 8219 	beq.w	406060 <_dtoa_r+0x8a0>
  405c2e:	4601      	mov	r1, r0
  405c30:	461a      	mov	r2, r3
  405c32:	4648      	mov	r0, r9
  405c34:	f001 fb14 	bl	407260 <__pow5mult>
  405c38:	9b20      	ldr	r3, [sp, #128]	; 0x80
  405c3a:	2b01      	cmp	r3, #1
  405c3c:	4680      	mov	r8, r0
  405c3e:	f340 82f8 	ble.w	406232 <_dtoa_r+0xa72>
  405c42:	2700      	movs	r7, #0
  405c44:	f8d8 3010 	ldr.w	r3, [r8, #16]
  405c48:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  405c4c:	6918      	ldr	r0, [r3, #16]
  405c4e:	f001 fa17 	bl	407080 <__hi0bits>
  405c52:	f1c0 0020 	rsb	r0, r0, #32
  405c56:	9a02      	ldr	r2, [sp, #8]
  405c58:	4410      	add	r0, r2
  405c5a:	f010 001f 	ands.w	r0, r0, #31
  405c5e:	f000 81f6 	beq.w	40604e <_dtoa_r+0x88e>
  405c62:	f1c0 0320 	rsb	r3, r0, #32
  405c66:	2b04      	cmp	r3, #4
  405c68:	f340 84ca 	ble.w	406600 <_dtoa_r+0xe40>
  405c6c:	9b05      	ldr	r3, [sp, #20]
  405c6e:	f1c0 001c 	rsb	r0, r0, #28
  405c72:	4403      	add	r3, r0
  405c74:	9305      	str	r3, [sp, #20]
  405c76:	4613      	mov	r3, r2
  405c78:	4403      	add	r3, r0
  405c7a:	4405      	add	r5, r0
  405c7c:	9302      	str	r3, [sp, #8]
  405c7e:	9b05      	ldr	r3, [sp, #20]
  405c80:	2b00      	cmp	r3, #0
  405c82:	dd05      	ble.n	405c90 <_dtoa_r+0x4d0>
  405c84:	4621      	mov	r1, r4
  405c86:	461a      	mov	r2, r3
  405c88:	4648      	mov	r0, r9
  405c8a:	f001 fb39 	bl	407300 <__lshift>
  405c8e:	4604      	mov	r4, r0
  405c90:	9b02      	ldr	r3, [sp, #8]
  405c92:	2b00      	cmp	r3, #0
  405c94:	dd05      	ble.n	405ca2 <_dtoa_r+0x4e2>
  405c96:	4641      	mov	r1, r8
  405c98:	461a      	mov	r2, r3
  405c9a:	4648      	mov	r0, r9
  405c9c:	f001 fb30 	bl	407300 <__lshift>
  405ca0:	4680      	mov	r8, r0
  405ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405ca4:	2b00      	cmp	r3, #0
  405ca6:	f040 827c 	bne.w	4061a2 <_dtoa_r+0x9e2>
  405caa:	9b06      	ldr	r3, [sp, #24]
  405cac:	2b00      	cmp	r3, #0
  405cae:	f340 8295 	ble.w	4061dc <_dtoa_r+0xa1c>
  405cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405cb4:	2b00      	cmp	r3, #0
  405cb6:	f040 81f5 	bne.w	4060a4 <_dtoa_r+0x8e4>
  405cba:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405cbe:	9f06      	ldr	r7, [sp, #24]
  405cc0:	465d      	mov	r5, fp
  405cc2:	e002      	b.n	405cca <_dtoa_r+0x50a>
  405cc4:	f001 f99c 	bl	407000 <__multadd>
  405cc8:	4604      	mov	r4, r0
  405cca:	4641      	mov	r1, r8
  405ccc:	4620      	mov	r0, r4
  405cce:	f7ff fce3 	bl	405698 <quorem>
  405cd2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  405cd6:	f805 ab01 	strb.w	sl, [r5], #1
  405cda:	ebcb 0305 	rsb	r3, fp, r5
  405cde:	42bb      	cmp	r3, r7
  405ce0:	f04f 020a 	mov.w	r2, #10
  405ce4:	f04f 0300 	mov.w	r3, #0
  405ce8:	4621      	mov	r1, r4
  405cea:	4648      	mov	r0, r9
  405cec:	dbea      	blt.n	405cc4 <_dtoa_r+0x504>
  405cee:	9b07      	ldr	r3, [sp, #28]
  405cf0:	9a06      	ldr	r2, [sp, #24]
  405cf2:	2a01      	cmp	r2, #1
  405cf4:	bfac      	ite	ge
  405cf6:	189b      	addge	r3, r3, r2
  405cf8:	3301      	addlt	r3, #1
  405cfa:	461d      	mov	r5, r3
  405cfc:	f04f 0b00 	mov.w	fp, #0
  405d00:	4621      	mov	r1, r4
  405d02:	2201      	movs	r2, #1
  405d04:	4648      	mov	r0, r9
  405d06:	f001 fafb 	bl	407300 <__lshift>
  405d0a:	4641      	mov	r1, r8
  405d0c:	9008      	str	r0, [sp, #32]
  405d0e:	f001 fb4f 	bl	4073b0 <__mcmp>
  405d12:	2800      	cmp	r0, #0
  405d14:	f340 830d 	ble.w	406332 <_dtoa_r+0xb72>
  405d18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  405d1c:	9907      	ldr	r1, [sp, #28]
  405d1e:	1e6b      	subs	r3, r5, #1
  405d20:	e004      	b.n	405d2c <_dtoa_r+0x56c>
  405d22:	428b      	cmp	r3, r1
  405d24:	f000 8278 	beq.w	406218 <_dtoa_r+0xa58>
  405d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  405d2c:	2a39      	cmp	r2, #57	; 0x39
  405d2e:	f103 0501 	add.w	r5, r3, #1
  405d32:	d0f6      	beq.n	405d22 <_dtoa_r+0x562>
  405d34:	3201      	adds	r2, #1
  405d36:	701a      	strb	r2, [r3, #0]
  405d38:	4641      	mov	r1, r8
  405d3a:	4648      	mov	r0, r9
  405d3c:	f001 f956 	bl	406fec <_Bfree>
  405d40:	2e00      	cmp	r6, #0
  405d42:	f43f af08 	beq.w	405b56 <_dtoa_r+0x396>
  405d46:	f1bb 0f00 	cmp.w	fp, #0
  405d4a:	d005      	beq.n	405d58 <_dtoa_r+0x598>
  405d4c:	45b3      	cmp	fp, r6
  405d4e:	d003      	beq.n	405d58 <_dtoa_r+0x598>
  405d50:	4659      	mov	r1, fp
  405d52:	4648      	mov	r0, r9
  405d54:	f001 f94a 	bl	406fec <_Bfree>
  405d58:	4631      	mov	r1, r6
  405d5a:	4648      	mov	r0, r9
  405d5c:	f001 f946 	bl	406fec <_Bfree>
  405d60:	e6f9      	b.n	405b56 <_dtoa_r+0x396>
  405d62:	2301      	movs	r3, #1
  405d64:	930c      	str	r3, [sp, #48]	; 0x30
  405d66:	e5e3      	b.n	405930 <_dtoa_r+0x170>
  405d68:	f8dd 8010 	ldr.w	r8, [sp, #16]
  405d6c:	4640      	mov	r0, r8
  405d6e:	f7fd fc4f 	bl	403610 <__aeabi_i2d>
  405d72:	4602      	mov	r2, r0
  405d74:	460b      	mov	r3, r1
  405d76:	4630      	mov	r0, r6
  405d78:	4639      	mov	r1, r7
  405d7a:	f7fd ff17 	bl	403bac <__aeabi_dcmpeq>
  405d7e:	2800      	cmp	r0, #0
  405d80:	f47f adc2 	bne.w	405908 <_dtoa_r+0x148>
  405d84:	f108 33ff 	add.w	r3, r8, #4294967295
  405d88:	9304      	str	r3, [sp, #16]
  405d8a:	e5bd      	b.n	405908 <_dtoa_r+0x148>
  405d8c:	9a05      	ldr	r2, [sp, #20]
  405d8e:	9b04      	ldr	r3, [sp, #16]
  405d90:	1ad2      	subs	r2, r2, r3
  405d92:	425b      	negs	r3, r3
  405d94:	930a      	str	r3, [sp, #40]	; 0x28
  405d96:	2300      	movs	r3, #0
  405d98:	9205      	str	r2, [sp, #20]
  405d9a:	930b      	str	r3, [sp, #44]	; 0x2c
  405d9c:	e5da      	b.n	405954 <_dtoa_r+0x194>
  405d9e:	425b      	negs	r3, r3
  405da0:	9305      	str	r3, [sp, #20]
  405da2:	2300      	movs	r3, #0
  405da4:	9302      	str	r3, [sp, #8]
  405da6:	e5ca      	b.n	40593e <_dtoa_r+0x17e>
  405da8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405daa:	9d05      	ldr	r5, [sp, #20]
  405dac:	9e09      	ldr	r6, [sp, #36]	; 0x24
  405dae:	e705      	b.n	405bbc <_dtoa_r+0x3fc>
  405db0:	f1c3 0820 	rsb	r8, r3, #32
  405db4:	fa0a f008 	lsl.w	r0, sl, r8
  405db8:	e573      	b.n	4058a2 <_dtoa_r+0xe2>
  405dba:	900c      	str	r0, [sp, #48]	; 0x30
  405dbc:	e5b8      	b.n	405930 <_dtoa_r+0x170>
  405dbe:	bf00      	nop
  405dc0:	40240000 	.word	0x40240000
  405dc4:	2300      	movs	r3, #0
  405dc6:	9309      	str	r3, [sp, #36]	; 0x24
  405dc8:	9b04      	ldr	r3, [sp, #16]
  405dca:	9a21      	ldr	r2, [sp, #132]	; 0x84
  405dcc:	4413      	add	r3, r2
  405dce:	930d      	str	r3, [sp, #52]	; 0x34
  405dd0:	3301      	adds	r3, #1
  405dd2:	2b00      	cmp	r3, #0
  405dd4:	9306      	str	r3, [sp, #24]
  405dd6:	f340 8283 	ble.w	4062e0 <_dtoa_r+0xb20>
  405dda:	9c06      	ldr	r4, [sp, #24]
  405ddc:	4626      	mov	r6, r4
  405dde:	2100      	movs	r1, #0
  405de0:	2e17      	cmp	r6, #23
  405de2:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  405de6:	d90b      	bls.n	405e00 <_dtoa_r+0x640>
  405de8:	2201      	movs	r2, #1
  405dea:	2304      	movs	r3, #4
  405dec:	005b      	lsls	r3, r3, #1
  405dee:	f103 0014 	add.w	r0, r3, #20
  405df2:	42b0      	cmp	r0, r6
  405df4:	4611      	mov	r1, r2
  405df6:	f102 0201 	add.w	r2, r2, #1
  405dfa:	d9f7      	bls.n	405dec <_dtoa_r+0x62c>
  405dfc:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  405e00:	4648      	mov	r0, r9
  405e02:	f001 f8cd 	bl	406fa0 <_Balloc>
  405e06:	2c0e      	cmp	r4, #14
  405e08:	9007      	str	r0, [sp, #28]
  405e0a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  405e0e:	f63f ade0 	bhi.w	4059d2 <_dtoa_r+0x212>
  405e12:	2d00      	cmp	r5, #0
  405e14:	f43f addd 	beq.w	4059d2 <_dtoa_r+0x212>
  405e18:	9904      	ldr	r1, [sp, #16]
  405e1a:	4657      	mov	r7, sl
  405e1c:	46d8      	mov	r8, fp
  405e1e:	2900      	cmp	r1, #0
  405e20:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
  405e24:	f340 8292 	ble.w	40634c <_dtoa_r+0xb8c>
  405e28:	4b91      	ldr	r3, [pc, #580]	; (406070 <_dtoa_r+0x8b0>)
  405e2a:	f001 020f 	and.w	r2, r1, #15
  405e2e:	110e      	asrs	r6, r1, #4
  405e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405e34:	06f0      	lsls	r0, r6, #27
  405e36:	e9d3 4500 	ldrd	r4, r5, [r3]
  405e3a:	f140 824c 	bpl.w	4062d6 <_dtoa_r+0xb16>
  405e3e:	4b8d      	ldr	r3, [pc, #564]	; (406074 <_dtoa_r+0x8b4>)
  405e40:	4650      	mov	r0, sl
  405e42:	4659      	mov	r1, fp
  405e44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405e48:	f7fd fd72 	bl	403930 <__aeabi_ddiv>
  405e4c:	f006 060f 	and.w	r6, r6, #15
  405e50:	4682      	mov	sl, r0
  405e52:	468b      	mov	fp, r1
  405e54:	f04f 0803 	mov.w	r8, #3
  405e58:	b186      	cbz	r6, 405e7c <_dtoa_r+0x6bc>
  405e5a:	4f86      	ldr	r7, [pc, #536]	; (406074 <_dtoa_r+0x8b4>)
  405e5c:	07f1      	lsls	r1, r6, #31
  405e5e:	d509      	bpl.n	405e74 <_dtoa_r+0x6b4>
  405e60:	4620      	mov	r0, r4
  405e62:	4629      	mov	r1, r5
  405e64:	e9d7 2300 	ldrd	r2, r3, [r7]
  405e68:	f7fd fc38 	bl	4036dc <__aeabi_dmul>
  405e6c:	f108 0801 	add.w	r8, r8, #1
  405e70:	4604      	mov	r4, r0
  405e72:	460d      	mov	r5, r1
  405e74:	1076      	asrs	r6, r6, #1
  405e76:	f107 0708 	add.w	r7, r7, #8
  405e7a:	d1ef      	bne.n	405e5c <_dtoa_r+0x69c>
  405e7c:	4622      	mov	r2, r4
  405e7e:	462b      	mov	r3, r5
  405e80:	4650      	mov	r0, sl
  405e82:	4659      	mov	r1, fp
  405e84:	f7fd fd54 	bl	403930 <__aeabi_ddiv>
  405e88:	4606      	mov	r6, r0
  405e8a:	460f      	mov	r7, r1
  405e8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405e8e:	b143      	cbz	r3, 405ea2 <_dtoa_r+0x6e2>
  405e90:	2200      	movs	r2, #0
  405e92:	4b79      	ldr	r3, [pc, #484]	; (406078 <_dtoa_r+0x8b8>)
  405e94:	4630      	mov	r0, r6
  405e96:	4639      	mov	r1, r7
  405e98:	f7fd fe92 	bl	403bc0 <__aeabi_dcmplt>
  405e9c:	2800      	cmp	r0, #0
  405e9e:	f040 8320 	bne.w	4064e2 <_dtoa_r+0xd22>
  405ea2:	4640      	mov	r0, r8
  405ea4:	f7fd fbb4 	bl	403610 <__aeabi_i2d>
  405ea8:	4632      	mov	r2, r6
  405eaa:	463b      	mov	r3, r7
  405eac:	f7fd fc16 	bl	4036dc <__aeabi_dmul>
  405eb0:	4b72      	ldr	r3, [pc, #456]	; (40607c <_dtoa_r+0x8bc>)
  405eb2:	2200      	movs	r2, #0
  405eb4:	f7fd fa60 	bl	403378 <__adddf3>
  405eb8:	9b06      	ldr	r3, [sp, #24]
  405eba:	4604      	mov	r4, r0
  405ebc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  405ec0:	2b00      	cmp	r3, #0
  405ec2:	f000 81df 	beq.w	406284 <_dtoa_r+0xac4>
  405ec6:	9b04      	ldr	r3, [sp, #16]
  405ec8:	f8dd 8018 	ldr.w	r8, [sp, #24]
  405ecc:	9311      	str	r3, [sp, #68]	; 0x44
  405ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405ed0:	2b00      	cmp	r3, #0
  405ed2:	f000 8297 	beq.w	406404 <_dtoa_r+0xc44>
  405ed6:	4b66      	ldr	r3, [pc, #408]	; (406070 <_dtoa_r+0x8b0>)
  405ed8:	4969      	ldr	r1, [pc, #420]	; (406080 <_dtoa_r+0x8c0>)
  405eda:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
  405ede:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405ee2:	2000      	movs	r0, #0
  405ee4:	f7fd fd24 	bl	403930 <__aeabi_ddiv>
  405ee8:	4622      	mov	r2, r4
  405eea:	462b      	mov	r3, r5
  405eec:	f7fd fa42 	bl	403374 <__aeabi_dsub>
  405ef0:	4682      	mov	sl, r0
  405ef2:	468b      	mov	fp, r1
  405ef4:	4630      	mov	r0, r6
  405ef6:	4639      	mov	r1, r7
  405ef8:	f7fd fea0 	bl	403c3c <__aeabi_d2iz>
  405efc:	4604      	mov	r4, r0
  405efe:	f7fd fb87 	bl	403610 <__aeabi_i2d>
  405f02:	4602      	mov	r2, r0
  405f04:	460b      	mov	r3, r1
  405f06:	4630      	mov	r0, r6
  405f08:	4639      	mov	r1, r7
  405f0a:	f7fd fa33 	bl	403374 <__aeabi_dsub>
  405f0e:	3430      	adds	r4, #48	; 0x30
  405f10:	9d07      	ldr	r5, [sp, #28]
  405f12:	b2e4      	uxtb	r4, r4
  405f14:	4606      	mov	r6, r0
  405f16:	460f      	mov	r7, r1
  405f18:	702c      	strb	r4, [r5, #0]
  405f1a:	4602      	mov	r2, r0
  405f1c:	460b      	mov	r3, r1
  405f1e:	4650      	mov	r0, sl
  405f20:	4659      	mov	r1, fp
  405f22:	3501      	adds	r5, #1
  405f24:	f7fd fe6a 	bl	403bfc <__aeabi_dcmpgt>
  405f28:	2800      	cmp	r0, #0
  405f2a:	d14c      	bne.n	405fc6 <_dtoa_r+0x806>
  405f2c:	4632      	mov	r2, r6
  405f2e:	463b      	mov	r3, r7
  405f30:	2000      	movs	r0, #0
  405f32:	4951      	ldr	r1, [pc, #324]	; (406078 <_dtoa_r+0x8b8>)
  405f34:	f7fd fa1e 	bl	403374 <__aeabi_dsub>
  405f38:	4602      	mov	r2, r0
  405f3a:	460b      	mov	r3, r1
  405f3c:	4650      	mov	r0, sl
  405f3e:	4659      	mov	r1, fp
  405f40:	f7fd fe5c 	bl	403bfc <__aeabi_dcmpgt>
  405f44:	2800      	cmp	r0, #0
  405f46:	f040 830d 	bne.w	406564 <_dtoa_r+0xda4>
  405f4a:	f1b8 0f01 	cmp.w	r8, #1
  405f4e:	f340 81b3 	ble.w	4062b8 <_dtoa_r+0xaf8>
  405f52:	9b07      	ldr	r3, [sp, #28]
  405f54:	4498      	add	r8, r3
  405f56:	e00d      	b.n	405f74 <_dtoa_r+0x7b4>
  405f58:	2000      	movs	r0, #0
  405f5a:	4947      	ldr	r1, [pc, #284]	; (406078 <_dtoa_r+0x8b8>)
  405f5c:	f7fd fa0a 	bl	403374 <__aeabi_dsub>
  405f60:	4652      	mov	r2, sl
  405f62:	465b      	mov	r3, fp
  405f64:	f7fd fe2c 	bl	403bc0 <__aeabi_dcmplt>
  405f68:	2800      	cmp	r0, #0
  405f6a:	f040 82fb 	bne.w	406564 <_dtoa_r+0xda4>
  405f6e:	4545      	cmp	r5, r8
  405f70:	f000 81a2 	beq.w	4062b8 <_dtoa_r+0xaf8>
  405f74:	4650      	mov	r0, sl
  405f76:	4659      	mov	r1, fp
  405f78:	2200      	movs	r2, #0
  405f7a:	4b42      	ldr	r3, [pc, #264]	; (406084 <_dtoa_r+0x8c4>)
  405f7c:	f7fd fbae 	bl	4036dc <__aeabi_dmul>
  405f80:	2200      	movs	r2, #0
  405f82:	4b40      	ldr	r3, [pc, #256]	; (406084 <_dtoa_r+0x8c4>)
  405f84:	4682      	mov	sl, r0
  405f86:	468b      	mov	fp, r1
  405f88:	4630      	mov	r0, r6
  405f8a:	4639      	mov	r1, r7
  405f8c:	f7fd fba6 	bl	4036dc <__aeabi_dmul>
  405f90:	460f      	mov	r7, r1
  405f92:	4606      	mov	r6, r0
  405f94:	f7fd fe52 	bl	403c3c <__aeabi_d2iz>
  405f98:	4604      	mov	r4, r0
  405f9a:	f7fd fb39 	bl	403610 <__aeabi_i2d>
  405f9e:	4602      	mov	r2, r0
  405fa0:	460b      	mov	r3, r1
  405fa2:	4630      	mov	r0, r6
  405fa4:	4639      	mov	r1, r7
  405fa6:	f7fd f9e5 	bl	403374 <__aeabi_dsub>
  405faa:	3430      	adds	r4, #48	; 0x30
  405fac:	b2e4      	uxtb	r4, r4
  405fae:	4652      	mov	r2, sl
  405fb0:	465b      	mov	r3, fp
  405fb2:	f805 4b01 	strb.w	r4, [r5], #1
  405fb6:	4606      	mov	r6, r0
  405fb8:	460f      	mov	r7, r1
  405fba:	f7fd fe01 	bl	403bc0 <__aeabi_dcmplt>
  405fbe:	4632      	mov	r2, r6
  405fc0:	463b      	mov	r3, r7
  405fc2:	2800      	cmp	r0, #0
  405fc4:	d0c8      	beq.n	405f58 <_dtoa_r+0x798>
  405fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405fc8:	9304      	str	r3, [sp, #16]
  405fca:	e5c4      	b.n	405b56 <_dtoa_r+0x396>
  405fcc:	2300      	movs	r3, #0
  405fce:	9309      	str	r3, [sp, #36]	; 0x24
  405fd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  405fd2:	2b00      	cmp	r3, #0
  405fd4:	f340 8189 	ble.w	4062ea <_dtoa_r+0xb2a>
  405fd8:	461e      	mov	r6, r3
  405fda:	461c      	mov	r4, r3
  405fdc:	930d      	str	r3, [sp, #52]	; 0x34
  405fde:	9306      	str	r3, [sp, #24]
  405fe0:	e6fd      	b.n	405dde <_dtoa_r+0x61e>
  405fe2:	2301      	movs	r3, #1
  405fe4:	9309      	str	r3, [sp, #36]	; 0x24
  405fe6:	e7f3      	b.n	405fd0 <_dtoa_r+0x810>
  405fe8:	9408      	str	r4, [sp, #32]
  405fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405fec:	9908      	ldr	r1, [sp, #32]
  405fee:	4648      	mov	r0, r9
  405ff0:	f001 f936 	bl	407260 <__pow5mult>
  405ff4:	4604      	mov	r4, r0
  405ff6:	e611      	b.n	405c1c <_dtoa_r+0x45c>
  405ff8:	9b06      	ldr	r3, [sp, #24]
  405ffa:	2b00      	cmp	r3, #0
  405ffc:	f73f acfc 	bgt.w	4059f8 <_dtoa_r+0x238>
  406000:	f040 82da 	bne.w	4065b8 <_dtoa_r+0xdf8>
  406004:	2200      	movs	r2, #0
  406006:	4b20      	ldr	r3, [pc, #128]	; (406088 <_dtoa_r+0x8c8>)
  406008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  40600c:	f7fd fb66 	bl	4036dc <__aeabi_dmul>
  406010:	4652      	mov	r2, sl
  406012:	465b      	mov	r3, fp
  406014:	f7fd fde8 	bl	403be8 <__aeabi_dcmpge>
  406018:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40601c:	4646      	mov	r6, r8
  40601e:	2800      	cmp	r0, #0
  406020:	f000 80f2 	beq.w	406208 <_dtoa_r+0xa48>
  406024:	9b21      	ldr	r3, [sp, #132]	; 0x84
  406026:	9d07      	ldr	r5, [sp, #28]
  406028:	43db      	mvns	r3, r3
  40602a:	9304      	str	r3, [sp, #16]
  40602c:	4641      	mov	r1, r8
  40602e:	4648      	mov	r0, r9
  406030:	f000 ffdc 	bl	406fec <_Bfree>
  406034:	2e00      	cmp	r6, #0
  406036:	f43f ad8e 	beq.w	405b56 <_dtoa_r+0x396>
  40603a:	e68d      	b.n	405d58 <_dtoa_r+0x598>
  40603c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40603e:	2a00      	cmp	r2, #0
  406040:	f000 8241 	beq.w	4064c6 <_dtoa_r+0xd06>
  406044:	f203 4333 	addw	r3, r3, #1075	; 0x433
  406048:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40604a:	9d05      	ldr	r5, [sp, #20]
  40604c:	e5ab      	b.n	405ba6 <_dtoa_r+0x3e6>
  40604e:	201c      	movs	r0, #28
  406050:	9b05      	ldr	r3, [sp, #20]
  406052:	4403      	add	r3, r0
  406054:	9305      	str	r3, [sp, #20]
  406056:	9b02      	ldr	r3, [sp, #8]
  406058:	4403      	add	r3, r0
  40605a:	4405      	add	r5, r0
  40605c:	9302      	str	r3, [sp, #8]
  40605e:	e60e      	b.n	405c7e <_dtoa_r+0x4be>
  406060:	9b20      	ldr	r3, [sp, #128]	; 0x80
  406062:	2b01      	cmp	r3, #1
  406064:	f340 8282 	ble.w	40656c <_dtoa_r+0xdac>
  406068:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  40606a:	2001      	movs	r0, #1
  40606c:	e5f3      	b.n	405c56 <_dtoa_r+0x496>
  40606e:	bf00      	nop
  406070:	00408298 	.word	0x00408298
  406074:	00408360 	.word	0x00408360
  406078:	3ff00000 	.word	0x3ff00000
  40607c:	401c0000 	.word	0x401c0000
  406080:	3fe00000 	.word	0x3fe00000
  406084:	40240000 	.word	0x40240000
  406088:	40140000 	.word	0x40140000
  40608c:	4631      	mov	r1, r6
  40608e:	2300      	movs	r3, #0
  406090:	220a      	movs	r2, #10
  406092:	4648      	mov	r0, r9
  406094:	f000 ffb4 	bl	407000 <__multadd>
  406098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40609a:	2b00      	cmp	r3, #0
  40609c:	4606      	mov	r6, r0
  40609e:	f340 8297 	ble.w	4065d0 <_dtoa_r+0xe10>
  4060a2:	9306      	str	r3, [sp, #24]
  4060a4:	2d00      	cmp	r5, #0
  4060a6:	dd05      	ble.n	4060b4 <_dtoa_r+0x8f4>
  4060a8:	4631      	mov	r1, r6
  4060aa:	462a      	mov	r2, r5
  4060ac:	4648      	mov	r0, r9
  4060ae:	f001 f927 	bl	407300 <__lshift>
  4060b2:	4606      	mov	r6, r0
  4060b4:	2f00      	cmp	r7, #0
  4060b6:	f040 817c 	bne.w	4063b2 <_dtoa_r+0xbf2>
  4060ba:	9605      	str	r6, [sp, #20]
  4060bc:	9b06      	ldr	r3, [sp, #24]
  4060be:	9a07      	ldr	r2, [sp, #28]
  4060c0:	f8dd b014 	ldr.w	fp, [sp, #20]
  4060c4:	3b01      	subs	r3, #1
  4060c6:	18d3      	adds	r3, r2, r3
  4060c8:	9308      	str	r3, [sp, #32]
  4060ca:	f00a 0301 	and.w	r3, sl, #1
  4060ce:	9309      	str	r3, [sp, #36]	; 0x24
  4060d0:	4617      	mov	r7, r2
  4060d2:	46c2      	mov	sl, r8
  4060d4:	4651      	mov	r1, sl
  4060d6:	4620      	mov	r0, r4
  4060d8:	f7ff fade 	bl	405698 <quorem>
  4060dc:	4631      	mov	r1, r6
  4060de:	4605      	mov	r5, r0
  4060e0:	4620      	mov	r0, r4
  4060e2:	f001 f965 	bl	4073b0 <__mcmp>
  4060e6:	465a      	mov	r2, fp
  4060e8:	9002      	str	r0, [sp, #8]
  4060ea:	4651      	mov	r1, sl
  4060ec:	4648      	mov	r0, r9
  4060ee:	f001 f97f 	bl	4073f0 <__mdiff>
  4060f2:	68c2      	ldr	r2, [r0, #12]
  4060f4:	4680      	mov	r8, r0
  4060f6:	f105 0330 	add.w	r3, r5, #48	; 0x30
  4060fa:	2a00      	cmp	r2, #0
  4060fc:	d149      	bne.n	406192 <_dtoa_r+0x9d2>
  4060fe:	4601      	mov	r1, r0
  406100:	4620      	mov	r0, r4
  406102:	9306      	str	r3, [sp, #24]
  406104:	f001 f954 	bl	4073b0 <__mcmp>
  406108:	4641      	mov	r1, r8
  40610a:	9005      	str	r0, [sp, #20]
  40610c:	4648      	mov	r0, r9
  40610e:	f000 ff6d 	bl	406fec <_Bfree>
  406112:	9a05      	ldr	r2, [sp, #20]
  406114:	9b06      	ldr	r3, [sp, #24]
  406116:	b92a      	cbnz	r2, 406124 <_dtoa_r+0x964>
  406118:	9920      	ldr	r1, [sp, #128]	; 0x80
  40611a:	b919      	cbnz	r1, 406124 <_dtoa_r+0x964>
  40611c:	9909      	ldr	r1, [sp, #36]	; 0x24
  40611e:	2900      	cmp	r1, #0
  406120:	f000 8236 	beq.w	406590 <_dtoa_r+0xdd0>
  406124:	9902      	ldr	r1, [sp, #8]
  406126:	2900      	cmp	r1, #0
  406128:	f2c0 80e4 	blt.w	4062f4 <_dtoa_r+0xb34>
  40612c:	d105      	bne.n	40613a <_dtoa_r+0x97a>
  40612e:	9920      	ldr	r1, [sp, #128]	; 0x80
  406130:	b919      	cbnz	r1, 40613a <_dtoa_r+0x97a>
  406132:	9909      	ldr	r1, [sp, #36]	; 0x24
  406134:	2900      	cmp	r1, #0
  406136:	f000 80dd 	beq.w	4062f4 <_dtoa_r+0xb34>
  40613a:	2a00      	cmp	r2, #0
  40613c:	f300 814d 	bgt.w	4063da <_dtoa_r+0xc1a>
  406140:	9a08      	ldr	r2, [sp, #32]
  406142:	703b      	strb	r3, [r7, #0]
  406144:	f107 0801 	add.w	r8, r7, #1
  406148:	4297      	cmp	r7, r2
  40614a:	4645      	mov	r5, r8
  40614c:	f000 8154 	beq.w	4063f8 <_dtoa_r+0xc38>
  406150:	4621      	mov	r1, r4
  406152:	2300      	movs	r3, #0
  406154:	220a      	movs	r2, #10
  406156:	4648      	mov	r0, r9
  406158:	f000 ff52 	bl	407000 <__multadd>
  40615c:	455e      	cmp	r6, fp
  40615e:	4604      	mov	r4, r0
  406160:	4631      	mov	r1, r6
  406162:	f04f 0300 	mov.w	r3, #0
  406166:	f04f 020a 	mov.w	r2, #10
  40616a:	4648      	mov	r0, r9
  40616c:	d00b      	beq.n	406186 <_dtoa_r+0x9c6>
  40616e:	f000 ff47 	bl	407000 <__multadd>
  406172:	4659      	mov	r1, fp
  406174:	4606      	mov	r6, r0
  406176:	2300      	movs	r3, #0
  406178:	220a      	movs	r2, #10
  40617a:	4648      	mov	r0, r9
  40617c:	f000 ff40 	bl	407000 <__multadd>
  406180:	4647      	mov	r7, r8
  406182:	4683      	mov	fp, r0
  406184:	e7a6      	b.n	4060d4 <_dtoa_r+0x914>
  406186:	f000 ff3b 	bl	407000 <__multadd>
  40618a:	4647      	mov	r7, r8
  40618c:	4606      	mov	r6, r0
  40618e:	4683      	mov	fp, r0
  406190:	e7a0      	b.n	4060d4 <_dtoa_r+0x914>
  406192:	4601      	mov	r1, r0
  406194:	4648      	mov	r0, r9
  406196:	9305      	str	r3, [sp, #20]
  406198:	f000 ff28 	bl	406fec <_Bfree>
  40619c:	2201      	movs	r2, #1
  40619e:	9b05      	ldr	r3, [sp, #20]
  4061a0:	e7c0      	b.n	406124 <_dtoa_r+0x964>
  4061a2:	4641      	mov	r1, r8
  4061a4:	4620      	mov	r0, r4
  4061a6:	f001 f903 	bl	4073b0 <__mcmp>
  4061aa:	2800      	cmp	r0, #0
  4061ac:	f6bf ad7d 	bge.w	405caa <_dtoa_r+0x4ea>
  4061b0:	4621      	mov	r1, r4
  4061b2:	9c04      	ldr	r4, [sp, #16]
  4061b4:	2300      	movs	r3, #0
  4061b6:	3c01      	subs	r4, #1
  4061b8:	220a      	movs	r2, #10
  4061ba:	4648      	mov	r0, r9
  4061bc:	9404      	str	r4, [sp, #16]
  4061be:	f000 ff1f 	bl	407000 <__multadd>
  4061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4061c4:	4604      	mov	r4, r0
  4061c6:	2b00      	cmp	r3, #0
  4061c8:	f47f af60 	bne.w	40608c <_dtoa_r+0x8cc>
  4061cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4061ce:	2b00      	cmp	r3, #0
  4061d0:	f340 81f6 	ble.w	4065c0 <_dtoa_r+0xe00>
  4061d4:	9306      	str	r3, [sp, #24]
  4061d6:	e570      	b.n	405cba <_dtoa_r+0x4fa>
  4061d8:	9c08      	ldr	r4, [sp, #32]
  4061da:	e51f      	b.n	405c1c <_dtoa_r+0x45c>
  4061dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4061de:	2b02      	cmp	r3, #2
  4061e0:	f77f ad67 	ble.w	405cb2 <_dtoa_r+0x4f2>
  4061e4:	9b06      	ldr	r3, [sp, #24]
  4061e6:	2b00      	cmp	r3, #0
  4061e8:	f040 8179 	bne.w	4064de <_dtoa_r+0xd1e>
  4061ec:	4641      	mov	r1, r8
  4061ee:	2205      	movs	r2, #5
  4061f0:	4648      	mov	r0, r9
  4061f2:	f000 ff05 	bl	407000 <__multadd>
  4061f6:	4601      	mov	r1, r0
  4061f8:	4680      	mov	r8, r0
  4061fa:	4620      	mov	r0, r4
  4061fc:	f001 f8d8 	bl	4073b0 <__mcmp>
  406200:	2800      	cmp	r0, #0
  406202:	9408      	str	r4, [sp, #32]
  406204:	f77f af0e 	ble.w	406024 <_dtoa_r+0x864>
  406208:	9a04      	ldr	r2, [sp, #16]
  40620a:	9907      	ldr	r1, [sp, #28]
  40620c:	2331      	movs	r3, #49	; 0x31
  40620e:	3201      	adds	r2, #1
  406210:	9204      	str	r2, [sp, #16]
  406212:	700b      	strb	r3, [r1, #0]
  406214:	1c4d      	adds	r5, r1, #1
  406216:	e709      	b.n	40602c <_dtoa_r+0x86c>
  406218:	9a04      	ldr	r2, [sp, #16]
  40621a:	3201      	adds	r2, #1
  40621c:	9204      	str	r2, [sp, #16]
  40621e:	9a07      	ldr	r2, [sp, #28]
  406220:	2331      	movs	r3, #49	; 0x31
  406222:	7013      	strb	r3, [r2, #0]
  406224:	e588      	b.n	405d38 <_dtoa_r+0x578>
  406226:	2301      	movs	r3, #1
  406228:	9309      	str	r3, [sp, #36]	; 0x24
  40622a:	e5cd      	b.n	405dc8 <_dtoa_r+0x608>
  40622c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  406230:	e491      	b.n	405b56 <_dtoa_r+0x396>
  406232:	f1ba 0f00 	cmp.w	sl, #0
  406236:	f47f ad04 	bne.w	405c42 <_dtoa_r+0x482>
  40623a:	f3cb 0313 	ubfx	r3, fp, #0, #20
  40623e:	2b00      	cmp	r3, #0
  406240:	f040 813f 	bne.w	4064c2 <_dtoa_r+0xd02>
  406244:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  406248:	0d3f      	lsrs	r7, r7, #20
  40624a:	053f      	lsls	r7, r7, #20
  40624c:	b137      	cbz	r7, 40625c <_dtoa_r+0xa9c>
  40624e:	9b05      	ldr	r3, [sp, #20]
  406250:	3301      	adds	r3, #1
  406252:	9305      	str	r3, [sp, #20]
  406254:	9b02      	ldr	r3, [sp, #8]
  406256:	3301      	adds	r3, #1
  406258:	9302      	str	r3, [sp, #8]
  40625a:	2701      	movs	r7, #1
  40625c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40625e:	2001      	movs	r0, #1
  406260:	2b00      	cmp	r3, #0
  406262:	f43f acf8 	beq.w	405c56 <_dtoa_r+0x496>
  406266:	e4ed      	b.n	405c44 <_dtoa_r+0x484>
  406268:	4640      	mov	r0, r8
  40626a:	f7fd f9d1 	bl	403610 <__aeabi_i2d>
  40626e:	4632      	mov	r2, r6
  406270:	463b      	mov	r3, r7
  406272:	f7fd fa33 	bl	4036dc <__aeabi_dmul>
  406276:	2200      	movs	r2, #0
  406278:	4bbf      	ldr	r3, [pc, #764]	; (406578 <_dtoa_r+0xdb8>)
  40627a:	f7fd f87d 	bl	403378 <__adddf3>
  40627e:	4604      	mov	r4, r0
  406280:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406284:	4630      	mov	r0, r6
  406286:	4639      	mov	r1, r7
  406288:	2200      	movs	r2, #0
  40628a:	4bbc      	ldr	r3, [pc, #752]	; (40657c <_dtoa_r+0xdbc>)
  40628c:	f7fd f872 	bl	403374 <__aeabi_dsub>
  406290:	4622      	mov	r2, r4
  406292:	462b      	mov	r3, r5
  406294:	4606      	mov	r6, r0
  406296:	460f      	mov	r7, r1
  406298:	f7fd fcb0 	bl	403bfc <__aeabi_dcmpgt>
  40629c:	4680      	mov	r8, r0
  40629e:	2800      	cmp	r0, #0
  4062a0:	f040 8105 	bne.w	4064ae <_dtoa_r+0xcee>
  4062a4:	4622      	mov	r2, r4
  4062a6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
  4062aa:	4630      	mov	r0, r6
  4062ac:	4639      	mov	r1, r7
  4062ae:	f7fd fc87 	bl	403bc0 <__aeabi_dcmplt>
  4062b2:	b108      	cbz	r0, 4062b8 <_dtoa_r+0xaf8>
  4062b4:	4646      	mov	r6, r8
  4062b6:	e6b5      	b.n	406024 <_dtoa_r+0x864>
  4062b8:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4062bc:	f7ff bb89 	b.w	4059d2 <_dtoa_r+0x212>
  4062c0:	9807      	ldr	r0, [sp, #28]
  4062c2:	f7ff baae 	b.w	405822 <_dtoa_r+0x62>
  4062c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4062c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4062ca:	970a      	str	r7, [sp, #40]	; 0x28
  4062cc:	1afb      	subs	r3, r7, r3
  4062ce:	441a      	add	r2, r3
  4062d0:	920b      	str	r2, [sp, #44]	; 0x2c
  4062d2:	2700      	movs	r7, #0
  4062d4:	e461      	b.n	405b9a <_dtoa_r+0x3da>
  4062d6:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
  4062da:	f04f 0802 	mov.w	r8, #2
  4062de:	e5bb      	b.n	405e58 <_dtoa_r+0x698>
  4062e0:	461c      	mov	r4, r3
  4062e2:	2100      	movs	r1, #0
  4062e4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
  4062e8:	e58a      	b.n	405e00 <_dtoa_r+0x640>
  4062ea:	2401      	movs	r4, #1
  4062ec:	9421      	str	r4, [sp, #132]	; 0x84
  4062ee:	940d      	str	r4, [sp, #52]	; 0x34
  4062f0:	9406      	str	r4, [sp, #24]
  4062f2:	e7f6      	b.n	4062e2 <_dtoa_r+0xb22>
  4062f4:	2a00      	cmp	r2, #0
  4062f6:	46d0      	mov	r8, sl
  4062f8:	f8cd b014 	str.w	fp, [sp, #20]
  4062fc:	469a      	mov	sl, r3
  4062fe:	dd11      	ble.n	406324 <_dtoa_r+0xb64>
  406300:	4621      	mov	r1, r4
  406302:	2201      	movs	r2, #1
  406304:	4648      	mov	r0, r9
  406306:	f000 fffb 	bl	407300 <__lshift>
  40630a:	4641      	mov	r1, r8
  40630c:	4604      	mov	r4, r0
  40630e:	f001 f84f 	bl	4073b0 <__mcmp>
  406312:	2800      	cmp	r0, #0
  406314:	f340 8149 	ble.w	4065aa <_dtoa_r+0xdea>
  406318:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40631c:	f000 8106 	beq.w	40652c <_dtoa_r+0xd6c>
  406320:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  406324:	46b3      	mov	fp, r6
  406326:	f887 a000 	strb.w	sl, [r7]
  40632a:	1c7d      	adds	r5, r7, #1
  40632c:	9e05      	ldr	r6, [sp, #20]
  40632e:	9408      	str	r4, [sp, #32]
  406330:	e502      	b.n	405d38 <_dtoa_r+0x578>
  406332:	d104      	bne.n	40633e <_dtoa_r+0xb7e>
  406334:	f01a 0f01 	tst.w	sl, #1
  406338:	d001      	beq.n	40633e <_dtoa_r+0xb7e>
  40633a:	e4ed      	b.n	405d18 <_dtoa_r+0x558>
  40633c:	4615      	mov	r5, r2
  40633e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  406342:	2b30      	cmp	r3, #48	; 0x30
  406344:	f105 32ff 	add.w	r2, r5, #4294967295
  406348:	d0f8      	beq.n	40633c <_dtoa_r+0xb7c>
  40634a:	e4f5      	b.n	405d38 <_dtoa_r+0x578>
  40634c:	9b04      	ldr	r3, [sp, #16]
  40634e:	425c      	negs	r4, r3
  406350:	2c00      	cmp	r4, #0
  406352:	f000 80bf 	beq.w	4064d4 <_dtoa_r+0xd14>
  406356:	4b8a      	ldr	r3, [pc, #552]	; (406580 <_dtoa_r+0xdc0>)
  406358:	f004 020f 	and.w	r2, r4, #15
  40635c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406360:	e9d3 2300 	ldrd	r2, r3, [r3]
  406364:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
  406368:	f7fd f9b8 	bl	4036dc <__aeabi_dmul>
  40636c:	1124      	asrs	r4, r4, #4
  40636e:	4606      	mov	r6, r0
  406370:	460f      	mov	r7, r1
  406372:	f000 812a 	beq.w	4065ca <_dtoa_r+0xe0a>
  406376:	4d83      	ldr	r5, [pc, #524]	; (406584 <_dtoa_r+0xdc4>)
  406378:	f04f 0802 	mov.w	r8, #2
  40637c:	07e2      	lsls	r2, r4, #31
  40637e:	d509      	bpl.n	406394 <_dtoa_r+0xbd4>
  406380:	4630      	mov	r0, r6
  406382:	4639      	mov	r1, r7
  406384:	e9d5 2300 	ldrd	r2, r3, [r5]
  406388:	f7fd f9a8 	bl	4036dc <__aeabi_dmul>
  40638c:	f108 0801 	add.w	r8, r8, #1
  406390:	4606      	mov	r6, r0
  406392:	460f      	mov	r7, r1
  406394:	1064      	asrs	r4, r4, #1
  406396:	f105 0508 	add.w	r5, r5, #8
  40639a:	d1ef      	bne.n	40637c <_dtoa_r+0xbbc>
  40639c:	e576      	b.n	405e8c <_dtoa_r+0x6cc>
  40639e:	9907      	ldr	r1, [sp, #28]
  4063a0:	2230      	movs	r2, #48	; 0x30
  4063a2:	700a      	strb	r2, [r1, #0]
  4063a4:	9a04      	ldr	r2, [sp, #16]
  4063a6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4063aa:	3201      	adds	r2, #1
  4063ac:	9204      	str	r2, [sp, #16]
  4063ae:	f7ff bbd0 	b.w	405b52 <_dtoa_r+0x392>
  4063b2:	6871      	ldr	r1, [r6, #4]
  4063b4:	4648      	mov	r0, r9
  4063b6:	f000 fdf3 	bl	406fa0 <_Balloc>
  4063ba:	6933      	ldr	r3, [r6, #16]
  4063bc:	1c9a      	adds	r2, r3, #2
  4063be:	4605      	mov	r5, r0
  4063c0:	0092      	lsls	r2, r2, #2
  4063c2:	f106 010c 	add.w	r1, r6, #12
  4063c6:	300c      	adds	r0, #12
  4063c8:	f7fd fc88 	bl	403cdc <memcpy>
  4063cc:	4629      	mov	r1, r5
  4063ce:	2201      	movs	r2, #1
  4063d0:	4648      	mov	r0, r9
  4063d2:	f000 ff95 	bl	407300 <__lshift>
  4063d6:	9005      	str	r0, [sp, #20]
  4063d8:	e670      	b.n	4060bc <_dtoa_r+0x8fc>
  4063da:	2b39      	cmp	r3, #57	; 0x39
  4063dc:	f8cd b014 	str.w	fp, [sp, #20]
  4063e0:	46d0      	mov	r8, sl
  4063e2:	f000 80a3 	beq.w	40652c <_dtoa_r+0xd6c>
  4063e6:	f103 0a01 	add.w	sl, r3, #1
  4063ea:	46b3      	mov	fp, r6
  4063ec:	f887 a000 	strb.w	sl, [r7]
  4063f0:	1c7d      	adds	r5, r7, #1
  4063f2:	9e05      	ldr	r6, [sp, #20]
  4063f4:	9408      	str	r4, [sp, #32]
  4063f6:	e49f      	b.n	405d38 <_dtoa_r+0x578>
  4063f8:	465a      	mov	r2, fp
  4063fa:	46d0      	mov	r8, sl
  4063fc:	46b3      	mov	fp, r6
  4063fe:	469a      	mov	sl, r3
  406400:	4616      	mov	r6, r2
  406402:	e47d      	b.n	405d00 <_dtoa_r+0x540>
  406404:	495e      	ldr	r1, [pc, #376]	; (406580 <_dtoa_r+0xdc0>)
  406406:	f108 3aff 	add.w	sl, r8, #4294967295
  40640a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
  40640e:	4622      	mov	r2, r4
  406410:	462b      	mov	r3, r5
  406412:	e9d1 0100 	ldrd	r0, r1, [r1]
  406416:	f7fd f961 	bl	4036dc <__aeabi_dmul>
  40641a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40641e:	4639      	mov	r1, r7
  406420:	4630      	mov	r0, r6
  406422:	f7fd fc0b 	bl	403c3c <__aeabi_d2iz>
  406426:	4604      	mov	r4, r0
  406428:	f7fd f8f2 	bl	403610 <__aeabi_i2d>
  40642c:	4602      	mov	r2, r0
  40642e:	460b      	mov	r3, r1
  406430:	4630      	mov	r0, r6
  406432:	4639      	mov	r1, r7
  406434:	f7fc ff9e 	bl	403374 <__aeabi_dsub>
  406438:	9a07      	ldr	r2, [sp, #28]
  40643a:	3430      	adds	r4, #48	; 0x30
  40643c:	f1b8 0f01 	cmp.w	r8, #1
  406440:	4606      	mov	r6, r0
  406442:	460f      	mov	r7, r1
  406444:	7014      	strb	r4, [r2, #0]
  406446:	f102 0501 	add.w	r5, r2, #1
  40644a:	d01e      	beq.n	40648a <_dtoa_r+0xcca>
  40644c:	9b07      	ldr	r3, [sp, #28]
  40644e:	eb03 0b08 	add.w	fp, r3, r8
  406452:	46a8      	mov	r8, r5
  406454:	2200      	movs	r2, #0
  406456:	4b4c      	ldr	r3, [pc, #304]	; (406588 <_dtoa_r+0xdc8>)
  406458:	4630      	mov	r0, r6
  40645a:	4639      	mov	r1, r7
  40645c:	f7fd f93e 	bl	4036dc <__aeabi_dmul>
  406460:	460f      	mov	r7, r1
  406462:	4606      	mov	r6, r0
  406464:	f7fd fbea 	bl	403c3c <__aeabi_d2iz>
  406468:	4604      	mov	r4, r0
  40646a:	f7fd f8d1 	bl	403610 <__aeabi_i2d>
  40646e:	3430      	adds	r4, #48	; 0x30
  406470:	4602      	mov	r2, r0
  406472:	460b      	mov	r3, r1
  406474:	4630      	mov	r0, r6
  406476:	4639      	mov	r1, r7
  406478:	f7fc ff7c 	bl	403374 <__aeabi_dsub>
  40647c:	f808 4b01 	strb.w	r4, [r8], #1
  406480:	45c3      	cmp	fp, r8
  406482:	4606      	mov	r6, r0
  406484:	460f      	mov	r7, r1
  406486:	d1e5      	bne.n	406454 <_dtoa_r+0xc94>
  406488:	4455      	add	r5, sl
  40648a:	2200      	movs	r2, #0
  40648c:	4b3f      	ldr	r3, [pc, #252]	; (40658c <_dtoa_r+0xdcc>)
  40648e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  406492:	f7fc ff71 	bl	403378 <__adddf3>
  406496:	4632      	mov	r2, r6
  406498:	463b      	mov	r3, r7
  40649a:	f7fd fb91 	bl	403bc0 <__aeabi_dcmplt>
  40649e:	2800      	cmp	r0, #0
  4064a0:	d04c      	beq.n	40653c <_dtoa_r+0xd7c>
  4064a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4064a4:	9304      	str	r3, [sp, #16]
  4064a6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
  4064aa:	f7ff bb46 	b.w	405b3a <_dtoa_r+0x37a>
  4064ae:	f04f 0800 	mov.w	r8, #0
  4064b2:	4646      	mov	r6, r8
  4064b4:	e6a8      	b.n	406208 <_dtoa_r+0xa48>
  4064b6:	9b05      	ldr	r3, [sp, #20]
  4064b8:	9a06      	ldr	r2, [sp, #24]
  4064ba:	1a9d      	subs	r5, r3, r2
  4064bc:	2300      	movs	r3, #0
  4064be:	f7ff bb72 	b.w	405ba6 <_dtoa_r+0x3e6>
  4064c2:	2700      	movs	r7, #0
  4064c4:	e6ca      	b.n	40625c <_dtoa_r+0xa9c>
  4064c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4064c8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4064ca:	9d05      	ldr	r5, [sp, #20]
  4064cc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4064d0:	f7ff bb69 	b.w	405ba6 <_dtoa_r+0x3e6>
  4064d4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
  4064d8:	f04f 0802 	mov.w	r8, #2
  4064dc:	e4d6      	b.n	405e8c <_dtoa_r+0x6cc>
  4064de:	9408      	str	r4, [sp, #32]
  4064e0:	e5a0      	b.n	406024 <_dtoa_r+0x864>
  4064e2:	9b06      	ldr	r3, [sp, #24]
  4064e4:	2b00      	cmp	r3, #0
  4064e6:	f43f aebf 	beq.w	406268 <_dtoa_r+0xaa8>
  4064ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4064ec:	2b00      	cmp	r3, #0
  4064ee:	f77f aee3 	ble.w	4062b8 <_dtoa_r+0xaf8>
  4064f2:	2200      	movs	r2, #0
  4064f4:	4b24      	ldr	r3, [pc, #144]	; (406588 <_dtoa_r+0xdc8>)
  4064f6:	4630      	mov	r0, r6
  4064f8:	4639      	mov	r1, r7
  4064fa:	f7fd f8ef 	bl	4036dc <__aeabi_dmul>
  4064fe:	4606      	mov	r6, r0
  406500:	460f      	mov	r7, r1
  406502:	f108 0001 	add.w	r0, r8, #1
  406506:	f7fd f883 	bl	403610 <__aeabi_i2d>
  40650a:	4632      	mov	r2, r6
  40650c:	463b      	mov	r3, r7
  40650e:	f7fd f8e5 	bl	4036dc <__aeabi_dmul>
  406512:	2200      	movs	r2, #0
  406514:	4b18      	ldr	r3, [pc, #96]	; (406578 <_dtoa_r+0xdb8>)
  406516:	f7fc ff2f 	bl	403378 <__adddf3>
  40651a:	9a04      	ldr	r2, [sp, #16]
  40651c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  406520:	3a01      	subs	r2, #1
  406522:	4604      	mov	r4, r0
  406524:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
  406528:	9211      	str	r2, [sp, #68]	; 0x44
  40652a:	e4d0      	b.n	405ece <_dtoa_r+0x70e>
  40652c:	2239      	movs	r2, #57	; 0x39
  40652e:	46b3      	mov	fp, r6
  406530:	9408      	str	r4, [sp, #32]
  406532:	9e05      	ldr	r6, [sp, #20]
  406534:	703a      	strb	r2, [r7, #0]
  406536:	1c7d      	adds	r5, r7, #1
  406538:	f7ff bbf0 	b.w	405d1c <_dtoa_r+0x55c>
  40653c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
  406540:	2000      	movs	r0, #0
  406542:	4912      	ldr	r1, [pc, #72]	; (40658c <_dtoa_r+0xdcc>)
  406544:	f7fc ff16 	bl	403374 <__aeabi_dsub>
  406548:	4632      	mov	r2, r6
  40654a:	463b      	mov	r3, r7
  40654c:	f7fd fb56 	bl	403bfc <__aeabi_dcmpgt>
  406550:	b908      	cbnz	r0, 406556 <_dtoa_r+0xd96>
  406552:	e6b1      	b.n	4062b8 <_dtoa_r+0xaf8>
  406554:	4615      	mov	r5, r2
  406556:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40655a:	2b30      	cmp	r3, #48	; 0x30
  40655c:	f105 32ff 	add.w	r2, r5, #4294967295
  406560:	d0f8      	beq.n	406554 <_dtoa_r+0xd94>
  406562:	e530      	b.n	405fc6 <_dtoa_r+0x806>
  406564:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406566:	9304      	str	r3, [sp, #16]
  406568:	f7ff bae7 	b.w	405b3a <_dtoa_r+0x37a>
  40656c:	f1ba 0f00 	cmp.w	sl, #0
  406570:	f47f ad7a 	bne.w	406068 <_dtoa_r+0x8a8>
  406574:	e661      	b.n	40623a <_dtoa_r+0xa7a>
  406576:	bf00      	nop
  406578:	401c0000 	.word	0x401c0000
  40657c:	40140000 	.word	0x40140000
  406580:	00408298 	.word	0x00408298
  406584:	00408360 	.word	0x00408360
  406588:	40240000 	.word	0x40240000
  40658c:	3fe00000 	.word	0x3fe00000
  406590:	2b39      	cmp	r3, #57	; 0x39
  406592:	f8cd b014 	str.w	fp, [sp, #20]
  406596:	46d0      	mov	r8, sl
  406598:	f8dd b008 	ldr.w	fp, [sp, #8]
  40659c:	469a      	mov	sl, r3
  40659e:	d0c5      	beq.n	40652c <_dtoa_r+0xd6c>
  4065a0:	f1bb 0f00 	cmp.w	fp, #0
  4065a4:	f73f aebc 	bgt.w	406320 <_dtoa_r+0xb60>
  4065a8:	e6bc      	b.n	406324 <_dtoa_r+0xb64>
  4065aa:	f47f aebb 	bne.w	406324 <_dtoa_r+0xb64>
  4065ae:	f01a 0f01 	tst.w	sl, #1
  4065b2:	f43f aeb7 	beq.w	406324 <_dtoa_r+0xb64>
  4065b6:	e6af      	b.n	406318 <_dtoa_r+0xb58>
  4065b8:	f04f 0800 	mov.w	r8, #0
  4065bc:	4646      	mov	r6, r8
  4065be:	e531      	b.n	406024 <_dtoa_r+0x864>
  4065c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4065c2:	2b02      	cmp	r3, #2
  4065c4:	dc21      	bgt.n	40660a <_dtoa_r+0xe4a>
  4065c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4065c8:	e604      	b.n	4061d4 <_dtoa_r+0xa14>
  4065ca:	f04f 0802 	mov.w	r8, #2
  4065ce:	e45d      	b.n	405e8c <_dtoa_r+0x6cc>
  4065d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4065d2:	2b02      	cmp	r3, #2
  4065d4:	dc19      	bgt.n	40660a <_dtoa_r+0xe4a>
  4065d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4065d8:	e563      	b.n	4060a2 <_dtoa_r+0x8e2>
  4065da:	2400      	movs	r4, #0
  4065dc:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
  4065e0:	4621      	mov	r1, r4
  4065e2:	4648      	mov	r0, r9
  4065e4:	f000 fcdc 	bl	406fa0 <_Balloc>
  4065e8:	f04f 33ff 	mov.w	r3, #4294967295
  4065ec:	9306      	str	r3, [sp, #24]
  4065ee:	930d      	str	r3, [sp, #52]	; 0x34
  4065f0:	2301      	movs	r3, #1
  4065f2:	9007      	str	r0, [sp, #28]
  4065f4:	9421      	str	r4, [sp, #132]	; 0x84
  4065f6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  4065fa:	9309      	str	r3, [sp, #36]	; 0x24
  4065fc:	f7ff b9e9 	b.w	4059d2 <_dtoa_r+0x212>
  406600:	f43f ab3d 	beq.w	405c7e <_dtoa_r+0x4be>
  406604:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  406608:	e522      	b.n	406050 <_dtoa_r+0x890>
  40660a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40660c:	9306      	str	r3, [sp, #24]
  40660e:	e5e9      	b.n	4061e4 <_dtoa_r+0xa24>
  406610:	2501      	movs	r5, #1
  406612:	f7ff b9a8 	b.w	405966 <_dtoa_r+0x1a6>
  406616:	bf00      	nop

00406618 <__libc_fini_array>:
  406618:	b538      	push	{r3, r4, r5, lr}
  40661a:	4d07      	ldr	r5, [pc, #28]	; (406638 <__libc_fini_array+0x20>)
  40661c:	4c07      	ldr	r4, [pc, #28]	; (40663c <__libc_fini_array+0x24>)
  40661e:	1b2c      	subs	r4, r5, r4
  406620:	10a4      	asrs	r4, r4, #2
  406622:	d005      	beq.n	406630 <__libc_fini_array+0x18>
  406624:	3c01      	subs	r4, #1
  406626:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  40662a:	4798      	blx	r3
  40662c:	2c00      	cmp	r4, #0
  40662e:	d1f9      	bne.n	406624 <__libc_fini_array+0xc>
  406630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  406634:	f001 beb8 	b.w	4083a8 <_fini>
  406638:	004083b8 	.word	0x004083b8
  40663c:	004083b4 	.word	0x004083b4

00406640 <_malloc_trim_r>:
  406640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406642:	4f23      	ldr	r7, [pc, #140]	; (4066d0 <_malloc_trim_r+0x90>)
  406644:	460c      	mov	r4, r1
  406646:	4606      	mov	r6, r0
  406648:	f000 fca6 	bl	406f98 <__malloc_lock>
  40664c:	68bb      	ldr	r3, [r7, #8]
  40664e:	685d      	ldr	r5, [r3, #4]
  406650:	f025 0503 	bic.w	r5, r5, #3
  406654:	1b29      	subs	r1, r5, r4
  406656:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  40665a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40665e:	f021 010f 	bic.w	r1, r1, #15
  406662:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406666:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40666a:	db07      	blt.n	40667c <_malloc_trim_r+0x3c>
  40666c:	2100      	movs	r1, #0
  40666e:	4630      	mov	r0, r6
  406670:	f001 f994 	bl	40799c <_sbrk_r>
  406674:	68bb      	ldr	r3, [r7, #8]
  406676:	442b      	add	r3, r5
  406678:	4298      	cmp	r0, r3
  40667a:	d004      	beq.n	406686 <_malloc_trim_r+0x46>
  40667c:	4630      	mov	r0, r6
  40667e:	f000 fc8d 	bl	406f9c <__malloc_unlock>
  406682:	2000      	movs	r0, #0
  406684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406686:	4261      	negs	r1, r4
  406688:	4630      	mov	r0, r6
  40668a:	f001 f987 	bl	40799c <_sbrk_r>
  40668e:	3001      	adds	r0, #1
  406690:	d00d      	beq.n	4066ae <_malloc_trim_r+0x6e>
  406692:	4b10      	ldr	r3, [pc, #64]	; (4066d4 <_malloc_trim_r+0x94>)
  406694:	68ba      	ldr	r2, [r7, #8]
  406696:	6819      	ldr	r1, [r3, #0]
  406698:	1b2d      	subs	r5, r5, r4
  40669a:	f045 0501 	orr.w	r5, r5, #1
  40669e:	4630      	mov	r0, r6
  4066a0:	1b09      	subs	r1, r1, r4
  4066a2:	6055      	str	r5, [r2, #4]
  4066a4:	6019      	str	r1, [r3, #0]
  4066a6:	f000 fc79 	bl	406f9c <__malloc_unlock>
  4066aa:	2001      	movs	r0, #1
  4066ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4066ae:	2100      	movs	r1, #0
  4066b0:	4630      	mov	r0, r6
  4066b2:	f001 f973 	bl	40799c <_sbrk_r>
  4066b6:	68ba      	ldr	r2, [r7, #8]
  4066b8:	1a83      	subs	r3, r0, r2
  4066ba:	2b0f      	cmp	r3, #15
  4066bc:	ddde      	ble.n	40667c <_malloc_trim_r+0x3c>
  4066be:	4c06      	ldr	r4, [pc, #24]	; (4066d8 <_malloc_trim_r+0x98>)
  4066c0:	4904      	ldr	r1, [pc, #16]	; (4066d4 <_malloc_trim_r+0x94>)
  4066c2:	6824      	ldr	r4, [r4, #0]
  4066c4:	f043 0301 	orr.w	r3, r3, #1
  4066c8:	1b00      	subs	r0, r0, r4
  4066ca:	6053      	str	r3, [r2, #4]
  4066cc:	6008      	str	r0, [r1, #0]
  4066ce:	e7d5      	b.n	40667c <_malloc_trim_r+0x3c>
  4066d0:	2040047c 	.word	0x2040047c
  4066d4:	2040c358 	.word	0x2040c358
  4066d8:	20400888 	.word	0x20400888

004066dc <_free_r>:
  4066dc:	2900      	cmp	r1, #0
  4066de:	d045      	beq.n	40676c <_free_r+0x90>
  4066e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4066e4:	460d      	mov	r5, r1
  4066e6:	4680      	mov	r8, r0
  4066e8:	f000 fc56 	bl	406f98 <__malloc_lock>
  4066ec:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4066f0:	496a      	ldr	r1, [pc, #424]	; (40689c <_free_r+0x1c0>)
  4066f2:	f027 0301 	bic.w	r3, r7, #1
  4066f6:	f1a5 0408 	sub.w	r4, r5, #8
  4066fa:	18e2      	adds	r2, r4, r3
  4066fc:	688e      	ldr	r6, [r1, #8]
  4066fe:	6850      	ldr	r0, [r2, #4]
  406700:	42b2      	cmp	r2, r6
  406702:	f020 0003 	bic.w	r0, r0, #3
  406706:	d062      	beq.n	4067ce <_free_r+0xf2>
  406708:	07fe      	lsls	r6, r7, #31
  40670a:	6050      	str	r0, [r2, #4]
  40670c:	d40b      	bmi.n	406726 <_free_r+0x4a>
  40670e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406712:	1be4      	subs	r4, r4, r7
  406714:	f101 0e08 	add.w	lr, r1, #8
  406718:	68a5      	ldr	r5, [r4, #8]
  40671a:	4575      	cmp	r5, lr
  40671c:	443b      	add	r3, r7
  40671e:	d06f      	beq.n	406800 <_free_r+0x124>
  406720:	68e7      	ldr	r7, [r4, #12]
  406722:	60ef      	str	r7, [r5, #12]
  406724:	60bd      	str	r5, [r7, #8]
  406726:	1815      	adds	r5, r2, r0
  406728:	686d      	ldr	r5, [r5, #4]
  40672a:	07ed      	lsls	r5, r5, #31
  40672c:	d542      	bpl.n	4067b4 <_free_r+0xd8>
  40672e:	f043 0201 	orr.w	r2, r3, #1
  406732:	6062      	str	r2, [r4, #4]
  406734:	50e3      	str	r3, [r4, r3]
  406736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40673a:	d218      	bcs.n	40676e <_free_r+0x92>
  40673c:	08db      	lsrs	r3, r3, #3
  40673e:	1c5a      	adds	r2, r3, #1
  406740:	684d      	ldr	r5, [r1, #4]
  406742:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  406746:	60a7      	str	r7, [r4, #8]
  406748:	2001      	movs	r0, #1
  40674a:	109b      	asrs	r3, r3, #2
  40674c:	fa00 f303 	lsl.w	r3, r0, r3
  406750:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  406754:	431d      	orrs	r5, r3
  406756:	3808      	subs	r0, #8
  406758:	60e0      	str	r0, [r4, #12]
  40675a:	604d      	str	r5, [r1, #4]
  40675c:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  406760:	60fc      	str	r4, [r7, #12]
  406762:	4640      	mov	r0, r8
  406764:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406768:	f000 bc18 	b.w	406f9c <__malloc_unlock>
  40676c:	4770      	bx	lr
  40676e:	0a5a      	lsrs	r2, r3, #9
  406770:	2a04      	cmp	r2, #4
  406772:	d853      	bhi.n	40681c <_free_r+0x140>
  406774:	099a      	lsrs	r2, r3, #6
  406776:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40677a:	007f      	lsls	r7, r7, #1
  40677c:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406780:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  406784:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  406788:	4944      	ldr	r1, [pc, #272]	; (40689c <_free_r+0x1c0>)
  40678a:	3808      	subs	r0, #8
  40678c:	4290      	cmp	r0, r2
  40678e:	d04d      	beq.n	40682c <_free_r+0x150>
  406790:	6851      	ldr	r1, [r2, #4]
  406792:	f021 0103 	bic.w	r1, r1, #3
  406796:	428b      	cmp	r3, r1
  406798:	d202      	bcs.n	4067a0 <_free_r+0xc4>
  40679a:	6892      	ldr	r2, [r2, #8]
  40679c:	4290      	cmp	r0, r2
  40679e:	d1f7      	bne.n	406790 <_free_r+0xb4>
  4067a0:	68d0      	ldr	r0, [r2, #12]
  4067a2:	60e0      	str	r0, [r4, #12]
  4067a4:	60a2      	str	r2, [r4, #8]
  4067a6:	6084      	str	r4, [r0, #8]
  4067a8:	60d4      	str	r4, [r2, #12]
  4067aa:	4640      	mov	r0, r8
  4067ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4067b0:	f000 bbf4 	b.w	406f9c <__malloc_unlock>
  4067b4:	6895      	ldr	r5, [r2, #8]
  4067b6:	4f3a      	ldr	r7, [pc, #232]	; (4068a0 <_free_r+0x1c4>)
  4067b8:	42bd      	cmp	r5, r7
  4067ba:	4403      	add	r3, r0
  4067bc:	d03f      	beq.n	40683e <_free_r+0x162>
  4067be:	68d0      	ldr	r0, [r2, #12]
  4067c0:	60e8      	str	r0, [r5, #12]
  4067c2:	f043 0201 	orr.w	r2, r3, #1
  4067c6:	6085      	str	r5, [r0, #8]
  4067c8:	6062      	str	r2, [r4, #4]
  4067ca:	50e3      	str	r3, [r4, r3]
  4067cc:	e7b3      	b.n	406736 <_free_r+0x5a>
  4067ce:	07ff      	lsls	r7, r7, #31
  4067d0:	4403      	add	r3, r0
  4067d2:	d407      	bmi.n	4067e4 <_free_r+0x108>
  4067d4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4067d8:	1aa4      	subs	r4, r4, r2
  4067da:	4413      	add	r3, r2
  4067dc:	68a0      	ldr	r0, [r4, #8]
  4067de:	68e2      	ldr	r2, [r4, #12]
  4067e0:	60c2      	str	r2, [r0, #12]
  4067e2:	6090      	str	r0, [r2, #8]
  4067e4:	4a2f      	ldr	r2, [pc, #188]	; (4068a4 <_free_r+0x1c8>)
  4067e6:	6812      	ldr	r2, [r2, #0]
  4067e8:	f043 0001 	orr.w	r0, r3, #1
  4067ec:	4293      	cmp	r3, r2
  4067ee:	6060      	str	r0, [r4, #4]
  4067f0:	608c      	str	r4, [r1, #8]
  4067f2:	d3b6      	bcc.n	406762 <_free_r+0x86>
  4067f4:	4b2c      	ldr	r3, [pc, #176]	; (4068a8 <_free_r+0x1cc>)
  4067f6:	4640      	mov	r0, r8
  4067f8:	6819      	ldr	r1, [r3, #0]
  4067fa:	f7ff ff21 	bl	406640 <_malloc_trim_r>
  4067fe:	e7b0      	b.n	406762 <_free_r+0x86>
  406800:	1811      	adds	r1, r2, r0
  406802:	6849      	ldr	r1, [r1, #4]
  406804:	07c9      	lsls	r1, r1, #31
  406806:	d444      	bmi.n	406892 <_free_r+0x1b6>
  406808:	6891      	ldr	r1, [r2, #8]
  40680a:	68d2      	ldr	r2, [r2, #12]
  40680c:	60ca      	str	r2, [r1, #12]
  40680e:	4403      	add	r3, r0
  406810:	f043 0001 	orr.w	r0, r3, #1
  406814:	6091      	str	r1, [r2, #8]
  406816:	6060      	str	r0, [r4, #4]
  406818:	50e3      	str	r3, [r4, r3]
  40681a:	e7a2      	b.n	406762 <_free_r+0x86>
  40681c:	2a14      	cmp	r2, #20
  40681e:	d817      	bhi.n	406850 <_free_r+0x174>
  406820:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406824:	007f      	lsls	r7, r7, #1
  406826:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40682a:	e7a9      	b.n	406780 <_free_r+0xa4>
  40682c:	10aa      	asrs	r2, r5, #2
  40682e:	684b      	ldr	r3, [r1, #4]
  406830:	2501      	movs	r5, #1
  406832:	fa05 f202 	lsl.w	r2, r5, r2
  406836:	4313      	orrs	r3, r2
  406838:	604b      	str	r3, [r1, #4]
  40683a:	4602      	mov	r2, r0
  40683c:	e7b1      	b.n	4067a2 <_free_r+0xc6>
  40683e:	f043 0201 	orr.w	r2, r3, #1
  406842:	614c      	str	r4, [r1, #20]
  406844:	610c      	str	r4, [r1, #16]
  406846:	60e5      	str	r5, [r4, #12]
  406848:	60a5      	str	r5, [r4, #8]
  40684a:	6062      	str	r2, [r4, #4]
  40684c:	50e3      	str	r3, [r4, r3]
  40684e:	e788      	b.n	406762 <_free_r+0x86>
  406850:	2a54      	cmp	r2, #84	; 0x54
  406852:	d806      	bhi.n	406862 <_free_r+0x186>
  406854:	0b1a      	lsrs	r2, r3, #12
  406856:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40685a:	007f      	lsls	r7, r7, #1
  40685c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406860:	e78e      	b.n	406780 <_free_r+0xa4>
  406862:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406866:	d806      	bhi.n	406876 <_free_r+0x19a>
  406868:	0bda      	lsrs	r2, r3, #15
  40686a:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40686e:	007f      	lsls	r7, r7, #1
  406870:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406874:	e784      	b.n	406780 <_free_r+0xa4>
  406876:	f240 5054 	movw	r0, #1364	; 0x554
  40687a:	4282      	cmp	r2, r0
  40687c:	d806      	bhi.n	40688c <_free_r+0x1b0>
  40687e:	0c9a      	lsrs	r2, r3, #18
  406880:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406884:	007f      	lsls	r7, r7, #1
  406886:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40688a:	e779      	b.n	406780 <_free_r+0xa4>
  40688c:	27fe      	movs	r7, #254	; 0xfe
  40688e:	257e      	movs	r5, #126	; 0x7e
  406890:	e776      	b.n	406780 <_free_r+0xa4>
  406892:	f043 0201 	orr.w	r2, r3, #1
  406896:	6062      	str	r2, [r4, #4]
  406898:	50e3      	str	r3, [r4, r3]
  40689a:	e762      	b.n	406762 <_free_r+0x86>
  40689c:	2040047c 	.word	0x2040047c
  4068a0:	20400484 	.word	0x20400484
  4068a4:	20400884 	.word	0x20400884
  4068a8:	2040c354 	.word	0x2040c354

004068ac <_localeconv_r>:
  4068ac:	4800      	ldr	r0, [pc, #0]	; (4068b0 <_localeconv_r+0x4>)
  4068ae:	4770      	bx	lr
  4068b0:	20400444 	.word	0x20400444

004068b4 <_malloc_r>:
  4068b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068b8:	f101 050b 	add.w	r5, r1, #11
  4068bc:	2d16      	cmp	r5, #22
  4068be:	b083      	sub	sp, #12
  4068c0:	4606      	mov	r6, r0
  4068c2:	f240 809f 	bls.w	406a04 <_malloc_r+0x150>
  4068c6:	f035 0507 	bics.w	r5, r5, #7
  4068ca:	f100 80bf 	bmi.w	406a4c <_malloc_r+0x198>
  4068ce:	42a9      	cmp	r1, r5
  4068d0:	f200 80bc 	bhi.w	406a4c <_malloc_r+0x198>
  4068d4:	f000 fb60 	bl	406f98 <__malloc_lock>
  4068d8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  4068dc:	f0c0 829c 	bcc.w	406e18 <_malloc_r+0x564>
  4068e0:	0a6b      	lsrs	r3, r5, #9
  4068e2:	f000 80ba 	beq.w	406a5a <_malloc_r+0x1a6>
  4068e6:	2b04      	cmp	r3, #4
  4068e8:	f200 8183 	bhi.w	406bf2 <_malloc_r+0x33e>
  4068ec:	09a8      	lsrs	r0, r5, #6
  4068ee:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  4068f2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4068f6:	3038      	adds	r0, #56	; 0x38
  4068f8:	4fc4      	ldr	r7, [pc, #784]	; (406c0c <_malloc_r+0x358>)
  4068fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  4068fe:	f1a3 0108 	sub.w	r1, r3, #8
  406902:	685c      	ldr	r4, [r3, #4]
  406904:	42a1      	cmp	r1, r4
  406906:	d107      	bne.n	406918 <_malloc_r+0x64>
  406908:	e0ac      	b.n	406a64 <_malloc_r+0x1b0>
  40690a:	2a00      	cmp	r2, #0
  40690c:	f280 80ac 	bge.w	406a68 <_malloc_r+0x1b4>
  406910:	68e4      	ldr	r4, [r4, #12]
  406912:	42a1      	cmp	r1, r4
  406914:	f000 80a6 	beq.w	406a64 <_malloc_r+0x1b0>
  406918:	6863      	ldr	r3, [r4, #4]
  40691a:	f023 0303 	bic.w	r3, r3, #3
  40691e:	1b5a      	subs	r2, r3, r5
  406920:	2a0f      	cmp	r2, #15
  406922:	ddf2      	ble.n	40690a <_malloc_r+0x56>
  406924:	49b9      	ldr	r1, [pc, #740]	; (406c0c <_malloc_r+0x358>)
  406926:	693c      	ldr	r4, [r7, #16]
  406928:	f101 0e08 	add.w	lr, r1, #8
  40692c:	4574      	cmp	r4, lr
  40692e:	f000 81b3 	beq.w	406c98 <_malloc_r+0x3e4>
  406932:	6863      	ldr	r3, [r4, #4]
  406934:	f023 0303 	bic.w	r3, r3, #3
  406938:	1b5a      	subs	r2, r3, r5
  40693a:	2a0f      	cmp	r2, #15
  40693c:	f300 8199 	bgt.w	406c72 <_malloc_r+0x3be>
  406940:	2a00      	cmp	r2, #0
  406942:	f8c1 e014 	str.w	lr, [r1, #20]
  406946:	f8c1 e010 	str.w	lr, [r1, #16]
  40694a:	f280 809e 	bge.w	406a8a <_malloc_r+0x1d6>
  40694e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406952:	f080 8167 	bcs.w	406c24 <_malloc_r+0x370>
  406956:	08db      	lsrs	r3, r3, #3
  406958:	f103 0c01 	add.w	ip, r3, #1
  40695c:	2201      	movs	r2, #1
  40695e:	109b      	asrs	r3, r3, #2
  406960:	fa02 f303 	lsl.w	r3, r2, r3
  406964:	684a      	ldr	r2, [r1, #4]
  406966:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  40696a:	f8c4 8008 	str.w	r8, [r4, #8]
  40696e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  406972:	431a      	orrs	r2, r3
  406974:	f1a9 0308 	sub.w	r3, r9, #8
  406978:	60e3      	str	r3, [r4, #12]
  40697a:	604a      	str	r2, [r1, #4]
  40697c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  406980:	f8c8 400c 	str.w	r4, [r8, #12]
  406984:	1083      	asrs	r3, r0, #2
  406986:	2401      	movs	r4, #1
  406988:	409c      	lsls	r4, r3
  40698a:	4294      	cmp	r4, r2
  40698c:	f200 808a 	bhi.w	406aa4 <_malloc_r+0x1f0>
  406990:	4214      	tst	r4, r2
  406992:	d106      	bne.n	4069a2 <_malloc_r+0xee>
  406994:	f020 0003 	bic.w	r0, r0, #3
  406998:	0064      	lsls	r4, r4, #1
  40699a:	4214      	tst	r4, r2
  40699c:	f100 0004 	add.w	r0, r0, #4
  4069a0:	d0fa      	beq.n	406998 <_malloc_r+0xe4>
  4069a2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4069a6:	46cc      	mov	ip, r9
  4069a8:	4680      	mov	r8, r0
  4069aa:	f8dc 100c 	ldr.w	r1, [ip, #12]
  4069ae:	458c      	cmp	ip, r1
  4069b0:	d107      	bne.n	4069c2 <_malloc_r+0x10e>
  4069b2:	e173      	b.n	406c9c <_malloc_r+0x3e8>
  4069b4:	2a00      	cmp	r2, #0
  4069b6:	f280 8181 	bge.w	406cbc <_malloc_r+0x408>
  4069ba:	68c9      	ldr	r1, [r1, #12]
  4069bc:	458c      	cmp	ip, r1
  4069be:	f000 816d 	beq.w	406c9c <_malloc_r+0x3e8>
  4069c2:	684b      	ldr	r3, [r1, #4]
  4069c4:	f023 0303 	bic.w	r3, r3, #3
  4069c8:	1b5a      	subs	r2, r3, r5
  4069ca:	2a0f      	cmp	r2, #15
  4069cc:	ddf2      	ble.n	4069b4 <_malloc_r+0x100>
  4069ce:	460c      	mov	r4, r1
  4069d0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  4069d4:	f854 8f08 	ldr.w	r8, [r4, #8]!
  4069d8:	194b      	adds	r3, r1, r5
  4069da:	f045 0501 	orr.w	r5, r5, #1
  4069de:	604d      	str	r5, [r1, #4]
  4069e0:	f042 0101 	orr.w	r1, r2, #1
  4069e4:	f8c8 c00c 	str.w	ip, [r8, #12]
  4069e8:	4630      	mov	r0, r6
  4069ea:	f8cc 8008 	str.w	r8, [ip, #8]
  4069ee:	617b      	str	r3, [r7, #20]
  4069f0:	613b      	str	r3, [r7, #16]
  4069f2:	f8c3 e00c 	str.w	lr, [r3, #12]
  4069f6:	f8c3 e008 	str.w	lr, [r3, #8]
  4069fa:	6059      	str	r1, [r3, #4]
  4069fc:	509a      	str	r2, [r3, r2]
  4069fe:	f000 facd 	bl	406f9c <__malloc_unlock>
  406a02:	e01f      	b.n	406a44 <_malloc_r+0x190>
  406a04:	2910      	cmp	r1, #16
  406a06:	d821      	bhi.n	406a4c <_malloc_r+0x198>
  406a08:	f000 fac6 	bl	406f98 <__malloc_lock>
  406a0c:	2510      	movs	r5, #16
  406a0e:	2306      	movs	r3, #6
  406a10:	2002      	movs	r0, #2
  406a12:	4f7e      	ldr	r7, [pc, #504]	; (406c0c <_malloc_r+0x358>)
  406a14:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  406a18:	f1a3 0208 	sub.w	r2, r3, #8
  406a1c:	685c      	ldr	r4, [r3, #4]
  406a1e:	4294      	cmp	r4, r2
  406a20:	f000 8145 	beq.w	406cae <_malloc_r+0x3fa>
  406a24:	6863      	ldr	r3, [r4, #4]
  406a26:	68e1      	ldr	r1, [r4, #12]
  406a28:	68a5      	ldr	r5, [r4, #8]
  406a2a:	f023 0303 	bic.w	r3, r3, #3
  406a2e:	4423      	add	r3, r4
  406a30:	4630      	mov	r0, r6
  406a32:	685a      	ldr	r2, [r3, #4]
  406a34:	60e9      	str	r1, [r5, #12]
  406a36:	f042 0201 	orr.w	r2, r2, #1
  406a3a:	608d      	str	r5, [r1, #8]
  406a3c:	605a      	str	r2, [r3, #4]
  406a3e:	f000 faad 	bl	406f9c <__malloc_unlock>
  406a42:	3408      	adds	r4, #8
  406a44:	4620      	mov	r0, r4
  406a46:	b003      	add	sp, #12
  406a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a4c:	2400      	movs	r4, #0
  406a4e:	230c      	movs	r3, #12
  406a50:	4620      	mov	r0, r4
  406a52:	6033      	str	r3, [r6, #0]
  406a54:	b003      	add	sp, #12
  406a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a5a:	2380      	movs	r3, #128	; 0x80
  406a5c:	f04f 0e40 	mov.w	lr, #64	; 0x40
  406a60:	203f      	movs	r0, #63	; 0x3f
  406a62:	e749      	b.n	4068f8 <_malloc_r+0x44>
  406a64:	4670      	mov	r0, lr
  406a66:	e75d      	b.n	406924 <_malloc_r+0x70>
  406a68:	4423      	add	r3, r4
  406a6a:	68e1      	ldr	r1, [r4, #12]
  406a6c:	685a      	ldr	r2, [r3, #4]
  406a6e:	68a5      	ldr	r5, [r4, #8]
  406a70:	f042 0201 	orr.w	r2, r2, #1
  406a74:	60e9      	str	r1, [r5, #12]
  406a76:	4630      	mov	r0, r6
  406a78:	608d      	str	r5, [r1, #8]
  406a7a:	605a      	str	r2, [r3, #4]
  406a7c:	f000 fa8e 	bl	406f9c <__malloc_unlock>
  406a80:	3408      	adds	r4, #8
  406a82:	4620      	mov	r0, r4
  406a84:	b003      	add	sp, #12
  406a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a8a:	4423      	add	r3, r4
  406a8c:	4630      	mov	r0, r6
  406a8e:	685a      	ldr	r2, [r3, #4]
  406a90:	f042 0201 	orr.w	r2, r2, #1
  406a94:	605a      	str	r2, [r3, #4]
  406a96:	f000 fa81 	bl	406f9c <__malloc_unlock>
  406a9a:	3408      	adds	r4, #8
  406a9c:	4620      	mov	r0, r4
  406a9e:	b003      	add	sp, #12
  406aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406aa4:	68bc      	ldr	r4, [r7, #8]
  406aa6:	6863      	ldr	r3, [r4, #4]
  406aa8:	f023 0803 	bic.w	r8, r3, #3
  406aac:	45a8      	cmp	r8, r5
  406aae:	d304      	bcc.n	406aba <_malloc_r+0x206>
  406ab0:	ebc5 0308 	rsb	r3, r5, r8
  406ab4:	2b0f      	cmp	r3, #15
  406ab6:	f300 808c 	bgt.w	406bd2 <_malloc_r+0x31e>
  406aba:	4b55      	ldr	r3, [pc, #340]	; (406c10 <_malloc_r+0x35c>)
  406abc:	f8df 9160 	ldr.w	r9, [pc, #352]	; 406c20 <_malloc_r+0x36c>
  406ac0:	681a      	ldr	r2, [r3, #0]
  406ac2:	f8d9 3000 	ldr.w	r3, [r9]
  406ac6:	3301      	adds	r3, #1
  406ac8:	442a      	add	r2, r5
  406aca:	eb04 0a08 	add.w	sl, r4, r8
  406ace:	f000 8160 	beq.w	406d92 <_malloc_r+0x4de>
  406ad2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  406ad6:	320f      	adds	r2, #15
  406ad8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  406adc:	f022 020f 	bic.w	r2, r2, #15
  406ae0:	4611      	mov	r1, r2
  406ae2:	4630      	mov	r0, r6
  406ae4:	9201      	str	r2, [sp, #4]
  406ae6:	f000 ff59 	bl	40799c <_sbrk_r>
  406aea:	f1b0 3fff 	cmp.w	r0, #4294967295
  406aee:	4683      	mov	fp, r0
  406af0:	9a01      	ldr	r2, [sp, #4]
  406af2:	f000 8158 	beq.w	406da6 <_malloc_r+0x4f2>
  406af6:	4582      	cmp	sl, r0
  406af8:	f200 80fc 	bhi.w	406cf4 <_malloc_r+0x440>
  406afc:	4b45      	ldr	r3, [pc, #276]	; (406c14 <_malloc_r+0x360>)
  406afe:	6819      	ldr	r1, [r3, #0]
  406b00:	45da      	cmp	sl, fp
  406b02:	4411      	add	r1, r2
  406b04:	6019      	str	r1, [r3, #0]
  406b06:	f000 8153 	beq.w	406db0 <_malloc_r+0x4fc>
  406b0a:	f8d9 0000 	ldr.w	r0, [r9]
  406b0e:	f8df e110 	ldr.w	lr, [pc, #272]	; 406c20 <_malloc_r+0x36c>
  406b12:	3001      	adds	r0, #1
  406b14:	bf1b      	ittet	ne
  406b16:	ebca 0a0b 	rsbne	sl, sl, fp
  406b1a:	4451      	addne	r1, sl
  406b1c:	f8ce b000 	streq.w	fp, [lr]
  406b20:	6019      	strne	r1, [r3, #0]
  406b22:	f01b 0107 	ands.w	r1, fp, #7
  406b26:	f000 8117 	beq.w	406d58 <_malloc_r+0x4a4>
  406b2a:	f1c1 0008 	rsb	r0, r1, #8
  406b2e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  406b32:	4483      	add	fp, r0
  406b34:	3108      	adds	r1, #8
  406b36:	445a      	add	r2, fp
  406b38:	f3c2 020b 	ubfx	r2, r2, #0, #12
  406b3c:	ebc2 0901 	rsb	r9, r2, r1
  406b40:	4649      	mov	r1, r9
  406b42:	4630      	mov	r0, r6
  406b44:	9301      	str	r3, [sp, #4]
  406b46:	f000 ff29 	bl	40799c <_sbrk_r>
  406b4a:	1c43      	adds	r3, r0, #1
  406b4c:	9b01      	ldr	r3, [sp, #4]
  406b4e:	f000 813f 	beq.w	406dd0 <_malloc_r+0x51c>
  406b52:	ebcb 0200 	rsb	r2, fp, r0
  406b56:	444a      	add	r2, r9
  406b58:	f042 0201 	orr.w	r2, r2, #1
  406b5c:	6819      	ldr	r1, [r3, #0]
  406b5e:	f8c7 b008 	str.w	fp, [r7, #8]
  406b62:	4449      	add	r1, r9
  406b64:	42bc      	cmp	r4, r7
  406b66:	f8cb 2004 	str.w	r2, [fp, #4]
  406b6a:	6019      	str	r1, [r3, #0]
  406b6c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 406c14 <_malloc_r+0x360>
  406b70:	d016      	beq.n	406ba0 <_malloc_r+0x2ec>
  406b72:	f1b8 0f0f 	cmp.w	r8, #15
  406b76:	f240 80fd 	bls.w	406d74 <_malloc_r+0x4c0>
  406b7a:	6862      	ldr	r2, [r4, #4]
  406b7c:	f1a8 030c 	sub.w	r3, r8, #12
  406b80:	f023 0307 	bic.w	r3, r3, #7
  406b84:	18e0      	adds	r0, r4, r3
  406b86:	f002 0201 	and.w	r2, r2, #1
  406b8a:	f04f 0e05 	mov.w	lr, #5
  406b8e:	431a      	orrs	r2, r3
  406b90:	2b0f      	cmp	r3, #15
  406b92:	6062      	str	r2, [r4, #4]
  406b94:	f8c0 e004 	str.w	lr, [r0, #4]
  406b98:	f8c0 e008 	str.w	lr, [r0, #8]
  406b9c:	f200 811c 	bhi.w	406dd8 <_malloc_r+0x524>
  406ba0:	4b1d      	ldr	r3, [pc, #116]	; (406c18 <_malloc_r+0x364>)
  406ba2:	68bc      	ldr	r4, [r7, #8]
  406ba4:	681a      	ldr	r2, [r3, #0]
  406ba6:	4291      	cmp	r1, r2
  406ba8:	bf88      	it	hi
  406baa:	6019      	strhi	r1, [r3, #0]
  406bac:	4b1b      	ldr	r3, [pc, #108]	; (406c1c <_malloc_r+0x368>)
  406bae:	681a      	ldr	r2, [r3, #0]
  406bb0:	4291      	cmp	r1, r2
  406bb2:	6862      	ldr	r2, [r4, #4]
  406bb4:	bf88      	it	hi
  406bb6:	6019      	strhi	r1, [r3, #0]
  406bb8:	f022 0203 	bic.w	r2, r2, #3
  406bbc:	4295      	cmp	r5, r2
  406bbe:	eba2 0305 	sub.w	r3, r2, r5
  406bc2:	d801      	bhi.n	406bc8 <_malloc_r+0x314>
  406bc4:	2b0f      	cmp	r3, #15
  406bc6:	dc04      	bgt.n	406bd2 <_malloc_r+0x31e>
  406bc8:	4630      	mov	r0, r6
  406bca:	f000 f9e7 	bl	406f9c <__malloc_unlock>
  406bce:	2400      	movs	r4, #0
  406bd0:	e738      	b.n	406a44 <_malloc_r+0x190>
  406bd2:	1962      	adds	r2, r4, r5
  406bd4:	f043 0301 	orr.w	r3, r3, #1
  406bd8:	f045 0501 	orr.w	r5, r5, #1
  406bdc:	6065      	str	r5, [r4, #4]
  406bde:	4630      	mov	r0, r6
  406be0:	60ba      	str	r2, [r7, #8]
  406be2:	6053      	str	r3, [r2, #4]
  406be4:	f000 f9da 	bl	406f9c <__malloc_unlock>
  406be8:	3408      	adds	r4, #8
  406bea:	4620      	mov	r0, r4
  406bec:	b003      	add	sp, #12
  406bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406bf2:	2b14      	cmp	r3, #20
  406bf4:	d971      	bls.n	406cda <_malloc_r+0x426>
  406bf6:	2b54      	cmp	r3, #84	; 0x54
  406bf8:	f200 80a4 	bhi.w	406d44 <_malloc_r+0x490>
  406bfc:	0b28      	lsrs	r0, r5, #12
  406bfe:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  406c02:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406c06:	306e      	adds	r0, #110	; 0x6e
  406c08:	e676      	b.n	4068f8 <_malloc_r+0x44>
  406c0a:	bf00      	nop
  406c0c:	2040047c 	.word	0x2040047c
  406c10:	2040c354 	.word	0x2040c354
  406c14:	2040c358 	.word	0x2040c358
  406c18:	2040c350 	.word	0x2040c350
  406c1c:	2040c34c 	.word	0x2040c34c
  406c20:	20400888 	.word	0x20400888
  406c24:	0a5a      	lsrs	r2, r3, #9
  406c26:	2a04      	cmp	r2, #4
  406c28:	d95e      	bls.n	406ce8 <_malloc_r+0x434>
  406c2a:	2a14      	cmp	r2, #20
  406c2c:	f200 80b3 	bhi.w	406d96 <_malloc_r+0x4e2>
  406c30:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  406c34:	0049      	lsls	r1, r1, #1
  406c36:	325b      	adds	r2, #91	; 0x5b
  406c38:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  406c3c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  406c40:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 406e20 <_malloc_r+0x56c>
  406c44:	f1ac 0c08 	sub.w	ip, ip, #8
  406c48:	458c      	cmp	ip, r1
  406c4a:	f000 8088 	beq.w	406d5e <_malloc_r+0x4aa>
  406c4e:	684a      	ldr	r2, [r1, #4]
  406c50:	f022 0203 	bic.w	r2, r2, #3
  406c54:	4293      	cmp	r3, r2
  406c56:	d202      	bcs.n	406c5e <_malloc_r+0x3aa>
  406c58:	6889      	ldr	r1, [r1, #8]
  406c5a:	458c      	cmp	ip, r1
  406c5c:	d1f7      	bne.n	406c4e <_malloc_r+0x39a>
  406c5e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  406c62:	687a      	ldr	r2, [r7, #4]
  406c64:	f8c4 c00c 	str.w	ip, [r4, #12]
  406c68:	60a1      	str	r1, [r4, #8]
  406c6a:	f8cc 4008 	str.w	r4, [ip, #8]
  406c6e:	60cc      	str	r4, [r1, #12]
  406c70:	e688      	b.n	406984 <_malloc_r+0xd0>
  406c72:	1963      	adds	r3, r4, r5
  406c74:	f042 0701 	orr.w	r7, r2, #1
  406c78:	f045 0501 	orr.w	r5, r5, #1
  406c7c:	6065      	str	r5, [r4, #4]
  406c7e:	4630      	mov	r0, r6
  406c80:	614b      	str	r3, [r1, #20]
  406c82:	610b      	str	r3, [r1, #16]
  406c84:	f8c3 e00c 	str.w	lr, [r3, #12]
  406c88:	f8c3 e008 	str.w	lr, [r3, #8]
  406c8c:	605f      	str	r7, [r3, #4]
  406c8e:	509a      	str	r2, [r3, r2]
  406c90:	3408      	adds	r4, #8
  406c92:	f000 f983 	bl	406f9c <__malloc_unlock>
  406c96:	e6d5      	b.n	406a44 <_malloc_r+0x190>
  406c98:	684a      	ldr	r2, [r1, #4]
  406c9a:	e673      	b.n	406984 <_malloc_r+0xd0>
  406c9c:	f108 0801 	add.w	r8, r8, #1
  406ca0:	f018 0f03 	tst.w	r8, #3
  406ca4:	f10c 0c08 	add.w	ip, ip, #8
  406ca8:	f47f ae7f 	bne.w	4069aa <_malloc_r+0xf6>
  406cac:	e030      	b.n	406d10 <_malloc_r+0x45c>
  406cae:	68dc      	ldr	r4, [r3, #12]
  406cb0:	42a3      	cmp	r3, r4
  406cb2:	bf08      	it	eq
  406cb4:	3002      	addeq	r0, #2
  406cb6:	f43f ae35 	beq.w	406924 <_malloc_r+0x70>
  406cba:	e6b3      	b.n	406a24 <_malloc_r+0x170>
  406cbc:	440b      	add	r3, r1
  406cbe:	460c      	mov	r4, r1
  406cc0:	685a      	ldr	r2, [r3, #4]
  406cc2:	68c9      	ldr	r1, [r1, #12]
  406cc4:	f854 5f08 	ldr.w	r5, [r4, #8]!
  406cc8:	f042 0201 	orr.w	r2, r2, #1
  406ccc:	605a      	str	r2, [r3, #4]
  406cce:	4630      	mov	r0, r6
  406cd0:	60e9      	str	r1, [r5, #12]
  406cd2:	608d      	str	r5, [r1, #8]
  406cd4:	f000 f962 	bl	406f9c <__malloc_unlock>
  406cd8:	e6b4      	b.n	406a44 <_malloc_r+0x190>
  406cda:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  406cde:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  406ce2:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406ce6:	e607      	b.n	4068f8 <_malloc_r+0x44>
  406ce8:	099a      	lsrs	r2, r3, #6
  406cea:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406cee:	0049      	lsls	r1, r1, #1
  406cf0:	3238      	adds	r2, #56	; 0x38
  406cf2:	e7a1      	b.n	406c38 <_malloc_r+0x384>
  406cf4:	42bc      	cmp	r4, r7
  406cf6:	4b4a      	ldr	r3, [pc, #296]	; (406e20 <_malloc_r+0x56c>)
  406cf8:	f43f af00 	beq.w	406afc <_malloc_r+0x248>
  406cfc:	689c      	ldr	r4, [r3, #8]
  406cfe:	6862      	ldr	r2, [r4, #4]
  406d00:	f022 0203 	bic.w	r2, r2, #3
  406d04:	e75a      	b.n	406bbc <_malloc_r+0x308>
  406d06:	f859 3908 	ldr.w	r3, [r9], #-8
  406d0a:	4599      	cmp	r9, r3
  406d0c:	f040 8082 	bne.w	406e14 <_malloc_r+0x560>
  406d10:	f010 0f03 	tst.w	r0, #3
  406d14:	f100 30ff 	add.w	r0, r0, #4294967295
  406d18:	d1f5      	bne.n	406d06 <_malloc_r+0x452>
  406d1a:	687b      	ldr	r3, [r7, #4]
  406d1c:	ea23 0304 	bic.w	r3, r3, r4
  406d20:	607b      	str	r3, [r7, #4]
  406d22:	0064      	lsls	r4, r4, #1
  406d24:	429c      	cmp	r4, r3
  406d26:	f63f aebd 	bhi.w	406aa4 <_malloc_r+0x1f0>
  406d2a:	2c00      	cmp	r4, #0
  406d2c:	f43f aeba 	beq.w	406aa4 <_malloc_r+0x1f0>
  406d30:	421c      	tst	r4, r3
  406d32:	4640      	mov	r0, r8
  406d34:	f47f ae35 	bne.w	4069a2 <_malloc_r+0xee>
  406d38:	0064      	lsls	r4, r4, #1
  406d3a:	421c      	tst	r4, r3
  406d3c:	f100 0004 	add.w	r0, r0, #4
  406d40:	d0fa      	beq.n	406d38 <_malloc_r+0x484>
  406d42:	e62e      	b.n	4069a2 <_malloc_r+0xee>
  406d44:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  406d48:	d818      	bhi.n	406d7c <_malloc_r+0x4c8>
  406d4a:	0be8      	lsrs	r0, r5, #15
  406d4c:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  406d50:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406d54:	3077      	adds	r0, #119	; 0x77
  406d56:	e5cf      	b.n	4068f8 <_malloc_r+0x44>
  406d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  406d5c:	e6eb      	b.n	406b36 <_malloc_r+0x282>
  406d5e:	2101      	movs	r1, #1
  406d60:	f8d8 3004 	ldr.w	r3, [r8, #4]
  406d64:	1092      	asrs	r2, r2, #2
  406d66:	fa01 f202 	lsl.w	r2, r1, r2
  406d6a:	431a      	orrs	r2, r3
  406d6c:	f8c8 2004 	str.w	r2, [r8, #4]
  406d70:	4661      	mov	r1, ip
  406d72:	e777      	b.n	406c64 <_malloc_r+0x3b0>
  406d74:	2301      	movs	r3, #1
  406d76:	f8cb 3004 	str.w	r3, [fp, #4]
  406d7a:	e725      	b.n	406bc8 <_malloc_r+0x314>
  406d7c:	f240 5254 	movw	r2, #1364	; 0x554
  406d80:	4293      	cmp	r3, r2
  406d82:	d820      	bhi.n	406dc6 <_malloc_r+0x512>
  406d84:	0ca8      	lsrs	r0, r5, #18
  406d86:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  406d8a:	ea4f 034e 	mov.w	r3, lr, lsl #1
  406d8e:	307c      	adds	r0, #124	; 0x7c
  406d90:	e5b2      	b.n	4068f8 <_malloc_r+0x44>
  406d92:	3210      	adds	r2, #16
  406d94:	e6a4      	b.n	406ae0 <_malloc_r+0x22c>
  406d96:	2a54      	cmp	r2, #84	; 0x54
  406d98:	d826      	bhi.n	406de8 <_malloc_r+0x534>
  406d9a:	0b1a      	lsrs	r2, r3, #12
  406d9c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  406da0:	0049      	lsls	r1, r1, #1
  406da2:	326e      	adds	r2, #110	; 0x6e
  406da4:	e748      	b.n	406c38 <_malloc_r+0x384>
  406da6:	68bc      	ldr	r4, [r7, #8]
  406da8:	6862      	ldr	r2, [r4, #4]
  406daa:	f022 0203 	bic.w	r2, r2, #3
  406dae:	e705      	b.n	406bbc <_malloc_r+0x308>
  406db0:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406db4:	2800      	cmp	r0, #0
  406db6:	f47f aea8 	bne.w	406b0a <_malloc_r+0x256>
  406dba:	4442      	add	r2, r8
  406dbc:	68bb      	ldr	r3, [r7, #8]
  406dbe:	f042 0201 	orr.w	r2, r2, #1
  406dc2:	605a      	str	r2, [r3, #4]
  406dc4:	e6ec      	b.n	406ba0 <_malloc_r+0x2ec>
  406dc6:	23fe      	movs	r3, #254	; 0xfe
  406dc8:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  406dcc:	207e      	movs	r0, #126	; 0x7e
  406dce:	e593      	b.n	4068f8 <_malloc_r+0x44>
  406dd0:	2201      	movs	r2, #1
  406dd2:	f04f 0900 	mov.w	r9, #0
  406dd6:	e6c1      	b.n	406b5c <_malloc_r+0x2a8>
  406dd8:	f104 0108 	add.w	r1, r4, #8
  406ddc:	4630      	mov	r0, r6
  406dde:	f7ff fc7d 	bl	4066dc <_free_r>
  406de2:	f8d9 1000 	ldr.w	r1, [r9]
  406de6:	e6db      	b.n	406ba0 <_malloc_r+0x2ec>
  406de8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406dec:	d805      	bhi.n	406dfa <_malloc_r+0x546>
  406dee:	0bda      	lsrs	r2, r3, #15
  406df0:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406df4:	0049      	lsls	r1, r1, #1
  406df6:	3277      	adds	r2, #119	; 0x77
  406df8:	e71e      	b.n	406c38 <_malloc_r+0x384>
  406dfa:	f240 5154 	movw	r1, #1364	; 0x554
  406dfe:	428a      	cmp	r2, r1
  406e00:	d805      	bhi.n	406e0e <_malloc_r+0x55a>
  406e02:	0c9a      	lsrs	r2, r3, #18
  406e04:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  406e08:	0049      	lsls	r1, r1, #1
  406e0a:	327c      	adds	r2, #124	; 0x7c
  406e0c:	e714      	b.n	406c38 <_malloc_r+0x384>
  406e0e:	21fe      	movs	r1, #254	; 0xfe
  406e10:	227e      	movs	r2, #126	; 0x7e
  406e12:	e711      	b.n	406c38 <_malloc_r+0x384>
  406e14:	687b      	ldr	r3, [r7, #4]
  406e16:	e784      	b.n	406d22 <_malloc_r+0x46e>
  406e18:	08e8      	lsrs	r0, r5, #3
  406e1a:	1c43      	adds	r3, r0, #1
  406e1c:	005b      	lsls	r3, r3, #1
  406e1e:	e5f8      	b.n	406a12 <_malloc_r+0x15e>
  406e20:	2040047c 	.word	0x2040047c
	...

00406e30 <memchr>:
  406e30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406e34:	2a10      	cmp	r2, #16
  406e36:	db2b      	blt.n	406e90 <memchr+0x60>
  406e38:	f010 0f07 	tst.w	r0, #7
  406e3c:	d008      	beq.n	406e50 <memchr+0x20>
  406e3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406e42:	3a01      	subs	r2, #1
  406e44:	428b      	cmp	r3, r1
  406e46:	d02d      	beq.n	406ea4 <memchr+0x74>
  406e48:	f010 0f07 	tst.w	r0, #7
  406e4c:	b342      	cbz	r2, 406ea0 <memchr+0x70>
  406e4e:	d1f6      	bne.n	406e3e <memchr+0xe>
  406e50:	b4f0      	push	{r4, r5, r6, r7}
  406e52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406e56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  406e5a:	f022 0407 	bic.w	r4, r2, #7
  406e5e:	f07f 0700 	mvns.w	r7, #0
  406e62:	2300      	movs	r3, #0
  406e64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406e68:	3c08      	subs	r4, #8
  406e6a:	ea85 0501 	eor.w	r5, r5, r1
  406e6e:	ea86 0601 	eor.w	r6, r6, r1
  406e72:	fa85 f547 	uadd8	r5, r5, r7
  406e76:	faa3 f587 	sel	r5, r3, r7
  406e7a:	fa86 f647 	uadd8	r6, r6, r7
  406e7e:	faa5 f687 	sel	r6, r5, r7
  406e82:	b98e      	cbnz	r6, 406ea8 <memchr+0x78>
  406e84:	d1ee      	bne.n	406e64 <memchr+0x34>
  406e86:	bcf0      	pop	{r4, r5, r6, r7}
  406e88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406e8c:	f002 0207 	and.w	r2, r2, #7
  406e90:	b132      	cbz	r2, 406ea0 <memchr+0x70>
  406e92:	f810 3b01 	ldrb.w	r3, [r0], #1
  406e96:	3a01      	subs	r2, #1
  406e98:	ea83 0301 	eor.w	r3, r3, r1
  406e9c:	b113      	cbz	r3, 406ea4 <memchr+0x74>
  406e9e:	d1f8      	bne.n	406e92 <memchr+0x62>
  406ea0:	2000      	movs	r0, #0
  406ea2:	4770      	bx	lr
  406ea4:	3801      	subs	r0, #1
  406ea6:	4770      	bx	lr
  406ea8:	2d00      	cmp	r5, #0
  406eaa:	bf06      	itte	eq
  406eac:	4635      	moveq	r5, r6
  406eae:	3803      	subeq	r0, #3
  406eb0:	3807      	subne	r0, #7
  406eb2:	f015 0f01 	tst.w	r5, #1
  406eb6:	d107      	bne.n	406ec8 <memchr+0x98>
  406eb8:	3001      	adds	r0, #1
  406eba:	f415 7f80 	tst.w	r5, #256	; 0x100
  406ebe:	bf02      	ittt	eq
  406ec0:	3001      	addeq	r0, #1
  406ec2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406ec6:	3001      	addeq	r0, #1
  406ec8:	bcf0      	pop	{r4, r5, r6, r7}
  406eca:	3801      	subs	r0, #1
  406ecc:	4770      	bx	lr
  406ece:	bf00      	nop

00406ed0 <memmove>:
  406ed0:	4288      	cmp	r0, r1
  406ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
  406ed4:	d90d      	bls.n	406ef2 <memmove+0x22>
  406ed6:	188b      	adds	r3, r1, r2
  406ed8:	4298      	cmp	r0, r3
  406eda:	d20a      	bcs.n	406ef2 <memmove+0x22>
  406edc:	1881      	adds	r1, r0, r2
  406ede:	2a00      	cmp	r2, #0
  406ee0:	d051      	beq.n	406f86 <memmove+0xb6>
  406ee2:	1a9a      	subs	r2, r3, r2
  406ee4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406ee8:	f801 4d01 	strb.w	r4, [r1, #-1]!
  406eec:	4293      	cmp	r3, r2
  406eee:	d1f9      	bne.n	406ee4 <memmove+0x14>
  406ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406ef2:	2a0f      	cmp	r2, #15
  406ef4:	d948      	bls.n	406f88 <memmove+0xb8>
  406ef6:	ea41 0300 	orr.w	r3, r1, r0
  406efa:	079b      	lsls	r3, r3, #30
  406efc:	d146      	bne.n	406f8c <memmove+0xbc>
  406efe:	f100 0410 	add.w	r4, r0, #16
  406f02:	f101 0310 	add.w	r3, r1, #16
  406f06:	4615      	mov	r5, r2
  406f08:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406f0c:	f844 6c10 	str.w	r6, [r4, #-16]
  406f10:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406f14:	f844 6c0c 	str.w	r6, [r4, #-12]
  406f18:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406f1c:	f844 6c08 	str.w	r6, [r4, #-8]
  406f20:	3d10      	subs	r5, #16
  406f22:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406f26:	f844 6c04 	str.w	r6, [r4, #-4]
  406f2a:	2d0f      	cmp	r5, #15
  406f2c:	f103 0310 	add.w	r3, r3, #16
  406f30:	f104 0410 	add.w	r4, r4, #16
  406f34:	d8e8      	bhi.n	406f08 <memmove+0x38>
  406f36:	f1a2 0310 	sub.w	r3, r2, #16
  406f3a:	f023 030f 	bic.w	r3, r3, #15
  406f3e:	f002 0e0f 	and.w	lr, r2, #15
  406f42:	3310      	adds	r3, #16
  406f44:	f1be 0f03 	cmp.w	lr, #3
  406f48:	4419      	add	r1, r3
  406f4a:	4403      	add	r3, r0
  406f4c:	d921      	bls.n	406f92 <memmove+0xc2>
  406f4e:	1f1e      	subs	r6, r3, #4
  406f50:	460d      	mov	r5, r1
  406f52:	4674      	mov	r4, lr
  406f54:	3c04      	subs	r4, #4
  406f56:	f855 7b04 	ldr.w	r7, [r5], #4
  406f5a:	f846 7f04 	str.w	r7, [r6, #4]!
  406f5e:	2c03      	cmp	r4, #3
  406f60:	d8f8      	bhi.n	406f54 <memmove+0x84>
  406f62:	f1ae 0404 	sub.w	r4, lr, #4
  406f66:	f024 0403 	bic.w	r4, r4, #3
  406f6a:	3404      	adds	r4, #4
  406f6c:	4423      	add	r3, r4
  406f6e:	4421      	add	r1, r4
  406f70:	f002 0203 	and.w	r2, r2, #3
  406f74:	b162      	cbz	r2, 406f90 <memmove+0xc0>
  406f76:	3b01      	subs	r3, #1
  406f78:	440a      	add	r2, r1
  406f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  406f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406f82:	428a      	cmp	r2, r1
  406f84:	d1f9      	bne.n	406f7a <memmove+0xaa>
  406f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406f88:	4603      	mov	r3, r0
  406f8a:	e7f3      	b.n	406f74 <memmove+0xa4>
  406f8c:	4603      	mov	r3, r0
  406f8e:	e7f2      	b.n	406f76 <memmove+0xa6>
  406f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406f92:	4672      	mov	r2, lr
  406f94:	e7ee      	b.n	406f74 <memmove+0xa4>
  406f96:	bf00      	nop

00406f98 <__malloc_lock>:
  406f98:	4770      	bx	lr
  406f9a:	bf00      	nop

00406f9c <__malloc_unlock>:
  406f9c:	4770      	bx	lr
  406f9e:	bf00      	nop

00406fa0 <_Balloc>:
  406fa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406fa2:	b570      	push	{r4, r5, r6, lr}
  406fa4:	4605      	mov	r5, r0
  406fa6:	460c      	mov	r4, r1
  406fa8:	b14b      	cbz	r3, 406fbe <_Balloc+0x1e>
  406faa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  406fae:	b180      	cbz	r0, 406fd2 <_Balloc+0x32>
  406fb0:	6802      	ldr	r2, [r0, #0]
  406fb2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406fb6:	2300      	movs	r3, #0
  406fb8:	6103      	str	r3, [r0, #16]
  406fba:	60c3      	str	r3, [r0, #12]
  406fbc:	bd70      	pop	{r4, r5, r6, pc}
  406fbe:	2221      	movs	r2, #33	; 0x21
  406fc0:	2104      	movs	r1, #4
  406fc2:	f000 fdcf 	bl	407b64 <_calloc_r>
  406fc6:	64e8      	str	r0, [r5, #76]	; 0x4c
  406fc8:	4603      	mov	r3, r0
  406fca:	2800      	cmp	r0, #0
  406fcc:	d1ed      	bne.n	406faa <_Balloc+0xa>
  406fce:	2000      	movs	r0, #0
  406fd0:	bd70      	pop	{r4, r5, r6, pc}
  406fd2:	2101      	movs	r1, #1
  406fd4:	fa01 f604 	lsl.w	r6, r1, r4
  406fd8:	1d72      	adds	r2, r6, #5
  406fda:	4628      	mov	r0, r5
  406fdc:	0092      	lsls	r2, r2, #2
  406fde:	f000 fdc1 	bl	407b64 <_calloc_r>
  406fe2:	2800      	cmp	r0, #0
  406fe4:	d0f3      	beq.n	406fce <_Balloc+0x2e>
  406fe6:	6044      	str	r4, [r0, #4]
  406fe8:	6086      	str	r6, [r0, #8]
  406fea:	e7e4      	b.n	406fb6 <_Balloc+0x16>

00406fec <_Bfree>:
  406fec:	b131      	cbz	r1, 406ffc <_Bfree+0x10>
  406fee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  406ff0:	684a      	ldr	r2, [r1, #4]
  406ff2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406ff6:	6008      	str	r0, [r1, #0]
  406ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406ffc:	4770      	bx	lr
  406ffe:	bf00      	nop

00407000 <__multadd>:
  407000:	b5f0      	push	{r4, r5, r6, r7, lr}
  407002:	690c      	ldr	r4, [r1, #16]
  407004:	b083      	sub	sp, #12
  407006:	460d      	mov	r5, r1
  407008:	4606      	mov	r6, r0
  40700a:	f101 0e14 	add.w	lr, r1, #20
  40700e:	2700      	movs	r7, #0
  407010:	f8de 0000 	ldr.w	r0, [lr]
  407014:	b281      	uxth	r1, r0
  407016:	fb02 3101 	mla	r1, r2, r1, r3
  40701a:	0c0b      	lsrs	r3, r1, #16
  40701c:	0c00      	lsrs	r0, r0, #16
  40701e:	fb02 3300 	mla	r3, r2, r0, r3
  407022:	b289      	uxth	r1, r1
  407024:	3701      	adds	r7, #1
  407026:	eb01 4103 	add.w	r1, r1, r3, lsl #16
  40702a:	42bc      	cmp	r4, r7
  40702c:	f84e 1b04 	str.w	r1, [lr], #4
  407030:	ea4f 4313 	mov.w	r3, r3, lsr #16
  407034:	dcec      	bgt.n	407010 <__multadd+0x10>
  407036:	b13b      	cbz	r3, 407048 <__multadd+0x48>
  407038:	68aa      	ldr	r2, [r5, #8]
  40703a:	4294      	cmp	r4, r2
  40703c:	da07      	bge.n	40704e <__multadd+0x4e>
  40703e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  407042:	3401      	adds	r4, #1
  407044:	6153      	str	r3, [r2, #20]
  407046:	612c      	str	r4, [r5, #16]
  407048:	4628      	mov	r0, r5
  40704a:	b003      	add	sp, #12
  40704c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40704e:	6869      	ldr	r1, [r5, #4]
  407050:	9301      	str	r3, [sp, #4]
  407052:	3101      	adds	r1, #1
  407054:	4630      	mov	r0, r6
  407056:	f7ff ffa3 	bl	406fa0 <_Balloc>
  40705a:	692a      	ldr	r2, [r5, #16]
  40705c:	3202      	adds	r2, #2
  40705e:	f105 010c 	add.w	r1, r5, #12
  407062:	4607      	mov	r7, r0
  407064:	0092      	lsls	r2, r2, #2
  407066:	300c      	adds	r0, #12
  407068:	f7fc fe38 	bl	403cdc <memcpy>
  40706c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40706e:	6869      	ldr	r1, [r5, #4]
  407070:	9b01      	ldr	r3, [sp, #4]
  407072:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  407076:	6028      	str	r0, [r5, #0]
  407078:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  40707c:	463d      	mov	r5, r7
  40707e:	e7de      	b.n	40703e <__multadd+0x3e>

00407080 <__hi0bits>:
  407080:	0c03      	lsrs	r3, r0, #16
  407082:	041b      	lsls	r3, r3, #16
  407084:	b9b3      	cbnz	r3, 4070b4 <__hi0bits+0x34>
  407086:	0400      	lsls	r0, r0, #16
  407088:	2310      	movs	r3, #16
  40708a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
  40708e:	bf04      	itt	eq
  407090:	0200      	lsleq	r0, r0, #8
  407092:	3308      	addeq	r3, #8
  407094:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
  407098:	bf04      	itt	eq
  40709a:	0100      	lsleq	r0, r0, #4
  40709c:	3304      	addeq	r3, #4
  40709e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
  4070a2:	bf04      	itt	eq
  4070a4:	0080      	lsleq	r0, r0, #2
  4070a6:	3302      	addeq	r3, #2
  4070a8:	2800      	cmp	r0, #0
  4070aa:	db07      	blt.n	4070bc <__hi0bits+0x3c>
  4070ac:	0042      	lsls	r2, r0, #1
  4070ae:	d403      	bmi.n	4070b8 <__hi0bits+0x38>
  4070b0:	2020      	movs	r0, #32
  4070b2:	4770      	bx	lr
  4070b4:	2300      	movs	r3, #0
  4070b6:	e7e8      	b.n	40708a <__hi0bits+0xa>
  4070b8:	1c58      	adds	r0, r3, #1
  4070ba:	4770      	bx	lr
  4070bc:	4618      	mov	r0, r3
  4070be:	4770      	bx	lr

004070c0 <__lo0bits>:
  4070c0:	6803      	ldr	r3, [r0, #0]
  4070c2:	f013 0207 	ands.w	r2, r3, #7
  4070c6:	d007      	beq.n	4070d8 <__lo0bits+0x18>
  4070c8:	07d9      	lsls	r1, r3, #31
  4070ca:	d420      	bmi.n	40710e <__lo0bits+0x4e>
  4070cc:	079a      	lsls	r2, r3, #30
  4070ce:	d420      	bmi.n	407112 <__lo0bits+0x52>
  4070d0:	089b      	lsrs	r3, r3, #2
  4070d2:	6003      	str	r3, [r0, #0]
  4070d4:	2002      	movs	r0, #2
  4070d6:	4770      	bx	lr
  4070d8:	b299      	uxth	r1, r3
  4070da:	b909      	cbnz	r1, 4070e0 <__lo0bits+0x20>
  4070dc:	0c1b      	lsrs	r3, r3, #16
  4070de:	2210      	movs	r2, #16
  4070e0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4070e4:	bf04      	itt	eq
  4070e6:	0a1b      	lsreq	r3, r3, #8
  4070e8:	3208      	addeq	r2, #8
  4070ea:	0719      	lsls	r1, r3, #28
  4070ec:	bf04      	itt	eq
  4070ee:	091b      	lsreq	r3, r3, #4
  4070f0:	3204      	addeq	r2, #4
  4070f2:	0799      	lsls	r1, r3, #30
  4070f4:	bf04      	itt	eq
  4070f6:	089b      	lsreq	r3, r3, #2
  4070f8:	3202      	addeq	r2, #2
  4070fa:	07d9      	lsls	r1, r3, #31
  4070fc:	d404      	bmi.n	407108 <__lo0bits+0x48>
  4070fe:	085b      	lsrs	r3, r3, #1
  407100:	d101      	bne.n	407106 <__lo0bits+0x46>
  407102:	2020      	movs	r0, #32
  407104:	4770      	bx	lr
  407106:	3201      	adds	r2, #1
  407108:	6003      	str	r3, [r0, #0]
  40710a:	4610      	mov	r0, r2
  40710c:	4770      	bx	lr
  40710e:	2000      	movs	r0, #0
  407110:	4770      	bx	lr
  407112:	085b      	lsrs	r3, r3, #1
  407114:	6003      	str	r3, [r0, #0]
  407116:	2001      	movs	r0, #1
  407118:	4770      	bx	lr
  40711a:	bf00      	nop

0040711c <__i2b>:
  40711c:	b510      	push	{r4, lr}
  40711e:	460c      	mov	r4, r1
  407120:	2101      	movs	r1, #1
  407122:	f7ff ff3d 	bl	406fa0 <_Balloc>
  407126:	2201      	movs	r2, #1
  407128:	6144      	str	r4, [r0, #20]
  40712a:	6102      	str	r2, [r0, #16]
  40712c:	bd10      	pop	{r4, pc}
  40712e:	bf00      	nop

00407130 <__multiply>:
  407130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407134:	690d      	ldr	r5, [r1, #16]
  407136:	6917      	ldr	r7, [r2, #16]
  407138:	42bd      	cmp	r5, r7
  40713a:	b083      	sub	sp, #12
  40713c:	460c      	mov	r4, r1
  40713e:	4616      	mov	r6, r2
  407140:	da04      	bge.n	40714c <__multiply+0x1c>
  407142:	462a      	mov	r2, r5
  407144:	4634      	mov	r4, r6
  407146:	463d      	mov	r5, r7
  407148:	460e      	mov	r6, r1
  40714a:	4617      	mov	r7, r2
  40714c:	68a3      	ldr	r3, [r4, #8]
  40714e:	6861      	ldr	r1, [r4, #4]
  407150:	eb05 0807 	add.w	r8, r5, r7
  407154:	4598      	cmp	r8, r3
  407156:	bfc8      	it	gt
  407158:	3101      	addgt	r1, #1
  40715a:	f7ff ff21 	bl	406fa0 <_Balloc>
  40715e:	f100 0c14 	add.w	ip, r0, #20
  407162:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
  407166:	45cc      	cmp	ip, r9
  407168:	9000      	str	r0, [sp, #0]
  40716a:	d205      	bcs.n	407178 <__multiply+0x48>
  40716c:	4663      	mov	r3, ip
  40716e:	2100      	movs	r1, #0
  407170:	f843 1b04 	str.w	r1, [r3], #4
  407174:	4599      	cmp	r9, r3
  407176:	d8fb      	bhi.n	407170 <__multiply+0x40>
  407178:	f106 0214 	add.w	r2, r6, #20
  40717c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
  407180:	f104 0314 	add.w	r3, r4, #20
  407184:	4552      	cmp	r2, sl
  407186:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
  40718a:	d254      	bcs.n	407236 <__multiply+0x106>
  40718c:	f8cd 9004 	str.w	r9, [sp, #4]
  407190:	4699      	mov	r9, r3
  407192:	f852 3b04 	ldr.w	r3, [r2], #4
  407196:	fa1f fb83 	uxth.w	fp, r3
  40719a:	f1bb 0f00 	cmp.w	fp, #0
  40719e:	d020      	beq.n	4071e2 <__multiply+0xb2>
  4071a0:	2000      	movs	r0, #0
  4071a2:	464f      	mov	r7, r9
  4071a4:	4666      	mov	r6, ip
  4071a6:	4605      	mov	r5, r0
  4071a8:	e000      	b.n	4071ac <__multiply+0x7c>
  4071aa:	461e      	mov	r6, r3
  4071ac:	f857 4b04 	ldr.w	r4, [r7], #4
  4071b0:	6830      	ldr	r0, [r6, #0]
  4071b2:	b2a1      	uxth	r1, r4
  4071b4:	b283      	uxth	r3, r0
  4071b6:	fb0b 3101 	mla	r1, fp, r1, r3
  4071ba:	0c24      	lsrs	r4, r4, #16
  4071bc:	0c00      	lsrs	r0, r0, #16
  4071be:	194b      	adds	r3, r1, r5
  4071c0:	fb0b 0004 	mla	r0, fp, r4, r0
  4071c4:	eb00 4013 	add.w	r0, r0, r3, lsr #16
  4071c8:	b299      	uxth	r1, r3
  4071ca:	4633      	mov	r3, r6
  4071cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
  4071d0:	45be      	cmp	lr, r7
  4071d2:	ea4f 4510 	mov.w	r5, r0, lsr #16
  4071d6:	f843 1b04 	str.w	r1, [r3], #4
  4071da:	d8e6      	bhi.n	4071aa <__multiply+0x7a>
  4071dc:	6075      	str	r5, [r6, #4]
  4071de:	f852 3c04 	ldr.w	r3, [r2, #-4]
  4071e2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
  4071e6:	d020      	beq.n	40722a <__multiply+0xfa>
  4071e8:	f8dc 3000 	ldr.w	r3, [ip]
  4071ec:	4667      	mov	r7, ip
  4071ee:	4618      	mov	r0, r3
  4071f0:	464d      	mov	r5, r9
  4071f2:	2100      	movs	r1, #0
  4071f4:	e000      	b.n	4071f8 <__multiply+0xc8>
  4071f6:	4637      	mov	r7, r6
  4071f8:	882c      	ldrh	r4, [r5, #0]
  4071fa:	0c00      	lsrs	r0, r0, #16
  4071fc:	fb0b 0004 	mla	r0, fp, r4, r0
  407200:	4401      	add	r1, r0
  407202:	b29c      	uxth	r4, r3
  407204:	463e      	mov	r6, r7
  407206:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
  40720a:	f846 3b04 	str.w	r3, [r6], #4
  40720e:	6878      	ldr	r0, [r7, #4]
  407210:	f855 4b04 	ldr.w	r4, [r5], #4
  407214:	b283      	uxth	r3, r0
  407216:	0c24      	lsrs	r4, r4, #16
  407218:	fb0b 3404 	mla	r4, fp, r4, r3
  40721c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
  407220:	45ae      	cmp	lr, r5
  407222:	ea4f 4113 	mov.w	r1, r3, lsr #16
  407226:	d8e6      	bhi.n	4071f6 <__multiply+0xc6>
  407228:	607b      	str	r3, [r7, #4]
  40722a:	4592      	cmp	sl, r2
  40722c:	f10c 0c04 	add.w	ip, ip, #4
  407230:	d8af      	bhi.n	407192 <__multiply+0x62>
  407232:	f8dd 9004 	ldr.w	r9, [sp, #4]
  407236:	f1b8 0f00 	cmp.w	r8, #0
  40723a:	dd0b      	ble.n	407254 <__multiply+0x124>
  40723c:	f859 3c04 	ldr.w	r3, [r9, #-4]
  407240:	f1a9 0904 	sub.w	r9, r9, #4
  407244:	b11b      	cbz	r3, 40724e <__multiply+0x11e>
  407246:	e005      	b.n	407254 <__multiply+0x124>
  407248:	f859 3d04 	ldr.w	r3, [r9, #-4]!
  40724c:	b913      	cbnz	r3, 407254 <__multiply+0x124>
  40724e:	f1b8 0801 	subs.w	r8, r8, #1
  407252:	d1f9      	bne.n	407248 <__multiply+0x118>
  407254:	9800      	ldr	r0, [sp, #0]
  407256:	f8c0 8010 	str.w	r8, [r0, #16]
  40725a:	b003      	add	sp, #12
  40725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407260 <__pow5mult>:
  407260:	f012 0303 	ands.w	r3, r2, #3
  407264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407268:	4614      	mov	r4, r2
  40726a:	4607      	mov	r7, r0
  40726c:	d12e      	bne.n	4072cc <__pow5mult+0x6c>
  40726e:	460e      	mov	r6, r1
  407270:	10a4      	asrs	r4, r4, #2
  407272:	d01c      	beq.n	4072ae <__pow5mult+0x4e>
  407274:	6cbd      	ldr	r5, [r7, #72]	; 0x48
  407276:	b395      	cbz	r5, 4072de <__pow5mult+0x7e>
  407278:	07e3      	lsls	r3, r4, #31
  40727a:	f04f 0800 	mov.w	r8, #0
  40727e:	d406      	bmi.n	40728e <__pow5mult+0x2e>
  407280:	1064      	asrs	r4, r4, #1
  407282:	d014      	beq.n	4072ae <__pow5mult+0x4e>
  407284:	6828      	ldr	r0, [r5, #0]
  407286:	b1a8      	cbz	r0, 4072b4 <__pow5mult+0x54>
  407288:	4605      	mov	r5, r0
  40728a:	07e3      	lsls	r3, r4, #31
  40728c:	d5f8      	bpl.n	407280 <__pow5mult+0x20>
  40728e:	462a      	mov	r2, r5
  407290:	4631      	mov	r1, r6
  407292:	4638      	mov	r0, r7
  407294:	f7ff ff4c 	bl	407130 <__multiply>
  407298:	b1b6      	cbz	r6, 4072c8 <__pow5mult+0x68>
  40729a:	6872      	ldr	r2, [r6, #4]
  40729c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40729e:	1064      	asrs	r4, r4, #1
  4072a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4072a4:	6031      	str	r1, [r6, #0]
  4072a6:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4072aa:	4606      	mov	r6, r0
  4072ac:	d1ea      	bne.n	407284 <__pow5mult+0x24>
  4072ae:	4630      	mov	r0, r6
  4072b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4072b4:	462a      	mov	r2, r5
  4072b6:	4629      	mov	r1, r5
  4072b8:	4638      	mov	r0, r7
  4072ba:	f7ff ff39 	bl	407130 <__multiply>
  4072be:	6028      	str	r0, [r5, #0]
  4072c0:	f8c0 8000 	str.w	r8, [r0]
  4072c4:	4605      	mov	r5, r0
  4072c6:	e7e0      	b.n	40728a <__pow5mult+0x2a>
  4072c8:	4606      	mov	r6, r0
  4072ca:	e7d9      	b.n	407280 <__pow5mult+0x20>
  4072cc:	1e5a      	subs	r2, r3, #1
  4072ce:	4d0b      	ldr	r5, [pc, #44]	; (4072fc <__pow5mult+0x9c>)
  4072d0:	2300      	movs	r3, #0
  4072d2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  4072d6:	f7ff fe93 	bl	407000 <__multadd>
  4072da:	4606      	mov	r6, r0
  4072dc:	e7c8      	b.n	407270 <__pow5mult+0x10>
  4072de:	2101      	movs	r1, #1
  4072e0:	4638      	mov	r0, r7
  4072e2:	f7ff fe5d 	bl	406fa0 <_Balloc>
  4072e6:	f240 2171 	movw	r1, #625	; 0x271
  4072ea:	2201      	movs	r2, #1
  4072ec:	2300      	movs	r3, #0
  4072ee:	6141      	str	r1, [r0, #20]
  4072f0:	6102      	str	r2, [r0, #16]
  4072f2:	4605      	mov	r5, r0
  4072f4:	64b8      	str	r0, [r7, #72]	; 0x48
  4072f6:	6003      	str	r3, [r0, #0]
  4072f8:	e7be      	b.n	407278 <__pow5mult+0x18>
  4072fa:	bf00      	nop
  4072fc:	00408388 	.word	0x00408388

00407300 <__lshift>:
  407300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407304:	4691      	mov	r9, r2
  407306:	690a      	ldr	r2, [r1, #16]
  407308:	688b      	ldr	r3, [r1, #8]
  40730a:	ea4f 1469 	mov.w	r4, r9, asr #5
  40730e:	eb04 0802 	add.w	r8, r4, r2
  407312:	f108 0501 	add.w	r5, r8, #1
  407316:	429d      	cmp	r5, r3
  407318:	460e      	mov	r6, r1
  40731a:	4682      	mov	sl, r0
  40731c:	6849      	ldr	r1, [r1, #4]
  40731e:	dd04      	ble.n	40732a <__lshift+0x2a>
  407320:	005b      	lsls	r3, r3, #1
  407322:	429d      	cmp	r5, r3
  407324:	f101 0101 	add.w	r1, r1, #1
  407328:	dcfa      	bgt.n	407320 <__lshift+0x20>
  40732a:	4650      	mov	r0, sl
  40732c:	f7ff fe38 	bl	406fa0 <_Balloc>
  407330:	2c00      	cmp	r4, #0
  407332:	f100 0214 	add.w	r2, r0, #20
  407336:	dd38      	ble.n	4073aa <__lshift+0xaa>
  407338:	eb02 0384 	add.w	r3, r2, r4, lsl #2
  40733c:	2100      	movs	r1, #0
  40733e:	f842 1b04 	str.w	r1, [r2], #4
  407342:	4293      	cmp	r3, r2
  407344:	d1fb      	bne.n	40733e <__lshift+0x3e>
  407346:	6934      	ldr	r4, [r6, #16]
  407348:	f106 0114 	add.w	r1, r6, #20
  40734c:	f019 091f 	ands.w	r9, r9, #31
  407350:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  407354:	d021      	beq.n	40739a <__lshift+0x9a>
  407356:	f1c9 0220 	rsb	r2, r9, #32
  40735a:	2400      	movs	r4, #0
  40735c:	680f      	ldr	r7, [r1, #0]
  40735e:	fa07 fc09 	lsl.w	ip, r7, r9
  407362:	ea4c 0404 	orr.w	r4, ip, r4
  407366:	469c      	mov	ip, r3
  407368:	f843 4b04 	str.w	r4, [r3], #4
  40736c:	f851 4b04 	ldr.w	r4, [r1], #4
  407370:	458e      	cmp	lr, r1
  407372:	fa24 f402 	lsr.w	r4, r4, r2
  407376:	d8f1      	bhi.n	40735c <__lshift+0x5c>
  407378:	f8cc 4004 	str.w	r4, [ip, #4]
  40737c:	b10c      	cbz	r4, 407382 <__lshift+0x82>
  40737e:	f108 0502 	add.w	r5, r8, #2
  407382:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
  407386:	6872      	ldr	r2, [r6, #4]
  407388:	3d01      	subs	r5, #1
  40738a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40738e:	6105      	str	r5, [r0, #16]
  407390:	6031      	str	r1, [r6, #0]
  407392:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  407396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40739a:	3b04      	subs	r3, #4
  40739c:	f851 2b04 	ldr.w	r2, [r1], #4
  4073a0:	f843 2f04 	str.w	r2, [r3, #4]!
  4073a4:	458e      	cmp	lr, r1
  4073a6:	d8f9      	bhi.n	40739c <__lshift+0x9c>
  4073a8:	e7eb      	b.n	407382 <__lshift+0x82>
  4073aa:	4613      	mov	r3, r2
  4073ac:	e7cb      	b.n	407346 <__lshift+0x46>
  4073ae:	bf00      	nop

004073b0 <__mcmp>:
  4073b0:	6902      	ldr	r2, [r0, #16]
  4073b2:	690b      	ldr	r3, [r1, #16]
  4073b4:	1ad2      	subs	r2, r2, r3
  4073b6:	d112      	bne.n	4073de <__mcmp+0x2e>
  4073b8:	009b      	lsls	r3, r3, #2
  4073ba:	3014      	adds	r0, #20
  4073bc:	3114      	adds	r1, #20
  4073be:	4419      	add	r1, r3
  4073c0:	b410      	push	{r4}
  4073c2:	4403      	add	r3, r0
  4073c4:	e001      	b.n	4073ca <__mcmp+0x1a>
  4073c6:	4298      	cmp	r0, r3
  4073c8:	d20b      	bcs.n	4073e2 <__mcmp+0x32>
  4073ca:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  4073ce:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  4073d2:	4294      	cmp	r4, r2
  4073d4:	d0f7      	beq.n	4073c6 <__mcmp+0x16>
  4073d6:	d307      	bcc.n	4073e8 <__mcmp+0x38>
  4073d8:	2001      	movs	r0, #1
  4073da:	bc10      	pop	{r4}
  4073dc:	4770      	bx	lr
  4073de:	4610      	mov	r0, r2
  4073e0:	4770      	bx	lr
  4073e2:	2000      	movs	r0, #0
  4073e4:	bc10      	pop	{r4}
  4073e6:	4770      	bx	lr
  4073e8:	f04f 30ff 	mov.w	r0, #4294967295
  4073ec:	e7f5      	b.n	4073da <__mcmp+0x2a>
  4073ee:	bf00      	nop

004073f0 <__mdiff>:
  4073f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4073f4:	690b      	ldr	r3, [r1, #16]
  4073f6:	460f      	mov	r7, r1
  4073f8:	6911      	ldr	r1, [r2, #16]
  4073fa:	1a5b      	subs	r3, r3, r1
  4073fc:	2b00      	cmp	r3, #0
  4073fe:	4690      	mov	r8, r2
  407400:	d117      	bne.n	407432 <__mdiff+0x42>
  407402:	0089      	lsls	r1, r1, #2
  407404:	f107 0214 	add.w	r2, r7, #20
  407408:	f108 0514 	add.w	r5, r8, #20
  40740c:	1853      	adds	r3, r2, r1
  40740e:	4429      	add	r1, r5
  407410:	e001      	b.n	407416 <__mdiff+0x26>
  407412:	429a      	cmp	r2, r3
  407414:	d25e      	bcs.n	4074d4 <__mdiff+0xe4>
  407416:	f853 6d04 	ldr.w	r6, [r3, #-4]!
  40741a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40741e:	42a6      	cmp	r6, r4
  407420:	d0f7      	beq.n	407412 <__mdiff+0x22>
  407422:	d260      	bcs.n	4074e6 <__mdiff+0xf6>
  407424:	463b      	mov	r3, r7
  407426:	4614      	mov	r4, r2
  407428:	4647      	mov	r7, r8
  40742a:	f04f 0901 	mov.w	r9, #1
  40742e:	4698      	mov	r8, r3
  407430:	e006      	b.n	407440 <__mdiff+0x50>
  407432:	db5d      	blt.n	4074f0 <__mdiff+0x100>
  407434:	f107 0514 	add.w	r5, r7, #20
  407438:	f102 0414 	add.w	r4, r2, #20
  40743c:	f04f 0900 	mov.w	r9, #0
  407440:	6879      	ldr	r1, [r7, #4]
  407442:	f7ff fdad 	bl	406fa0 <_Balloc>
  407446:	f8d8 3010 	ldr.w	r3, [r8, #16]
  40744a:	693e      	ldr	r6, [r7, #16]
  40744c:	f8c0 900c 	str.w	r9, [r0, #12]
  407450:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  407454:	46a6      	mov	lr, r4
  407456:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  40745a:	f100 0414 	add.w	r4, r0, #20
  40745e:	2300      	movs	r3, #0
  407460:	f85e 1b04 	ldr.w	r1, [lr], #4
  407464:	f855 8b04 	ldr.w	r8, [r5], #4
  407468:	b28a      	uxth	r2, r1
  40746a:	fa13 f388 	uxtah	r3, r3, r8
  40746e:	0c09      	lsrs	r1, r1, #16
  407470:	1a9a      	subs	r2, r3, r2
  407472:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  407476:	eb03 4322 	add.w	r3, r3, r2, asr #16
  40747a:	b292      	uxth	r2, r2
  40747c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  407480:	45f4      	cmp	ip, lr
  407482:	f844 2b04 	str.w	r2, [r4], #4
  407486:	ea4f 4323 	mov.w	r3, r3, asr #16
  40748a:	d8e9      	bhi.n	407460 <__mdiff+0x70>
  40748c:	42af      	cmp	r7, r5
  40748e:	d917      	bls.n	4074c0 <__mdiff+0xd0>
  407490:	46a4      	mov	ip, r4
  407492:	4629      	mov	r1, r5
  407494:	f851 eb04 	ldr.w	lr, [r1], #4
  407498:	fa13 f28e 	uxtah	r2, r3, lr
  40749c:	1413      	asrs	r3, r2, #16
  40749e:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  4074a2:	b292      	uxth	r2, r2
  4074a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4074a8:	428f      	cmp	r7, r1
  4074aa:	f84c 2b04 	str.w	r2, [ip], #4
  4074ae:	ea4f 4323 	mov.w	r3, r3, asr #16
  4074b2:	d8ef      	bhi.n	407494 <__mdiff+0xa4>
  4074b4:	43ed      	mvns	r5, r5
  4074b6:	443d      	add	r5, r7
  4074b8:	f025 0503 	bic.w	r5, r5, #3
  4074bc:	3504      	adds	r5, #4
  4074be:	442c      	add	r4, r5
  4074c0:	3c04      	subs	r4, #4
  4074c2:	b922      	cbnz	r2, 4074ce <__mdiff+0xde>
  4074c4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4074c8:	3e01      	subs	r6, #1
  4074ca:	2b00      	cmp	r3, #0
  4074cc:	d0fa      	beq.n	4074c4 <__mdiff+0xd4>
  4074ce:	6106      	str	r6, [r0, #16]
  4074d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4074d4:	2100      	movs	r1, #0
  4074d6:	f7ff fd63 	bl	406fa0 <_Balloc>
  4074da:	2201      	movs	r2, #1
  4074dc:	2300      	movs	r3, #0
  4074de:	6102      	str	r2, [r0, #16]
  4074e0:	6143      	str	r3, [r0, #20]
  4074e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4074e6:	462c      	mov	r4, r5
  4074e8:	f04f 0900 	mov.w	r9, #0
  4074ec:	4615      	mov	r5, r2
  4074ee:	e7a7      	b.n	407440 <__mdiff+0x50>
  4074f0:	463b      	mov	r3, r7
  4074f2:	f107 0414 	add.w	r4, r7, #20
  4074f6:	f108 0514 	add.w	r5, r8, #20
  4074fa:	4647      	mov	r7, r8
  4074fc:	f04f 0901 	mov.w	r9, #1
  407500:	4698      	mov	r8, r3
  407502:	e79d      	b.n	407440 <__mdiff+0x50>

00407504 <__d2b>:
  407504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407508:	b082      	sub	sp, #8
  40750a:	2101      	movs	r1, #1
  40750c:	461c      	mov	r4, r3
  40750e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  407512:	4615      	mov	r5, r2
  407514:	9e08      	ldr	r6, [sp, #32]
  407516:	f7ff fd43 	bl	406fa0 <_Balloc>
  40751a:	f3c4 0413 	ubfx	r4, r4, #0, #20
  40751e:	4680      	mov	r8, r0
  407520:	b10f      	cbz	r7, 407526 <__d2b+0x22>
  407522:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  407526:	9401      	str	r4, [sp, #4]
  407528:	b31d      	cbz	r5, 407572 <__d2b+0x6e>
  40752a:	a802      	add	r0, sp, #8
  40752c:	f840 5d08 	str.w	r5, [r0, #-8]!
  407530:	f7ff fdc6 	bl	4070c0 <__lo0bits>
  407534:	2800      	cmp	r0, #0
  407536:	d134      	bne.n	4075a2 <__d2b+0x9e>
  407538:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40753c:	f8c8 2014 	str.w	r2, [r8, #20]
  407540:	2b00      	cmp	r3, #0
  407542:	bf0c      	ite	eq
  407544:	2101      	moveq	r1, #1
  407546:	2102      	movne	r1, #2
  407548:	f8c8 3018 	str.w	r3, [r8, #24]
  40754c:	f8c8 1010 	str.w	r1, [r8, #16]
  407550:	b9df      	cbnz	r7, 40758a <__d2b+0x86>
  407552:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  407556:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40755a:	6030      	str	r0, [r6, #0]
  40755c:	6918      	ldr	r0, [r3, #16]
  40755e:	f7ff fd8f 	bl	407080 <__hi0bits>
  407562:	9b09      	ldr	r3, [sp, #36]	; 0x24
  407564:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  407568:	6018      	str	r0, [r3, #0]
  40756a:	4640      	mov	r0, r8
  40756c:	b002      	add	sp, #8
  40756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407572:	a801      	add	r0, sp, #4
  407574:	f7ff fda4 	bl	4070c0 <__lo0bits>
  407578:	9b01      	ldr	r3, [sp, #4]
  40757a:	f8c8 3014 	str.w	r3, [r8, #20]
  40757e:	2101      	movs	r1, #1
  407580:	3020      	adds	r0, #32
  407582:	f8c8 1010 	str.w	r1, [r8, #16]
  407586:	2f00      	cmp	r7, #0
  407588:	d0e3      	beq.n	407552 <__d2b+0x4e>
  40758a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40758c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  407590:	4407      	add	r7, r0
  407592:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  407596:	6037      	str	r7, [r6, #0]
  407598:	6018      	str	r0, [r3, #0]
  40759a:	4640      	mov	r0, r8
  40759c:	b002      	add	sp, #8
  40759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4075a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4075a6:	f1c0 0120 	rsb	r1, r0, #32
  4075aa:	fa03 f101 	lsl.w	r1, r3, r1
  4075ae:	430a      	orrs	r2, r1
  4075b0:	40c3      	lsrs	r3, r0
  4075b2:	9301      	str	r3, [sp, #4]
  4075b4:	f8c8 2014 	str.w	r2, [r8, #20]
  4075b8:	e7c2      	b.n	407540 <__d2b+0x3c>
  4075ba:	bf00      	nop

004075bc <_realloc_r>:
  4075bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4075c0:	4617      	mov	r7, r2
  4075c2:	b083      	sub	sp, #12
  4075c4:	2900      	cmp	r1, #0
  4075c6:	f000 80c1 	beq.w	40774c <_realloc_r+0x190>
  4075ca:	460e      	mov	r6, r1
  4075cc:	4681      	mov	r9, r0
  4075ce:	f107 050b 	add.w	r5, r7, #11
  4075d2:	f7ff fce1 	bl	406f98 <__malloc_lock>
  4075d6:	f856 ec04 	ldr.w	lr, [r6, #-4]
  4075da:	2d16      	cmp	r5, #22
  4075dc:	f02e 0403 	bic.w	r4, lr, #3
  4075e0:	f1a6 0808 	sub.w	r8, r6, #8
  4075e4:	d840      	bhi.n	407668 <_realloc_r+0xac>
  4075e6:	2210      	movs	r2, #16
  4075e8:	4615      	mov	r5, r2
  4075ea:	42af      	cmp	r7, r5
  4075ec:	d841      	bhi.n	407672 <_realloc_r+0xb6>
  4075ee:	4294      	cmp	r4, r2
  4075f0:	da75      	bge.n	4076de <_realloc_r+0x122>
  4075f2:	4bc9      	ldr	r3, [pc, #804]	; (407918 <_realloc_r+0x35c>)
  4075f4:	6899      	ldr	r1, [r3, #8]
  4075f6:	eb08 0004 	add.w	r0, r8, r4
  4075fa:	4288      	cmp	r0, r1
  4075fc:	6841      	ldr	r1, [r0, #4]
  4075fe:	f000 80d9 	beq.w	4077b4 <_realloc_r+0x1f8>
  407602:	f021 0301 	bic.w	r3, r1, #1
  407606:	4403      	add	r3, r0
  407608:	685b      	ldr	r3, [r3, #4]
  40760a:	07db      	lsls	r3, r3, #31
  40760c:	d57d      	bpl.n	40770a <_realloc_r+0x14e>
  40760e:	f01e 0f01 	tst.w	lr, #1
  407612:	d035      	beq.n	407680 <_realloc_r+0xc4>
  407614:	4639      	mov	r1, r7
  407616:	4648      	mov	r0, r9
  407618:	f7ff f94c 	bl	4068b4 <_malloc_r>
  40761c:	4607      	mov	r7, r0
  40761e:	b1e0      	cbz	r0, 40765a <_realloc_r+0x9e>
  407620:	f856 3c04 	ldr.w	r3, [r6, #-4]
  407624:	f023 0301 	bic.w	r3, r3, #1
  407628:	4443      	add	r3, r8
  40762a:	f1a0 0208 	sub.w	r2, r0, #8
  40762e:	429a      	cmp	r2, r3
  407630:	f000 8144 	beq.w	4078bc <_realloc_r+0x300>
  407634:	1f22      	subs	r2, r4, #4
  407636:	2a24      	cmp	r2, #36	; 0x24
  407638:	f200 8131 	bhi.w	40789e <_realloc_r+0x2e2>
  40763c:	2a13      	cmp	r2, #19
  40763e:	f200 8104 	bhi.w	40784a <_realloc_r+0x28e>
  407642:	4603      	mov	r3, r0
  407644:	4632      	mov	r2, r6
  407646:	6811      	ldr	r1, [r2, #0]
  407648:	6019      	str	r1, [r3, #0]
  40764a:	6851      	ldr	r1, [r2, #4]
  40764c:	6059      	str	r1, [r3, #4]
  40764e:	6892      	ldr	r2, [r2, #8]
  407650:	609a      	str	r2, [r3, #8]
  407652:	4631      	mov	r1, r6
  407654:	4648      	mov	r0, r9
  407656:	f7ff f841 	bl	4066dc <_free_r>
  40765a:	4648      	mov	r0, r9
  40765c:	f7ff fc9e 	bl	406f9c <__malloc_unlock>
  407660:	4638      	mov	r0, r7
  407662:	b003      	add	sp, #12
  407664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407668:	f025 0507 	bic.w	r5, r5, #7
  40766c:	2d00      	cmp	r5, #0
  40766e:	462a      	mov	r2, r5
  407670:	dabb      	bge.n	4075ea <_realloc_r+0x2e>
  407672:	230c      	movs	r3, #12
  407674:	2000      	movs	r0, #0
  407676:	f8c9 3000 	str.w	r3, [r9]
  40767a:	b003      	add	sp, #12
  40767c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407680:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407684:	ebc3 0a08 	rsb	sl, r3, r8
  407688:	f8da 3004 	ldr.w	r3, [sl, #4]
  40768c:	f023 0c03 	bic.w	ip, r3, #3
  407690:	eb04 030c 	add.w	r3, r4, ip
  407694:	4293      	cmp	r3, r2
  407696:	dbbd      	blt.n	407614 <_realloc_r+0x58>
  407698:	4657      	mov	r7, sl
  40769a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40769e:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4076a2:	1f22      	subs	r2, r4, #4
  4076a4:	2a24      	cmp	r2, #36	; 0x24
  4076a6:	60c1      	str	r1, [r0, #12]
  4076a8:	6088      	str	r0, [r1, #8]
  4076aa:	f200 8117 	bhi.w	4078dc <_realloc_r+0x320>
  4076ae:	2a13      	cmp	r2, #19
  4076b0:	f240 8112 	bls.w	4078d8 <_realloc_r+0x31c>
  4076b4:	6831      	ldr	r1, [r6, #0]
  4076b6:	f8ca 1008 	str.w	r1, [sl, #8]
  4076ba:	6871      	ldr	r1, [r6, #4]
  4076bc:	f8ca 100c 	str.w	r1, [sl, #12]
  4076c0:	2a1b      	cmp	r2, #27
  4076c2:	f200 812b 	bhi.w	40791c <_realloc_r+0x360>
  4076c6:	3608      	adds	r6, #8
  4076c8:	f10a 0210 	add.w	r2, sl, #16
  4076cc:	6831      	ldr	r1, [r6, #0]
  4076ce:	6011      	str	r1, [r2, #0]
  4076d0:	6871      	ldr	r1, [r6, #4]
  4076d2:	6051      	str	r1, [r2, #4]
  4076d4:	68b1      	ldr	r1, [r6, #8]
  4076d6:	6091      	str	r1, [r2, #8]
  4076d8:	463e      	mov	r6, r7
  4076da:	461c      	mov	r4, r3
  4076dc:	46d0      	mov	r8, sl
  4076de:	1b63      	subs	r3, r4, r5
  4076e0:	2b0f      	cmp	r3, #15
  4076e2:	d81d      	bhi.n	407720 <_realloc_r+0x164>
  4076e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4076e8:	f003 0301 	and.w	r3, r3, #1
  4076ec:	4323      	orrs	r3, r4
  4076ee:	4444      	add	r4, r8
  4076f0:	f8c8 3004 	str.w	r3, [r8, #4]
  4076f4:	6863      	ldr	r3, [r4, #4]
  4076f6:	f043 0301 	orr.w	r3, r3, #1
  4076fa:	6063      	str	r3, [r4, #4]
  4076fc:	4648      	mov	r0, r9
  4076fe:	f7ff fc4d 	bl	406f9c <__malloc_unlock>
  407702:	4630      	mov	r0, r6
  407704:	b003      	add	sp, #12
  407706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40770a:	f021 0103 	bic.w	r1, r1, #3
  40770e:	4421      	add	r1, r4
  407710:	4291      	cmp	r1, r2
  407712:	db21      	blt.n	407758 <_realloc_r+0x19c>
  407714:	68c3      	ldr	r3, [r0, #12]
  407716:	6882      	ldr	r2, [r0, #8]
  407718:	460c      	mov	r4, r1
  40771a:	60d3      	str	r3, [r2, #12]
  40771c:	609a      	str	r2, [r3, #8]
  40771e:	e7de      	b.n	4076de <_realloc_r+0x122>
  407720:	f8d8 2004 	ldr.w	r2, [r8, #4]
  407724:	eb08 0105 	add.w	r1, r8, r5
  407728:	f002 0201 	and.w	r2, r2, #1
  40772c:	4315      	orrs	r5, r2
  40772e:	f043 0201 	orr.w	r2, r3, #1
  407732:	440b      	add	r3, r1
  407734:	f8c8 5004 	str.w	r5, [r8, #4]
  407738:	604a      	str	r2, [r1, #4]
  40773a:	685a      	ldr	r2, [r3, #4]
  40773c:	f042 0201 	orr.w	r2, r2, #1
  407740:	3108      	adds	r1, #8
  407742:	605a      	str	r2, [r3, #4]
  407744:	4648      	mov	r0, r9
  407746:	f7fe ffc9 	bl	4066dc <_free_r>
  40774a:	e7d7      	b.n	4076fc <_realloc_r+0x140>
  40774c:	4611      	mov	r1, r2
  40774e:	b003      	add	sp, #12
  407750:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407754:	f7ff b8ae 	b.w	4068b4 <_malloc_r>
  407758:	f01e 0f01 	tst.w	lr, #1
  40775c:	f47f af5a 	bne.w	407614 <_realloc_r+0x58>
  407760:	f856 3c08 	ldr.w	r3, [r6, #-8]
  407764:	ebc3 0a08 	rsb	sl, r3, r8
  407768:	f8da 3004 	ldr.w	r3, [sl, #4]
  40776c:	f023 0c03 	bic.w	ip, r3, #3
  407770:	eb01 0e0c 	add.w	lr, r1, ip
  407774:	4596      	cmp	lr, r2
  407776:	db8b      	blt.n	407690 <_realloc_r+0xd4>
  407778:	68c3      	ldr	r3, [r0, #12]
  40777a:	6882      	ldr	r2, [r0, #8]
  40777c:	4657      	mov	r7, sl
  40777e:	60d3      	str	r3, [r2, #12]
  407780:	609a      	str	r2, [r3, #8]
  407782:	f857 1f08 	ldr.w	r1, [r7, #8]!
  407786:	f8da 300c 	ldr.w	r3, [sl, #12]
  40778a:	60cb      	str	r3, [r1, #12]
  40778c:	1f22      	subs	r2, r4, #4
  40778e:	2a24      	cmp	r2, #36	; 0x24
  407790:	6099      	str	r1, [r3, #8]
  407792:	f200 8099 	bhi.w	4078c8 <_realloc_r+0x30c>
  407796:	2a13      	cmp	r2, #19
  407798:	d962      	bls.n	407860 <_realloc_r+0x2a4>
  40779a:	6833      	ldr	r3, [r6, #0]
  40779c:	f8ca 3008 	str.w	r3, [sl, #8]
  4077a0:	6873      	ldr	r3, [r6, #4]
  4077a2:	f8ca 300c 	str.w	r3, [sl, #12]
  4077a6:	2a1b      	cmp	r2, #27
  4077a8:	f200 80a0 	bhi.w	4078ec <_realloc_r+0x330>
  4077ac:	3608      	adds	r6, #8
  4077ae:	f10a 0310 	add.w	r3, sl, #16
  4077b2:	e056      	b.n	407862 <_realloc_r+0x2a6>
  4077b4:	f021 0b03 	bic.w	fp, r1, #3
  4077b8:	44a3      	add	fp, r4
  4077ba:	f105 0010 	add.w	r0, r5, #16
  4077be:	4583      	cmp	fp, r0
  4077c0:	da59      	bge.n	407876 <_realloc_r+0x2ba>
  4077c2:	f01e 0f01 	tst.w	lr, #1
  4077c6:	f47f af25 	bne.w	407614 <_realloc_r+0x58>
  4077ca:	f856 1c08 	ldr.w	r1, [r6, #-8]
  4077ce:	ebc1 0a08 	rsb	sl, r1, r8
  4077d2:	f8da 1004 	ldr.w	r1, [sl, #4]
  4077d6:	f021 0c03 	bic.w	ip, r1, #3
  4077da:	44e3      	add	fp, ip
  4077dc:	4558      	cmp	r0, fp
  4077de:	f73f af57 	bgt.w	407690 <_realloc_r+0xd4>
  4077e2:	4657      	mov	r7, sl
  4077e4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4077e8:	f857 0f08 	ldr.w	r0, [r7, #8]!
  4077ec:	1f22      	subs	r2, r4, #4
  4077ee:	2a24      	cmp	r2, #36	; 0x24
  4077f0:	60c1      	str	r1, [r0, #12]
  4077f2:	6088      	str	r0, [r1, #8]
  4077f4:	f200 80b4 	bhi.w	407960 <_realloc_r+0x3a4>
  4077f8:	2a13      	cmp	r2, #19
  4077fa:	f240 80a5 	bls.w	407948 <_realloc_r+0x38c>
  4077fe:	6831      	ldr	r1, [r6, #0]
  407800:	f8ca 1008 	str.w	r1, [sl, #8]
  407804:	6871      	ldr	r1, [r6, #4]
  407806:	f8ca 100c 	str.w	r1, [sl, #12]
  40780a:	2a1b      	cmp	r2, #27
  40780c:	f200 80af 	bhi.w	40796e <_realloc_r+0x3b2>
  407810:	3608      	adds	r6, #8
  407812:	f10a 0210 	add.w	r2, sl, #16
  407816:	6831      	ldr	r1, [r6, #0]
  407818:	6011      	str	r1, [r2, #0]
  40781a:	6871      	ldr	r1, [r6, #4]
  40781c:	6051      	str	r1, [r2, #4]
  40781e:	68b1      	ldr	r1, [r6, #8]
  407820:	6091      	str	r1, [r2, #8]
  407822:	eb0a 0105 	add.w	r1, sl, r5
  407826:	ebc5 020b 	rsb	r2, r5, fp
  40782a:	f042 0201 	orr.w	r2, r2, #1
  40782e:	6099      	str	r1, [r3, #8]
  407830:	604a      	str	r2, [r1, #4]
  407832:	f8da 3004 	ldr.w	r3, [sl, #4]
  407836:	f003 0301 	and.w	r3, r3, #1
  40783a:	431d      	orrs	r5, r3
  40783c:	4648      	mov	r0, r9
  40783e:	f8ca 5004 	str.w	r5, [sl, #4]
  407842:	f7ff fbab 	bl	406f9c <__malloc_unlock>
  407846:	4638      	mov	r0, r7
  407848:	e75c      	b.n	407704 <_realloc_r+0x148>
  40784a:	6833      	ldr	r3, [r6, #0]
  40784c:	6003      	str	r3, [r0, #0]
  40784e:	6873      	ldr	r3, [r6, #4]
  407850:	6043      	str	r3, [r0, #4]
  407852:	2a1b      	cmp	r2, #27
  407854:	d827      	bhi.n	4078a6 <_realloc_r+0x2ea>
  407856:	f100 0308 	add.w	r3, r0, #8
  40785a:	f106 0208 	add.w	r2, r6, #8
  40785e:	e6f2      	b.n	407646 <_realloc_r+0x8a>
  407860:	463b      	mov	r3, r7
  407862:	6832      	ldr	r2, [r6, #0]
  407864:	601a      	str	r2, [r3, #0]
  407866:	6872      	ldr	r2, [r6, #4]
  407868:	605a      	str	r2, [r3, #4]
  40786a:	68b2      	ldr	r2, [r6, #8]
  40786c:	609a      	str	r2, [r3, #8]
  40786e:	463e      	mov	r6, r7
  407870:	4674      	mov	r4, lr
  407872:	46d0      	mov	r8, sl
  407874:	e733      	b.n	4076de <_realloc_r+0x122>
  407876:	eb08 0105 	add.w	r1, r8, r5
  40787a:	ebc5 0b0b 	rsb	fp, r5, fp
  40787e:	f04b 0201 	orr.w	r2, fp, #1
  407882:	6099      	str	r1, [r3, #8]
  407884:	604a      	str	r2, [r1, #4]
  407886:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40788a:	f003 0301 	and.w	r3, r3, #1
  40788e:	431d      	orrs	r5, r3
  407890:	4648      	mov	r0, r9
  407892:	f846 5c04 	str.w	r5, [r6, #-4]
  407896:	f7ff fb81 	bl	406f9c <__malloc_unlock>
  40789a:	4630      	mov	r0, r6
  40789c:	e732      	b.n	407704 <_realloc_r+0x148>
  40789e:	4631      	mov	r1, r6
  4078a0:	f7ff fb16 	bl	406ed0 <memmove>
  4078a4:	e6d5      	b.n	407652 <_realloc_r+0x96>
  4078a6:	68b3      	ldr	r3, [r6, #8]
  4078a8:	6083      	str	r3, [r0, #8]
  4078aa:	68f3      	ldr	r3, [r6, #12]
  4078ac:	60c3      	str	r3, [r0, #12]
  4078ae:	2a24      	cmp	r2, #36	; 0x24
  4078b0:	d028      	beq.n	407904 <_realloc_r+0x348>
  4078b2:	f100 0310 	add.w	r3, r0, #16
  4078b6:	f106 0210 	add.w	r2, r6, #16
  4078ba:	e6c4      	b.n	407646 <_realloc_r+0x8a>
  4078bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4078c0:	f023 0303 	bic.w	r3, r3, #3
  4078c4:	441c      	add	r4, r3
  4078c6:	e70a      	b.n	4076de <_realloc_r+0x122>
  4078c8:	4631      	mov	r1, r6
  4078ca:	4638      	mov	r0, r7
  4078cc:	4674      	mov	r4, lr
  4078ce:	46d0      	mov	r8, sl
  4078d0:	f7ff fafe 	bl	406ed0 <memmove>
  4078d4:	463e      	mov	r6, r7
  4078d6:	e702      	b.n	4076de <_realloc_r+0x122>
  4078d8:	463a      	mov	r2, r7
  4078da:	e6f7      	b.n	4076cc <_realloc_r+0x110>
  4078dc:	4631      	mov	r1, r6
  4078de:	4638      	mov	r0, r7
  4078e0:	461c      	mov	r4, r3
  4078e2:	46d0      	mov	r8, sl
  4078e4:	f7ff faf4 	bl	406ed0 <memmove>
  4078e8:	463e      	mov	r6, r7
  4078ea:	e6f8      	b.n	4076de <_realloc_r+0x122>
  4078ec:	68b3      	ldr	r3, [r6, #8]
  4078ee:	f8ca 3010 	str.w	r3, [sl, #16]
  4078f2:	68f3      	ldr	r3, [r6, #12]
  4078f4:	f8ca 3014 	str.w	r3, [sl, #20]
  4078f8:	2a24      	cmp	r2, #36	; 0x24
  4078fa:	d01b      	beq.n	407934 <_realloc_r+0x378>
  4078fc:	3610      	adds	r6, #16
  4078fe:	f10a 0318 	add.w	r3, sl, #24
  407902:	e7ae      	b.n	407862 <_realloc_r+0x2a6>
  407904:	6933      	ldr	r3, [r6, #16]
  407906:	6103      	str	r3, [r0, #16]
  407908:	6973      	ldr	r3, [r6, #20]
  40790a:	6143      	str	r3, [r0, #20]
  40790c:	f106 0218 	add.w	r2, r6, #24
  407910:	f100 0318 	add.w	r3, r0, #24
  407914:	e697      	b.n	407646 <_realloc_r+0x8a>
  407916:	bf00      	nop
  407918:	2040047c 	.word	0x2040047c
  40791c:	68b1      	ldr	r1, [r6, #8]
  40791e:	f8ca 1010 	str.w	r1, [sl, #16]
  407922:	68f1      	ldr	r1, [r6, #12]
  407924:	f8ca 1014 	str.w	r1, [sl, #20]
  407928:	2a24      	cmp	r2, #36	; 0x24
  40792a:	d00f      	beq.n	40794c <_realloc_r+0x390>
  40792c:	3610      	adds	r6, #16
  40792e:	f10a 0218 	add.w	r2, sl, #24
  407932:	e6cb      	b.n	4076cc <_realloc_r+0x110>
  407934:	6933      	ldr	r3, [r6, #16]
  407936:	f8ca 3018 	str.w	r3, [sl, #24]
  40793a:	6973      	ldr	r3, [r6, #20]
  40793c:	f8ca 301c 	str.w	r3, [sl, #28]
  407940:	3618      	adds	r6, #24
  407942:	f10a 0320 	add.w	r3, sl, #32
  407946:	e78c      	b.n	407862 <_realloc_r+0x2a6>
  407948:	463a      	mov	r2, r7
  40794a:	e764      	b.n	407816 <_realloc_r+0x25a>
  40794c:	6932      	ldr	r2, [r6, #16]
  40794e:	f8ca 2018 	str.w	r2, [sl, #24]
  407952:	6972      	ldr	r2, [r6, #20]
  407954:	f8ca 201c 	str.w	r2, [sl, #28]
  407958:	3618      	adds	r6, #24
  40795a:	f10a 0220 	add.w	r2, sl, #32
  40795e:	e6b5      	b.n	4076cc <_realloc_r+0x110>
  407960:	4631      	mov	r1, r6
  407962:	4638      	mov	r0, r7
  407964:	9301      	str	r3, [sp, #4]
  407966:	f7ff fab3 	bl	406ed0 <memmove>
  40796a:	9b01      	ldr	r3, [sp, #4]
  40796c:	e759      	b.n	407822 <_realloc_r+0x266>
  40796e:	68b1      	ldr	r1, [r6, #8]
  407970:	f8ca 1010 	str.w	r1, [sl, #16]
  407974:	68f1      	ldr	r1, [r6, #12]
  407976:	f8ca 1014 	str.w	r1, [sl, #20]
  40797a:	2a24      	cmp	r2, #36	; 0x24
  40797c:	d003      	beq.n	407986 <_realloc_r+0x3ca>
  40797e:	3610      	adds	r6, #16
  407980:	f10a 0218 	add.w	r2, sl, #24
  407984:	e747      	b.n	407816 <_realloc_r+0x25a>
  407986:	6932      	ldr	r2, [r6, #16]
  407988:	f8ca 2018 	str.w	r2, [sl, #24]
  40798c:	6972      	ldr	r2, [r6, #20]
  40798e:	f8ca 201c 	str.w	r2, [sl, #28]
  407992:	3618      	adds	r6, #24
  407994:	f10a 0220 	add.w	r2, sl, #32
  407998:	e73d      	b.n	407816 <_realloc_r+0x25a>
  40799a:	bf00      	nop

0040799c <_sbrk_r>:
  40799c:	b538      	push	{r3, r4, r5, lr}
  40799e:	4c07      	ldr	r4, [pc, #28]	; (4079bc <_sbrk_r+0x20>)
  4079a0:	2300      	movs	r3, #0
  4079a2:	4605      	mov	r5, r0
  4079a4:	4608      	mov	r0, r1
  4079a6:	6023      	str	r3, [r4, #0]
  4079a8:	f7fb f884 	bl	402ab4 <_sbrk>
  4079ac:	1c43      	adds	r3, r0, #1
  4079ae:	d000      	beq.n	4079b2 <_sbrk_r+0x16>
  4079b0:	bd38      	pop	{r3, r4, r5, pc}
  4079b2:	6823      	ldr	r3, [r4, #0]
  4079b4:	2b00      	cmp	r3, #0
  4079b6:	d0fb      	beq.n	4079b0 <_sbrk_r+0x14>
  4079b8:	602b      	str	r3, [r5, #0]
  4079ba:	bd38      	pop	{r3, r4, r5, pc}
  4079bc:	2040c464 	.word	0x2040c464

004079c0 <__ssprint_r>:
  4079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4079c4:	6893      	ldr	r3, [r2, #8]
  4079c6:	b083      	sub	sp, #12
  4079c8:	4690      	mov	r8, r2
  4079ca:	2b00      	cmp	r3, #0
  4079cc:	d072      	beq.n	407ab4 <__ssprint_r+0xf4>
  4079ce:	4683      	mov	fp, r0
  4079d0:	f04f 0900 	mov.w	r9, #0
  4079d4:	6816      	ldr	r6, [r2, #0]
  4079d6:	6808      	ldr	r0, [r1, #0]
  4079d8:	688b      	ldr	r3, [r1, #8]
  4079da:	460d      	mov	r5, r1
  4079dc:	464c      	mov	r4, r9
  4079de:	2c00      	cmp	r4, #0
  4079e0:	d045      	beq.n	407a6e <__ssprint_r+0xae>
  4079e2:	429c      	cmp	r4, r3
  4079e4:	461f      	mov	r7, r3
  4079e6:	469a      	mov	sl, r3
  4079e8:	d346      	bcc.n	407a78 <__ssprint_r+0xb8>
  4079ea:	89ab      	ldrh	r3, [r5, #12]
  4079ec:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4079f0:	d02d      	beq.n	407a4e <__ssprint_r+0x8e>
  4079f2:	696f      	ldr	r7, [r5, #20]
  4079f4:	6929      	ldr	r1, [r5, #16]
  4079f6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
  4079fa:	ebc1 0a00 	rsb	sl, r1, r0
  4079fe:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
  407a02:	1c60      	adds	r0, r4, #1
  407a04:	107f      	asrs	r7, r7, #1
  407a06:	4450      	add	r0, sl
  407a08:	42b8      	cmp	r0, r7
  407a0a:	463a      	mov	r2, r7
  407a0c:	bf84      	itt	hi
  407a0e:	4607      	movhi	r7, r0
  407a10:	463a      	movhi	r2, r7
  407a12:	055b      	lsls	r3, r3, #21
  407a14:	d533      	bpl.n	407a7e <__ssprint_r+0xbe>
  407a16:	4611      	mov	r1, r2
  407a18:	4658      	mov	r0, fp
  407a1a:	f7fe ff4b 	bl	4068b4 <_malloc_r>
  407a1e:	2800      	cmp	r0, #0
  407a20:	d037      	beq.n	407a92 <__ssprint_r+0xd2>
  407a22:	4652      	mov	r2, sl
  407a24:	6929      	ldr	r1, [r5, #16]
  407a26:	9001      	str	r0, [sp, #4]
  407a28:	f7fc f958 	bl	403cdc <memcpy>
  407a2c:	89aa      	ldrh	r2, [r5, #12]
  407a2e:	9b01      	ldr	r3, [sp, #4]
  407a30:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  407a34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  407a38:	81aa      	strh	r2, [r5, #12]
  407a3a:	ebca 0207 	rsb	r2, sl, r7
  407a3e:	eb03 000a 	add.w	r0, r3, sl
  407a42:	616f      	str	r7, [r5, #20]
  407a44:	612b      	str	r3, [r5, #16]
  407a46:	6028      	str	r0, [r5, #0]
  407a48:	60aa      	str	r2, [r5, #8]
  407a4a:	4627      	mov	r7, r4
  407a4c:	46a2      	mov	sl, r4
  407a4e:	4652      	mov	r2, sl
  407a50:	4649      	mov	r1, r9
  407a52:	f7ff fa3d 	bl	406ed0 <memmove>
  407a56:	f8d8 2008 	ldr.w	r2, [r8, #8]
  407a5a:	68ab      	ldr	r3, [r5, #8]
  407a5c:	6828      	ldr	r0, [r5, #0]
  407a5e:	1bdb      	subs	r3, r3, r7
  407a60:	4450      	add	r0, sl
  407a62:	1b14      	subs	r4, r2, r4
  407a64:	60ab      	str	r3, [r5, #8]
  407a66:	6028      	str	r0, [r5, #0]
  407a68:	f8c8 4008 	str.w	r4, [r8, #8]
  407a6c:	b314      	cbz	r4, 407ab4 <__ssprint_r+0xf4>
  407a6e:	f8d6 9000 	ldr.w	r9, [r6]
  407a72:	6874      	ldr	r4, [r6, #4]
  407a74:	3608      	adds	r6, #8
  407a76:	e7b2      	b.n	4079de <__ssprint_r+0x1e>
  407a78:	4627      	mov	r7, r4
  407a7a:	46a2      	mov	sl, r4
  407a7c:	e7e7      	b.n	407a4e <__ssprint_r+0x8e>
  407a7e:	4658      	mov	r0, fp
  407a80:	f7ff fd9c 	bl	4075bc <_realloc_r>
  407a84:	4603      	mov	r3, r0
  407a86:	2800      	cmp	r0, #0
  407a88:	d1d7      	bne.n	407a3a <__ssprint_r+0x7a>
  407a8a:	6929      	ldr	r1, [r5, #16]
  407a8c:	4658      	mov	r0, fp
  407a8e:	f7fe fe25 	bl	4066dc <_free_r>
  407a92:	230c      	movs	r3, #12
  407a94:	f8cb 3000 	str.w	r3, [fp]
  407a98:	89ab      	ldrh	r3, [r5, #12]
  407a9a:	2200      	movs	r2, #0
  407a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407aa0:	f04f 30ff 	mov.w	r0, #4294967295
  407aa4:	81ab      	strh	r3, [r5, #12]
  407aa6:	f8c8 2008 	str.w	r2, [r8, #8]
  407aaa:	f8c8 2004 	str.w	r2, [r8, #4]
  407aae:	b003      	add	sp, #12
  407ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407ab4:	2000      	movs	r0, #0
  407ab6:	f8c8 0004 	str.w	r0, [r8, #4]
  407aba:	b003      	add	sp, #12
  407abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00407ac0 <__register_exitproc>:
  407ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407ac4:	4c25      	ldr	r4, [pc, #148]	; (407b5c <__register_exitproc+0x9c>)
  407ac6:	6825      	ldr	r5, [r4, #0]
  407ac8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  407acc:	4606      	mov	r6, r0
  407ace:	4688      	mov	r8, r1
  407ad0:	4692      	mov	sl, r2
  407ad2:	4699      	mov	r9, r3
  407ad4:	b3c4      	cbz	r4, 407b48 <__register_exitproc+0x88>
  407ad6:	6860      	ldr	r0, [r4, #4]
  407ad8:	281f      	cmp	r0, #31
  407ada:	dc17      	bgt.n	407b0c <__register_exitproc+0x4c>
  407adc:	1c43      	adds	r3, r0, #1
  407ade:	b176      	cbz	r6, 407afe <__register_exitproc+0x3e>
  407ae0:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  407ae4:	2201      	movs	r2, #1
  407ae6:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  407aea:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  407aee:	4082      	lsls	r2, r0
  407af0:	4311      	orrs	r1, r2
  407af2:	2e02      	cmp	r6, #2
  407af4:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  407af8:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  407afc:	d01e      	beq.n	407b3c <__register_exitproc+0x7c>
  407afe:	3002      	adds	r0, #2
  407b00:	6063      	str	r3, [r4, #4]
  407b02:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  407b06:	2000      	movs	r0, #0
  407b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407b0c:	4b14      	ldr	r3, [pc, #80]	; (407b60 <__register_exitproc+0xa0>)
  407b0e:	b303      	cbz	r3, 407b52 <__register_exitproc+0x92>
  407b10:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407b14:	f3af 8000 	nop.w
  407b18:	4604      	mov	r4, r0
  407b1a:	b1d0      	cbz	r0, 407b52 <__register_exitproc+0x92>
  407b1c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  407b20:	2700      	movs	r7, #0
  407b22:	e880 0088 	stmia.w	r0, {r3, r7}
  407b26:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407b2a:	4638      	mov	r0, r7
  407b2c:	2301      	movs	r3, #1
  407b2e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  407b32:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  407b36:	2e00      	cmp	r6, #0
  407b38:	d0e1      	beq.n	407afe <__register_exitproc+0x3e>
  407b3a:	e7d1      	b.n	407ae0 <__register_exitproc+0x20>
  407b3c:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  407b40:	430a      	orrs	r2, r1
  407b42:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  407b46:	e7da      	b.n	407afe <__register_exitproc+0x3e>
  407b48:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  407b4c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  407b50:	e7c1      	b.n	407ad6 <__register_exitproc+0x16>
  407b52:	f04f 30ff 	mov.w	r0, #4294967295
  407b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407b5a:	bf00      	nop
  407b5c:	00408210 	.word	0x00408210
  407b60:	00000000 	.word	0x00000000

00407b64 <_calloc_r>:
  407b64:	b510      	push	{r4, lr}
  407b66:	fb02 f101 	mul.w	r1, r2, r1
  407b6a:	f7fe fea3 	bl	4068b4 <_malloc_r>
  407b6e:	4604      	mov	r4, r0
  407b70:	b1d8      	cbz	r0, 407baa <_calloc_r+0x46>
  407b72:	f850 2c04 	ldr.w	r2, [r0, #-4]
  407b76:	f022 0203 	bic.w	r2, r2, #3
  407b7a:	3a04      	subs	r2, #4
  407b7c:	2a24      	cmp	r2, #36	; 0x24
  407b7e:	d818      	bhi.n	407bb2 <_calloc_r+0x4e>
  407b80:	2a13      	cmp	r2, #19
  407b82:	d914      	bls.n	407bae <_calloc_r+0x4a>
  407b84:	2300      	movs	r3, #0
  407b86:	2a1b      	cmp	r2, #27
  407b88:	6003      	str	r3, [r0, #0]
  407b8a:	6043      	str	r3, [r0, #4]
  407b8c:	d916      	bls.n	407bbc <_calloc_r+0x58>
  407b8e:	2a24      	cmp	r2, #36	; 0x24
  407b90:	6083      	str	r3, [r0, #8]
  407b92:	60c3      	str	r3, [r0, #12]
  407b94:	bf11      	iteee	ne
  407b96:	f100 0210 	addne.w	r2, r0, #16
  407b9a:	6103      	streq	r3, [r0, #16]
  407b9c:	6143      	streq	r3, [r0, #20]
  407b9e:	f100 0218 	addeq.w	r2, r0, #24
  407ba2:	2300      	movs	r3, #0
  407ba4:	6013      	str	r3, [r2, #0]
  407ba6:	6053      	str	r3, [r2, #4]
  407ba8:	6093      	str	r3, [r2, #8]
  407baa:	4620      	mov	r0, r4
  407bac:	bd10      	pop	{r4, pc}
  407bae:	4602      	mov	r2, r0
  407bb0:	e7f7      	b.n	407ba2 <_calloc_r+0x3e>
  407bb2:	2100      	movs	r1, #0
  407bb4:	f7fc f92c 	bl	403e10 <memset>
  407bb8:	4620      	mov	r0, r4
  407bba:	bd10      	pop	{r4, pc}
  407bbc:	f100 0208 	add.w	r2, r0, #8
  407bc0:	e7ef      	b.n	407ba2 <_calloc_r+0x3e>
  407bc2:	bf00      	nop

00407bc4 <__aeabi_uldivmod>:
  407bc4:	b953      	cbnz	r3, 407bdc <__aeabi_uldivmod+0x18>
  407bc6:	b94a      	cbnz	r2, 407bdc <__aeabi_uldivmod+0x18>
  407bc8:	2900      	cmp	r1, #0
  407bca:	bf08      	it	eq
  407bcc:	2800      	cmpeq	r0, #0
  407bce:	bf1c      	itt	ne
  407bd0:	f04f 31ff 	movne.w	r1, #4294967295
  407bd4:	f04f 30ff 	movne.w	r0, #4294967295
  407bd8:	f000 b97e 	b.w	407ed8 <__aeabi_idiv0>
  407bdc:	f1ad 0c08 	sub.w	ip, sp, #8
  407be0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  407be4:	f000 f806 	bl	407bf4 <__udivmoddi4>
  407be8:	f8dd e004 	ldr.w	lr, [sp, #4]
  407bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  407bf0:	b004      	add	sp, #16
  407bf2:	4770      	bx	lr

00407bf4 <__udivmoddi4>:
  407bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407bf8:	468c      	mov	ip, r1
  407bfa:	460e      	mov	r6, r1
  407bfc:	4604      	mov	r4, r0
  407bfe:	9d08      	ldr	r5, [sp, #32]
  407c00:	2b00      	cmp	r3, #0
  407c02:	d150      	bne.n	407ca6 <__udivmoddi4+0xb2>
  407c04:	428a      	cmp	r2, r1
  407c06:	4617      	mov	r7, r2
  407c08:	d96c      	bls.n	407ce4 <__udivmoddi4+0xf0>
  407c0a:	fab2 fe82 	clz	lr, r2
  407c0e:	f1be 0f00 	cmp.w	lr, #0
  407c12:	d00b      	beq.n	407c2c <__udivmoddi4+0x38>
  407c14:	f1ce 0420 	rsb	r4, lr, #32
  407c18:	fa20 f404 	lsr.w	r4, r0, r4
  407c1c:	fa01 f60e 	lsl.w	r6, r1, lr
  407c20:	ea44 0c06 	orr.w	ip, r4, r6
  407c24:	fa02 f70e 	lsl.w	r7, r2, lr
  407c28:	fa00 f40e 	lsl.w	r4, r0, lr
  407c2c:	ea4f 4917 	mov.w	r9, r7, lsr #16
  407c30:	0c22      	lsrs	r2, r4, #16
  407c32:	fbbc f0f9 	udiv	r0, ip, r9
  407c36:	fa1f f887 	uxth.w	r8, r7
  407c3a:	fb09 c610 	mls	r6, r9, r0, ip
  407c3e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  407c42:	fb00 f308 	mul.w	r3, r0, r8
  407c46:	42b3      	cmp	r3, r6
  407c48:	d909      	bls.n	407c5e <__udivmoddi4+0x6a>
  407c4a:	19f6      	adds	r6, r6, r7
  407c4c:	f100 32ff 	add.w	r2, r0, #4294967295
  407c50:	f080 8122 	bcs.w	407e98 <__udivmoddi4+0x2a4>
  407c54:	42b3      	cmp	r3, r6
  407c56:	f240 811f 	bls.w	407e98 <__udivmoddi4+0x2a4>
  407c5a:	3802      	subs	r0, #2
  407c5c:	443e      	add	r6, r7
  407c5e:	1af6      	subs	r6, r6, r3
  407c60:	b2a2      	uxth	r2, r4
  407c62:	fbb6 f3f9 	udiv	r3, r6, r9
  407c66:	fb09 6613 	mls	r6, r9, r3, r6
  407c6a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  407c6e:	fb03 f808 	mul.w	r8, r3, r8
  407c72:	45a0      	cmp	r8, r4
  407c74:	d909      	bls.n	407c8a <__udivmoddi4+0x96>
  407c76:	19e4      	adds	r4, r4, r7
  407c78:	f103 32ff 	add.w	r2, r3, #4294967295
  407c7c:	f080 810a 	bcs.w	407e94 <__udivmoddi4+0x2a0>
  407c80:	45a0      	cmp	r8, r4
  407c82:	f240 8107 	bls.w	407e94 <__udivmoddi4+0x2a0>
  407c86:	3b02      	subs	r3, #2
  407c88:	443c      	add	r4, r7
  407c8a:	ebc8 0404 	rsb	r4, r8, r4
  407c8e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407c92:	2100      	movs	r1, #0
  407c94:	2d00      	cmp	r5, #0
  407c96:	d062      	beq.n	407d5e <__udivmoddi4+0x16a>
  407c98:	fa24 f40e 	lsr.w	r4, r4, lr
  407c9c:	2300      	movs	r3, #0
  407c9e:	602c      	str	r4, [r5, #0]
  407ca0:	606b      	str	r3, [r5, #4]
  407ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ca6:	428b      	cmp	r3, r1
  407ca8:	d907      	bls.n	407cba <__udivmoddi4+0xc6>
  407caa:	2d00      	cmp	r5, #0
  407cac:	d055      	beq.n	407d5a <__udivmoddi4+0x166>
  407cae:	2100      	movs	r1, #0
  407cb0:	e885 0041 	stmia.w	r5, {r0, r6}
  407cb4:	4608      	mov	r0, r1
  407cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407cba:	fab3 f183 	clz	r1, r3
  407cbe:	2900      	cmp	r1, #0
  407cc0:	f040 8090 	bne.w	407de4 <__udivmoddi4+0x1f0>
  407cc4:	42b3      	cmp	r3, r6
  407cc6:	d302      	bcc.n	407cce <__udivmoddi4+0xda>
  407cc8:	4282      	cmp	r2, r0
  407cca:	f200 80f8 	bhi.w	407ebe <__udivmoddi4+0x2ca>
  407cce:	1a84      	subs	r4, r0, r2
  407cd0:	eb66 0603 	sbc.w	r6, r6, r3
  407cd4:	2001      	movs	r0, #1
  407cd6:	46b4      	mov	ip, r6
  407cd8:	2d00      	cmp	r5, #0
  407cda:	d040      	beq.n	407d5e <__udivmoddi4+0x16a>
  407cdc:	e885 1010 	stmia.w	r5, {r4, ip}
  407ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ce4:	b912      	cbnz	r2, 407cec <__udivmoddi4+0xf8>
  407ce6:	2701      	movs	r7, #1
  407ce8:	fbb7 f7f2 	udiv	r7, r7, r2
  407cec:	fab7 fe87 	clz	lr, r7
  407cf0:	f1be 0f00 	cmp.w	lr, #0
  407cf4:	d135      	bne.n	407d62 <__udivmoddi4+0x16e>
  407cf6:	1bf3      	subs	r3, r6, r7
  407cf8:	ea4f 4817 	mov.w	r8, r7, lsr #16
  407cfc:	fa1f fc87 	uxth.w	ip, r7
  407d00:	2101      	movs	r1, #1
  407d02:	fbb3 f0f8 	udiv	r0, r3, r8
  407d06:	0c22      	lsrs	r2, r4, #16
  407d08:	fb08 3610 	mls	r6, r8, r0, r3
  407d0c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  407d10:	fb0c f300 	mul.w	r3, ip, r0
  407d14:	42b3      	cmp	r3, r6
  407d16:	d907      	bls.n	407d28 <__udivmoddi4+0x134>
  407d18:	19f6      	adds	r6, r6, r7
  407d1a:	f100 32ff 	add.w	r2, r0, #4294967295
  407d1e:	d202      	bcs.n	407d26 <__udivmoddi4+0x132>
  407d20:	42b3      	cmp	r3, r6
  407d22:	f200 80ce 	bhi.w	407ec2 <__udivmoddi4+0x2ce>
  407d26:	4610      	mov	r0, r2
  407d28:	1af6      	subs	r6, r6, r3
  407d2a:	b2a2      	uxth	r2, r4
  407d2c:	fbb6 f3f8 	udiv	r3, r6, r8
  407d30:	fb08 6613 	mls	r6, r8, r3, r6
  407d34:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  407d38:	fb0c fc03 	mul.w	ip, ip, r3
  407d3c:	45a4      	cmp	ip, r4
  407d3e:	d907      	bls.n	407d50 <__udivmoddi4+0x15c>
  407d40:	19e4      	adds	r4, r4, r7
  407d42:	f103 32ff 	add.w	r2, r3, #4294967295
  407d46:	d202      	bcs.n	407d4e <__udivmoddi4+0x15a>
  407d48:	45a4      	cmp	ip, r4
  407d4a:	f200 80b5 	bhi.w	407eb8 <__udivmoddi4+0x2c4>
  407d4e:	4613      	mov	r3, r2
  407d50:	ebcc 0404 	rsb	r4, ip, r4
  407d54:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  407d58:	e79c      	b.n	407c94 <__udivmoddi4+0xa0>
  407d5a:	4629      	mov	r1, r5
  407d5c:	4628      	mov	r0, r5
  407d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407d62:	f1ce 0120 	rsb	r1, lr, #32
  407d66:	fa06 f30e 	lsl.w	r3, r6, lr
  407d6a:	fa07 f70e 	lsl.w	r7, r7, lr
  407d6e:	fa20 f901 	lsr.w	r9, r0, r1
  407d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
  407d76:	40ce      	lsrs	r6, r1
  407d78:	ea49 0903 	orr.w	r9, r9, r3
  407d7c:	fbb6 faf8 	udiv	sl, r6, r8
  407d80:	ea4f 4419 	mov.w	r4, r9, lsr #16
  407d84:	fb08 661a 	mls	r6, r8, sl, r6
  407d88:	fa1f fc87 	uxth.w	ip, r7
  407d8c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  407d90:	fb0a f20c 	mul.w	r2, sl, ip
  407d94:	429a      	cmp	r2, r3
  407d96:	fa00 f40e 	lsl.w	r4, r0, lr
  407d9a:	d90a      	bls.n	407db2 <__udivmoddi4+0x1be>
  407d9c:	19db      	adds	r3, r3, r7
  407d9e:	f10a 31ff 	add.w	r1, sl, #4294967295
  407da2:	f080 8087 	bcs.w	407eb4 <__udivmoddi4+0x2c0>
  407da6:	429a      	cmp	r2, r3
  407da8:	f240 8084 	bls.w	407eb4 <__udivmoddi4+0x2c0>
  407dac:	f1aa 0a02 	sub.w	sl, sl, #2
  407db0:	443b      	add	r3, r7
  407db2:	1a9b      	subs	r3, r3, r2
  407db4:	fa1f f989 	uxth.w	r9, r9
  407db8:	fbb3 f1f8 	udiv	r1, r3, r8
  407dbc:	fb08 3311 	mls	r3, r8, r1, r3
  407dc0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  407dc4:	fb01 f60c 	mul.w	r6, r1, ip
  407dc8:	429e      	cmp	r6, r3
  407dca:	d907      	bls.n	407ddc <__udivmoddi4+0x1e8>
  407dcc:	19db      	adds	r3, r3, r7
  407dce:	f101 32ff 	add.w	r2, r1, #4294967295
  407dd2:	d26b      	bcs.n	407eac <__udivmoddi4+0x2b8>
  407dd4:	429e      	cmp	r6, r3
  407dd6:	d969      	bls.n	407eac <__udivmoddi4+0x2b8>
  407dd8:	3902      	subs	r1, #2
  407dda:	443b      	add	r3, r7
  407ddc:	1b9b      	subs	r3, r3, r6
  407dde:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  407de2:	e78e      	b.n	407d02 <__udivmoddi4+0x10e>
  407de4:	f1c1 0e20 	rsb	lr, r1, #32
  407de8:	fa22 f40e 	lsr.w	r4, r2, lr
  407dec:	408b      	lsls	r3, r1
  407dee:	4323      	orrs	r3, r4
  407df0:	fa20 f70e 	lsr.w	r7, r0, lr
  407df4:	fa06 f401 	lsl.w	r4, r6, r1
  407df8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  407dfc:	fa26 f60e 	lsr.w	r6, r6, lr
  407e00:	433c      	orrs	r4, r7
  407e02:	fbb6 f9fc 	udiv	r9, r6, ip
  407e06:	0c27      	lsrs	r7, r4, #16
  407e08:	fb0c 6619 	mls	r6, ip, r9, r6
  407e0c:	fa1f f883 	uxth.w	r8, r3
  407e10:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  407e14:	fb09 f708 	mul.w	r7, r9, r8
  407e18:	42b7      	cmp	r7, r6
  407e1a:	fa02 f201 	lsl.w	r2, r2, r1
  407e1e:	fa00 fa01 	lsl.w	sl, r0, r1
  407e22:	d908      	bls.n	407e36 <__udivmoddi4+0x242>
  407e24:	18f6      	adds	r6, r6, r3
  407e26:	f109 30ff 	add.w	r0, r9, #4294967295
  407e2a:	d241      	bcs.n	407eb0 <__udivmoddi4+0x2bc>
  407e2c:	42b7      	cmp	r7, r6
  407e2e:	d93f      	bls.n	407eb0 <__udivmoddi4+0x2bc>
  407e30:	f1a9 0902 	sub.w	r9, r9, #2
  407e34:	441e      	add	r6, r3
  407e36:	1bf6      	subs	r6, r6, r7
  407e38:	b2a0      	uxth	r0, r4
  407e3a:	fbb6 f4fc 	udiv	r4, r6, ip
  407e3e:	fb0c 6614 	mls	r6, ip, r4, r6
  407e42:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  407e46:	fb04 f808 	mul.w	r8, r4, r8
  407e4a:	45b8      	cmp	r8, r7
  407e4c:	d907      	bls.n	407e5e <__udivmoddi4+0x26a>
  407e4e:	18ff      	adds	r7, r7, r3
  407e50:	f104 30ff 	add.w	r0, r4, #4294967295
  407e54:	d228      	bcs.n	407ea8 <__udivmoddi4+0x2b4>
  407e56:	45b8      	cmp	r8, r7
  407e58:	d926      	bls.n	407ea8 <__udivmoddi4+0x2b4>
  407e5a:	3c02      	subs	r4, #2
  407e5c:	441f      	add	r7, r3
  407e5e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  407e62:	ebc8 0707 	rsb	r7, r8, r7
  407e66:	fba0 8902 	umull	r8, r9, r0, r2
  407e6a:	454f      	cmp	r7, r9
  407e6c:	4644      	mov	r4, r8
  407e6e:	464e      	mov	r6, r9
  407e70:	d314      	bcc.n	407e9c <__udivmoddi4+0x2a8>
  407e72:	d029      	beq.n	407ec8 <__udivmoddi4+0x2d4>
  407e74:	b365      	cbz	r5, 407ed0 <__udivmoddi4+0x2dc>
  407e76:	ebba 0304 	subs.w	r3, sl, r4
  407e7a:	eb67 0706 	sbc.w	r7, r7, r6
  407e7e:	fa07 fe0e 	lsl.w	lr, r7, lr
  407e82:	40cb      	lsrs	r3, r1
  407e84:	40cf      	lsrs	r7, r1
  407e86:	ea4e 0303 	orr.w	r3, lr, r3
  407e8a:	e885 0088 	stmia.w	r5, {r3, r7}
  407e8e:	2100      	movs	r1, #0
  407e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407e94:	4613      	mov	r3, r2
  407e96:	e6f8      	b.n	407c8a <__udivmoddi4+0x96>
  407e98:	4610      	mov	r0, r2
  407e9a:	e6e0      	b.n	407c5e <__udivmoddi4+0x6a>
  407e9c:	ebb8 0402 	subs.w	r4, r8, r2
  407ea0:	eb69 0603 	sbc.w	r6, r9, r3
  407ea4:	3801      	subs	r0, #1
  407ea6:	e7e5      	b.n	407e74 <__udivmoddi4+0x280>
  407ea8:	4604      	mov	r4, r0
  407eaa:	e7d8      	b.n	407e5e <__udivmoddi4+0x26a>
  407eac:	4611      	mov	r1, r2
  407eae:	e795      	b.n	407ddc <__udivmoddi4+0x1e8>
  407eb0:	4681      	mov	r9, r0
  407eb2:	e7c0      	b.n	407e36 <__udivmoddi4+0x242>
  407eb4:	468a      	mov	sl, r1
  407eb6:	e77c      	b.n	407db2 <__udivmoddi4+0x1be>
  407eb8:	3b02      	subs	r3, #2
  407eba:	443c      	add	r4, r7
  407ebc:	e748      	b.n	407d50 <__udivmoddi4+0x15c>
  407ebe:	4608      	mov	r0, r1
  407ec0:	e70a      	b.n	407cd8 <__udivmoddi4+0xe4>
  407ec2:	3802      	subs	r0, #2
  407ec4:	443e      	add	r6, r7
  407ec6:	e72f      	b.n	407d28 <__udivmoddi4+0x134>
  407ec8:	45c2      	cmp	sl, r8
  407eca:	d3e7      	bcc.n	407e9c <__udivmoddi4+0x2a8>
  407ecc:	463e      	mov	r6, r7
  407ece:	e7d1      	b.n	407e74 <__udivmoddi4+0x280>
  407ed0:	4629      	mov	r1, r5
  407ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407ed6:	bf00      	nop

00407ed8 <__aeabi_idiv0>:
  407ed8:	4770      	bx	lr
  407eda:	bf00      	nop
  407edc:	454c4449 	.word	0x454c4449
  407ee0:	00000000 	.word	0x00000000
  407ee4:	09632509 	.word	0x09632509
  407ee8:	25097525 	.word	0x25097525
  407eec:	75250975 	.word	0x75250975
  407ef0:	00000a0d 	.word	0x00000a0d
  407ef4:	51726d54 	.word	0x51726d54
  407ef8:	00000000 	.word	0x00000000
  407efc:	20726d54 	.word	0x20726d54
  407f00:	00637653 	.word	0x00637653
  407f04:	00002580 	.word	0x00002580
  407f08:	000000c0 	.word	0x000000c0
  407f0c:	00000800 	.word	0x00000800
  407f10:	4c4c454d 	.word	0x4c4c454d
  407f14:	4f525441 	.word	0x4f525441
  407f18:	3030394e 	.word	0x3030394e
  407f1c:	4f422030 	.word	0x4f422030
  407f20:	5320544f 	.word	0x5320544f
  407f24:	45555145 	.word	0x45555145
  407f28:	0a45434e 	.word	0x0a45434e
  407f2c:	54524155 	.word	0x54524155
  407f30:	4e4f4320 	.word	0x4e4f4320
  407f34:	454c4f53 	.word	0x454c4f53
  407f38:	41545320 	.word	0x41545320
  407f3c:	44455452 	.word	0x44455452
  407f40:	204e4f20 	.word	0x204e4f20
  407f44:	54524155 	.word	0x54524155
  407f48:	61420a34 	.word	0x61420a34
  407f4c:	61526475 	.word	0x61526475
  407f50:	203a6574 	.word	0x203a6574
  407f54:	32353131 	.word	0x32353131
  407f58:	420a3030 	.word	0x420a3030
  407f5c:	3a737469 	.word	0x3a737469
  407f60:	4e0a3820 	.word	0x4e0a3820
  407f64:	7473206f 	.word	0x7473206f
  407f68:	6220706f 	.word	0x6220706f
  407f6c:	20737469 	.word	0x20737469
  407f70:	0000000a 	.word	0x0000000a
  407f74:	20495053 	.word	0x20495053
  407f78:	54494e49 	.word	0x54494e49
  407f7c:	494c4149 	.word	0x494c4149
  407f80:	4954415a 	.word	0x4954415a
  407f84:	2d204e4f 	.word	0x2d204e4f
  407f88:	41545320 	.word	0x41545320
  407f8c:	44455452 	.word	0x44455452
  407f90:	0000000a 	.word	0x0000000a
  407f94:	20495053 	.word	0x20495053
  407f98:	54494e49 	.word	0x54494e49
  407f9c:	494c4149 	.word	0x494c4149
  407fa0:	4954415a 	.word	0x4954415a
  407fa4:	2d204e4f 	.word	0x2d204e4f
  407fa8:	4e494620 	.word	0x4e494620
  407fac:	45485349 	.word	0x45485349
  407fb0:	00000a44 	.word	0x00000a44
  407fb4:	314d5744 	.word	0x314d5744
  407fb8:	20303030 	.word	0x20303030
  407fbc:	54494e49 	.word	0x54494e49
  407fc0:	494c4149 	.word	0x494c4149
  407fc4:	4954415a 	.word	0x4954415a
  407fc8:	2d204e4f 	.word	0x2d204e4f
  407fcc:	41545320 	.word	0x41545320
  407fd0:	44455452 	.word	0x44455452
  407fd4:	0000000a 	.word	0x0000000a
  407fd8:	314d5744 	.word	0x314d5744
  407fdc:	20303030 	.word	0x20303030
  407fe0:	54494e49 	.word	0x54494e49
  407fe4:	494c4149 	.word	0x494c4149
  407fe8:	4954415a 	.word	0x4954415a
  407fec:	2d204e4f 	.word	0x2d204e4f
  407ff0:	4e494620 	.word	0x4e494620
  407ff4:	45485349 	.word	0x45485349
  407ff8:	00000a44 	.word	0x00000a44
  407ffc:	43544157 	.word	0x43544157
  408000:	474f4448 	.word	0x474f4448
  408004:	494e4920 	.word	0x494e4920
  408008:	4c414954 	.word	0x4c414954
  40800c:	54415a49 	.word	0x54415a49
  408010:	204e4f49 	.word	0x204e4f49
  408014:	5453202d 	.word	0x5453202d
  408018:	45545241 	.word	0x45545241
  40801c:	00000a44 	.word	0x00000a44
  408020:	43544157 	.word	0x43544157
  408024:	474f4448 	.word	0x474f4448
  408028:	494e4920 	.word	0x494e4920
  40802c:	4c414954 	.word	0x4c414954
  408030:	54415a49 	.word	0x54415a49
  408034:	204e4f49 	.word	0x204e4f49
  408038:	4946202d 	.word	0x4946202d
  40803c:	4853494e 	.word	0x4853494e
  408040:	000a4445 	.word	0x000a4445
  408044:	424f4c47 	.word	0x424f4c47
  408048:	49204c41 	.word	0x49204c41
  40804c:	49205152 	.word	0x49205152
  408050:	4954494e 	.word	0x4954494e
  408054:	5a494c41 	.word	0x5a494c41
  408058:	4f495441 	.word	0x4f495441
  40805c:	202d204e 	.word	0x202d204e
  408060:	52415453 	.word	0x52415453
  408064:	0a444554 	.word	0x0a444554
  408068:	00000000 	.word	0x00000000
  40806c:	424f4c47 	.word	0x424f4c47
  408070:	49204c41 	.word	0x49204c41
  408074:	49205152 	.word	0x49205152
  408078:	4954494e 	.word	0x4954494e
  40807c:	5a494c41 	.word	0x5a494c41
  408080:	4f495441 	.word	0x4f495441
  408084:	202d204e 	.word	0x202d204e
  408088:	494e4946 	.word	0x494e4946
  40808c:	44454853 	.word	0x44454853
  408090:	0000000a 	.word	0x0000000a
  408094:	49524550 	.word	0x49524550
  408098:	52454850 	.word	0x52454850
  40809c:	49204c41 	.word	0x49204c41
  4080a0:	49205152 	.word	0x49205152
  4080a4:	4954494e 	.word	0x4954494e
  4080a8:	5a494c41 	.word	0x5a494c41
  4080ac:	4f495441 	.word	0x4f495441
  4080b0:	202d204e 	.word	0x202d204e
  4080b4:	52415453 	.word	0x52415453
  4080b8:	0a444554 	.word	0x0a444554
  4080bc:	00000000 	.word	0x00000000
  4080c0:	49524550 	.word	0x49524550
  4080c4:	52454850 	.word	0x52454850
  4080c8:	49204c41 	.word	0x49204c41
  4080cc:	49205152 	.word	0x49205152
  4080d0:	4954494e 	.word	0x4954494e
  4080d4:	5a494c41 	.word	0x5a494c41
  4080d8:	4f495441 	.word	0x4f495441
  4080dc:	202d204e 	.word	0x202d204e
  4080e0:	494e4946 	.word	0x494e4946
  4080e4:	44454853 	.word	0x44454853
  4080e8:	0000000a 	.word	0x0000000a
  4080ec:	68737550 	.word	0x68737550
  4080f0:	69775320 	.word	0x69775320
  4080f4:	20686374 	.word	0x20686374
  4080f8:	00000a31 	.word	0x00000a31
  4080fc:	68737550 	.word	0x68737550
  408100:	69775320 	.word	0x69775320
  408104:	20686374 	.word	0x20686374
  408108:	00000a32 	.word	0x00000a32
  40810c:	74736554 	.word	0x74736554
  408110:	49766544 	.word	0x49766544
  408114:	30203a44 	.word	0x30203a44
  408118:	0a782578 	.word	0x0a782578
  40811c:	00000000 	.word	0x00000000
  408120:	53737953 	.word	0x53737953
  408124:	75746174 	.word	0x75746174
  408128:	30203a73 	.word	0x30203a73
  40812c:	0a782578 	.word	0x0a782578
  408130:	00000000 	.word	0x00000000
  408134:	57204449 	.word	0x57204449
  408138:	54544952 	.word	0x54544952
  40813c:	520a4e45 	.word	0x520a4e45
  408140:	20444145 	.word	0x20444145
  408144:	4b434142 	.word	0x4b434142
  408148:	7830203a 	.word	0x7830203a
  40814c:	000a7825 	.word	0x000a7825
  408150:	3456414e 	.word	0x3456414e
  408154:	66654c20 	.word	0x66654c20
  408158:	00000a74 	.word	0x00000a74
  40815c:	3456414e 	.word	0x3456414e
  408160:	67695220 	.word	0x67695220
  408164:	000a7468 	.word	0x000a7468
  408168:	3456414e 	.word	0x3456414e
  40816c:	0a705520 	.word	0x0a705520
  408170:	00000000 	.word	0x00000000
  408174:	3456414e 	.word	0x3456414e
  408178:	776f4420 	.word	0x776f4420
  40817c:	00000a6e 	.word	0x00000a6e
  408180:	3456414e 	.word	0x3456414e
  408184:	73755020 	.word	0x73755020
  408188:	00000a68 	.word	0x00000a68
  40818c:	3556414e 	.word	0x3556414e
  408190:	66654c20 	.word	0x66654c20
  408194:	00000a74 	.word	0x00000a74
  408198:	3556414e 	.word	0x3556414e
  40819c:	67695220 	.word	0x67695220
  4081a0:	000a7468 	.word	0x000a7468
  4081a4:	3556414e 	.word	0x3556414e
  4081a8:	0a705520 	.word	0x0a705520
  4081ac:	00000000 	.word	0x00000000
  4081b0:	3556414e 	.word	0x3556414e
  4081b4:	776f4420 	.word	0x776f4420
  4081b8:	00000a6e 	.word	0x00000a6e
  4081bc:	3556414e 	.word	0x3556414e
  4081c0:	73755020 	.word	0x73755020
  4081c4:	00000a68 	.word	0x00000a68
  4081c8:	4c414e41 	.word	0x4c414e41
  4081cc:	4555474f 	.word	0x4555474f
  4081d0:	54494220 	.word	0x54494220
  4081d4:	0a214843 	.word	0x0a214843
  4081d8:	00000000 	.word	0x00000000
  4081dc:	4b534154 	.word	0x4b534154
  4081e0:	00000031 	.word	0x00000031
  4081e4:	54545542 	.word	0x54545542
  4081e8:	41544e4f 	.word	0x41544e4f
  4081ec:	00004b53 	.word	0x00004b53
  4081f0:	6867694c 	.word	0x6867694c
  4081f4:	6f207374 	.word	0x6f207374
  4081f8:	48200a6e 	.word	0x48200a6e
  4081fc:	68532069 	.word	0x68532069
  408200:	6c65766f 	.word	0x6c65766f
  408204:	726f4c20 	.word	0x726f4c20
  408208:	00000a64 	.word	0x00000a64
  40820c:	00000043 	.word	0x00000043

00408210 <_global_impure_ptr>:
  408210:	20400018                                ..@ 

00408214 <zeroes.7035>:
  408214:	30303030 30303030 30303030 30303030     0000000000000000
  408224:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
  408234:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  408244:	00000000 33323130 37363534 62613938     ....0123456789ab
  408254:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
  408264:	00000030                                0...

00408268 <blanks.7034>:
  408268:	20202020 20202020 20202020 20202020                     
  408278:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  408288:	49534f50 00000058 0000002e 00000000     POSIX...........

00408298 <__mprec_tens>:
  408298:	00000000 3ff00000 00000000 40240000     .......?......$@
  4082a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  4082b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  4082c8:	00000000 412e8480 00000000 416312d0     .......A......cA
  4082d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  4082e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  4082f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  408308:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  408318:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  408328:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  408338:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  408348:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  408358:	79d99db4 44ea7843                       ...yCx.D

00408360 <__mprec_bigtens>:
  408360:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  408370:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  408380:	7f73bf3c 75154fdd                       <.s..O.u

00408388 <p05.5373>:
  408388:	00000005 00000019 0000007d              ........}...

00408394 <_init>:
  408394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408396:	bf00      	nop
  408398:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40839a:	bc08      	pop	{r3}
  40839c:	469e      	mov	lr, r3
  40839e:	4770      	bx	lr

004083a0 <__init_array_start>:
  4083a0:	00405679 	.word	0x00405679

004083a4 <__frame_dummy_init_array_entry>:
  4083a4:	00400165                                e.@.

004083a8 <_fini>:
  4083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4083aa:	bf00      	nop
  4083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4083ae:	bc08      	pop	{r3}
  4083b0:	469e      	mov	lr, r3
  4083b2:	4770      	bx	lr

004083b4 <__fini_array_start>:
  4083b4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
2040000a:	bf00      	nop

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <g_interrupt_enabled>:
20400010:	0001 0000                                   ....

20400014 <SystemCoreClock>:
20400014:	0900 003d                                   ..=.

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
2040004c:	820c 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <_impure_ptr>:
20400440:	0018 2040                                   ..@ 

20400444 <lconv>:
20400444:	8290 0040 81d8 0040 81d8 0040 81d8 0040     ..@...@...@...@.
20400454:	81d8 0040 81d8 0040 81d8 0040 81d8 0040     ..@...@...@...@.
20400464:	81d8 0040 81d8 0040 ffff ffff ffff ffff     ..@...@.........
20400474:	ffff ffff ffff 0000                         ........

2040047c <__malloc_av_>:
	...
20400484:	047c 2040 047c 2040 0484 2040 0484 2040     |.@ |.@ ..@ ..@ 
20400494:	048c 2040 048c 2040 0494 2040 0494 2040     ..@ ..@ ..@ ..@ 
204004a4:	049c 2040 049c 2040 04a4 2040 04a4 2040     ..@ ..@ ..@ ..@ 
204004b4:	04ac 2040 04ac 2040 04b4 2040 04b4 2040     ..@ ..@ ..@ ..@ 
204004c4:	04bc 2040 04bc 2040 04c4 2040 04c4 2040     ..@ ..@ ..@ ..@ 
204004d4:	04cc 2040 04cc 2040 04d4 2040 04d4 2040     ..@ ..@ ..@ ..@ 
204004e4:	04dc 2040 04dc 2040 04e4 2040 04e4 2040     ..@ ..@ ..@ ..@ 
204004f4:	04ec 2040 04ec 2040 04f4 2040 04f4 2040     ..@ ..@ ..@ ..@ 
20400504:	04fc 2040 04fc 2040 0504 2040 0504 2040     ..@ ..@ ..@ ..@ 
20400514:	050c 2040 050c 2040 0514 2040 0514 2040     ..@ ..@ ..@ ..@ 
20400524:	051c 2040 051c 2040 0524 2040 0524 2040     ..@ ..@ $.@ $.@ 
20400534:	052c 2040 052c 2040 0534 2040 0534 2040     ,.@ ,.@ 4.@ 4.@ 
20400544:	053c 2040 053c 2040 0544 2040 0544 2040     <.@ <.@ D.@ D.@ 
20400554:	054c 2040 054c 2040 0554 2040 0554 2040     L.@ L.@ T.@ T.@ 
20400564:	055c 2040 055c 2040 0564 2040 0564 2040     \.@ \.@ d.@ d.@ 
20400574:	056c 2040 056c 2040 0574 2040 0574 2040     l.@ l.@ t.@ t.@ 
20400584:	057c 2040 057c 2040 0584 2040 0584 2040     |.@ |.@ ..@ ..@ 
20400594:	058c 2040 058c 2040 0594 2040 0594 2040     ..@ ..@ ..@ ..@ 
204005a4:	059c 2040 059c 2040 05a4 2040 05a4 2040     ..@ ..@ ..@ ..@ 
204005b4:	05ac 2040 05ac 2040 05b4 2040 05b4 2040     ..@ ..@ ..@ ..@ 
204005c4:	05bc 2040 05bc 2040 05c4 2040 05c4 2040     ..@ ..@ ..@ ..@ 
204005d4:	05cc 2040 05cc 2040 05d4 2040 05d4 2040     ..@ ..@ ..@ ..@ 
204005e4:	05dc 2040 05dc 2040 05e4 2040 05e4 2040     ..@ ..@ ..@ ..@ 
204005f4:	05ec 2040 05ec 2040 05f4 2040 05f4 2040     ..@ ..@ ..@ ..@ 
20400604:	05fc 2040 05fc 2040 0604 2040 0604 2040     ..@ ..@ ..@ ..@ 
20400614:	060c 2040 060c 2040 0614 2040 0614 2040     ..@ ..@ ..@ ..@ 
20400624:	061c 2040 061c 2040 0624 2040 0624 2040     ..@ ..@ $.@ $.@ 
20400634:	062c 2040 062c 2040 0634 2040 0634 2040     ,.@ ,.@ 4.@ 4.@ 
20400644:	063c 2040 063c 2040 0644 2040 0644 2040     <.@ <.@ D.@ D.@ 
20400654:	064c 2040 064c 2040 0654 2040 0654 2040     L.@ L.@ T.@ T.@ 
20400664:	065c 2040 065c 2040 0664 2040 0664 2040     \.@ \.@ d.@ d.@ 
20400674:	066c 2040 066c 2040 0674 2040 0674 2040     l.@ l.@ t.@ t.@ 
20400684:	067c 2040 067c 2040 0684 2040 0684 2040     |.@ |.@ ..@ ..@ 
20400694:	068c 2040 068c 2040 0694 2040 0694 2040     ..@ ..@ ..@ ..@ 
204006a4:	069c 2040 069c 2040 06a4 2040 06a4 2040     ..@ ..@ ..@ ..@ 
204006b4:	06ac 2040 06ac 2040 06b4 2040 06b4 2040     ..@ ..@ ..@ ..@ 
204006c4:	06bc 2040 06bc 2040 06c4 2040 06c4 2040     ..@ ..@ ..@ ..@ 
204006d4:	06cc 2040 06cc 2040 06d4 2040 06d4 2040     ..@ ..@ ..@ ..@ 
204006e4:	06dc 2040 06dc 2040 06e4 2040 06e4 2040     ..@ ..@ ..@ ..@ 
204006f4:	06ec 2040 06ec 2040 06f4 2040 06f4 2040     ..@ ..@ ..@ ..@ 
20400704:	06fc 2040 06fc 2040 0704 2040 0704 2040     ..@ ..@ ..@ ..@ 
20400714:	070c 2040 070c 2040 0714 2040 0714 2040     ..@ ..@ ..@ ..@ 
20400724:	071c 2040 071c 2040 0724 2040 0724 2040     ..@ ..@ $.@ $.@ 
20400734:	072c 2040 072c 2040 0734 2040 0734 2040     ,.@ ,.@ 4.@ 4.@ 
20400744:	073c 2040 073c 2040 0744 2040 0744 2040     <.@ <.@ D.@ D.@ 
20400754:	074c 2040 074c 2040 0754 2040 0754 2040     L.@ L.@ T.@ T.@ 
20400764:	075c 2040 075c 2040 0764 2040 0764 2040     \.@ \.@ d.@ d.@ 
20400774:	076c 2040 076c 2040 0774 2040 0774 2040     l.@ l.@ t.@ t.@ 
20400784:	077c 2040 077c 2040 0784 2040 0784 2040     |.@ |.@ ..@ ..@ 
20400794:	078c 2040 078c 2040 0794 2040 0794 2040     ..@ ..@ ..@ ..@ 
204007a4:	079c 2040 079c 2040 07a4 2040 07a4 2040     ..@ ..@ ..@ ..@ 
204007b4:	07ac 2040 07ac 2040 07b4 2040 07b4 2040     ..@ ..@ ..@ ..@ 
204007c4:	07bc 2040 07bc 2040 07c4 2040 07c4 2040     ..@ ..@ ..@ ..@ 
204007d4:	07cc 2040 07cc 2040 07d4 2040 07d4 2040     ..@ ..@ ..@ ..@ 
204007e4:	07dc 2040 07dc 2040 07e4 2040 07e4 2040     ..@ ..@ ..@ ..@ 
204007f4:	07ec 2040 07ec 2040 07f4 2040 07f4 2040     ..@ ..@ ..@ ..@ 
20400804:	07fc 2040 07fc 2040 0804 2040 0804 2040     ..@ ..@ ..@ ..@ 
20400814:	080c 2040 080c 2040 0814 2040 0814 2040     ..@ ..@ ..@ ..@ 
20400824:	081c 2040 081c 2040 0824 2040 0824 2040     ..@ ..@ $.@ $.@ 
20400834:	082c 2040 082c 2040 0834 2040 0834 2040     ,.@ ,.@ 4.@ 4.@ 
20400844:	083c 2040 083c 2040 0844 2040 0844 2040     <.@ <.@ D.@ D.@ 
20400854:	084c 2040 084c 2040 0854 2040 0854 2040     L.@ L.@ T.@ T.@ 
20400864:	085c 2040 085c 2040 0864 2040 0864 2040     \.@ \.@ d.@ d.@ 
20400874:	086c 2040 086c 2040 0874 2040 0874 2040     l.@ l.@ t.@ t.@ 

20400884 <__malloc_trim_threshold>:
20400884:	0000 0002                                   ....

20400888 <__malloc_sbrk_base>:
20400888:	ffff ffff                                   ....
